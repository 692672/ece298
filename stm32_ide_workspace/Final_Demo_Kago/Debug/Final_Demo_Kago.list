
Final_Demo_Kago.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f18  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c4  080040b8  080040b8  000140b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800447c  0800447c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  0800447c  0800447c  0001447c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004484  08004484  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004484  08004484  00014484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004488  08004488  00014488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800448c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  2000005c  080044e8  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000294  080044e8  00020294  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008407  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016f5  00000000  00000000  000284d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006d8  00000000  00000000  00029bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000539  00000000  00000000  0002a2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015684  00000000  00000000  0002a7e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009914  00000000  00000000  0003fe65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00084d93  00000000  00000000  00049779  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002328  00000000  00000000  000ce50c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000d0834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080040a0 	.word	0x080040a0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	080040a0 	.word	0x080040a0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a19      	ldr	r2, [pc, #100]	; (8000600 <HAL_UART_RxCpltCallback+0x74>)
 800059a:	4293      	cmp	r3, r2
 800059c:	d12b      	bne.n	80005f6 <HAL_UART_RxCpltCallback+0x6a>
  {
    if (rx_data == '\r')
 800059e:	4b19      	ldr	r3, [pc, #100]	; (8000604 <HAL_UART_RxCpltCallback+0x78>)
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	2b0d      	cmp	r3, #13
 80005a4:	d112      	bne.n	80005cc <HAL_UART_RxCpltCallback+0x40>
    {
      buffer[buffer_index] = '\0';
 80005a6:	4b18      	ldr	r3, [pc, #96]	; (8000608 <HAL_UART_RxCpltCallback+0x7c>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	4a18      	ldr	r2, [pc, #96]	; (800060c <HAL_UART_RxCpltCallback+0x80>)
 80005ac:	2100      	movs	r1, #0
 80005ae:	54d1      	strb	r1, [r2, r3]
      rcv_intpt_flag = 1;
 80005b0:	4b17      	ldr	r3, [pc, #92]	; (8000610 <HAL_UART_RxCpltCallback+0x84>)
 80005b2:	2201      	movs	r2, #1
 80005b4:	701a      	strb	r2, [r3, #0]
      buffer_index = 0; // Reset buffer index for next input
 80005b6:	4b14      	ldr	r3, [pc, #80]	; (8000608 <HAL_UART_RxCpltCallback+0x7c>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
      HAL_UART_Transmit(&huart6, (uint8_t *)"\r\n", 2, HAL_MAX_DELAY); // Echo newline
 80005bc:	f04f 33ff 	mov.w	r3, #4294967295
 80005c0:	2202      	movs	r2, #2
 80005c2:	4914      	ldr	r1, [pc, #80]	; (8000614 <HAL_UART_RxCpltCallback+0x88>)
 80005c4:	4814      	ldr	r0, [pc, #80]	; (8000618 <HAL_UART_RxCpltCallback+0x8c>)
 80005c6:	f001 fbce 	bl	8001d66 <HAL_UART_Transmit>
 80005ca:	e00f      	b.n	80005ec <HAL_UART_RxCpltCallback+0x60>
    }
    else
    {
      buffer[buffer_index++] = rx_data;
 80005cc:	4b0e      	ldr	r3, [pc, #56]	; (8000608 <HAL_UART_RxCpltCallback+0x7c>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	1c5a      	adds	r2, r3, #1
 80005d2:	490d      	ldr	r1, [pc, #52]	; (8000608 <HAL_UART_RxCpltCallback+0x7c>)
 80005d4:	600a      	str	r2, [r1, #0]
 80005d6:	4a0b      	ldr	r2, [pc, #44]	; (8000604 <HAL_UART_RxCpltCallback+0x78>)
 80005d8:	7811      	ldrb	r1, [r2, #0]
 80005da:	4a0c      	ldr	r2, [pc, #48]	; (800060c <HAL_UART_RxCpltCallback+0x80>)
 80005dc:	54d1      	strb	r1, [r2, r3]
      HAL_UART_Transmit(&huart6, &rx_data, 1, HAL_MAX_DELAY); // Echo the received character
 80005de:	f04f 33ff 	mov.w	r3, #4294967295
 80005e2:	2201      	movs	r2, #1
 80005e4:	4907      	ldr	r1, [pc, #28]	; (8000604 <HAL_UART_RxCpltCallback+0x78>)
 80005e6:	480c      	ldr	r0, [pc, #48]	; (8000618 <HAL_UART_RxCpltCallback+0x8c>)
 80005e8:	f001 fbbd 	bl	8001d66 <HAL_UART_Transmit>
    }
    HAL_UART_Receive_IT(&huart6, &rx_data, 1);
 80005ec:	2201      	movs	r2, #1
 80005ee:	4905      	ldr	r1, [pc, #20]	; (8000604 <HAL_UART_RxCpltCallback+0x78>)
 80005f0:	4809      	ldr	r0, [pc, #36]	; (8000618 <HAL_UART_RxCpltCallback+0x8c>)
 80005f2:	f001 fc4a 	bl	8001e8a <HAL_UART_Receive_IT>
  }
}
 80005f6:	bf00      	nop
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40011400 	.word	0x40011400
 8000604:	20000140 	.word	0x20000140
 8000608:	2000013c 	.word	0x2000013c
 800060c:	200000bc 	.word	0x200000bc
 8000610:	20000141 	.word	0x20000141
 8000614:	080040b8 	.word	0x080040b8
 8000618:	20000078 	.word	0x20000078

0800061c <handle_setup_mode>:

void handle_setup_mode(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b0ae      	sub	sp, #184	; 0xb8
 8000620:	af00      	add	r7, sp, #0
  char response[BUFFER_SIZE];
  int inlet_pwm, zone1_pwm, zone2_pwm, zone3_pwm;
  int current_time, inlet_start, inlet_stop, zone1_start, zone1_stop, zone2_start, zone2_stop, zone3_start, zone3_stop;

  snprintf(response, BUFFER_SIZE, "SETUP MODE\r\n");
 8000622:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000626:	4a32      	ldr	r2, [pc, #200]	; (80006f0 <handle_setup_mode+0xd4>)
 8000628:	2180      	movs	r1, #128	; 0x80
 800062a:	4618      	mov	r0, r3
 800062c:	f002 fbc6 	bl	8002dbc <sniprintf>
  HAL_UART_Transmit(&huart6, (uint8_t *)response, strlen(response), HAL_MAX_DELAY);
 8000630:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000634:	4618      	mov	r0, r3
 8000636:	f7ff fdd3 	bl	80001e0 <strlen>
 800063a:	4603      	mov	r3, r0
 800063c:	b29a      	uxth	r2, r3
 800063e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000642:	f04f 33ff 	mov.w	r3, #4294967295
 8000646:	482b      	ldr	r0, [pc, #172]	; (80006f4 <handle_setup_mode+0xd8>)
 8000648:	f001 fb8d 	bl	8001d66 <HAL_UART_Transmit>

  	prompt_and_receive("Enter Inlet Motor Speed PWM (0-3): ", &inlet_pwm);
 800064c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000650:	4619      	mov	r1, r3
 8000652:	4829      	ldr	r0, [pc, #164]	; (80006f8 <handle_setup_mode+0xdc>)
 8000654:	f000 f86a 	bl	800072c <prompt_and_receive>
	prompt_and_receive("Enter Zone 1 Motor Speed PWM (0-3): ", &zone1_pwm);
 8000658:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800065c:	4619      	mov	r1, r3
 800065e:	4827      	ldr	r0, [pc, #156]	; (80006fc <handle_setup_mode+0xe0>)
 8000660:	f000 f864 	bl	800072c <prompt_and_receive>
	prompt_and_receive("Enter Zone 2 Motor Speed PWM (0-3): ", &zone2_pwm);
 8000664:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000668:	4619      	mov	r1, r3
 800066a:	4825      	ldr	r0, [pc, #148]	; (8000700 <handle_setup_mode+0xe4>)
 800066c:	f000 f85e 	bl	800072c <prompt_and_receive>
	prompt_and_receive("Enter Zone 3 Motor Speed PWM (0-3): ", &zone3_pwm);
 8000670:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000674:	4619      	mov	r1, r3
 8000676:	4823      	ldr	r0, [pc, #140]	; (8000704 <handle_setup_mode+0xe8>)
 8000678:	f000 f858 	bl	800072c <prompt_and_receive>
	prompt_and_receive("Enter Current Wall Clock Time (00-23): ", &current_time);
 800067c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000680:	4619      	mov	r1, r3
 8000682:	4821      	ldr	r0, [pc, #132]	; (8000708 <handle_setup_mode+0xec>)
 8000684:	f000 f852 	bl	800072c <prompt_and_receive>
	prompt_and_receive("Enter Inlet Wall Clock Start Time (00-23): ", &inlet_start);
 8000688:	f107 0320 	add.w	r3, r7, #32
 800068c:	4619      	mov	r1, r3
 800068e:	481f      	ldr	r0, [pc, #124]	; (800070c <handle_setup_mode+0xf0>)
 8000690:	f000 f84c 	bl	800072c <prompt_and_receive>
	prompt_and_receive("Enter Inlet Wall Clock Stop Time (00-23): ", &inlet_stop);
 8000694:	f107 031c 	add.w	r3, r7, #28
 8000698:	4619      	mov	r1, r3
 800069a:	481d      	ldr	r0, [pc, #116]	; (8000710 <handle_setup_mode+0xf4>)
 800069c:	f000 f846 	bl	800072c <prompt_and_receive>
	prompt_and_receive("Enter Zone 1 Wall Clock Start Time (00-23): ", &zone1_start);
 80006a0:	f107 0318 	add.w	r3, r7, #24
 80006a4:	4619      	mov	r1, r3
 80006a6:	481b      	ldr	r0, [pc, #108]	; (8000714 <handle_setup_mode+0xf8>)
 80006a8:	f000 f840 	bl	800072c <prompt_and_receive>
	prompt_and_receive("Enter Zone 1 Wall Clock Stop Time (00-23): ", &zone1_stop);
 80006ac:	f107 0314 	add.w	r3, r7, #20
 80006b0:	4619      	mov	r1, r3
 80006b2:	4819      	ldr	r0, [pc, #100]	; (8000718 <handle_setup_mode+0xfc>)
 80006b4:	f000 f83a 	bl	800072c <prompt_and_receive>
	prompt_and_receive("Enter Zone 2 Wall Clock Start Time (00-23): ", &zone2_start);
 80006b8:	f107 0310 	add.w	r3, r7, #16
 80006bc:	4619      	mov	r1, r3
 80006be:	4817      	ldr	r0, [pc, #92]	; (800071c <handle_setup_mode+0x100>)
 80006c0:	f000 f834 	bl	800072c <prompt_and_receive>
	prompt_and_receive("Enter Zone 2 Wall Clock Stop Time (00-23): ", &zone2_stop);
 80006c4:	f107 030c 	add.w	r3, r7, #12
 80006c8:	4619      	mov	r1, r3
 80006ca:	4815      	ldr	r0, [pc, #84]	; (8000720 <handle_setup_mode+0x104>)
 80006cc:	f000 f82e 	bl	800072c <prompt_and_receive>
	prompt_and_receive("Enter Zone 3 Wall Clock Start Time (00-23): ", &zone3_start);
 80006d0:	f107 0308 	add.w	r3, r7, #8
 80006d4:	4619      	mov	r1, r3
 80006d6:	4813      	ldr	r0, [pc, #76]	; (8000724 <handle_setup_mode+0x108>)
 80006d8:	f000 f828 	bl	800072c <prompt_and_receive>
	prompt_and_receive("Enter Zone 3 Wall Clock Stop Time (00-23): ", &zone3_stop);
 80006dc:	1d3b      	adds	r3, r7, #4
 80006de:	4619      	mov	r1, r3
 80006e0:	4811      	ldr	r0, [pc, #68]	; (8000728 <handle_setup_mode+0x10c>)
 80006e2:	f000 f823 	bl	800072c <prompt_and_receive>

//  snprintf(response, BUFFER_SIZE, "Configuration Completed:\r\nInlet PWM: %d\r\nZone 1 PWM: %d\r\nZone 2 PWM: %d\r\nZone 3 PWM: %d\r\nCurrent Time: %d\r\nInlet Start: %d\r\nInlet Stop: %d\r\nZone 1 Start: %d\r\nZone 1 Stop: %d\r\nZone 2 Start: %d\r\nZone 2 Stop: %d\r\nZone 3 Start: %d\r\nZone 3 Stop: %d\r\n",
//           inlet_pwm, zone1_pwm, zone2_pwm, zone3_pwm, current_time, inlet_start, inlet_stop, zone1_start, zone1_stop, zone2_start, zone2_stop, zone3_start, zone3_stop);
//  HAL_UART_Transmit(&huart6, (uint8_t *)response, strlen(response), HAL_MAX_DELAY);
}
 80006e6:	bf00      	nop
 80006e8:	37b8      	adds	r7, #184	; 0xb8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	080040bc 	.word	0x080040bc
 80006f4:	20000078 	.word	0x20000078
 80006f8:	080040cc 	.word	0x080040cc
 80006fc:	080040f0 	.word	0x080040f0
 8000700:	08004118 	.word	0x08004118
 8000704:	08004140 	.word	0x08004140
 8000708:	08004168 	.word	0x08004168
 800070c:	08004190 	.word	0x08004190
 8000710:	080041bc 	.word	0x080041bc
 8000714:	080041e8 	.word	0x080041e8
 8000718:	08004218 	.word	0x08004218
 800071c:	08004244 	.word	0x08004244
 8000720:	08004274 	.word	0x08004274
 8000724:	080042a0 	.word	0x080042a0
 8000728:	080042d0 	.word	0x080042d0

0800072c <prompt_and_receive>:

void prompt_and_receive(const char *prompt, int *value)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b0a2      	sub	sp, #136	; 0x88
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
 8000734:	6039      	str	r1, [r7, #0]
  char response[BUFFER_SIZE];

  HAL_UART_Transmit(&huart6, (uint8_t *)prompt, strlen(prompt), HAL_MAX_DELAY);
 8000736:	6878      	ldr	r0, [r7, #4]
 8000738:	f7ff fd52 	bl	80001e0 <strlen>
 800073c:	4603      	mov	r3, r0
 800073e:	b29a      	uxth	r2, r3
 8000740:	f04f 33ff 	mov.w	r3, #4294967295
 8000744:	6879      	ldr	r1, [r7, #4]
 8000746:	480a      	ldr	r0, [pc, #40]	; (8000770 <prompt_and_receive+0x44>)
 8000748:	f001 fb0d 	bl	8001d66 <HAL_UART_Transmit>
  rcv_intpt_flag = 0;
 800074c:	4b09      	ldr	r3, [pc, #36]	; (8000774 <prompt_and_receive+0x48>)
 800074e:	2200      	movs	r2, #0
 8000750:	701a      	strb	r2, [r3, #0]
  while (!rcv_intpt_flag); // Wait for input
 8000752:	bf00      	nop
 8000754:	4b07      	ldr	r3, [pc, #28]	; (8000774 <prompt_and_receive+0x48>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	b2db      	uxtb	r3, r3
 800075a:	2b00      	cmp	r3, #0
 800075c:	d0fa      	beq.n	8000754 <prompt_and_receive+0x28>
  sscanf(buffer, "%d", value);
 800075e:	683a      	ldr	r2, [r7, #0]
 8000760:	4905      	ldr	r1, [pc, #20]	; (8000778 <prompt_and_receive+0x4c>)
 8000762:	4806      	ldr	r0, [pc, #24]	; (800077c <prompt_and_receive+0x50>)
 8000764:	f002 fb5e 	bl	8002e24 <siscanf>
//  snprintf(response, BUFFER_SIZE, "Received: %d\r\n", *value);
//  HAL_UART_Transmit(&huart6, (uint8_t *)response, strlen(response), HAL_MAX_DELAY);
}
 8000768:	bf00      	nop
 800076a:	3788      	adds	r7, #136	; 0x88
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000078 	.word	0x20000078
 8000774:	20000141 	.word	0x20000141
 8000778:	080042fc 	.word	0x080042fc
 800077c:	200000bc 	.word	0x200000bc

08000780 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000786:	f000 fa55 	bl	8000c34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800078a:	f000 f82b 	bl	80007e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800078e:	f000 f8bf 	bl	8000910 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8000792:	f000 f893 	bl	80008bc <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  // Turn off the green LED (PA5) at startup
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	2120      	movs	r1, #32
 800079a:	480e      	ldr	r0, [pc, #56]	; (80007d4 <main+0x54>)
 800079c:	f000 fde4 	bl	8001368 <HAL_GPIO_WritePin>

  // clear the terminal
  const char clear_screen[] = "\x1b[2J\x1b[H";
 80007a0:	4a0d      	ldr	r2, [pc, #52]	; (80007d8 <main+0x58>)
 80007a2:	463b      	mov	r3, r7
 80007a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007a8:	e883 0003 	stmia.w	r3, {r0, r1}
  HAL_UART_Transmit(&huart6, (uint8_t *)clear_screen, strlen(clear_screen), HAL_MAX_DELAY);
 80007ac:	4639      	mov	r1, r7
 80007ae:	f04f 33ff 	mov.w	r3, #4294967295
 80007b2:	2207      	movs	r2, #7
 80007b4:	4809      	ldr	r0, [pc, #36]	; (80007dc <main+0x5c>)
 80007b6:	f001 fad6 	bl	8001d66 <HAL_UART_Transmit>

  // Start receiving data via interrupt
  HAL_UART_Receive_IT(&huart6, &rx_data, 1);
 80007ba:	2201      	movs	r2, #1
 80007bc:	4908      	ldr	r1, [pc, #32]	; (80007e0 <main+0x60>)
 80007be:	4807      	ldr	r0, [pc, #28]	; (80007dc <main+0x5c>)
 80007c0:	f001 fb63 	bl	8001e8a <HAL_UART_Receive_IT>

  // Indicate entering setup mode
  handle_setup_mode();
 80007c4:	f7ff ff2a 	bl	800061c <handle_setup_mode>

  // Turn on the green LED after setup mode
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80007c8:	2201      	movs	r2, #1
 80007ca:	2120      	movs	r1, #32
 80007cc:	4801      	ldr	r0, [pc, #4]	; (80007d4 <main+0x54>)
 80007ce:	f000 fdcb 	bl	8001368 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007d2:	e7fe      	b.n	80007d2 <main+0x52>
 80007d4:	40020000 	.word	0x40020000
 80007d8:	08004300 	.word	0x08004300
 80007dc:	20000078 	.word	0x20000078
 80007e0:	20000140 	.word	0x20000140

080007e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b094      	sub	sp, #80	; 0x50
 80007e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ea:	f107 0320 	add.w	r3, r7, #32
 80007ee:	2230      	movs	r2, #48	; 0x30
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f002 fb44 	bl	8002e80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f8:	f107 030c 	add.w	r3, r7, #12
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	60da      	str	r2, [r3, #12]
 8000806:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000808:	2300      	movs	r3, #0
 800080a:	60bb      	str	r3, [r7, #8]
 800080c:	4b29      	ldr	r3, [pc, #164]	; (80008b4 <SystemClock_Config+0xd0>)
 800080e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000810:	4a28      	ldr	r2, [pc, #160]	; (80008b4 <SystemClock_Config+0xd0>)
 8000812:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000816:	6413      	str	r3, [r2, #64]	; 0x40
 8000818:	4b26      	ldr	r3, [pc, #152]	; (80008b4 <SystemClock_Config+0xd0>)
 800081a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000820:	60bb      	str	r3, [r7, #8]
 8000822:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000824:	2300      	movs	r3, #0
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	4b23      	ldr	r3, [pc, #140]	; (80008b8 <SystemClock_Config+0xd4>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000830:	4a21      	ldr	r2, [pc, #132]	; (80008b8 <SystemClock_Config+0xd4>)
 8000832:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000836:	6013      	str	r3, [r2, #0]
 8000838:	4b1f      	ldr	r3, [pc, #124]	; (80008b8 <SystemClock_Config+0xd4>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000840:	607b      	str	r3, [r7, #4]
 8000842:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000844:	2302      	movs	r3, #2
 8000846:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000848:	2301      	movs	r3, #1
 800084a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800084c:	2310      	movs	r3, #16
 800084e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000850:	2302      	movs	r3, #2
 8000852:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000854:	2300      	movs	r3, #0
 8000856:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000858:	2310      	movs	r3, #16
 800085a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800085c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000860:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000862:	2304      	movs	r3, #4
 8000864:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000866:	2307      	movs	r3, #7
 8000868:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800086a:	f107 0320 	add.w	r3, r7, #32
 800086e:	4618      	mov	r0, r3
 8000870:	f000 fd94 	bl	800139c <HAL_RCC_OscConfig>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800087a:	f000 f8b7 	bl	80009ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800087e:	230f      	movs	r3, #15
 8000880:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000882:	2302      	movs	r3, #2
 8000884:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000886:	2300      	movs	r3, #0
 8000888:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800088a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800088e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000890:	2300      	movs	r3, #0
 8000892:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000894:	f107 030c 	add.w	r3, r7, #12
 8000898:	2102      	movs	r1, #2
 800089a:	4618      	mov	r0, r3
 800089c:	f000 fff6 	bl	800188c <HAL_RCC_ClockConfig>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80008a6:	f000 f8a1 	bl	80009ec <Error_Handler>
  }
}
 80008aa:	bf00      	nop
 80008ac:	3750      	adds	r7, #80	; 0x50
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40023800 	.word	0x40023800
 80008b8:	40007000 	.word	0x40007000

080008bc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80008c0:	4b11      	ldr	r3, [pc, #68]	; (8000908 <MX_USART6_UART_Init+0x4c>)
 80008c2:	4a12      	ldr	r2, [pc, #72]	; (800090c <MX_USART6_UART_Init+0x50>)
 80008c4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600; // Updated baud rate to 11520
 80008c6:	4b10      	ldr	r3, [pc, #64]	; (8000908 <MX_USART6_UART_Init+0x4c>)
 80008c8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80008cc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80008ce:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <MX_USART6_UART_Init+0x4c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80008d4:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <MX_USART6_UART_Init+0x4c>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80008da:	4b0b      	ldr	r3, [pc, #44]	; (8000908 <MX_USART6_UART_Init+0x4c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80008e0:	4b09      	ldr	r3, [pc, #36]	; (8000908 <MX_USART6_UART_Init+0x4c>)
 80008e2:	220c      	movs	r2, #12
 80008e4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008e6:	4b08      	ldr	r3, [pc, #32]	; (8000908 <MX_USART6_UART_Init+0x4c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80008ec:	4b06      	ldr	r3, [pc, #24]	; (8000908 <MX_USART6_UART_Init+0x4c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80008f2:	4805      	ldr	r0, [pc, #20]	; (8000908 <MX_USART6_UART_Init+0x4c>)
 80008f4:	f001 f9ea 	bl	8001ccc <HAL_UART_Init>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80008fe:	f000 f875 	bl	80009ec <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	20000078 	.word	0x20000078
 800090c:	40011400 	.word	0x40011400

08000910 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08a      	sub	sp, #40	; 0x28
 8000914:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000916:	f107 0314 	add.w	r3, r7, #20
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	605a      	str	r2, [r3, #4]
 8000920:	609a      	str	r2, [r3, #8]
 8000922:	60da      	str	r2, [r3, #12]
 8000924:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	613b      	str	r3, [r7, #16]
 800092a:	4b2d      	ldr	r3, [pc, #180]	; (80009e0 <MX_GPIO_Init+0xd0>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a2c      	ldr	r2, [pc, #176]	; (80009e0 <MX_GPIO_Init+0xd0>)
 8000930:	f043 0304 	orr.w	r3, r3, #4
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b2a      	ldr	r3, [pc, #168]	; (80009e0 <MX_GPIO_Init+0xd0>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0304 	and.w	r3, r3, #4
 800093e:	613b      	str	r3, [r7, #16]
 8000940:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	60fb      	str	r3, [r7, #12]
 8000946:	4b26      	ldr	r3, [pc, #152]	; (80009e0 <MX_GPIO_Init+0xd0>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a25      	ldr	r2, [pc, #148]	; (80009e0 <MX_GPIO_Init+0xd0>)
 800094c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b23      	ldr	r3, [pc, #140]	; (80009e0 <MX_GPIO_Init+0xd0>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	60bb      	str	r3, [r7, #8]
 8000962:	4b1f      	ldr	r3, [pc, #124]	; (80009e0 <MX_GPIO_Init+0xd0>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	4a1e      	ldr	r2, [pc, #120]	; (80009e0 <MX_GPIO_Init+0xd0>)
 8000968:	f043 0301 	orr.w	r3, r3, #1
 800096c:	6313      	str	r3, [r2, #48]	; 0x30
 800096e:	4b1c      	ldr	r3, [pc, #112]	; (80009e0 <MX_GPIO_Init+0xd0>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	60bb      	str	r3, [r7, #8]
 8000978:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	607b      	str	r3, [r7, #4]
 800097e:	4b18      	ldr	r3, [pc, #96]	; (80009e0 <MX_GPIO_Init+0xd0>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	4a17      	ldr	r2, [pc, #92]	; (80009e0 <MX_GPIO_Init+0xd0>)
 8000984:	f043 0302 	orr.w	r3, r3, #2
 8000988:	6313      	str	r3, [r2, #48]	; 0x30
 800098a:	4b15      	ldr	r3, [pc, #84]	; (80009e0 <MX_GPIO_Init+0xd0>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	f003 0302 	and.w	r3, r3, #2
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000996:	2200      	movs	r2, #0
 8000998:	2120      	movs	r1, #32
 800099a:	4812      	ldr	r0, [pc, #72]	; (80009e4 <MX_GPIO_Init+0xd4>)
 800099c:	f000 fce4 	bl	8001368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009a6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	4619      	mov	r1, r3
 80009b6:	480c      	ldr	r0, [pc, #48]	; (80009e8 <MX_GPIO_Init+0xd8>)
 80009b8:	f000 fb52 	bl	8001060 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80009bc:	2320      	movs	r3, #32
 80009be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c0:	2301      	movs	r3, #1
 80009c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c8:	2300      	movs	r3, #0
 80009ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009cc:	f107 0314 	add.w	r3, r7, #20
 80009d0:	4619      	mov	r1, r3
 80009d2:	4804      	ldr	r0, [pc, #16]	; (80009e4 <MX_GPIO_Init+0xd4>)
 80009d4:	f000 fb44 	bl	8001060 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009d8:	bf00      	nop
 80009da:	3728      	adds	r7, #40	; 0x28
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	40023800 	.word	0x40023800
 80009e4:	40020000 	.word	0x40020000
 80009e8:	40020800 	.word	0x40020800

080009ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f0:	b672      	cpsid	i
}
 80009f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <Error_Handler+0x8>
	...

080009f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	607b      	str	r3, [r7, #4]
 8000a02:	4b10      	ldr	r3, [pc, #64]	; (8000a44 <HAL_MspInit+0x4c>)
 8000a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a06:	4a0f      	ldr	r2, [pc, #60]	; (8000a44 <HAL_MspInit+0x4c>)
 8000a08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a0e:	4b0d      	ldr	r3, [pc, #52]	; (8000a44 <HAL_MspInit+0x4c>)
 8000a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	603b      	str	r3, [r7, #0]
 8000a1e:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <HAL_MspInit+0x4c>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a22:	4a08      	ldr	r2, [pc, #32]	; (8000a44 <HAL_MspInit+0x4c>)
 8000a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a28:	6413      	str	r3, [r2, #64]	; 0x40
 8000a2a:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <HAL_MspInit+0x4c>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a32:	603b      	str	r3, [r7, #0]
 8000a34:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a36:	2007      	movs	r0, #7
 8000a38:	f000 fa3e 	bl	8000eb8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a3c:	bf00      	nop
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40023800 	.word	0x40023800

08000a48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08a      	sub	sp, #40	; 0x28
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a1d      	ldr	r2, [pc, #116]	; (8000adc <HAL_UART_MspInit+0x94>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d133      	bne.n	8000ad2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	613b      	str	r3, [r7, #16]
 8000a6e:	4b1c      	ldr	r3, [pc, #112]	; (8000ae0 <HAL_UART_MspInit+0x98>)
 8000a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a72:	4a1b      	ldr	r2, [pc, #108]	; (8000ae0 <HAL_UART_MspInit+0x98>)
 8000a74:	f043 0320 	orr.w	r3, r3, #32
 8000a78:	6453      	str	r3, [r2, #68]	; 0x44
 8000a7a:	4b19      	ldr	r3, [pc, #100]	; (8000ae0 <HAL_UART_MspInit+0x98>)
 8000a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7e:	f003 0320 	and.w	r3, r3, #32
 8000a82:	613b      	str	r3, [r7, #16]
 8000a84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	4b15      	ldr	r3, [pc, #84]	; (8000ae0 <HAL_UART_MspInit+0x98>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	4a14      	ldr	r2, [pc, #80]	; (8000ae0 <HAL_UART_MspInit+0x98>)
 8000a90:	f043 0304 	orr.w	r3, r3, #4
 8000a94:	6313      	str	r3, [r2, #48]	; 0x30
 8000a96:	4b12      	ldr	r3, [pc, #72]	; (8000ae0 <HAL_UART_MspInit+0x98>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	f003 0304 	and.w	r3, r3, #4
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000aa2:	23c0      	movs	r3, #192	; 0xc0
 8000aa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aae:	2303      	movs	r3, #3
 8000ab0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000ab2:	2308      	movs	r3, #8
 8000ab4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ab6:	f107 0314 	add.w	r3, r7, #20
 8000aba:	4619      	mov	r1, r3
 8000abc:	4809      	ldr	r0, [pc, #36]	; (8000ae4 <HAL_UART_MspInit+0x9c>)
 8000abe:	f000 facf 	bl	8001060 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	2047      	movs	r0, #71	; 0x47
 8000ac8:	f000 fa01 	bl	8000ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000acc:	2047      	movs	r0, #71	; 0x47
 8000ace:	f000 fa1a 	bl	8000f06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000ad2:	bf00      	nop
 8000ad4:	3728      	adds	r7, #40	; 0x28
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40011400 	.word	0x40011400
 8000ae0:	40023800 	.word	0x40023800
 8000ae4:	40020800 	.word	0x40020800

08000ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aec:	e7fe      	b.n	8000aec <NMI_Handler+0x4>

08000aee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aee:	b480      	push	{r7}
 8000af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af2:	e7fe      	b.n	8000af2 <HardFault_Handler+0x4>

08000af4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af8:	e7fe      	b.n	8000af8 <MemManage_Handler+0x4>

08000afa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000afe:	e7fe      	b.n	8000afe <BusFault_Handler+0x4>

08000b00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <UsageFault_Handler+0x4>

08000b06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr

08000b22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b34:	f000 f8d0 	bl	8000cd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b38:	bf00      	nop
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000b40:	4802      	ldr	r0, [pc, #8]	; (8000b4c <USART6_IRQHandler+0x10>)
 8000b42:	f001 f9d3 	bl	8001eec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000078 	.word	0x20000078

08000b50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b086      	sub	sp, #24
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b58:	4a14      	ldr	r2, [pc, #80]	; (8000bac <_sbrk+0x5c>)
 8000b5a:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <_sbrk+0x60>)
 8000b5c:	1ad3      	subs	r3, r2, r3
 8000b5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b64:	4b13      	ldr	r3, [pc, #76]	; (8000bb4 <_sbrk+0x64>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d102      	bne.n	8000b72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b6c:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <_sbrk+0x64>)
 8000b6e:	4a12      	ldr	r2, [pc, #72]	; (8000bb8 <_sbrk+0x68>)
 8000b70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b72:	4b10      	ldr	r3, [pc, #64]	; (8000bb4 <_sbrk+0x64>)
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4413      	add	r3, r2
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	d207      	bcs.n	8000b90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b80:	f002 f986 	bl	8002e90 <__errno>
 8000b84:	4603      	mov	r3, r0
 8000b86:	220c      	movs	r2, #12
 8000b88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b8e:	e009      	b.n	8000ba4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b90:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <_sbrk+0x64>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b96:	4b07      	ldr	r3, [pc, #28]	; (8000bb4 <_sbrk+0x64>)
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	4a05      	ldr	r2, [pc, #20]	; (8000bb4 <_sbrk+0x64>)
 8000ba0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ba2:	68fb      	ldr	r3, [r7, #12]
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3718      	adds	r7, #24
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	20018000 	.word	0x20018000
 8000bb0:	00000400 	.word	0x00000400
 8000bb4:	20000144 	.word	0x20000144
 8000bb8:	20000298 	.word	0x20000298

08000bbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bc0:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <SystemInit+0x20>)
 8000bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bc6:	4a05      	ldr	r2, [pc, #20]	; (8000bdc <SystemInit+0x20>)
 8000bc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000be0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000be4:	480d      	ldr	r0, [pc, #52]	; (8000c1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000be6:	490e      	ldr	r1, [pc, #56]	; (8000c20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000be8:	4a0e      	ldr	r2, [pc, #56]	; (8000c24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bec:	e002      	b.n	8000bf4 <LoopCopyDataInit>

08000bee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bf2:	3304      	adds	r3, #4

08000bf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bf8:	d3f9      	bcc.n	8000bee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bfa:	4a0b      	ldr	r2, [pc, #44]	; (8000c28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bfc:	4c0b      	ldr	r4, [pc, #44]	; (8000c2c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c00:	e001      	b.n	8000c06 <LoopFillZerobss>

08000c02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c04:	3204      	adds	r2, #4

08000c06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c08:	d3fb      	bcc.n	8000c02 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c0a:	f7ff ffd7 	bl	8000bbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c0e:	f002 f945 	bl	8002e9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c12:	f7ff fdb5 	bl	8000780 <main>
  bx  lr    
 8000c16:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c18:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c20:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000c24:	0800448c 	.word	0x0800448c
  ldr r2, =_sbss
 8000c28:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000c2c:	20000294 	.word	0x20000294

08000c30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c30:	e7fe      	b.n	8000c30 <ADC_IRQHandler>
	...

08000c34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c38:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <HAL_Init+0x40>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a0d      	ldr	r2, [pc, #52]	; (8000c74 <HAL_Init+0x40>)
 8000c3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c44:	4b0b      	ldr	r3, [pc, #44]	; (8000c74 <HAL_Init+0x40>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a0a      	ldr	r2, [pc, #40]	; (8000c74 <HAL_Init+0x40>)
 8000c4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c50:	4b08      	ldr	r3, [pc, #32]	; (8000c74 <HAL_Init+0x40>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a07      	ldr	r2, [pc, #28]	; (8000c74 <HAL_Init+0x40>)
 8000c56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c5c:	2003      	movs	r0, #3
 8000c5e:	f000 f92b 	bl	8000eb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c62:	2000      	movs	r0, #0
 8000c64:	f000 f808 	bl	8000c78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c68:	f7ff fec6 	bl	80009f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c6c:	2300      	movs	r3, #0
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40023c00 	.word	0x40023c00

08000c78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c80:	4b12      	ldr	r3, [pc, #72]	; (8000ccc <HAL_InitTick+0x54>)
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <HAL_InitTick+0x58>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	4619      	mov	r1, r3
 8000c8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c96:	4618      	mov	r0, r3
 8000c98:	f000 f943 	bl	8000f22 <HAL_SYSTICK_Config>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	e00e      	b.n	8000cc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2b0f      	cmp	r3, #15
 8000caa:	d80a      	bhi.n	8000cc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cac:	2200      	movs	r2, #0
 8000cae:	6879      	ldr	r1, [r7, #4]
 8000cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb4:	f000 f90b 	bl	8000ece <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cb8:	4a06      	ldr	r2, [pc, #24]	; (8000cd4 <HAL_InitTick+0x5c>)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	e000      	b.n	8000cc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	20000000 	.word	0x20000000
 8000cd0:	20000008 	.word	0x20000008
 8000cd4:	20000004 	.word	0x20000004

08000cd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cdc:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <HAL_IncTick+0x20>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <HAL_IncTick+0x24>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	4a04      	ldr	r2, [pc, #16]	; (8000cfc <HAL_IncTick+0x24>)
 8000cea:	6013      	str	r3, [r2, #0]
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	20000008 	.word	0x20000008
 8000cfc:	20000148 	.word	0x20000148

08000d00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  return uwTick;
 8000d04:	4b03      	ldr	r3, [pc, #12]	; (8000d14 <HAL_GetTick+0x14>)
 8000d06:	681b      	ldr	r3, [r3, #0]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	20000148 	.word	0x20000148

08000d18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	f003 0307 	and.w	r3, r3, #7
 8000d26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d28:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__NVIC_SetPriorityGrouping+0x44>)
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d2e:	68ba      	ldr	r2, [r7, #8]
 8000d30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d34:	4013      	ands	r3, r2
 8000d36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d4a:	4a04      	ldr	r2, [pc, #16]	; (8000d5c <__NVIC_SetPriorityGrouping+0x44>)
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	60d3      	str	r3, [r2, #12]
}
 8000d50:	bf00      	nop
 8000d52:	3714      	adds	r7, #20
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d64:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <__NVIC_GetPriorityGrouping+0x18>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	0a1b      	lsrs	r3, r3, #8
 8000d6a:	f003 0307 	and.w	r3, r3, #7
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	db0b      	blt.n	8000da6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	f003 021f 	and.w	r2, r3, #31
 8000d94:	4907      	ldr	r1, [pc, #28]	; (8000db4 <__NVIC_EnableIRQ+0x38>)
 8000d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9a:	095b      	lsrs	r3, r3, #5
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000da6:	bf00      	nop
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	e000e100 	.word	0xe000e100

08000db8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	6039      	str	r1, [r7, #0]
 8000dc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	db0a      	blt.n	8000de2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	b2da      	uxtb	r2, r3
 8000dd0:	490c      	ldr	r1, [pc, #48]	; (8000e04 <__NVIC_SetPriority+0x4c>)
 8000dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd6:	0112      	lsls	r2, r2, #4
 8000dd8:	b2d2      	uxtb	r2, r2
 8000dda:	440b      	add	r3, r1
 8000ddc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000de0:	e00a      	b.n	8000df8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	b2da      	uxtb	r2, r3
 8000de6:	4908      	ldr	r1, [pc, #32]	; (8000e08 <__NVIC_SetPriority+0x50>)
 8000de8:	79fb      	ldrb	r3, [r7, #7]
 8000dea:	f003 030f 	and.w	r3, r3, #15
 8000dee:	3b04      	subs	r3, #4
 8000df0:	0112      	lsls	r2, r2, #4
 8000df2:	b2d2      	uxtb	r2, r2
 8000df4:	440b      	add	r3, r1
 8000df6:	761a      	strb	r2, [r3, #24]
}
 8000df8:	bf00      	nop
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	e000e100 	.word	0xe000e100
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b089      	sub	sp, #36	; 0x24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	60b9      	str	r1, [r7, #8]
 8000e16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	f003 0307 	and.w	r3, r3, #7
 8000e1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	f1c3 0307 	rsb	r3, r3, #7
 8000e26:	2b04      	cmp	r3, #4
 8000e28:	bf28      	it	cs
 8000e2a:	2304      	movcs	r3, #4
 8000e2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	3304      	adds	r3, #4
 8000e32:	2b06      	cmp	r3, #6
 8000e34:	d902      	bls.n	8000e3c <NVIC_EncodePriority+0x30>
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	3b03      	subs	r3, #3
 8000e3a:	e000      	b.n	8000e3e <NVIC_EncodePriority+0x32>
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e40:	f04f 32ff 	mov.w	r2, #4294967295
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4a:	43da      	mvns	r2, r3
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	401a      	ands	r2, r3
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e54:	f04f 31ff 	mov.w	r1, #4294967295
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5e:	43d9      	mvns	r1, r3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e64:	4313      	orrs	r3, r2
         );
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3724      	adds	r7, #36	; 0x24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
	...

08000e74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e84:	d301      	bcc.n	8000e8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e86:	2301      	movs	r3, #1
 8000e88:	e00f      	b.n	8000eaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e8a:	4a0a      	ldr	r2, [pc, #40]	; (8000eb4 <SysTick_Config+0x40>)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	3b01      	subs	r3, #1
 8000e90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e92:	210f      	movs	r1, #15
 8000e94:	f04f 30ff 	mov.w	r0, #4294967295
 8000e98:	f7ff ff8e 	bl	8000db8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e9c:	4b05      	ldr	r3, [pc, #20]	; (8000eb4 <SysTick_Config+0x40>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ea2:	4b04      	ldr	r3, [pc, #16]	; (8000eb4 <SysTick_Config+0x40>)
 8000ea4:	2207      	movs	r2, #7
 8000ea6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ea8:	2300      	movs	r3, #0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	e000e010 	.word	0xe000e010

08000eb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	f7ff ff29 	bl	8000d18 <__NVIC_SetPriorityGrouping>
}
 8000ec6:	bf00      	nop
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b086      	sub	sp, #24
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	60b9      	str	r1, [r7, #8]
 8000ed8:	607a      	str	r2, [r7, #4]
 8000eda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000edc:	2300      	movs	r3, #0
 8000ede:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ee0:	f7ff ff3e 	bl	8000d60 <__NVIC_GetPriorityGrouping>
 8000ee4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	68b9      	ldr	r1, [r7, #8]
 8000eea:	6978      	ldr	r0, [r7, #20]
 8000eec:	f7ff ff8e 	bl	8000e0c <NVIC_EncodePriority>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ef6:	4611      	mov	r1, r2
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff ff5d 	bl	8000db8 <__NVIC_SetPriority>
}
 8000efe:	bf00      	nop
 8000f00:	3718      	adds	r7, #24
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b082      	sub	sp, #8
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff ff31 	bl	8000d7c <__NVIC_EnableIRQ>
}
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b082      	sub	sp, #8
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f7ff ffa2 	bl	8000e74 <SysTick_Config>
 8000f30:	4603      	mov	r3, r0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b084      	sub	sp, #16
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f46:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000f48:	f7ff feda 	bl	8000d00 <HAL_GetTick>
 8000f4c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	2b02      	cmp	r3, #2
 8000f58:	d008      	beq.n	8000f6c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2280      	movs	r2, #128	; 0x80
 8000f5e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2200      	movs	r2, #0
 8000f64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	e052      	b.n	8001012 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f022 0216 	bic.w	r2, r2, #22
 8000f7a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	695a      	ldr	r2, [r3, #20]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f8a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d103      	bne.n	8000f9c <HAL_DMA_Abort+0x62>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d007      	beq.n	8000fac <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f022 0208 	bic.w	r2, r2, #8
 8000faa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f022 0201 	bic.w	r2, r2, #1
 8000fba:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fbc:	e013      	b.n	8000fe6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000fbe:	f7ff fe9f 	bl	8000d00 <HAL_GetTick>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	2b05      	cmp	r3, #5
 8000fca:	d90c      	bls.n	8000fe6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2220      	movs	r2, #32
 8000fd0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2203      	movs	r2, #3
 8000fd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	e015      	b.n	8001012 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f003 0301 	and.w	r3, r3, #1
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d1e4      	bne.n	8000fbe <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ff8:	223f      	movs	r2, #63	; 0x3f
 8000ffa:	409a      	lsls	r2, r3
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2201      	movs	r2, #1
 8001004:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2200      	movs	r2, #0
 800100c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001010:	2300      	movs	r3, #0
}
 8001012:	4618      	mov	r0, r3
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800101a:	b480      	push	{r7}
 800101c:	b083      	sub	sp, #12
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001028:	b2db      	uxtb	r3, r3
 800102a:	2b02      	cmp	r3, #2
 800102c:	d004      	beq.n	8001038 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2280      	movs	r2, #128	; 0x80
 8001032:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001034:	2301      	movs	r3, #1
 8001036:	e00c      	b.n	8001052 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2205      	movs	r2, #5
 800103c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f022 0201 	bic.w	r2, r2, #1
 800104e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
	...

08001060 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001060:	b480      	push	{r7}
 8001062:	b089      	sub	sp, #36	; 0x24
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800106a:	2300      	movs	r3, #0
 800106c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800106e:	2300      	movs	r3, #0
 8001070:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001072:	2300      	movs	r3, #0
 8001074:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001076:	2300      	movs	r3, #0
 8001078:	61fb      	str	r3, [r7, #28]
 800107a:	e159      	b.n	8001330 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800107c:	2201      	movs	r2, #1
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	697a      	ldr	r2, [r7, #20]
 800108c:	4013      	ands	r3, r2
 800108e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001090:	693a      	ldr	r2, [r7, #16]
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	429a      	cmp	r2, r3
 8001096:	f040 8148 	bne.w	800132a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f003 0303 	and.w	r3, r3, #3
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d005      	beq.n	80010b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	d130      	bne.n	8001114 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	2203      	movs	r2, #3
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43db      	mvns	r3, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4013      	ands	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	68da      	ldr	r2, [r3, #12]
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4313      	orrs	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010e8:	2201      	movs	r2, #1
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	43db      	mvns	r3, r3
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4013      	ands	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	091b      	lsrs	r3, r3, #4
 80010fe:	f003 0201 	and.w	r2, r3, #1
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	4313      	orrs	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f003 0303 	and.w	r3, r3, #3
 800111c:	2b03      	cmp	r3, #3
 800111e:	d017      	beq.n	8001150 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	2203      	movs	r2, #3
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	43db      	mvns	r3, r3
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	4013      	ands	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	689a      	ldr	r2, [r3, #8]
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	4313      	orrs	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f003 0303 	and.w	r3, r3, #3
 8001158:	2b02      	cmp	r3, #2
 800115a:	d123      	bne.n	80011a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	08da      	lsrs	r2, r3, #3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3208      	adds	r2, #8
 8001164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001168:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	f003 0307 	and.w	r3, r3, #7
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	220f      	movs	r2, #15
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	43db      	mvns	r3, r3
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4013      	ands	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	691a      	ldr	r2, [r3, #16]
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	f003 0307 	and.w	r3, r3, #7
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4313      	orrs	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	08da      	lsrs	r2, r3, #3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	3208      	adds	r2, #8
 800119e:	69b9      	ldr	r1, [r7, #24]
 80011a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	2203      	movs	r2, #3
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	43db      	mvns	r3, r3
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	4013      	ands	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f003 0203 	and.w	r2, r3, #3
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	f000 80a2 	beq.w	800132a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	4b57      	ldr	r3, [pc, #348]	; (8001348 <HAL_GPIO_Init+0x2e8>)
 80011ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ee:	4a56      	ldr	r2, [pc, #344]	; (8001348 <HAL_GPIO_Init+0x2e8>)
 80011f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011f4:	6453      	str	r3, [r2, #68]	; 0x44
 80011f6:	4b54      	ldr	r3, [pc, #336]	; (8001348 <HAL_GPIO_Init+0x2e8>)
 80011f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001202:	4a52      	ldr	r2, [pc, #328]	; (800134c <HAL_GPIO_Init+0x2ec>)
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	089b      	lsrs	r3, r3, #2
 8001208:	3302      	adds	r3, #2
 800120a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800120e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	f003 0303 	and.w	r3, r3, #3
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	220f      	movs	r2, #15
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43db      	mvns	r3, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4013      	ands	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a49      	ldr	r2, [pc, #292]	; (8001350 <HAL_GPIO_Init+0x2f0>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d019      	beq.n	8001262 <HAL_GPIO_Init+0x202>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a48      	ldr	r2, [pc, #288]	; (8001354 <HAL_GPIO_Init+0x2f4>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d013      	beq.n	800125e <HAL_GPIO_Init+0x1fe>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a47      	ldr	r2, [pc, #284]	; (8001358 <HAL_GPIO_Init+0x2f8>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d00d      	beq.n	800125a <HAL_GPIO_Init+0x1fa>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a46      	ldr	r2, [pc, #280]	; (800135c <HAL_GPIO_Init+0x2fc>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d007      	beq.n	8001256 <HAL_GPIO_Init+0x1f6>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a45      	ldr	r2, [pc, #276]	; (8001360 <HAL_GPIO_Init+0x300>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d101      	bne.n	8001252 <HAL_GPIO_Init+0x1f2>
 800124e:	2304      	movs	r3, #4
 8001250:	e008      	b.n	8001264 <HAL_GPIO_Init+0x204>
 8001252:	2307      	movs	r3, #7
 8001254:	e006      	b.n	8001264 <HAL_GPIO_Init+0x204>
 8001256:	2303      	movs	r3, #3
 8001258:	e004      	b.n	8001264 <HAL_GPIO_Init+0x204>
 800125a:	2302      	movs	r3, #2
 800125c:	e002      	b.n	8001264 <HAL_GPIO_Init+0x204>
 800125e:	2301      	movs	r3, #1
 8001260:	e000      	b.n	8001264 <HAL_GPIO_Init+0x204>
 8001262:	2300      	movs	r3, #0
 8001264:	69fa      	ldr	r2, [r7, #28]
 8001266:	f002 0203 	and.w	r2, r2, #3
 800126a:	0092      	lsls	r2, r2, #2
 800126c:	4093      	lsls	r3, r2
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4313      	orrs	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001274:	4935      	ldr	r1, [pc, #212]	; (800134c <HAL_GPIO_Init+0x2ec>)
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	089b      	lsrs	r3, r3, #2
 800127a:	3302      	adds	r3, #2
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001282:	4b38      	ldr	r3, [pc, #224]	; (8001364 <HAL_GPIO_Init+0x304>)
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	43db      	mvns	r3, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4013      	ands	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d003      	beq.n	80012a6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012a6:	4a2f      	ldr	r2, [pc, #188]	; (8001364 <HAL_GPIO_Init+0x304>)
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012ac:	4b2d      	ldr	r3, [pc, #180]	; (8001364 <HAL_GPIO_Init+0x304>)
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	43db      	mvns	r3, r3
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4013      	ands	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d003      	beq.n	80012d0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012d0:	4a24      	ldr	r2, [pc, #144]	; (8001364 <HAL_GPIO_Init+0x304>)
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012d6:	4b23      	ldr	r3, [pc, #140]	; (8001364 <HAL_GPIO_Init+0x304>)
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	43db      	mvns	r3, r3
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	4013      	ands	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d003      	beq.n	80012fa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012fa:	4a1a      	ldr	r2, [pc, #104]	; (8001364 <HAL_GPIO_Init+0x304>)
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001300:	4b18      	ldr	r3, [pc, #96]	; (8001364 <HAL_GPIO_Init+0x304>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	43db      	mvns	r3, r3
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	4013      	ands	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d003      	beq.n	8001324 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	4313      	orrs	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001324:	4a0f      	ldr	r2, [pc, #60]	; (8001364 <HAL_GPIO_Init+0x304>)
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	3301      	adds	r3, #1
 800132e:	61fb      	str	r3, [r7, #28]
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	2b0f      	cmp	r3, #15
 8001334:	f67f aea2 	bls.w	800107c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001338:	bf00      	nop
 800133a:	bf00      	nop
 800133c:	3724      	adds	r7, #36	; 0x24
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	40023800 	.word	0x40023800
 800134c:	40013800 	.word	0x40013800
 8001350:	40020000 	.word	0x40020000
 8001354:	40020400 	.word	0x40020400
 8001358:	40020800 	.word	0x40020800
 800135c:	40020c00 	.word	0x40020c00
 8001360:	40021000 	.word	0x40021000
 8001364:	40013c00 	.word	0x40013c00

08001368 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	460b      	mov	r3, r1
 8001372:	807b      	strh	r3, [r7, #2]
 8001374:	4613      	mov	r3, r2
 8001376:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001378:	787b      	ldrb	r3, [r7, #1]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d003      	beq.n	8001386 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800137e:	887a      	ldrh	r2, [r7, #2]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001384:	e003      	b.n	800138e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001386:	887b      	ldrh	r3, [r7, #2]
 8001388:	041a      	lsls	r2, r3, #16
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	619a      	str	r2, [r3, #24]
}
 800138e:	bf00      	nop
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
	...

0800139c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d101      	bne.n	80013ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e267      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d075      	beq.n	80014a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013ba:	4b88      	ldr	r3, [pc, #544]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	f003 030c 	and.w	r3, r3, #12
 80013c2:	2b04      	cmp	r3, #4
 80013c4:	d00c      	beq.n	80013e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013c6:	4b85      	ldr	r3, [pc, #532]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013ce:	2b08      	cmp	r3, #8
 80013d0:	d112      	bne.n	80013f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013d2:	4b82      	ldr	r3, [pc, #520]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013de:	d10b      	bne.n	80013f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013e0:	4b7e      	ldr	r3, [pc, #504]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d05b      	beq.n	80014a4 <HAL_RCC_OscConfig+0x108>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d157      	bne.n	80014a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e242      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001400:	d106      	bne.n	8001410 <HAL_RCC_OscConfig+0x74>
 8001402:	4b76      	ldr	r3, [pc, #472]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a75      	ldr	r2, [pc, #468]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 8001408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800140c:	6013      	str	r3, [r2, #0]
 800140e:	e01d      	b.n	800144c <HAL_RCC_OscConfig+0xb0>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001418:	d10c      	bne.n	8001434 <HAL_RCC_OscConfig+0x98>
 800141a:	4b70      	ldr	r3, [pc, #448]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a6f      	ldr	r2, [pc, #444]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 8001420:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001424:	6013      	str	r3, [r2, #0]
 8001426:	4b6d      	ldr	r3, [pc, #436]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a6c      	ldr	r2, [pc, #432]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 800142c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001430:	6013      	str	r3, [r2, #0]
 8001432:	e00b      	b.n	800144c <HAL_RCC_OscConfig+0xb0>
 8001434:	4b69      	ldr	r3, [pc, #420]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a68      	ldr	r2, [pc, #416]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 800143a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800143e:	6013      	str	r3, [r2, #0]
 8001440:	4b66      	ldr	r3, [pc, #408]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a65      	ldr	r2, [pc, #404]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 8001446:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800144a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d013      	beq.n	800147c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001454:	f7ff fc54 	bl	8000d00 <HAL_GetTick>
 8001458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800145a:	e008      	b.n	800146e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800145c:	f7ff fc50 	bl	8000d00 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b64      	cmp	r3, #100	; 0x64
 8001468:	d901      	bls.n	800146e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e207      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800146e:	4b5b      	ldr	r3, [pc, #364]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d0f0      	beq.n	800145c <HAL_RCC_OscConfig+0xc0>
 800147a:	e014      	b.n	80014a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147c:	f7ff fc40 	bl	8000d00 <HAL_GetTick>
 8001480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001482:	e008      	b.n	8001496 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001484:	f7ff fc3c 	bl	8000d00 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b64      	cmp	r3, #100	; 0x64
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e1f3      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001496:	4b51      	ldr	r3, [pc, #324]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1f0      	bne.n	8001484 <HAL_RCC_OscConfig+0xe8>
 80014a2:	e000      	b.n	80014a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d063      	beq.n	800157a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014b2:	4b4a      	ldr	r3, [pc, #296]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f003 030c 	and.w	r3, r3, #12
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d00b      	beq.n	80014d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014be:	4b47      	ldr	r3, [pc, #284]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014c6:	2b08      	cmp	r3, #8
 80014c8:	d11c      	bne.n	8001504 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014ca:	4b44      	ldr	r3, [pc, #272]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d116      	bne.n	8001504 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014d6:	4b41      	ldr	r3, [pc, #260]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d005      	beq.n	80014ee <HAL_RCC_OscConfig+0x152>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d001      	beq.n	80014ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e1c7      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ee:	4b3b      	ldr	r3, [pc, #236]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	691b      	ldr	r3, [r3, #16]
 80014fa:	00db      	lsls	r3, r3, #3
 80014fc:	4937      	ldr	r1, [pc, #220]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 80014fe:	4313      	orrs	r3, r2
 8001500:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001502:	e03a      	b.n	800157a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d020      	beq.n	800154e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800150c:	4b34      	ldr	r3, [pc, #208]	; (80015e0 <HAL_RCC_OscConfig+0x244>)
 800150e:	2201      	movs	r2, #1
 8001510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001512:	f7ff fbf5 	bl	8000d00 <HAL_GetTick>
 8001516:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001518:	e008      	b.n	800152c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800151a:	f7ff fbf1 	bl	8000d00 <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	2b02      	cmp	r3, #2
 8001526:	d901      	bls.n	800152c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e1a8      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800152c:	4b2b      	ldr	r3, [pc, #172]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0302 	and.w	r3, r3, #2
 8001534:	2b00      	cmp	r3, #0
 8001536:	d0f0      	beq.n	800151a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001538:	4b28      	ldr	r3, [pc, #160]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	691b      	ldr	r3, [r3, #16]
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	4925      	ldr	r1, [pc, #148]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 8001548:	4313      	orrs	r3, r2
 800154a:	600b      	str	r3, [r1, #0]
 800154c:	e015      	b.n	800157a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800154e:	4b24      	ldr	r3, [pc, #144]	; (80015e0 <HAL_RCC_OscConfig+0x244>)
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001554:	f7ff fbd4 	bl	8000d00 <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800155c:	f7ff fbd0 	bl	8000d00 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b02      	cmp	r3, #2
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e187      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800156e:	4b1b      	ldr	r3, [pc, #108]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d1f0      	bne.n	800155c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0308 	and.w	r3, r3, #8
 8001582:	2b00      	cmp	r3, #0
 8001584:	d036      	beq.n	80015f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	695b      	ldr	r3, [r3, #20]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d016      	beq.n	80015bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800158e:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <HAL_RCC_OscConfig+0x248>)
 8001590:	2201      	movs	r2, #1
 8001592:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001594:	f7ff fbb4 	bl	8000d00 <HAL_GetTick>
 8001598:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800159a:	e008      	b.n	80015ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800159c:	f7ff fbb0 	bl	8000d00 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e167      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ae:	4b0b      	ldr	r3, [pc, #44]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 80015b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d0f0      	beq.n	800159c <HAL_RCC_OscConfig+0x200>
 80015ba:	e01b      	b.n	80015f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015bc:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <HAL_RCC_OscConfig+0x248>)
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015c2:	f7ff fb9d 	bl	8000d00 <HAL_GetTick>
 80015c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015c8:	e00e      	b.n	80015e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015ca:	f7ff fb99 	bl	8000d00 <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d907      	bls.n	80015e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e150      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
 80015dc:	40023800 	.word	0x40023800
 80015e0:	42470000 	.word	0x42470000
 80015e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015e8:	4b88      	ldr	r3, [pc, #544]	; (800180c <HAL_RCC_OscConfig+0x470>)
 80015ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d1ea      	bne.n	80015ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0304 	and.w	r3, r3, #4
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	f000 8097 	beq.w	8001730 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001602:	2300      	movs	r3, #0
 8001604:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001606:	4b81      	ldr	r3, [pc, #516]	; (800180c <HAL_RCC_OscConfig+0x470>)
 8001608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d10f      	bne.n	8001632 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	60bb      	str	r3, [r7, #8]
 8001616:	4b7d      	ldr	r3, [pc, #500]	; (800180c <HAL_RCC_OscConfig+0x470>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161a:	4a7c      	ldr	r2, [pc, #496]	; (800180c <HAL_RCC_OscConfig+0x470>)
 800161c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001620:	6413      	str	r3, [r2, #64]	; 0x40
 8001622:	4b7a      	ldr	r3, [pc, #488]	; (800180c <HAL_RCC_OscConfig+0x470>)
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162a:	60bb      	str	r3, [r7, #8]
 800162c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800162e:	2301      	movs	r3, #1
 8001630:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001632:	4b77      	ldr	r3, [pc, #476]	; (8001810 <HAL_RCC_OscConfig+0x474>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800163a:	2b00      	cmp	r3, #0
 800163c:	d118      	bne.n	8001670 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800163e:	4b74      	ldr	r3, [pc, #464]	; (8001810 <HAL_RCC_OscConfig+0x474>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a73      	ldr	r2, [pc, #460]	; (8001810 <HAL_RCC_OscConfig+0x474>)
 8001644:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001648:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800164a:	f7ff fb59 	bl	8000d00 <HAL_GetTick>
 800164e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001650:	e008      	b.n	8001664 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001652:	f7ff fb55 	bl	8000d00 <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d901      	bls.n	8001664 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e10c      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001664:	4b6a      	ldr	r3, [pc, #424]	; (8001810 <HAL_RCC_OscConfig+0x474>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800166c:	2b00      	cmp	r3, #0
 800166e:	d0f0      	beq.n	8001652 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d106      	bne.n	8001686 <HAL_RCC_OscConfig+0x2ea>
 8001678:	4b64      	ldr	r3, [pc, #400]	; (800180c <HAL_RCC_OscConfig+0x470>)
 800167a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800167c:	4a63      	ldr	r2, [pc, #396]	; (800180c <HAL_RCC_OscConfig+0x470>)
 800167e:	f043 0301 	orr.w	r3, r3, #1
 8001682:	6713      	str	r3, [r2, #112]	; 0x70
 8001684:	e01c      	b.n	80016c0 <HAL_RCC_OscConfig+0x324>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	2b05      	cmp	r3, #5
 800168c:	d10c      	bne.n	80016a8 <HAL_RCC_OscConfig+0x30c>
 800168e:	4b5f      	ldr	r3, [pc, #380]	; (800180c <HAL_RCC_OscConfig+0x470>)
 8001690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001692:	4a5e      	ldr	r2, [pc, #376]	; (800180c <HAL_RCC_OscConfig+0x470>)
 8001694:	f043 0304 	orr.w	r3, r3, #4
 8001698:	6713      	str	r3, [r2, #112]	; 0x70
 800169a:	4b5c      	ldr	r3, [pc, #368]	; (800180c <HAL_RCC_OscConfig+0x470>)
 800169c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800169e:	4a5b      	ldr	r2, [pc, #364]	; (800180c <HAL_RCC_OscConfig+0x470>)
 80016a0:	f043 0301 	orr.w	r3, r3, #1
 80016a4:	6713      	str	r3, [r2, #112]	; 0x70
 80016a6:	e00b      	b.n	80016c0 <HAL_RCC_OscConfig+0x324>
 80016a8:	4b58      	ldr	r3, [pc, #352]	; (800180c <HAL_RCC_OscConfig+0x470>)
 80016aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ac:	4a57      	ldr	r2, [pc, #348]	; (800180c <HAL_RCC_OscConfig+0x470>)
 80016ae:	f023 0301 	bic.w	r3, r3, #1
 80016b2:	6713      	str	r3, [r2, #112]	; 0x70
 80016b4:	4b55      	ldr	r3, [pc, #340]	; (800180c <HAL_RCC_OscConfig+0x470>)
 80016b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016b8:	4a54      	ldr	r2, [pc, #336]	; (800180c <HAL_RCC_OscConfig+0x470>)
 80016ba:	f023 0304 	bic.w	r3, r3, #4
 80016be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d015      	beq.n	80016f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016c8:	f7ff fb1a 	bl	8000d00 <HAL_GetTick>
 80016cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ce:	e00a      	b.n	80016e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016d0:	f7ff fb16 	bl	8000d00 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	f241 3288 	movw	r2, #5000	; 0x1388
 80016de:	4293      	cmp	r3, r2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e0cb      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016e6:	4b49      	ldr	r3, [pc, #292]	; (800180c <HAL_RCC_OscConfig+0x470>)
 80016e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d0ee      	beq.n	80016d0 <HAL_RCC_OscConfig+0x334>
 80016f2:	e014      	b.n	800171e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016f4:	f7ff fb04 	bl	8000d00 <HAL_GetTick>
 80016f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016fa:	e00a      	b.n	8001712 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016fc:	f7ff fb00 	bl	8000d00 <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	f241 3288 	movw	r2, #5000	; 0x1388
 800170a:	4293      	cmp	r3, r2
 800170c:	d901      	bls.n	8001712 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e0b5      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001712:	4b3e      	ldr	r3, [pc, #248]	; (800180c <HAL_RCC_OscConfig+0x470>)
 8001714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d1ee      	bne.n	80016fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800171e:	7dfb      	ldrb	r3, [r7, #23]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d105      	bne.n	8001730 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001724:	4b39      	ldr	r3, [pc, #228]	; (800180c <HAL_RCC_OscConfig+0x470>)
 8001726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001728:	4a38      	ldr	r2, [pc, #224]	; (800180c <HAL_RCC_OscConfig+0x470>)
 800172a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800172e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	2b00      	cmp	r3, #0
 8001736:	f000 80a1 	beq.w	800187c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800173a:	4b34      	ldr	r3, [pc, #208]	; (800180c <HAL_RCC_OscConfig+0x470>)
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f003 030c 	and.w	r3, r3, #12
 8001742:	2b08      	cmp	r3, #8
 8001744:	d05c      	beq.n	8001800 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	699b      	ldr	r3, [r3, #24]
 800174a:	2b02      	cmp	r3, #2
 800174c:	d141      	bne.n	80017d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800174e:	4b31      	ldr	r3, [pc, #196]	; (8001814 <HAL_RCC_OscConfig+0x478>)
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001754:	f7ff fad4 	bl	8000d00 <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800175c:	f7ff fad0 	bl	8000d00 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e087      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800176e:	4b27      	ldr	r3, [pc, #156]	; (800180c <HAL_RCC_OscConfig+0x470>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d1f0      	bne.n	800175c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	69da      	ldr	r2, [r3, #28]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a1b      	ldr	r3, [r3, #32]
 8001782:	431a      	orrs	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001788:	019b      	lsls	r3, r3, #6
 800178a:	431a      	orrs	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001790:	085b      	lsrs	r3, r3, #1
 8001792:	3b01      	subs	r3, #1
 8001794:	041b      	lsls	r3, r3, #16
 8001796:	431a      	orrs	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800179c:	061b      	lsls	r3, r3, #24
 800179e:	491b      	ldr	r1, [pc, #108]	; (800180c <HAL_RCC_OscConfig+0x470>)
 80017a0:	4313      	orrs	r3, r2
 80017a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017a4:	4b1b      	ldr	r3, [pc, #108]	; (8001814 <HAL_RCC_OscConfig+0x478>)
 80017a6:	2201      	movs	r2, #1
 80017a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017aa:	f7ff faa9 	bl	8000d00 <HAL_GetTick>
 80017ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017b0:	e008      	b.n	80017c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017b2:	f7ff faa5 	bl	8000d00 <HAL_GetTick>
 80017b6:	4602      	mov	r2, r0
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d901      	bls.n	80017c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80017c0:	2303      	movs	r3, #3
 80017c2:	e05c      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017c4:	4b11      	ldr	r3, [pc, #68]	; (800180c <HAL_RCC_OscConfig+0x470>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d0f0      	beq.n	80017b2 <HAL_RCC_OscConfig+0x416>
 80017d0:	e054      	b.n	800187c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017d2:	4b10      	ldr	r3, [pc, #64]	; (8001814 <HAL_RCC_OscConfig+0x478>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d8:	f7ff fa92 	bl	8000d00 <HAL_GetTick>
 80017dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017de:	e008      	b.n	80017f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017e0:	f7ff fa8e 	bl	8000d00 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e045      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017f2:	4b06      	ldr	r3, [pc, #24]	; (800180c <HAL_RCC_OscConfig+0x470>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d1f0      	bne.n	80017e0 <HAL_RCC_OscConfig+0x444>
 80017fe:	e03d      	b.n	800187c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d107      	bne.n	8001818 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e038      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
 800180c:	40023800 	.word	0x40023800
 8001810:	40007000 	.word	0x40007000
 8001814:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001818:	4b1b      	ldr	r3, [pc, #108]	; (8001888 <HAL_RCC_OscConfig+0x4ec>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	2b01      	cmp	r3, #1
 8001824:	d028      	beq.n	8001878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001830:	429a      	cmp	r2, r3
 8001832:	d121      	bne.n	8001878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800183e:	429a      	cmp	r2, r3
 8001840:	d11a      	bne.n	8001878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001842:	68fa      	ldr	r2, [r7, #12]
 8001844:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001848:	4013      	ands	r3, r2
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800184e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001850:	4293      	cmp	r3, r2
 8001852:	d111      	bne.n	8001878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185e:	085b      	lsrs	r3, r3, #1
 8001860:	3b01      	subs	r3, #1
 8001862:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001864:	429a      	cmp	r2, r3
 8001866:	d107      	bne.n	8001878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001872:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001874:	429a      	cmp	r2, r3
 8001876:	d001      	beq.n	800187c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e000      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3718      	adds	r7, #24
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40023800 	.word	0x40023800

0800188c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d101      	bne.n	80018a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e0cc      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018a0:	4b68      	ldr	r3, [pc, #416]	; (8001a44 <HAL_RCC_ClockConfig+0x1b8>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0307 	and.w	r3, r3, #7
 80018a8:	683a      	ldr	r2, [r7, #0]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d90c      	bls.n	80018c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ae:	4b65      	ldr	r3, [pc, #404]	; (8001a44 <HAL_RCC_ClockConfig+0x1b8>)
 80018b0:	683a      	ldr	r2, [r7, #0]
 80018b2:	b2d2      	uxtb	r2, r2
 80018b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018b6:	4b63      	ldr	r3, [pc, #396]	; (8001a44 <HAL_RCC_ClockConfig+0x1b8>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	683a      	ldr	r2, [r7, #0]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d001      	beq.n	80018c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e0b8      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0302 	and.w	r3, r3, #2
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d020      	beq.n	8001916 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0304 	and.w	r3, r3, #4
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d005      	beq.n	80018ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018e0:	4b59      	ldr	r3, [pc, #356]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	4a58      	ldr	r2, [pc, #352]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 80018e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0308 	and.w	r3, r3, #8
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d005      	beq.n	8001904 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018f8:	4b53      	ldr	r3, [pc, #332]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	4a52      	ldr	r2, [pc, #328]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 80018fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001902:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001904:	4b50      	ldr	r3, [pc, #320]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	494d      	ldr	r1, [pc, #308]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 8001912:	4313      	orrs	r3, r2
 8001914:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	2b00      	cmp	r3, #0
 8001920:	d044      	beq.n	80019ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d107      	bne.n	800193a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800192a:	4b47      	ldr	r3, [pc, #284]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d119      	bne.n	800196a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e07f      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	2b02      	cmp	r3, #2
 8001940:	d003      	beq.n	800194a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001946:	2b03      	cmp	r3, #3
 8001948:	d107      	bne.n	800195a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800194a:	4b3f      	ldr	r3, [pc, #252]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d109      	bne.n	800196a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e06f      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800195a:	4b3b      	ldr	r3, [pc, #236]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d101      	bne.n	800196a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e067      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800196a:	4b37      	ldr	r3, [pc, #220]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f023 0203 	bic.w	r2, r3, #3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	4934      	ldr	r1, [pc, #208]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 8001978:	4313      	orrs	r3, r2
 800197a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800197c:	f7ff f9c0 	bl	8000d00 <HAL_GetTick>
 8001980:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001982:	e00a      	b.n	800199a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001984:	f7ff f9bc 	bl	8000d00 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001992:	4293      	cmp	r3, r2
 8001994:	d901      	bls.n	800199a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e04f      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800199a:	4b2b      	ldr	r3, [pc, #172]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f003 020c 	and.w	r2, r3, #12
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d1eb      	bne.n	8001984 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019ac:	4b25      	ldr	r3, [pc, #148]	; (8001a44 <HAL_RCC_ClockConfig+0x1b8>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0307 	and.w	r3, r3, #7
 80019b4:	683a      	ldr	r2, [r7, #0]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d20c      	bcs.n	80019d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ba:	4b22      	ldr	r3, [pc, #136]	; (8001a44 <HAL_RCC_ClockConfig+0x1b8>)
 80019bc:	683a      	ldr	r2, [r7, #0]
 80019be:	b2d2      	uxtb	r2, r2
 80019c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019c2:	4b20      	ldr	r3, [pc, #128]	; (8001a44 <HAL_RCC_ClockConfig+0x1b8>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0307 	and.w	r3, r3, #7
 80019ca:	683a      	ldr	r2, [r7, #0]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d001      	beq.n	80019d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e032      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0304 	and.w	r3, r3, #4
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d008      	beq.n	80019f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019e0:	4b19      	ldr	r3, [pc, #100]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	4916      	ldr	r1, [pc, #88]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 80019ee:	4313      	orrs	r3, r2
 80019f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0308 	and.w	r3, r3, #8
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d009      	beq.n	8001a12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019fe:	4b12      	ldr	r3, [pc, #72]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	691b      	ldr	r3, [r3, #16]
 8001a0a:	00db      	lsls	r3, r3, #3
 8001a0c:	490e      	ldr	r1, [pc, #56]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a12:	f000 f821 	bl	8001a58 <HAL_RCC_GetSysClockFreq>
 8001a16:	4602      	mov	r2, r0
 8001a18:	4b0b      	ldr	r3, [pc, #44]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	091b      	lsrs	r3, r3, #4
 8001a1e:	f003 030f 	and.w	r3, r3, #15
 8001a22:	490a      	ldr	r1, [pc, #40]	; (8001a4c <HAL_RCC_ClockConfig+0x1c0>)
 8001a24:	5ccb      	ldrb	r3, [r1, r3]
 8001a26:	fa22 f303 	lsr.w	r3, r2, r3
 8001a2a:	4a09      	ldr	r2, [pc, #36]	; (8001a50 <HAL_RCC_ClockConfig+0x1c4>)
 8001a2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a2e:	4b09      	ldr	r3, [pc, #36]	; (8001a54 <HAL_RCC_ClockConfig+0x1c8>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff f920 	bl	8000c78 <HAL_InitTick>

  return HAL_OK;
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40023c00 	.word	0x40023c00
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	08004314 	.word	0x08004314
 8001a50:	20000000 	.word	0x20000000
 8001a54:	20000004 	.word	0x20000004

08001a58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a5c:	b094      	sub	sp, #80	; 0x50
 8001a5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a60:	2300      	movs	r3, #0
 8001a62:	647b      	str	r3, [r7, #68]	; 0x44
 8001a64:	2300      	movs	r3, #0
 8001a66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a68:	2300      	movs	r3, #0
 8001a6a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a70:	4b79      	ldr	r3, [pc, #484]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f003 030c 	and.w	r3, r3, #12
 8001a78:	2b08      	cmp	r3, #8
 8001a7a:	d00d      	beq.n	8001a98 <HAL_RCC_GetSysClockFreq+0x40>
 8001a7c:	2b08      	cmp	r3, #8
 8001a7e:	f200 80e1 	bhi.w	8001c44 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d002      	beq.n	8001a8c <HAL_RCC_GetSysClockFreq+0x34>
 8001a86:	2b04      	cmp	r3, #4
 8001a88:	d003      	beq.n	8001a92 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a8a:	e0db      	b.n	8001c44 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a8c:	4b73      	ldr	r3, [pc, #460]	; (8001c5c <HAL_RCC_GetSysClockFreq+0x204>)
 8001a8e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001a90:	e0db      	b.n	8001c4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a92:	4b73      	ldr	r3, [pc, #460]	; (8001c60 <HAL_RCC_GetSysClockFreq+0x208>)
 8001a94:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a96:	e0d8      	b.n	8001c4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a98:	4b6f      	ldr	r3, [pc, #444]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001aa0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001aa2:	4b6d      	ldr	r3, [pc, #436]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d063      	beq.n	8001b76 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aae:	4b6a      	ldr	r3, [pc, #424]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	099b      	lsrs	r3, r3, #6
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ab8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001abc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ac0:	633b      	str	r3, [r7, #48]	; 0x30
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	637b      	str	r3, [r7, #52]	; 0x34
 8001ac6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001aca:	4622      	mov	r2, r4
 8001acc:	462b      	mov	r3, r5
 8001ace:	f04f 0000 	mov.w	r0, #0
 8001ad2:	f04f 0100 	mov.w	r1, #0
 8001ad6:	0159      	lsls	r1, r3, #5
 8001ad8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001adc:	0150      	lsls	r0, r2, #5
 8001ade:	4602      	mov	r2, r0
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	4621      	mov	r1, r4
 8001ae4:	1a51      	subs	r1, r2, r1
 8001ae6:	6139      	str	r1, [r7, #16]
 8001ae8:	4629      	mov	r1, r5
 8001aea:	eb63 0301 	sbc.w	r3, r3, r1
 8001aee:	617b      	str	r3, [r7, #20]
 8001af0:	f04f 0200 	mov.w	r2, #0
 8001af4:	f04f 0300 	mov.w	r3, #0
 8001af8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001afc:	4659      	mov	r1, fp
 8001afe:	018b      	lsls	r3, r1, #6
 8001b00:	4651      	mov	r1, sl
 8001b02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b06:	4651      	mov	r1, sl
 8001b08:	018a      	lsls	r2, r1, #6
 8001b0a:	4651      	mov	r1, sl
 8001b0c:	ebb2 0801 	subs.w	r8, r2, r1
 8001b10:	4659      	mov	r1, fp
 8001b12:	eb63 0901 	sbc.w	r9, r3, r1
 8001b16:	f04f 0200 	mov.w	r2, #0
 8001b1a:	f04f 0300 	mov.w	r3, #0
 8001b1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b2a:	4690      	mov	r8, r2
 8001b2c:	4699      	mov	r9, r3
 8001b2e:	4623      	mov	r3, r4
 8001b30:	eb18 0303 	adds.w	r3, r8, r3
 8001b34:	60bb      	str	r3, [r7, #8]
 8001b36:	462b      	mov	r3, r5
 8001b38:	eb49 0303 	adc.w	r3, r9, r3
 8001b3c:	60fb      	str	r3, [r7, #12]
 8001b3e:	f04f 0200 	mov.w	r2, #0
 8001b42:	f04f 0300 	mov.w	r3, #0
 8001b46:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b4a:	4629      	mov	r1, r5
 8001b4c:	024b      	lsls	r3, r1, #9
 8001b4e:	4621      	mov	r1, r4
 8001b50:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b54:	4621      	mov	r1, r4
 8001b56:	024a      	lsls	r2, r1, #9
 8001b58:	4610      	mov	r0, r2
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b5e:	2200      	movs	r2, #0
 8001b60:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b64:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b68:	f7fe fb92 	bl	8000290 <__aeabi_uldivmod>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	460b      	mov	r3, r1
 8001b70:	4613      	mov	r3, r2
 8001b72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b74:	e058      	b.n	8001c28 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b76:	4b38      	ldr	r3, [pc, #224]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	099b      	lsrs	r3, r3, #6
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	4618      	mov	r0, r3
 8001b80:	4611      	mov	r1, r2
 8001b82:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b86:	623b      	str	r3, [r7, #32]
 8001b88:	2300      	movs	r3, #0
 8001b8a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b8c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b90:	4642      	mov	r2, r8
 8001b92:	464b      	mov	r3, r9
 8001b94:	f04f 0000 	mov.w	r0, #0
 8001b98:	f04f 0100 	mov.w	r1, #0
 8001b9c:	0159      	lsls	r1, r3, #5
 8001b9e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ba2:	0150      	lsls	r0, r2, #5
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	4641      	mov	r1, r8
 8001baa:	ebb2 0a01 	subs.w	sl, r2, r1
 8001bae:	4649      	mov	r1, r9
 8001bb0:	eb63 0b01 	sbc.w	fp, r3, r1
 8001bb4:	f04f 0200 	mov.w	r2, #0
 8001bb8:	f04f 0300 	mov.w	r3, #0
 8001bbc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001bc0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001bc4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001bc8:	ebb2 040a 	subs.w	r4, r2, sl
 8001bcc:	eb63 050b 	sbc.w	r5, r3, fp
 8001bd0:	f04f 0200 	mov.w	r2, #0
 8001bd4:	f04f 0300 	mov.w	r3, #0
 8001bd8:	00eb      	lsls	r3, r5, #3
 8001bda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bde:	00e2      	lsls	r2, r4, #3
 8001be0:	4614      	mov	r4, r2
 8001be2:	461d      	mov	r5, r3
 8001be4:	4643      	mov	r3, r8
 8001be6:	18e3      	adds	r3, r4, r3
 8001be8:	603b      	str	r3, [r7, #0]
 8001bea:	464b      	mov	r3, r9
 8001bec:	eb45 0303 	adc.w	r3, r5, r3
 8001bf0:	607b      	str	r3, [r7, #4]
 8001bf2:	f04f 0200 	mov.w	r2, #0
 8001bf6:	f04f 0300 	mov.w	r3, #0
 8001bfa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bfe:	4629      	mov	r1, r5
 8001c00:	028b      	lsls	r3, r1, #10
 8001c02:	4621      	mov	r1, r4
 8001c04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c08:	4621      	mov	r1, r4
 8001c0a:	028a      	lsls	r2, r1, #10
 8001c0c:	4610      	mov	r0, r2
 8001c0e:	4619      	mov	r1, r3
 8001c10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c12:	2200      	movs	r2, #0
 8001c14:	61bb      	str	r3, [r7, #24]
 8001c16:	61fa      	str	r2, [r7, #28]
 8001c18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c1c:	f7fe fb38 	bl	8000290 <__aeabi_uldivmod>
 8001c20:	4602      	mov	r2, r0
 8001c22:	460b      	mov	r3, r1
 8001c24:	4613      	mov	r3, r2
 8001c26:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c28:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	0c1b      	lsrs	r3, r3, #16
 8001c2e:	f003 0303 	and.w	r3, r3, #3
 8001c32:	3301      	adds	r3, #1
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001c38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c40:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c42:	e002      	b.n	8001c4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c44:	4b05      	ldr	r3, [pc, #20]	; (8001c5c <HAL_RCC_GetSysClockFreq+0x204>)
 8001c46:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3750      	adds	r7, #80	; 0x50
 8001c50:	46bd      	mov	sp, r7
 8001c52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c56:	bf00      	nop
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	00f42400 	.word	0x00f42400
 8001c60:	007a1200 	.word	0x007a1200

08001c64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c68:	4b03      	ldr	r3, [pc, #12]	; (8001c78 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	20000000 	.word	0x20000000

08001c7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c80:	f7ff fff0 	bl	8001c64 <HAL_RCC_GetHCLKFreq>
 8001c84:	4602      	mov	r2, r0
 8001c86:	4b05      	ldr	r3, [pc, #20]	; (8001c9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	0a9b      	lsrs	r3, r3, #10
 8001c8c:	f003 0307 	and.w	r3, r3, #7
 8001c90:	4903      	ldr	r1, [pc, #12]	; (8001ca0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c92:	5ccb      	ldrb	r3, [r1, r3]
 8001c94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	08004324 	.word	0x08004324

08001ca4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ca8:	f7ff ffdc 	bl	8001c64 <HAL_RCC_GetHCLKFreq>
 8001cac:	4602      	mov	r2, r0
 8001cae:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	0b5b      	lsrs	r3, r3, #13
 8001cb4:	f003 0307 	and.w	r3, r3, #7
 8001cb8:	4903      	ldr	r1, [pc, #12]	; (8001cc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cba:	5ccb      	ldrb	r3, [r1, r3]
 8001cbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	08004324 	.word	0x08004324

08001ccc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e03f      	b.n	8001d5e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d106      	bne.n	8001cf8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f7fe fea8 	bl	8000a48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2224      	movs	r2, #36	; 0x24
 8001cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	68da      	ldr	r2, [r3, #12]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f000 fddf 	bl	80028d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	691a      	ldr	r2, [r3, #16]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001d24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	695a      	ldr	r2, [r3, #20]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001d34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	68da      	ldr	r2, [r3, #12]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2220      	movs	r2, #32
 8001d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2220      	movs	r2, #32
 8001d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b08a      	sub	sp, #40	; 0x28
 8001d6a:	af02      	add	r7, sp, #8
 8001d6c:	60f8      	str	r0, [r7, #12]
 8001d6e:	60b9      	str	r1, [r7, #8]
 8001d70:	603b      	str	r3, [r7, #0]
 8001d72:	4613      	mov	r3, r2
 8001d74:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001d76:	2300      	movs	r3, #0
 8001d78:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b20      	cmp	r3, #32
 8001d84:	d17c      	bne.n	8001e80 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d002      	beq.n	8001d92 <HAL_UART_Transmit+0x2c>
 8001d8c:	88fb      	ldrh	r3, [r7, #6]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d101      	bne.n	8001d96 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e075      	b.n	8001e82 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d101      	bne.n	8001da4 <HAL_UART_Transmit+0x3e>
 8001da0:	2302      	movs	r3, #2
 8001da2:	e06e      	b.n	8001e82 <HAL_UART_Transmit+0x11c>
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2200      	movs	r2, #0
 8001db0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2221      	movs	r2, #33	; 0x21
 8001db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001dba:	f7fe ffa1 	bl	8000d00 <HAL_GetTick>
 8001dbe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	88fa      	ldrh	r2, [r7, #6]
 8001dc4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	88fa      	ldrh	r2, [r7, #6]
 8001dca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dd4:	d108      	bne.n	8001de8 <HAL_UART_Transmit+0x82>
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d104      	bne.n	8001de8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001dde:	2300      	movs	r3, #0
 8001de0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	61bb      	str	r3, [r7, #24]
 8001de6:	e003      	b.n	8001df0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001dec:	2300      	movs	r3, #0
 8001dee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2200      	movs	r2, #0
 8001df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001df8:	e02a      	b.n	8001e50 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	9300      	str	r3, [sp, #0]
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	2200      	movs	r2, #0
 8001e02:	2180      	movs	r1, #128	; 0x80
 8001e04:	68f8      	ldr	r0, [r7, #12]
 8001e06:	f000 fb1f 	bl	8002448 <UART_WaitOnFlagUntilTimeout>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e036      	b.n	8001e82 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d10b      	bne.n	8001e32 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	881b      	ldrh	r3, [r3, #0]
 8001e1e:	461a      	mov	r2, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e28:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	3302      	adds	r3, #2
 8001e2e:	61bb      	str	r3, [r7, #24]
 8001e30:	e007      	b.n	8001e42 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	781a      	ldrb	r2, [r3, #0]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	3b01      	subs	r3, #1
 8001e4a:	b29a      	uxth	r2, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1cf      	bne.n	8001dfa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	9300      	str	r3, [sp, #0]
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	2200      	movs	r2, #0
 8001e62:	2140      	movs	r1, #64	; 0x40
 8001e64:	68f8      	ldr	r0, [r7, #12]
 8001e66:	f000 faef 	bl	8002448 <UART_WaitOnFlagUntilTimeout>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e006      	b.n	8001e82 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2220      	movs	r2, #32
 8001e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	e000      	b.n	8001e82 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001e80:	2302      	movs	r3, #2
  }
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3720      	adds	r7, #32
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b084      	sub	sp, #16
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	60f8      	str	r0, [r7, #12]
 8001e92:	60b9      	str	r1, [r7, #8]
 8001e94:	4613      	mov	r3, r2
 8001e96:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	2b20      	cmp	r3, #32
 8001ea2:	d11d      	bne.n	8001ee0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d002      	beq.n	8001eb0 <HAL_UART_Receive_IT+0x26>
 8001eaa:	88fb      	ldrh	r3, [r7, #6]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d101      	bne.n	8001eb4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e016      	b.n	8001ee2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d101      	bne.n	8001ec2 <HAL_UART_Receive_IT+0x38>
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	e00f      	b.n	8001ee2 <HAL_UART_Receive_IT+0x58>
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001ed0:	88fb      	ldrh	r3, [r7, #6]
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	68b9      	ldr	r1, [r7, #8]
 8001ed6:	68f8      	ldr	r0, [r7, #12]
 8001ed8:	f000 fb24 	bl	8002524 <UART_Start_Receive_IT>
 8001edc:	4603      	mov	r3, r0
 8001ede:	e000      	b.n	8001ee2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8001ee0:	2302      	movs	r3, #2
  }
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3710      	adds	r7, #16
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
	...

08001eec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b0ba      	sub	sp, #232	; 0xe8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001f12:	2300      	movs	r3, #0
 8001f14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f22:	f003 030f 	and.w	r3, r3, #15
 8001f26:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001f2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d10f      	bne.n	8001f52 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f36:	f003 0320 	and.w	r3, r3, #32
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d009      	beq.n	8001f52 <HAL_UART_IRQHandler+0x66>
 8001f3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f42:	f003 0320 	and.w	r3, r3, #32
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d003      	beq.n	8001f52 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 fc07 	bl	800275e <UART_Receive_IT>
      return;
 8001f50:	e256      	b.n	8002400 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001f52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	f000 80de 	beq.w	8002118 <HAL_UART_IRQHandler+0x22c>
 8001f5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001f60:	f003 0301 	and.w	r3, r3, #1
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d106      	bne.n	8001f76 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001f68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f6c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	f000 80d1 	beq.w	8002118 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d00b      	beq.n	8001f9a <HAL_UART_IRQHandler+0xae>
 8001f82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d005      	beq.n	8001f9a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f92:	f043 0201 	orr.w	r2, r3, #1
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f9e:	f003 0304 	and.w	r3, r3, #4
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d00b      	beq.n	8001fbe <HAL_UART_IRQHandler+0xd2>
 8001fa6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d005      	beq.n	8001fbe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb6:	f043 0202 	orr.w	r2, r3, #2
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001fbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d00b      	beq.n	8001fe2 <HAL_UART_IRQHandler+0xf6>
 8001fca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d005      	beq.n	8001fe2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	f043 0204 	orr.w	r2, r3, #4
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001fe6:	f003 0308 	and.w	r3, r3, #8
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d011      	beq.n	8002012 <HAL_UART_IRQHandler+0x126>
 8001fee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001ff2:	f003 0320 	and.w	r3, r3, #32
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d105      	bne.n	8002006 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001ffa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	2b00      	cmp	r3, #0
 8002004:	d005      	beq.n	8002012 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	f043 0208 	orr.w	r2, r3, #8
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002016:	2b00      	cmp	r3, #0
 8002018:	f000 81ed 	beq.w	80023f6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800201c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002020:	f003 0320 	and.w	r3, r3, #32
 8002024:	2b00      	cmp	r3, #0
 8002026:	d008      	beq.n	800203a <HAL_UART_IRQHandler+0x14e>
 8002028:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800202c:	f003 0320 	and.w	r3, r3, #32
 8002030:	2b00      	cmp	r3, #0
 8002032:	d002      	beq.n	800203a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f000 fb92 	bl	800275e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	695b      	ldr	r3, [r3, #20]
 8002040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002044:	2b40      	cmp	r3, #64	; 0x40
 8002046:	bf0c      	ite	eq
 8002048:	2301      	moveq	r3, #1
 800204a:	2300      	movne	r3, #0
 800204c:	b2db      	uxtb	r3, r3
 800204e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002056:	f003 0308 	and.w	r3, r3, #8
 800205a:	2b00      	cmp	r3, #0
 800205c:	d103      	bne.n	8002066 <HAL_UART_IRQHandler+0x17a>
 800205e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002062:	2b00      	cmp	r3, #0
 8002064:	d04f      	beq.n	8002106 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 fa9a 	bl	80025a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	695b      	ldr	r3, [r3, #20]
 8002072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002076:	2b40      	cmp	r3, #64	; 0x40
 8002078:	d141      	bne.n	80020fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	3314      	adds	r3, #20
 8002080:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002084:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002088:	e853 3f00 	ldrex	r3, [r3]
 800208c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002090:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002094:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002098:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	3314      	adds	r3, #20
 80020a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80020a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80020aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80020b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80020b6:	e841 2300 	strex	r3, r2, [r1]
 80020ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80020be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d1d9      	bne.n	800207a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d013      	beq.n	80020f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020d2:	4a7d      	ldr	r2, [pc, #500]	; (80022c8 <HAL_UART_IRQHandler+0x3dc>)
 80020d4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020da:	4618      	mov	r0, r3
 80020dc:	f7fe ff9d 	bl	800101a <HAL_DMA_Abort_IT>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d016      	beq.n	8002114 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80020f0:	4610      	mov	r0, r2
 80020f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020f4:	e00e      	b.n	8002114 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 f990 	bl	800241c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020fc:	e00a      	b.n	8002114 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f000 f98c 	bl	800241c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002104:	e006      	b.n	8002114 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f000 f988 	bl	800241c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002112:	e170      	b.n	80023f6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002114:	bf00      	nop
    return;
 8002116:	e16e      	b.n	80023f6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211c:	2b01      	cmp	r3, #1
 800211e:	f040 814a 	bne.w	80023b6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002126:	f003 0310 	and.w	r3, r3, #16
 800212a:	2b00      	cmp	r3, #0
 800212c:	f000 8143 	beq.w	80023b6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002130:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002134:	f003 0310 	and.w	r3, r3, #16
 8002138:	2b00      	cmp	r3, #0
 800213a:	f000 813c 	beq.w	80023b6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800213e:	2300      	movs	r3, #0
 8002140:	60bb      	str	r3, [r7, #8]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	60bb      	str	r3, [r7, #8]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	60bb      	str	r3, [r7, #8]
 8002152:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	695b      	ldr	r3, [r3, #20]
 800215a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800215e:	2b40      	cmp	r3, #64	; 0x40
 8002160:	f040 80b4 	bne.w	80022cc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002170:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002174:	2b00      	cmp	r3, #0
 8002176:	f000 8140 	beq.w	80023fa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800217e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002182:	429a      	cmp	r2, r3
 8002184:	f080 8139 	bcs.w	80023fa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800218e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002194:	69db      	ldr	r3, [r3, #28]
 8002196:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800219a:	f000 8088 	beq.w	80022ae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	330c      	adds	r3, #12
 80021a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80021ac:	e853 3f00 	ldrex	r3, [r3]
 80021b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80021b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80021b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	330c      	adds	r3, #12
 80021c6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80021ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80021ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80021d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80021da:	e841 2300 	strex	r3, r2, [r1]
 80021de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80021e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d1d9      	bne.n	800219e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	3314      	adds	r3, #20
 80021f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021f4:	e853 3f00 	ldrex	r3, [r3]
 80021f8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80021fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021fc:	f023 0301 	bic.w	r3, r3, #1
 8002200:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	3314      	adds	r3, #20
 800220a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800220e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002212:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002214:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002216:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800221a:	e841 2300 	strex	r3, r2, [r1]
 800221e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002220:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002222:	2b00      	cmp	r3, #0
 8002224:	d1e1      	bne.n	80021ea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	3314      	adds	r3, #20
 800222c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800222e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002230:	e853 3f00 	ldrex	r3, [r3]
 8002234:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002236:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002238:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800223c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	3314      	adds	r3, #20
 8002246:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800224a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800224c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800224e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002250:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002252:	e841 2300 	strex	r3, r2, [r1]
 8002256:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002258:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1e3      	bne.n	8002226 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2220      	movs	r2, #32
 8002262:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	330c      	adds	r3, #12
 8002272:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002274:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002276:	e853 3f00 	ldrex	r3, [r3]
 800227a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800227c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800227e:	f023 0310 	bic.w	r3, r3, #16
 8002282:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	330c      	adds	r3, #12
 800228c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002290:	65ba      	str	r2, [r7, #88]	; 0x58
 8002292:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002294:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002296:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002298:	e841 2300 	strex	r3, r2, [r1]
 800229c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800229e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d1e3      	bne.n	800226c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7fe fe46 	bl	8000f3a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	4619      	mov	r1, r3
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f000 f8b6 	bl	8002430 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80022c4:	e099      	b.n	80023fa <HAL_UART_IRQHandler+0x50e>
 80022c6:	bf00      	nop
 80022c8:	08002667 	.word	0x08002667
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	f000 808b 	beq.w	80023fe <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80022e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	f000 8086 	beq.w	80023fe <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	330c      	adds	r3, #12
 80022f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022fc:	e853 3f00 	ldrex	r3, [r3]
 8002300:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002304:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002308:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	330c      	adds	r3, #12
 8002312:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002316:	647a      	str	r2, [r7, #68]	; 0x44
 8002318:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800231a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800231c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800231e:	e841 2300 	strex	r3, r2, [r1]
 8002322:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1e3      	bne.n	80022f2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	3314      	adds	r3, #20
 8002330:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002334:	e853 3f00 	ldrex	r3, [r3]
 8002338:	623b      	str	r3, [r7, #32]
   return(result);
 800233a:	6a3b      	ldr	r3, [r7, #32]
 800233c:	f023 0301 	bic.w	r3, r3, #1
 8002340:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	3314      	adds	r3, #20
 800234a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800234e:	633a      	str	r2, [r7, #48]	; 0x30
 8002350:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002352:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002354:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002356:	e841 2300 	strex	r3, r2, [r1]
 800235a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800235c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800235e:	2b00      	cmp	r3, #0
 8002360:	d1e3      	bne.n	800232a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2220      	movs	r2, #32
 8002366:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	330c      	adds	r3, #12
 8002376:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	e853 3f00 	ldrex	r3, [r3]
 800237e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f023 0310 	bic.w	r3, r3, #16
 8002386:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	330c      	adds	r3, #12
 8002390:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002394:	61fa      	str	r2, [r7, #28]
 8002396:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002398:	69b9      	ldr	r1, [r7, #24]
 800239a:	69fa      	ldr	r2, [r7, #28]
 800239c:	e841 2300 	strex	r3, r2, [r1]
 80023a0:	617b      	str	r3, [r7, #20]
   return(result);
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d1e3      	bne.n	8002370 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80023a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80023ac:	4619      	mov	r1, r3
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f000 f83e 	bl	8002430 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80023b4:	e023      	b.n	80023fe <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80023b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d009      	beq.n	80023d6 <HAL_UART_IRQHandler+0x4ea>
 80023c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d003      	beq.n	80023d6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 f95d 	bl	800268e <UART_Transmit_IT>
    return;
 80023d4:	e014      	b.n	8002400 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80023d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d00e      	beq.n	8002400 <HAL_UART_IRQHandler+0x514>
 80023e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d008      	beq.n	8002400 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 f99d 	bl	800272e <UART_EndTransmit_IT>
    return;
 80023f4:	e004      	b.n	8002400 <HAL_UART_IRQHandler+0x514>
    return;
 80023f6:	bf00      	nop
 80023f8:	e002      	b.n	8002400 <HAL_UART_IRQHandler+0x514>
      return;
 80023fa:	bf00      	nop
 80023fc:	e000      	b.n	8002400 <HAL_UART_IRQHandler+0x514>
      return;
 80023fe:	bf00      	nop
  }
}
 8002400:	37e8      	adds	r7, #232	; 0xe8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop

08002408 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	460b      	mov	r3, r1
 800243a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800243c:	bf00      	nop
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b090      	sub	sp, #64	; 0x40
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	603b      	str	r3, [r7, #0]
 8002454:	4613      	mov	r3, r2
 8002456:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002458:	e050      	b.n	80024fc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800245a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800245c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002460:	d04c      	beq.n	80024fc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002462:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002464:	2b00      	cmp	r3, #0
 8002466:	d007      	beq.n	8002478 <UART_WaitOnFlagUntilTimeout+0x30>
 8002468:	f7fe fc4a 	bl	8000d00 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002474:	429a      	cmp	r2, r3
 8002476:	d241      	bcs.n	80024fc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	330c      	adds	r3, #12
 800247e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002482:	e853 3f00 	ldrex	r3, [r3]
 8002486:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800248e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	330c      	adds	r3, #12
 8002496:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002498:	637a      	str	r2, [r7, #52]	; 0x34
 800249a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800249c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800249e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024a0:	e841 2300 	strex	r3, r2, [r1]
 80024a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80024a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d1e5      	bne.n	8002478 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	3314      	adds	r3, #20
 80024b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	e853 3f00 	ldrex	r3, [r3]
 80024ba:	613b      	str	r3, [r7, #16]
   return(result);
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	f023 0301 	bic.w	r3, r3, #1
 80024c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	3314      	adds	r3, #20
 80024ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024cc:	623a      	str	r2, [r7, #32]
 80024ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024d0:	69f9      	ldr	r1, [r7, #28]
 80024d2:	6a3a      	ldr	r2, [r7, #32]
 80024d4:	e841 2300 	strex	r3, r2, [r1]
 80024d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d1e5      	bne.n	80024ac <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2220      	movs	r2, #32
 80024e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2220      	movs	r2, #32
 80024ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e00f      	b.n	800251c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	4013      	ands	r3, r2
 8002506:	68ba      	ldr	r2, [r7, #8]
 8002508:	429a      	cmp	r2, r3
 800250a:	bf0c      	ite	eq
 800250c:	2301      	moveq	r3, #1
 800250e:	2300      	movne	r3, #0
 8002510:	b2db      	uxtb	r3, r3
 8002512:	461a      	mov	r2, r3
 8002514:	79fb      	ldrb	r3, [r7, #7]
 8002516:	429a      	cmp	r2, r3
 8002518:	d09f      	beq.n	800245a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	3740      	adds	r7, #64	; 0x40
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	4613      	mov	r3, r2
 8002530:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	68ba      	ldr	r2, [r7, #8]
 8002536:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	88fa      	ldrh	r2, [r7, #6]
 800253c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	88fa      	ldrh	r2, [r7, #6]
 8002542:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2200      	movs	r2, #0
 8002548:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2222      	movs	r2, #34	; 0x22
 800254e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d007      	beq.n	8002572 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	68da      	ldr	r2, [r3, #12]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002570:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	695a      	ldr	r2, [r3, #20]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f042 0201 	orr.w	r2, r2, #1
 8002580:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68da      	ldr	r2, [r3, #12]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f042 0220 	orr.w	r2, r2, #32
 8002590:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002592:	2300      	movs	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	3714      	adds	r7, #20
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b095      	sub	sp, #84	; 0x54
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	330c      	adds	r3, #12
 80025ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025b2:	e853 3f00 	ldrex	r3, [r3]
 80025b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80025b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80025be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	330c      	adds	r3, #12
 80025c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80025c8:	643a      	str	r2, [r7, #64]	; 0x40
 80025ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80025ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80025d0:	e841 2300 	strex	r3, r2, [r1]
 80025d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80025d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1e5      	bne.n	80025a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	3314      	adds	r3, #20
 80025e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025e4:	6a3b      	ldr	r3, [r7, #32]
 80025e6:	e853 3f00 	ldrex	r3, [r3]
 80025ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	f023 0301 	bic.w	r3, r3, #1
 80025f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	3314      	adds	r3, #20
 80025fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80025fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80025fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002600:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002602:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002604:	e841 2300 	strex	r3, r2, [r1]
 8002608:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800260a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260c:	2b00      	cmp	r3, #0
 800260e:	d1e5      	bne.n	80025dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002614:	2b01      	cmp	r3, #1
 8002616:	d119      	bne.n	800264c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	330c      	adds	r3, #12
 800261e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	e853 3f00 	ldrex	r3, [r3]
 8002626:	60bb      	str	r3, [r7, #8]
   return(result);
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	f023 0310 	bic.w	r3, r3, #16
 800262e:	647b      	str	r3, [r7, #68]	; 0x44
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	330c      	adds	r3, #12
 8002636:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002638:	61ba      	str	r2, [r7, #24]
 800263a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800263c:	6979      	ldr	r1, [r7, #20]
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	e841 2300 	strex	r3, r2, [r1]
 8002644:	613b      	str	r3, [r7, #16]
   return(result);
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d1e5      	bne.n	8002618 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2220      	movs	r2, #32
 8002650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	631a      	str	r2, [r3, #48]	; 0x30
}
 800265a:	bf00      	nop
 800265c:	3754      	adds	r7, #84	; 0x54
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr

08002666 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002666:	b580      	push	{r7, lr}
 8002668:	b084      	sub	sp, #16
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002672:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2200      	movs	r2, #0
 8002678:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2200      	movs	r2, #0
 800267e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002680:	68f8      	ldr	r0, [r7, #12]
 8002682:	f7ff fecb 	bl	800241c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002686:	bf00      	nop
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800268e:	b480      	push	{r7}
 8002690:	b085      	sub	sp, #20
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b21      	cmp	r3, #33	; 0x21
 80026a0:	d13e      	bne.n	8002720 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026aa:	d114      	bne.n	80026d6 <UART_Transmit_IT+0x48>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d110      	bne.n	80026d6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a1b      	ldr	r3, [r3, #32]
 80026b8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	881b      	ldrh	r3, [r3, #0]
 80026be:	461a      	mov	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026c8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a1b      	ldr	r3, [r3, #32]
 80026ce:	1c9a      	adds	r2, r3, #2
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	621a      	str	r2, [r3, #32]
 80026d4:	e008      	b.n	80026e8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a1b      	ldr	r3, [r3, #32]
 80026da:	1c59      	adds	r1, r3, #1
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	6211      	str	r1, [r2, #32]
 80026e0:	781a      	ldrb	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	3b01      	subs	r3, #1
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	4619      	mov	r1, r3
 80026f6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d10f      	bne.n	800271c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68da      	ldr	r2, [r3, #12]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800270a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68da      	ldr	r2, [r3, #12]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800271a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800271c:	2300      	movs	r3, #0
 800271e:	e000      	b.n	8002722 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002720:	2302      	movs	r3, #2
  }
}
 8002722:	4618      	mov	r0, r3
 8002724:	3714      	adds	r7, #20
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr

0800272e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	b082      	sub	sp, #8
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68da      	ldr	r2, [r3, #12]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002744:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2220      	movs	r2, #32
 800274a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f7ff fe5a 	bl	8002408 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	b08c      	sub	sp, #48	; 0x30
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2b22      	cmp	r3, #34	; 0x22
 8002770:	f040 80ab 	bne.w	80028ca <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800277c:	d117      	bne.n	80027ae <UART_Receive_IT+0x50>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d113      	bne.n	80027ae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002786:	2300      	movs	r3, #0
 8002788:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800278e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	b29b      	uxth	r3, r3
 8002798:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800279c:	b29a      	uxth	r2, r3
 800279e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a6:	1c9a      	adds	r2, r3, #2
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	629a      	str	r2, [r3, #40]	; 0x28
 80027ac:	e026      	b.n	80027fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80027b4:	2300      	movs	r3, #0
 80027b6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027c0:	d007      	beq.n	80027d2 <UART_Receive_IT+0x74>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d10a      	bne.n	80027e0 <UART_Receive_IT+0x82>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d106      	bne.n	80027e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	b2da      	uxtb	r2, r3
 80027da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027dc:	701a      	strb	r2, [r3, #0]
 80027de:	e008      	b.n	80027f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027ec:	b2da      	uxtb	r2, r3
 80027ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f6:	1c5a      	adds	r2, r3, #1
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002800:	b29b      	uxth	r3, r3
 8002802:	3b01      	subs	r3, #1
 8002804:	b29b      	uxth	r3, r3
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	4619      	mov	r1, r3
 800280a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800280c:	2b00      	cmp	r3, #0
 800280e:	d15a      	bne.n	80028c6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68da      	ldr	r2, [r3, #12]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f022 0220 	bic.w	r2, r2, #32
 800281e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68da      	ldr	r2, [r3, #12]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800282e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	695a      	ldr	r2, [r3, #20]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f022 0201 	bic.w	r2, r2, #1
 800283e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2220      	movs	r2, #32
 8002844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284c:	2b01      	cmp	r3, #1
 800284e:	d135      	bne.n	80028bc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	330c      	adds	r3, #12
 800285c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	e853 3f00 	ldrex	r3, [r3]
 8002864:	613b      	str	r3, [r7, #16]
   return(result);
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	f023 0310 	bic.w	r3, r3, #16
 800286c:	627b      	str	r3, [r7, #36]	; 0x24
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	330c      	adds	r3, #12
 8002874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002876:	623a      	str	r2, [r7, #32]
 8002878:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800287a:	69f9      	ldr	r1, [r7, #28]
 800287c:	6a3a      	ldr	r2, [r7, #32]
 800287e:	e841 2300 	strex	r3, r2, [r1]
 8002882:	61bb      	str	r3, [r7, #24]
   return(result);
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1e5      	bne.n	8002856 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0310 	and.w	r3, r3, #16
 8002894:	2b10      	cmp	r3, #16
 8002896:	d10a      	bne.n	80028ae <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002898:	2300      	movs	r3, #0
 800289a:	60fb      	str	r3, [r7, #12]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	60fb      	str	r3, [r7, #12]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	60fb      	str	r3, [r7, #12]
 80028ac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80028b2:	4619      	mov	r1, r3
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f7ff fdbb 	bl	8002430 <HAL_UARTEx_RxEventCallback>
 80028ba:	e002      	b.n	80028c2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f7fd fe65 	bl	800058c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80028c2:	2300      	movs	r3, #0
 80028c4:	e002      	b.n	80028cc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80028c6:	2300      	movs	r3, #0
 80028c8:	e000      	b.n	80028cc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80028ca:	2302      	movs	r3, #2
  }
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3730      	adds	r7, #48	; 0x30
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028d8:	b0c0      	sub	sp, #256	; 0x100
 80028da:	af00      	add	r7, sp, #0
 80028dc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80028ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028f0:	68d9      	ldr	r1, [r3, #12]
 80028f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	ea40 0301 	orr.w	r3, r0, r1
 80028fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80028fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002902:	689a      	ldr	r2, [r3, #8]
 8002904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	431a      	orrs	r2, r3
 800290c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	431a      	orrs	r2, r3
 8002914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002918:	69db      	ldr	r3, [r3, #28]
 800291a:	4313      	orrs	r3, r2
 800291c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800292c:	f021 010c 	bic.w	r1, r1, #12
 8002930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800293a:	430b      	orrs	r3, r1
 800293c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800293e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800294a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800294e:	6999      	ldr	r1, [r3, #24]
 8002950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	ea40 0301 	orr.w	r3, r0, r1
 800295a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800295c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	4b8f      	ldr	r3, [pc, #572]	; (8002ba0 <UART_SetConfig+0x2cc>)
 8002964:	429a      	cmp	r2, r3
 8002966:	d005      	beq.n	8002974 <UART_SetConfig+0xa0>
 8002968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	4b8d      	ldr	r3, [pc, #564]	; (8002ba4 <UART_SetConfig+0x2d0>)
 8002970:	429a      	cmp	r2, r3
 8002972:	d104      	bne.n	800297e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002974:	f7ff f996 	bl	8001ca4 <HAL_RCC_GetPCLK2Freq>
 8002978:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800297c:	e003      	b.n	8002986 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800297e:	f7ff f97d 	bl	8001c7c <HAL_RCC_GetPCLK1Freq>
 8002982:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800298a:	69db      	ldr	r3, [r3, #28]
 800298c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002990:	f040 810c 	bne.w	8002bac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002994:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002998:	2200      	movs	r2, #0
 800299a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800299e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80029a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80029a6:	4622      	mov	r2, r4
 80029a8:	462b      	mov	r3, r5
 80029aa:	1891      	adds	r1, r2, r2
 80029ac:	65b9      	str	r1, [r7, #88]	; 0x58
 80029ae:	415b      	adcs	r3, r3
 80029b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80029b6:	4621      	mov	r1, r4
 80029b8:	eb12 0801 	adds.w	r8, r2, r1
 80029bc:	4629      	mov	r1, r5
 80029be:	eb43 0901 	adc.w	r9, r3, r1
 80029c2:	f04f 0200 	mov.w	r2, #0
 80029c6:	f04f 0300 	mov.w	r3, #0
 80029ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80029ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029d6:	4690      	mov	r8, r2
 80029d8:	4699      	mov	r9, r3
 80029da:	4623      	mov	r3, r4
 80029dc:	eb18 0303 	adds.w	r3, r8, r3
 80029e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80029e4:	462b      	mov	r3, r5
 80029e6:	eb49 0303 	adc.w	r3, r9, r3
 80029ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80029ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80029fa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80029fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002a02:	460b      	mov	r3, r1
 8002a04:	18db      	adds	r3, r3, r3
 8002a06:	653b      	str	r3, [r7, #80]	; 0x50
 8002a08:	4613      	mov	r3, r2
 8002a0a:	eb42 0303 	adc.w	r3, r2, r3
 8002a0e:	657b      	str	r3, [r7, #84]	; 0x54
 8002a10:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002a14:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002a18:	f7fd fc3a 	bl	8000290 <__aeabi_uldivmod>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	460b      	mov	r3, r1
 8002a20:	4b61      	ldr	r3, [pc, #388]	; (8002ba8 <UART_SetConfig+0x2d4>)
 8002a22:	fba3 2302 	umull	r2, r3, r3, r2
 8002a26:	095b      	lsrs	r3, r3, #5
 8002a28:	011c      	lsls	r4, r3, #4
 8002a2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002a34:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002a38:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002a3c:	4642      	mov	r2, r8
 8002a3e:	464b      	mov	r3, r9
 8002a40:	1891      	adds	r1, r2, r2
 8002a42:	64b9      	str	r1, [r7, #72]	; 0x48
 8002a44:	415b      	adcs	r3, r3
 8002a46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a48:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002a4c:	4641      	mov	r1, r8
 8002a4e:	eb12 0a01 	adds.w	sl, r2, r1
 8002a52:	4649      	mov	r1, r9
 8002a54:	eb43 0b01 	adc.w	fp, r3, r1
 8002a58:	f04f 0200 	mov.w	r2, #0
 8002a5c:	f04f 0300 	mov.w	r3, #0
 8002a60:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002a64:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002a68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a6c:	4692      	mov	sl, r2
 8002a6e:	469b      	mov	fp, r3
 8002a70:	4643      	mov	r3, r8
 8002a72:	eb1a 0303 	adds.w	r3, sl, r3
 8002a76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002a7a:	464b      	mov	r3, r9
 8002a7c:	eb4b 0303 	adc.w	r3, fp, r3
 8002a80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002a90:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002a94:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002a98:	460b      	mov	r3, r1
 8002a9a:	18db      	adds	r3, r3, r3
 8002a9c:	643b      	str	r3, [r7, #64]	; 0x40
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	eb42 0303 	adc.w	r3, r2, r3
 8002aa4:	647b      	str	r3, [r7, #68]	; 0x44
 8002aa6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002aaa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002aae:	f7fd fbef 	bl	8000290 <__aeabi_uldivmod>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	4611      	mov	r1, r2
 8002ab8:	4b3b      	ldr	r3, [pc, #236]	; (8002ba8 <UART_SetConfig+0x2d4>)
 8002aba:	fba3 2301 	umull	r2, r3, r3, r1
 8002abe:	095b      	lsrs	r3, r3, #5
 8002ac0:	2264      	movs	r2, #100	; 0x64
 8002ac2:	fb02 f303 	mul.w	r3, r2, r3
 8002ac6:	1acb      	subs	r3, r1, r3
 8002ac8:	00db      	lsls	r3, r3, #3
 8002aca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002ace:	4b36      	ldr	r3, [pc, #216]	; (8002ba8 <UART_SetConfig+0x2d4>)
 8002ad0:	fba3 2302 	umull	r2, r3, r3, r2
 8002ad4:	095b      	lsrs	r3, r3, #5
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002adc:	441c      	add	r4, r3
 8002ade:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ae8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002aec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002af0:	4642      	mov	r2, r8
 8002af2:	464b      	mov	r3, r9
 8002af4:	1891      	adds	r1, r2, r2
 8002af6:	63b9      	str	r1, [r7, #56]	; 0x38
 8002af8:	415b      	adcs	r3, r3
 8002afa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002afc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002b00:	4641      	mov	r1, r8
 8002b02:	1851      	adds	r1, r2, r1
 8002b04:	6339      	str	r1, [r7, #48]	; 0x30
 8002b06:	4649      	mov	r1, r9
 8002b08:	414b      	adcs	r3, r1
 8002b0a:	637b      	str	r3, [r7, #52]	; 0x34
 8002b0c:	f04f 0200 	mov.w	r2, #0
 8002b10:	f04f 0300 	mov.w	r3, #0
 8002b14:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002b18:	4659      	mov	r1, fp
 8002b1a:	00cb      	lsls	r3, r1, #3
 8002b1c:	4651      	mov	r1, sl
 8002b1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b22:	4651      	mov	r1, sl
 8002b24:	00ca      	lsls	r2, r1, #3
 8002b26:	4610      	mov	r0, r2
 8002b28:	4619      	mov	r1, r3
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	4642      	mov	r2, r8
 8002b2e:	189b      	adds	r3, r3, r2
 8002b30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002b34:	464b      	mov	r3, r9
 8002b36:	460a      	mov	r2, r1
 8002b38:	eb42 0303 	adc.w	r3, r2, r3
 8002b3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002b4c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002b50:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002b54:	460b      	mov	r3, r1
 8002b56:	18db      	adds	r3, r3, r3
 8002b58:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	eb42 0303 	adc.w	r3, r2, r3
 8002b60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b66:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002b6a:	f7fd fb91 	bl	8000290 <__aeabi_uldivmod>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	460b      	mov	r3, r1
 8002b72:	4b0d      	ldr	r3, [pc, #52]	; (8002ba8 <UART_SetConfig+0x2d4>)
 8002b74:	fba3 1302 	umull	r1, r3, r3, r2
 8002b78:	095b      	lsrs	r3, r3, #5
 8002b7a:	2164      	movs	r1, #100	; 0x64
 8002b7c:	fb01 f303 	mul.w	r3, r1, r3
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	3332      	adds	r3, #50	; 0x32
 8002b86:	4a08      	ldr	r2, [pc, #32]	; (8002ba8 <UART_SetConfig+0x2d4>)
 8002b88:	fba2 2303 	umull	r2, r3, r2, r3
 8002b8c:	095b      	lsrs	r3, r3, #5
 8002b8e:	f003 0207 	and.w	r2, r3, #7
 8002b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4422      	add	r2, r4
 8002b9a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002b9c:	e106      	b.n	8002dac <UART_SetConfig+0x4d8>
 8002b9e:	bf00      	nop
 8002ba0:	40011000 	.word	0x40011000
 8002ba4:	40011400 	.word	0x40011400
 8002ba8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002bac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002bb6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002bba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002bbe:	4642      	mov	r2, r8
 8002bc0:	464b      	mov	r3, r9
 8002bc2:	1891      	adds	r1, r2, r2
 8002bc4:	6239      	str	r1, [r7, #32]
 8002bc6:	415b      	adcs	r3, r3
 8002bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8002bca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002bce:	4641      	mov	r1, r8
 8002bd0:	1854      	adds	r4, r2, r1
 8002bd2:	4649      	mov	r1, r9
 8002bd4:	eb43 0501 	adc.w	r5, r3, r1
 8002bd8:	f04f 0200 	mov.w	r2, #0
 8002bdc:	f04f 0300 	mov.w	r3, #0
 8002be0:	00eb      	lsls	r3, r5, #3
 8002be2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002be6:	00e2      	lsls	r2, r4, #3
 8002be8:	4614      	mov	r4, r2
 8002bea:	461d      	mov	r5, r3
 8002bec:	4643      	mov	r3, r8
 8002bee:	18e3      	adds	r3, r4, r3
 8002bf0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002bf4:	464b      	mov	r3, r9
 8002bf6:	eb45 0303 	adc.w	r3, r5, r3
 8002bfa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002c0a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002c0e:	f04f 0200 	mov.w	r2, #0
 8002c12:	f04f 0300 	mov.w	r3, #0
 8002c16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002c1a:	4629      	mov	r1, r5
 8002c1c:	008b      	lsls	r3, r1, #2
 8002c1e:	4621      	mov	r1, r4
 8002c20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c24:	4621      	mov	r1, r4
 8002c26:	008a      	lsls	r2, r1, #2
 8002c28:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002c2c:	f7fd fb30 	bl	8000290 <__aeabi_uldivmod>
 8002c30:	4602      	mov	r2, r0
 8002c32:	460b      	mov	r3, r1
 8002c34:	4b60      	ldr	r3, [pc, #384]	; (8002db8 <UART_SetConfig+0x4e4>)
 8002c36:	fba3 2302 	umull	r2, r3, r3, r2
 8002c3a:	095b      	lsrs	r3, r3, #5
 8002c3c:	011c      	lsls	r4, r3, #4
 8002c3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c42:	2200      	movs	r2, #0
 8002c44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002c48:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002c4c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002c50:	4642      	mov	r2, r8
 8002c52:	464b      	mov	r3, r9
 8002c54:	1891      	adds	r1, r2, r2
 8002c56:	61b9      	str	r1, [r7, #24]
 8002c58:	415b      	adcs	r3, r3
 8002c5a:	61fb      	str	r3, [r7, #28]
 8002c5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c60:	4641      	mov	r1, r8
 8002c62:	1851      	adds	r1, r2, r1
 8002c64:	6139      	str	r1, [r7, #16]
 8002c66:	4649      	mov	r1, r9
 8002c68:	414b      	adcs	r3, r1
 8002c6a:	617b      	str	r3, [r7, #20]
 8002c6c:	f04f 0200 	mov.w	r2, #0
 8002c70:	f04f 0300 	mov.w	r3, #0
 8002c74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c78:	4659      	mov	r1, fp
 8002c7a:	00cb      	lsls	r3, r1, #3
 8002c7c:	4651      	mov	r1, sl
 8002c7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c82:	4651      	mov	r1, sl
 8002c84:	00ca      	lsls	r2, r1, #3
 8002c86:	4610      	mov	r0, r2
 8002c88:	4619      	mov	r1, r3
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	4642      	mov	r2, r8
 8002c8e:	189b      	adds	r3, r3, r2
 8002c90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002c94:	464b      	mov	r3, r9
 8002c96:	460a      	mov	r2, r1
 8002c98:	eb42 0303 	adc.w	r3, r2, r3
 8002c9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	67bb      	str	r3, [r7, #120]	; 0x78
 8002caa:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002cac:	f04f 0200 	mov.w	r2, #0
 8002cb0:	f04f 0300 	mov.w	r3, #0
 8002cb4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002cb8:	4649      	mov	r1, r9
 8002cba:	008b      	lsls	r3, r1, #2
 8002cbc:	4641      	mov	r1, r8
 8002cbe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002cc2:	4641      	mov	r1, r8
 8002cc4:	008a      	lsls	r2, r1, #2
 8002cc6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002cca:	f7fd fae1 	bl	8000290 <__aeabi_uldivmod>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	4611      	mov	r1, r2
 8002cd4:	4b38      	ldr	r3, [pc, #224]	; (8002db8 <UART_SetConfig+0x4e4>)
 8002cd6:	fba3 2301 	umull	r2, r3, r3, r1
 8002cda:	095b      	lsrs	r3, r3, #5
 8002cdc:	2264      	movs	r2, #100	; 0x64
 8002cde:	fb02 f303 	mul.w	r3, r2, r3
 8002ce2:	1acb      	subs	r3, r1, r3
 8002ce4:	011b      	lsls	r3, r3, #4
 8002ce6:	3332      	adds	r3, #50	; 0x32
 8002ce8:	4a33      	ldr	r2, [pc, #204]	; (8002db8 <UART_SetConfig+0x4e4>)
 8002cea:	fba2 2303 	umull	r2, r3, r2, r3
 8002cee:	095b      	lsrs	r3, r3, #5
 8002cf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cf4:	441c      	add	r4, r3
 8002cf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	673b      	str	r3, [r7, #112]	; 0x70
 8002cfe:	677a      	str	r2, [r7, #116]	; 0x74
 8002d00:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002d04:	4642      	mov	r2, r8
 8002d06:	464b      	mov	r3, r9
 8002d08:	1891      	adds	r1, r2, r2
 8002d0a:	60b9      	str	r1, [r7, #8]
 8002d0c:	415b      	adcs	r3, r3
 8002d0e:	60fb      	str	r3, [r7, #12]
 8002d10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d14:	4641      	mov	r1, r8
 8002d16:	1851      	adds	r1, r2, r1
 8002d18:	6039      	str	r1, [r7, #0]
 8002d1a:	4649      	mov	r1, r9
 8002d1c:	414b      	adcs	r3, r1
 8002d1e:	607b      	str	r3, [r7, #4]
 8002d20:	f04f 0200 	mov.w	r2, #0
 8002d24:	f04f 0300 	mov.w	r3, #0
 8002d28:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002d2c:	4659      	mov	r1, fp
 8002d2e:	00cb      	lsls	r3, r1, #3
 8002d30:	4651      	mov	r1, sl
 8002d32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d36:	4651      	mov	r1, sl
 8002d38:	00ca      	lsls	r2, r1, #3
 8002d3a:	4610      	mov	r0, r2
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	4603      	mov	r3, r0
 8002d40:	4642      	mov	r2, r8
 8002d42:	189b      	adds	r3, r3, r2
 8002d44:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d46:	464b      	mov	r3, r9
 8002d48:	460a      	mov	r2, r1
 8002d4a:	eb42 0303 	adc.w	r3, r2, r3
 8002d4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	663b      	str	r3, [r7, #96]	; 0x60
 8002d5a:	667a      	str	r2, [r7, #100]	; 0x64
 8002d5c:	f04f 0200 	mov.w	r2, #0
 8002d60:	f04f 0300 	mov.w	r3, #0
 8002d64:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002d68:	4649      	mov	r1, r9
 8002d6a:	008b      	lsls	r3, r1, #2
 8002d6c:	4641      	mov	r1, r8
 8002d6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d72:	4641      	mov	r1, r8
 8002d74:	008a      	lsls	r2, r1, #2
 8002d76:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002d7a:	f7fd fa89 	bl	8000290 <__aeabi_uldivmod>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	460b      	mov	r3, r1
 8002d82:	4b0d      	ldr	r3, [pc, #52]	; (8002db8 <UART_SetConfig+0x4e4>)
 8002d84:	fba3 1302 	umull	r1, r3, r3, r2
 8002d88:	095b      	lsrs	r3, r3, #5
 8002d8a:	2164      	movs	r1, #100	; 0x64
 8002d8c:	fb01 f303 	mul.w	r3, r1, r3
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	011b      	lsls	r3, r3, #4
 8002d94:	3332      	adds	r3, #50	; 0x32
 8002d96:	4a08      	ldr	r2, [pc, #32]	; (8002db8 <UART_SetConfig+0x4e4>)
 8002d98:	fba2 2303 	umull	r2, r3, r2, r3
 8002d9c:	095b      	lsrs	r3, r3, #5
 8002d9e:	f003 020f 	and.w	r2, r3, #15
 8002da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4422      	add	r2, r4
 8002daa:	609a      	str	r2, [r3, #8]
}
 8002dac:	bf00      	nop
 8002dae:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002db2:	46bd      	mov	sp, r7
 8002db4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002db8:	51eb851f 	.word	0x51eb851f

08002dbc <sniprintf>:
 8002dbc:	b40c      	push	{r2, r3}
 8002dbe:	b530      	push	{r4, r5, lr}
 8002dc0:	4b17      	ldr	r3, [pc, #92]	; (8002e20 <sniprintf+0x64>)
 8002dc2:	1e0c      	subs	r4, r1, #0
 8002dc4:	681d      	ldr	r5, [r3, #0]
 8002dc6:	b09d      	sub	sp, #116	; 0x74
 8002dc8:	da08      	bge.n	8002ddc <sniprintf+0x20>
 8002dca:	238b      	movs	r3, #139	; 0x8b
 8002dcc:	602b      	str	r3, [r5, #0]
 8002dce:	f04f 30ff 	mov.w	r0, #4294967295
 8002dd2:	b01d      	add	sp, #116	; 0x74
 8002dd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002dd8:	b002      	add	sp, #8
 8002dda:	4770      	bx	lr
 8002ddc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8002de0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002de4:	bf14      	ite	ne
 8002de6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002dea:	4623      	moveq	r3, r4
 8002dec:	9304      	str	r3, [sp, #16]
 8002dee:	9307      	str	r3, [sp, #28]
 8002df0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002df4:	9002      	str	r0, [sp, #8]
 8002df6:	9006      	str	r0, [sp, #24]
 8002df8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002dfc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002dfe:	ab21      	add	r3, sp, #132	; 0x84
 8002e00:	a902      	add	r1, sp, #8
 8002e02:	4628      	mov	r0, r5
 8002e04:	9301      	str	r3, [sp, #4]
 8002e06:	f000 f9c1 	bl	800318c <_svfiprintf_r>
 8002e0a:	1c43      	adds	r3, r0, #1
 8002e0c:	bfbc      	itt	lt
 8002e0e:	238b      	movlt	r3, #139	; 0x8b
 8002e10:	602b      	strlt	r3, [r5, #0]
 8002e12:	2c00      	cmp	r4, #0
 8002e14:	d0dd      	beq.n	8002dd2 <sniprintf+0x16>
 8002e16:	9b02      	ldr	r3, [sp, #8]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	701a      	strb	r2, [r3, #0]
 8002e1c:	e7d9      	b.n	8002dd2 <sniprintf+0x16>
 8002e1e:	bf00      	nop
 8002e20:	20000058 	.word	0x20000058

08002e24 <siscanf>:
 8002e24:	b40e      	push	{r1, r2, r3}
 8002e26:	b510      	push	{r4, lr}
 8002e28:	b09f      	sub	sp, #124	; 0x7c
 8002e2a:	ac21      	add	r4, sp, #132	; 0x84
 8002e2c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8002e30:	f854 2b04 	ldr.w	r2, [r4], #4
 8002e34:	9201      	str	r2, [sp, #4]
 8002e36:	f8ad 101c 	strh.w	r1, [sp, #28]
 8002e3a:	9004      	str	r0, [sp, #16]
 8002e3c:	9008      	str	r0, [sp, #32]
 8002e3e:	f7fd f9cf 	bl	80001e0 <strlen>
 8002e42:	4b0c      	ldr	r3, [pc, #48]	; (8002e74 <siscanf+0x50>)
 8002e44:	9005      	str	r0, [sp, #20]
 8002e46:	9009      	str	r0, [sp, #36]	; 0x24
 8002e48:	930d      	str	r3, [sp, #52]	; 0x34
 8002e4a:	480b      	ldr	r0, [pc, #44]	; (8002e78 <siscanf+0x54>)
 8002e4c:	9a01      	ldr	r2, [sp, #4]
 8002e4e:	6800      	ldr	r0, [r0, #0]
 8002e50:	9403      	str	r4, [sp, #12]
 8002e52:	2300      	movs	r3, #0
 8002e54:	9311      	str	r3, [sp, #68]	; 0x44
 8002e56:	9316      	str	r3, [sp, #88]	; 0x58
 8002e58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e5c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8002e60:	a904      	add	r1, sp, #16
 8002e62:	4623      	mov	r3, r4
 8002e64:	f000 faea 	bl	800343c <__ssvfiscanf_r>
 8002e68:	b01f      	add	sp, #124	; 0x7c
 8002e6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e6e:	b003      	add	sp, #12
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	08002e7d 	.word	0x08002e7d
 8002e78:	20000058 	.word	0x20000058

08002e7c <__seofread>:
 8002e7c:	2000      	movs	r0, #0
 8002e7e:	4770      	bx	lr

08002e80 <memset>:
 8002e80:	4402      	add	r2, r0
 8002e82:	4603      	mov	r3, r0
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d100      	bne.n	8002e8a <memset+0xa>
 8002e88:	4770      	bx	lr
 8002e8a:	f803 1b01 	strb.w	r1, [r3], #1
 8002e8e:	e7f9      	b.n	8002e84 <memset+0x4>

08002e90 <__errno>:
 8002e90:	4b01      	ldr	r3, [pc, #4]	; (8002e98 <__errno+0x8>)
 8002e92:	6818      	ldr	r0, [r3, #0]
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	20000058 	.word	0x20000058

08002e9c <__libc_init_array>:
 8002e9c:	b570      	push	{r4, r5, r6, lr}
 8002e9e:	4d0d      	ldr	r5, [pc, #52]	; (8002ed4 <__libc_init_array+0x38>)
 8002ea0:	4c0d      	ldr	r4, [pc, #52]	; (8002ed8 <__libc_init_array+0x3c>)
 8002ea2:	1b64      	subs	r4, r4, r5
 8002ea4:	10a4      	asrs	r4, r4, #2
 8002ea6:	2600      	movs	r6, #0
 8002ea8:	42a6      	cmp	r6, r4
 8002eaa:	d109      	bne.n	8002ec0 <__libc_init_array+0x24>
 8002eac:	4d0b      	ldr	r5, [pc, #44]	; (8002edc <__libc_init_array+0x40>)
 8002eae:	4c0c      	ldr	r4, [pc, #48]	; (8002ee0 <__libc_init_array+0x44>)
 8002eb0:	f001 f8f6 	bl	80040a0 <_init>
 8002eb4:	1b64      	subs	r4, r4, r5
 8002eb6:	10a4      	asrs	r4, r4, #2
 8002eb8:	2600      	movs	r6, #0
 8002eba:	42a6      	cmp	r6, r4
 8002ebc:	d105      	bne.n	8002eca <__libc_init_array+0x2e>
 8002ebe:	bd70      	pop	{r4, r5, r6, pc}
 8002ec0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ec4:	4798      	blx	r3
 8002ec6:	3601      	adds	r6, #1
 8002ec8:	e7ee      	b.n	8002ea8 <__libc_init_array+0xc>
 8002eca:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ece:	4798      	blx	r3
 8002ed0:	3601      	adds	r6, #1
 8002ed2:	e7f2      	b.n	8002eba <__libc_init_array+0x1e>
 8002ed4:	08004484 	.word	0x08004484
 8002ed8:	08004484 	.word	0x08004484
 8002edc:	08004484 	.word	0x08004484
 8002ee0:	08004488 	.word	0x08004488

08002ee4 <__retarget_lock_acquire_recursive>:
 8002ee4:	4770      	bx	lr

08002ee6 <__retarget_lock_release_recursive>:
 8002ee6:	4770      	bx	lr

08002ee8 <_free_r>:
 8002ee8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002eea:	2900      	cmp	r1, #0
 8002eec:	d044      	beq.n	8002f78 <_free_r+0x90>
 8002eee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ef2:	9001      	str	r0, [sp, #4]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	f1a1 0404 	sub.w	r4, r1, #4
 8002efa:	bfb8      	it	lt
 8002efc:	18e4      	addlt	r4, r4, r3
 8002efe:	f000 f8df 	bl	80030c0 <__malloc_lock>
 8002f02:	4a1e      	ldr	r2, [pc, #120]	; (8002f7c <_free_r+0x94>)
 8002f04:	9801      	ldr	r0, [sp, #4]
 8002f06:	6813      	ldr	r3, [r2, #0]
 8002f08:	b933      	cbnz	r3, 8002f18 <_free_r+0x30>
 8002f0a:	6063      	str	r3, [r4, #4]
 8002f0c:	6014      	str	r4, [r2, #0]
 8002f0e:	b003      	add	sp, #12
 8002f10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002f14:	f000 b8da 	b.w	80030cc <__malloc_unlock>
 8002f18:	42a3      	cmp	r3, r4
 8002f1a:	d908      	bls.n	8002f2e <_free_r+0x46>
 8002f1c:	6825      	ldr	r5, [r4, #0]
 8002f1e:	1961      	adds	r1, r4, r5
 8002f20:	428b      	cmp	r3, r1
 8002f22:	bf01      	itttt	eq
 8002f24:	6819      	ldreq	r1, [r3, #0]
 8002f26:	685b      	ldreq	r3, [r3, #4]
 8002f28:	1949      	addeq	r1, r1, r5
 8002f2a:	6021      	streq	r1, [r4, #0]
 8002f2c:	e7ed      	b.n	8002f0a <_free_r+0x22>
 8002f2e:	461a      	mov	r2, r3
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	b10b      	cbz	r3, 8002f38 <_free_r+0x50>
 8002f34:	42a3      	cmp	r3, r4
 8002f36:	d9fa      	bls.n	8002f2e <_free_r+0x46>
 8002f38:	6811      	ldr	r1, [r2, #0]
 8002f3a:	1855      	adds	r5, r2, r1
 8002f3c:	42a5      	cmp	r5, r4
 8002f3e:	d10b      	bne.n	8002f58 <_free_r+0x70>
 8002f40:	6824      	ldr	r4, [r4, #0]
 8002f42:	4421      	add	r1, r4
 8002f44:	1854      	adds	r4, r2, r1
 8002f46:	42a3      	cmp	r3, r4
 8002f48:	6011      	str	r1, [r2, #0]
 8002f4a:	d1e0      	bne.n	8002f0e <_free_r+0x26>
 8002f4c:	681c      	ldr	r4, [r3, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	6053      	str	r3, [r2, #4]
 8002f52:	440c      	add	r4, r1
 8002f54:	6014      	str	r4, [r2, #0]
 8002f56:	e7da      	b.n	8002f0e <_free_r+0x26>
 8002f58:	d902      	bls.n	8002f60 <_free_r+0x78>
 8002f5a:	230c      	movs	r3, #12
 8002f5c:	6003      	str	r3, [r0, #0]
 8002f5e:	e7d6      	b.n	8002f0e <_free_r+0x26>
 8002f60:	6825      	ldr	r5, [r4, #0]
 8002f62:	1961      	adds	r1, r4, r5
 8002f64:	428b      	cmp	r3, r1
 8002f66:	bf04      	itt	eq
 8002f68:	6819      	ldreq	r1, [r3, #0]
 8002f6a:	685b      	ldreq	r3, [r3, #4]
 8002f6c:	6063      	str	r3, [r4, #4]
 8002f6e:	bf04      	itt	eq
 8002f70:	1949      	addeq	r1, r1, r5
 8002f72:	6021      	streq	r1, [r4, #0]
 8002f74:	6054      	str	r4, [r2, #4]
 8002f76:	e7ca      	b.n	8002f0e <_free_r+0x26>
 8002f78:	b003      	add	sp, #12
 8002f7a:	bd30      	pop	{r4, r5, pc}
 8002f7c:	2000028c 	.word	0x2000028c

08002f80 <sbrk_aligned>:
 8002f80:	b570      	push	{r4, r5, r6, lr}
 8002f82:	4e0e      	ldr	r6, [pc, #56]	; (8002fbc <sbrk_aligned+0x3c>)
 8002f84:	460c      	mov	r4, r1
 8002f86:	6831      	ldr	r1, [r6, #0]
 8002f88:	4605      	mov	r5, r0
 8002f8a:	b911      	cbnz	r1, 8002f92 <sbrk_aligned+0x12>
 8002f8c:	f000 ff3a 	bl	8003e04 <_sbrk_r>
 8002f90:	6030      	str	r0, [r6, #0]
 8002f92:	4621      	mov	r1, r4
 8002f94:	4628      	mov	r0, r5
 8002f96:	f000 ff35 	bl	8003e04 <_sbrk_r>
 8002f9a:	1c43      	adds	r3, r0, #1
 8002f9c:	d00a      	beq.n	8002fb4 <sbrk_aligned+0x34>
 8002f9e:	1cc4      	adds	r4, r0, #3
 8002fa0:	f024 0403 	bic.w	r4, r4, #3
 8002fa4:	42a0      	cmp	r0, r4
 8002fa6:	d007      	beq.n	8002fb8 <sbrk_aligned+0x38>
 8002fa8:	1a21      	subs	r1, r4, r0
 8002faa:	4628      	mov	r0, r5
 8002fac:	f000 ff2a 	bl	8003e04 <_sbrk_r>
 8002fb0:	3001      	adds	r0, #1
 8002fb2:	d101      	bne.n	8002fb8 <sbrk_aligned+0x38>
 8002fb4:	f04f 34ff 	mov.w	r4, #4294967295
 8002fb8:	4620      	mov	r0, r4
 8002fba:	bd70      	pop	{r4, r5, r6, pc}
 8002fbc:	20000290 	.word	0x20000290

08002fc0 <_malloc_r>:
 8002fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002fc4:	1ccd      	adds	r5, r1, #3
 8002fc6:	f025 0503 	bic.w	r5, r5, #3
 8002fca:	3508      	adds	r5, #8
 8002fcc:	2d0c      	cmp	r5, #12
 8002fce:	bf38      	it	cc
 8002fd0:	250c      	movcc	r5, #12
 8002fd2:	2d00      	cmp	r5, #0
 8002fd4:	4607      	mov	r7, r0
 8002fd6:	db01      	blt.n	8002fdc <_malloc_r+0x1c>
 8002fd8:	42a9      	cmp	r1, r5
 8002fda:	d905      	bls.n	8002fe8 <_malloc_r+0x28>
 8002fdc:	230c      	movs	r3, #12
 8002fde:	603b      	str	r3, [r7, #0]
 8002fe0:	2600      	movs	r6, #0
 8002fe2:	4630      	mov	r0, r6
 8002fe4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002fe8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80030bc <_malloc_r+0xfc>
 8002fec:	f000 f868 	bl	80030c0 <__malloc_lock>
 8002ff0:	f8d8 3000 	ldr.w	r3, [r8]
 8002ff4:	461c      	mov	r4, r3
 8002ff6:	bb5c      	cbnz	r4, 8003050 <_malloc_r+0x90>
 8002ff8:	4629      	mov	r1, r5
 8002ffa:	4638      	mov	r0, r7
 8002ffc:	f7ff ffc0 	bl	8002f80 <sbrk_aligned>
 8003000:	1c43      	adds	r3, r0, #1
 8003002:	4604      	mov	r4, r0
 8003004:	d155      	bne.n	80030b2 <_malloc_r+0xf2>
 8003006:	f8d8 4000 	ldr.w	r4, [r8]
 800300a:	4626      	mov	r6, r4
 800300c:	2e00      	cmp	r6, #0
 800300e:	d145      	bne.n	800309c <_malloc_r+0xdc>
 8003010:	2c00      	cmp	r4, #0
 8003012:	d048      	beq.n	80030a6 <_malloc_r+0xe6>
 8003014:	6823      	ldr	r3, [r4, #0]
 8003016:	4631      	mov	r1, r6
 8003018:	4638      	mov	r0, r7
 800301a:	eb04 0903 	add.w	r9, r4, r3
 800301e:	f000 fef1 	bl	8003e04 <_sbrk_r>
 8003022:	4581      	cmp	r9, r0
 8003024:	d13f      	bne.n	80030a6 <_malloc_r+0xe6>
 8003026:	6821      	ldr	r1, [r4, #0]
 8003028:	1a6d      	subs	r5, r5, r1
 800302a:	4629      	mov	r1, r5
 800302c:	4638      	mov	r0, r7
 800302e:	f7ff ffa7 	bl	8002f80 <sbrk_aligned>
 8003032:	3001      	adds	r0, #1
 8003034:	d037      	beq.n	80030a6 <_malloc_r+0xe6>
 8003036:	6823      	ldr	r3, [r4, #0]
 8003038:	442b      	add	r3, r5
 800303a:	6023      	str	r3, [r4, #0]
 800303c:	f8d8 3000 	ldr.w	r3, [r8]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d038      	beq.n	80030b6 <_malloc_r+0xf6>
 8003044:	685a      	ldr	r2, [r3, #4]
 8003046:	42a2      	cmp	r2, r4
 8003048:	d12b      	bne.n	80030a2 <_malloc_r+0xe2>
 800304a:	2200      	movs	r2, #0
 800304c:	605a      	str	r2, [r3, #4]
 800304e:	e00f      	b.n	8003070 <_malloc_r+0xb0>
 8003050:	6822      	ldr	r2, [r4, #0]
 8003052:	1b52      	subs	r2, r2, r5
 8003054:	d41f      	bmi.n	8003096 <_malloc_r+0xd6>
 8003056:	2a0b      	cmp	r2, #11
 8003058:	d917      	bls.n	800308a <_malloc_r+0xca>
 800305a:	1961      	adds	r1, r4, r5
 800305c:	42a3      	cmp	r3, r4
 800305e:	6025      	str	r5, [r4, #0]
 8003060:	bf18      	it	ne
 8003062:	6059      	strne	r1, [r3, #4]
 8003064:	6863      	ldr	r3, [r4, #4]
 8003066:	bf08      	it	eq
 8003068:	f8c8 1000 	streq.w	r1, [r8]
 800306c:	5162      	str	r2, [r4, r5]
 800306e:	604b      	str	r3, [r1, #4]
 8003070:	4638      	mov	r0, r7
 8003072:	f104 060b 	add.w	r6, r4, #11
 8003076:	f000 f829 	bl	80030cc <__malloc_unlock>
 800307a:	f026 0607 	bic.w	r6, r6, #7
 800307e:	1d23      	adds	r3, r4, #4
 8003080:	1af2      	subs	r2, r6, r3
 8003082:	d0ae      	beq.n	8002fe2 <_malloc_r+0x22>
 8003084:	1b9b      	subs	r3, r3, r6
 8003086:	50a3      	str	r3, [r4, r2]
 8003088:	e7ab      	b.n	8002fe2 <_malloc_r+0x22>
 800308a:	42a3      	cmp	r3, r4
 800308c:	6862      	ldr	r2, [r4, #4]
 800308e:	d1dd      	bne.n	800304c <_malloc_r+0x8c>
 8003090:	f8c8 2000 	str.w	r2, [r8]
 8003094:	e7ec      	b.n	8003070 <_malloc_r+0xb0>
 8003096:	4623      	mov	r3, r4
 8003098:	6864      	ldr	r4, [r4, #4]
 800309a:	e7ac      	b.n	8002ff6 <_malloc_r+0x36>
 800309c:	4634      	mov	r4, r6
 800309e:	6876      	ldr	r6, [r6, #4]
 80030a0:	e7b4      	b.n	800300c <_malloc_r+0x4c>
 80030a2:	4613      	mov	r3, r2
 80030a4:	e7cc      	b.n	8003040 <_malloc_r+0x80>
 80030a6:	230c      	movs	r3, #12
 80030a8:	603b      	str	r3, [r7, #0]
 80030aa:	4638      	mov	r0, r7
 80030ac:	f000 f80e 	bl	80030cc <__malloc_unlock>
 80030b0:	e797      	b.n	8002fe2 <_malloc_r+0x22>
 80030b2:	6025      	str	r5, [r4, #0]
 80030b4:	e7dc      	b.n	8003070 <_malloc_r+0xb0>
 80030b6:	605b      	str	r3, [r3, #4]
 80030b8:	deff      	udf	#255	; 0xff
 80030ba:	bf00      	nop
 80030bc:	2000028c 	.word	0x2000028c

080030c0 <__malloc_lock>:
 80030c0:	4801      	ldr	r0, [pc, #4]	; (80030c8 <__malloc_lock+0x8>)
 80030c2:	f7ff bf0f 	b.w	8002ee4 <__retarget_lock_acquire_recursive>
 80030c6:	bf00      	nop
 80030c8:	20000288 	.word	0x20000288

080030cc <__malloc_unlock>:
 80030cc:	4801      	ldr	r0, [pc, #4]	; (80030d4 <__malloc_unlock+0x8>)
 80030ce:	f7ff bf0a 	b.w	8002ee6 <__retarget_lock_release_recursive>
 80030d2:	bf00      	nop
 80030d4:	20000288 	.word	0x20000288

080030d8 <__ssputs_r>:
 80030d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030dc:	688e      	ldr	r6, [r1, #8]
 80030de:	461f      	mov	r7, r3
 80030e0:	42be      	cmp	r6, r7
 80030e2:	680b      	ldr	r3, [r1, #0]
 80030e4:	4682      	mov	sl, r0
 80030e6:	460c      	mov	r4, r1
 80030e8:	4690      	mov	r8, r2
 80030ea:	d82c      	bhi.n	8003146 <__ssputs_r+0x6e>
 80030ec:	898a      	ldrh	r2, [r1, #12]
 80030ee:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80030f2:	d026      	beq.n	8003142 <__ssputs_r+0x6a>
 80030f4:	6965      	ldr	r5, [r4, #20]
 80030f6:	6909      	ldr	r1, [r1, #16]
 80030f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80030fc:	eba3 0901 	sub.w	r9, r3, r1
 8003100:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003104:	1c7b      	adds	r3, r7, #1
 8003106:	444b      	add	r3, r9
 8003108:	106d      	asrs	r5, r5, #1
 800310a:	429d      	cmp	r5, r3
 800310c:	bf38      	it	cc
 800310e:	461d      	movcc	r5, r3
 8003110:	0553      	lsls	r3, r2, #21
 8003112:	d527      	bpl.n	8003164 <__ssputs_r+0x8c>
 8003114:	4629      	mov	r1, r5
 8003116:	f7ff ff53 	bl	8002fc0 <_malloc_r>
 800311a:	4606      	mov	r6, r0
 800311c:	b360      	cbz	r0, 8003178 <__ssputs_r+0xa0>
 800311e:	6921      	ldr	r1, [r4, #16]
 8003120:	464a      	mov	r2, r9
 8003122:	f000 fe7f 	bl	8003e24 <memcpy>
 8003126:	89a3      	ldrh	r3, [r4, #12]
 8003128:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800312c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003130:	81a3      	strh	r3, [r4, #12]
 8003132:	6126      	str	r6, [r4, #16]
 8003134:	6165      	str	r5, [r4, #20]
 8003136:	444e      	add	r6, r9
 8003138:	eba5 0509 	sub.w	r5, r5, r9
 800313c:	6026      	str	r6, [r4, #0]
 800313e:	60a5      	str	r5, [r4, #8]
 8003140:	463e      	mov	r6, r7
 8003142:	42be      	cmp	r6, r7
 8003144:	d900      	bls.n	8003148 <__ssputs_r+0x70>
 8003146:	463e      	mov	r6, r7
 8003148:	6820      	ldr	r0, [r4, #0]
 800314a:	4632      	mov	r2, r6
 800314c:	4641      	mov	r1, r8
 800314e:	f000 fe3e 	bl	8003dce <memmove>
 8003152:	68a3      	ldr	r3, [r4, #8]
 8003154:	1b9b      	subs	r3, r3, r6
 8003156:	60a3      	str	r3, [r4, #8]
 8003158:	6823      	ldr	r3, [r4, #0]
 800315a:	4433      	add	r3, r6
 800315c:	6023      	str	r3, [r4, #0]
 800315e:	2000      	movs	r0, #0
 8003160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003164:	462a      	mov	r2, r5
 8003166:	f000 fe6b 	bl	8003e40 <_realloc_r>
 800316a:	4606      	mov	r6, r0
 800316c:	2800      	cmp	r0, #0
 800316e:	d1e0      	bne.n	8003132 <__ssputs_r+0x5a>
 8003170:	6921      	ldr	r1, [r4, #16]
 8003172:	4650      	mov	r0, sl
 8003174:	f7ff feb8 	bl	8002ee8 <_free_r>
 8003178:	230c      	movs	r3, #12
 800317a:	f8ca 3000 	str.w	r3, [sl]
 800317e:	89a3      	ldrh	r3, [r4, #12]
 8003180:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003184:	81a3      	strh	r3, [r4, #12]
 8003186:	f04f 30ff 	mov.w	r0, #4294967295
 800318a:	e7e9      	b.n	8003160 <__ssputs_r+0x88>

0800318c <_svfiprintf_r>:
 800318c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003190:	4698      	mov	r8, r3
 8003192:	898b      	ldrh	r3, [r1, #12]
 8003194:	061b      	lsls	r3, r3, #24
 8003196:	b09d      	sub	sp, #116	; 0x74
 8003198:	4607      	mov	r7, r0
 800319a:	460d      	mov	r5, r1
 800319c:	4614      	mov	r4, r2
 800319e:	d50e      	bpl.n	80031be <_svfiprintf_r+0x32>
 80031a0:	690b      	ldr	r3, [r1, #16]
 80031a2:	b963      	cbnz	r3, 80031be <_svfiprintf_r+0x32>
 80031a4:	2140      	movs	r1, #64	; 0x40
 80031a6:	f7ff ff0b 	bl	8002fc0 <_malloc_r>
 80031aa:	6028      	str	r0, [r5, #0]
 80031ac:	6128      	str	r0, [r5, #16]
 80031ae:	b920      	cbnz	r0, 80031ba <_svfiprintf_r+0x2e>
 80031b0:	230c      	movs	r3, #12
 80031b2:	603b      	str	r3, [r7, #0]
 80031b4:	f04f 30ff 	mov.w	r0, #4294967295
 80031b8:	e0d0      	b.n	800335c <_svfiprintf_r+0x1d0>
 80031ba:	2340      	movs	r3, #64	; 0x40
 80031bc:	616b      	str	r3, [r5, #20]
 80031be:	2300      	movs	r3, #0
 80031c0:	9309      	str	r3, [sp, #36]	; 0x24
 80031c2:	2320      	movs	r3, #32
 80031c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80031c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80031cc:	2330      	movs	r3, #48	; 0x30
 80031ce:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003374 <_svfiprintf_r+0x1e8>
 80031d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80031d6:	f04f 0901 	mov.w	r9, #1
 80031da:	4623      	mov	r3, r4
 80031dc:	469a      	mov	sl, r3
 80031de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80031e2:	b10a      	cbz	r2, 80031e8 <_svfiprintf_r+0x5c>
 80031e4:	2a25      	cmp	r2, #37	; 0x25
 80031e6:	d1f9      	bne.n	80031dc <_svfiprintf_r+0x50>
 80031e8:	ebba 0b04 	subs.w	fp, sl, r4
 80031ec:	d00b      	beq.n	8003206 <_svfiprintf_r+0x7a>
 80031ee:	465b      	mov	r3, fp
 80031f0:	4622      	mov	r2, r4
 80031f2:	4629      	mov	r1, r5
 80031f4:	4638      	mov	r0, r7
 80031f6:	f7ff ff6f 	bl	80030d8 <__ssputs_r>
 80031fa:	3001      	adds	r0, #1
 80031fc:	f000 80a9 	beq.w	8003352 <_svfiprintf_r+0x1c6>
 8003200:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003202:	445a      	add	r2, fp
 8003204:	9209      	str	r2, [sp, #36]	; 0x24
 8003206:	f89a 3000 	ldrb.w	r3, [sl]
 800320a:	2b00      	cmp	r3, #0
 800320c:	f000 80a1 	beq.w	8003352 <_svfiprintf_r+0x1c6>
 8003210:	2300      	movs	r3, #0
 8003212:	f04f 32ff 	mov.w	r2, #4294967295
 8003216:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800321a:	f10a 0a01 	add.w	sl, sl, #1
 800321e:	9304      	str	r3, [sp, #16]
 8003220:	9307      	str	r3, [sp, #28]
 8003222:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003226:	931a      	str	r3, [sp, #104]	; 0x68
 8003228:	4654      	mov	r4, sl
 800322a:	2205      	movs	r2, #5
 800322c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003230:	4850      	ldr	r0, [pc, #320]	; (8003374 <_svfiprintf_r+0x1e8>)
 8003232:	f7fc ffdd 	bl	80001f0 <memchr>
 8003236:	9a04      	ldr	r2, [sp, #16]
 8003238:	b9d8      	cbnz	r0, 8003272 <_svfiprintf_r+0xe6>
 800323a:	06d0      	lsls	r0, r2, #27
 800323c:	bf44      	itt	mi
 800323e:	2320      	movmi	r3, #32
 8003240:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003244:	0711      	lsls	r1, r2, #28
 8003246:	bf44      	itt	mi
 8003248:	232b      	movmi	r3, #43	; 0x2b
 800324a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800324e:	f89a 3000 	ldrb.w	r3, [sl]
 8003252:	2b2a      	cmp	r3, #42	; 0x2a
 8003254:	d015      	beq.n	8003282 <_svfiprintf_r+0xf6>
 8003256:	9a07      	ldr	r2, [sp, #28]
 8003258:	4654      	mov	r4, sl
 800325a:	2000      	movs	r0, #0
 800325c:	f04f 0c0a 	mov.w	ip, #10
 8003260:	4621      	mov	r1, r4
 8003262:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003266:	3b30      	subs	r3, #48	; 0x30
 8003268:	2b09      	cmp	r3, #9
 800326a:	d94d      	bls.n	8003308 <_svfiprintf_r+0x17c>
 800326c:	b1b0      	cbz	r0, 800329c <_svfiprintf_r+0x110>
 800326e:	9207      	str	r2, [sp, #28]
 8003270:	e014      	b.n	800329c <_svfiprintf_r+0x110>
 8003272:	eba0 0308 	sub.w	r3, r0, r8
 8003276:	fa09 f303 	lsl.w	r3, r9, r3
 800327a:	4313      	orrs	r3, r2
 800327c:	9304      	str	r3, [sp, #16]
 800327e:	46a2      	mov	sl, r4
 8003280:	e7d2      	b.n	8003228 <_svfiprintf_r+0x9c>
 8003282:	9b03      	ldr	r3, [sp, #12]
 8003284:	1d19      	adds	r1, r3, #4
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	9103      	str	r1, [sp, #12]
 800328a:	2b00      	cmp	r3, #0
 800328c:	bfbb      	ittet	lt
 800328e:	425b      	neglt	r3, r3
 8003290:	f042 0202 	orrlt.w	r2, r2, #2
 8003294:	9307      	strge	r3, [sp, #28]
 8003296:	9307      	strlt	r3, [sp, #28]
 8003298:	bfb8      	it	lt
 800329a:	9204      	strlt	r2, [sp, #16]
 800329c:	7823      	ldrb	r3, [r4, #0]
 800329e:	2b2e      	cmp	r3, #46	; 0x2e
 80032a0:	d10c      	bne.n	80032bc <_svfiprintf_r+0x130>
 80032a2:	7863      	ldrb	r3, [r4, #1]
 80032a4:	2b2a      	cmp	r3, #42	; 0x2a
 80032a6:	d134      	bne.n	8003312 <_svfiprintf_r+0x186>
 80032a8:	9b03      	ldr	r3, [sp, #12]
 80032aa:	1d1a      	adds	r2, r3, #4
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	9203      	str	r2, [sp, #12]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	bfb8      	it	lt
 80032b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80032b8:	3402      	adds	r4, #2
 80032ba:	9305      	str	r3, [sp, #20]
 80032bc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003384 <_svfiprintf_r+0x1f8>
 80032c0:	7821      	ldrb	r1, [r4, #0]
 80032c2:	2203      	movs	r2, #3
 80032c4:	4650      	mov	r0, sl
 80032c6:	f7fc ff93 	bl	80001f0 <memchr>
 80032ca:	b138      	cbz	r0, 80032dc <_svfiprintf_r+0x150>
 80032cc:	9b04      	ldr	r3, [sp, #16]
 80032ce:	eba0 000a 	sub.w	r0, r0, sl
 80032d2:	2240      	movs	r2, #64	; 0x40
 80032d4:	4082      	lsls	r2, r0
 80032d6:	4313      	orrs	r3, r2
 80032d8:	3401      	adds	r4, #1
 80032da:	9304      	str	r3, [sp, #16]
 80032dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032e0:	4825      	ldr	r0, [pc, #148]	; (8003378 <_svfiprintf_r+0x1ec>)
 80032e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80032e6:	2206      	movs	r2, #6
 80032e8:	f7fc ff82 	bl	80001f0 <memchr>
 80032ec:	2800      	cmp	r0, #0
 80032ee:	d038      	beq.n	8003362 <_svfiprintf_r+0x1d6>
 80032f0:	4b22      	ldr	r3, [pc, #136]	; (800337c <_svfiprintf_r+0x1f0>)
 80032f2:	bb1b      	cbnz	r3, 800333c <_svfiprintf_r+0x1b0>
 80032f4:	9b03      	ldr	r3, [sp, #12]
 80032f6:	3307      	adds	r3, #7
 80032f8:	f023 0307 	bic.w	r3, r3, #7
 80032fc:	3308      	adds	r3, #8
 80032fe:	9303      	str	r3, [sp, #12]
 8003300:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003302:	4433      	add	r3, r6
 8003304:	9309      	str	r3, [sp, #36]	; 0x24
 8003306:	e768      	b.n	80031da <_svfiprintf_r+0x4e>
 8003308:	fb0c 3202 	mla	r2, ip, r2, r3
 800330c:	460c      	mov	r4, r1
 800330e:	2001      	movs	r0, #1
 8003310:	e7a6      	b.n	8003260 <_svfiprintf_r+0xd4>
 8003312:	2300      	movs	r3, #0
 8003314:	3401      	adds	r4, #1
 8003316:	9305      	str	r3, [sp, #20]
 8003318:	4619      	mov	r1, r3
 800331a:	f04f 0c0a 	mov.w	ip, #10
 800331e:	4620      	mov	r0, r4
 8003320:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003324:	3a30      	subs	r2, #48	; 0x30
 8003326:	2a09      	cmp	r2, #9
 8003328:	d903      	bls.n	8003332 <_svfiprintf_r+0x1a6>
 800332a:	2b00      	cmp	r3, #0
 800332c:	d0c6      	beq.n	80032bc <_svfiprintf_r+0x130>
 800332e:	9105      	str	r1, [sp, #20]
 8003330:	e7c4      	b.n	80032bc <_svfiprintf_r+0x130>
 8003332:	fb0c 2101 	mla	r1, ip, r1, r2
 8003336:	4604      	mov	r4, r0
 8003338:	2301      	movs	r3, #1
 800333a:	e7f0      	b.n	800331e <_svfiprintf_r+0x192>
 800333c:	ab03      	add	r3, sp, #12
 800333e:	9300      	str	r3, [sp, #0]
 8003340:	462a      	mov	r2, r5
 8003342:	4b0f      	ldr	r3, [pc, #60]	; (8003380 <_svfiprintf_r+0x1f4>)
 8003344:	a904      	add	r1, sp, #16
 8003346:	4638      	mov	r0, r7
 8003348:	f3af 8000 	nop.w
 800334c:	1c42      	adds	r2, r0, #1
 800334e:	4606      	mov	r6, r0
 8003350:	d1d6      	bne.n	8003300 <_svfiprintf_r+0x174>
 8003352:	89ab      	ldrh	r3, [r5, #12]
 8003354:	065b      	lsls	r3, r3, #25
 8003356:	f53f af2d 	bmi.w	80031b4 <_svfiprintf_r+0x28>
 800335a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800335c:	b01d      	add	sp, #116	; 0x74
 800335e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003362:	ab03      	add	r3, sp, #12
 8003364:	9300      	str	r3, [sp, #0]
 8003366:	462a      	mov	r2, r5
 8003368:	4b05      	ldr	r3, [pc, #20]	; (8003380 <_svfiprintf_r+0x1f4>)
 800336a:	a904      	add	r1, sp, #16
 800336c:	4638      	mov	r0, r7
 800336e:	f000 fa4b 	bl	8003808 <_printf_i>
 8003372:	e7eb      	b.n	800334c <_svfiprintf_r+0x1c0>
 8003374:	0800432c 	.word	0x0800432c
 8003378:	08004336 	.word	0x08004336
 800337c:	00000000 	.word	0x00000000
 8003380:	080030d9 	.word	0x080030d9
 8003384:	08004332 	.word	0x08004332

08003388 <_sungetc_r>:
 8003388:	b538      	push	{r3, r4, r5, lr}
 800338a:	1c4b      	adds	r3, r1, #1
 800338c:	4614      	mov	r4, r2
 800338e:	d103      	bne.n	8003398 <_sungetc_r+0x10>
 8003390:	f04f 35ff 	mov.w	r5, #4294967295
 8003394:	4628      	mov	r0, r5
 8003396:	bd38      	pop	{r3, r4, r5, pc}
 8003398:	8993      	ldrh	r3, [r2, #12]
 800339a:	f023 0320 	bic.w	r3, r3, #32
 800339e:	8193      	strh	r3, [r2, #12]
 80033a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80033a2:	6852      	ldr	r2, [r2, #4]
 80033a4:	b2cd      	uxtb	r5, r1
 80033a6:	b18b      	cbz	r3, 80033cc <_sungetc_r+0x44>
 80033a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80033aa:	4293      	cmp	r3, r2
 80033ac:	dd08      	ble.n	80033c0 <_sungetc_r+0x38>
 80033ae:	6823      	ldr	r3, [r4, #0]
 80033b0:	1e5a      	subs	r2, r3, #1
 80033b2:	6022      	str	r2, [r4, #0]
 80033b4:	f803 5c01 	strb.w	r5, [r3, #-1]
 80033b8:	6863      	ldr	r3, [r4, #4]
 80033ba:	3301      	adds	r3, #1
 80033bc:	6063      	str	r3, [r4, #4]
 80033be:	e7e9      	b.n	8003394 <_sungetc_r+0xc>
 80033c0:	4621      	mov	r1, r4
 80033c2:	f000 fcca 	bl	8003d5a <__submore>
 80033c6:	2800      	cmp	r0, #0
 80033c8:	d0f1      	beq.n	80033ae <_sungetc_r+0x26>
 80033ca:	e7e1      	b.n	8003390 <_sungetc_r+0x8>
 80033cc:	6921      	ldr	r1, [r4, #16]
 80033ce:	6823      	ldr	r3, [r4, #0]
 80033d0:	b151      	cbz	r1, 80033e8 <_sungetc_r+0x60>
 80033d2:	4299      	cmp	r1, r3
 80033d4:	d208      	bcs.n	80033e8 <_sungetc_r+0x60>
 80033d6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80033da:	42a9      	cmp	r1, r5
 80033dc:	d104      	bne.n	80033e8 <_sungetc_r+0x60>
 80033de:	3b01      	subs	r3, #1
 80033e0:	3201      	adds	r2, #1
 80033e2:	6023      	str	r3, [r4, #0]
 80033e4:	6062      	str	r2, [r4, #4]
 80033e6:	e7d5      	b.n	8003394 <_sungetc_r+0xc>
 80033e8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80033ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80033f0:	6363      	str	r3, [r4, #52]	; 0x34
 80033f2:	2303      	movs	r3, #3
 80033f4:	63a3      	str	r3, [r4, #56]	; 0x38
 80033f6:	4623      	mov	r3, r4
 80033f8:	f803 5f46 	strb.w	r5, [r3, #70]!
 80033fc:	6023      	str	r3, [r4, #0]
 80033fe:	2301      	movs	r3, #1
 8003400:	e7dc      	b.n	80033bc <_sungetc_r+0x34>

08003402 <__ssrefill_r>:
 8003402:	b510      	push	{r4, lr}
 8003404:	460c      	mov	r4, r1
 8003406:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8003408:	b169      	cbz	r1, 8003426 <__ssrefill_r+0x24>
 800340a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800340e:	4299      	cmp	r1, r3
 8003410:	d001      	beq.n	8003416 <__ssrefill_r+0x14>
 8003412:	f7ff fd69 	bl	8002ee8 <_free_r>
 8003416:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003418:	6063      	str	r3, [r4, #4]
 800341a:	2000      	movs	r0, #0
 800341c:	6360      	str	r0, [r4, #52]	; 0x34
 800341e:	b113      	cbz	r3, 8003426 <__ssrefill_r+0x24>
 8003420:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003422:	6023      	str	r3, [r4, #0]
 8003424:	bd10      	pop	{r4, pc}
 8003426:	6923      	ldr	r3, [r4, #16]
 8003428:	6023      	str	r3, [r4, #0]
 800342a:	2300      	movs	r3, #0
 800342c:	6063      	str	r3, [r4, #4]
 800342e:	89a3      	ldrh	r3, [r4, #12]
 8003430:	f043 0320 	orr.w	r3, r3, #32
 8003434:	81a3      	strh	r3, [r4, #12]
 8003436:	f04f 30ff 	mov.w	r0, #4294967295
 800343a:	e7f3      	b.n	8003424 <__ssrefill_r+0x22>

0800343c <__ssvfiscanf_r>:
 800343c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003440:	460c      	mov	r4, r1
 8003442:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8003446:	2100      	movs	r1, #0
 8003448:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800344c:	49a6      	ldr	r1, [pc, #664]	; (80036e8 <__ssvfiscanf_r+0x2ac>)
 800344e:	91a0      	str	r1, [sp, #640]	; 0x280
 8003450:	f10d 0804 	add.w	r8, sp, #4
 8003454:	49a5      	ldr	r1, [pc, #660]	; (80036ec <__ssvfiscanf_r+0x2b0>)
 8003456:	4fa6      	ldr	r7, [pc, #664]	; (80036f0 <__ssvfiscanf_r+0x2b4>)
 8003458:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80036f4 <__ssvfiscanf_r+0x2b8>
 800345c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8003460:	4606      	mov	r6, r0
 8003462:	91a1      	str	r1, [sp, #644]	; 0x284
 8003464:	9300      	str	r3, [sp, #0]
 8003466:	7813      	ldrb	r3, [r2, #0]
 8003468:	2b00      	cmp	r3, #0
 800346a:	f000 815a 	beq.w	8003722 <__ssvfiscanf_r+0x2e6>
 800346e:	5cf9      	ldrb	r1, [r7, r3]
 8003470:	f011 0108 	ands.w	r1, r1, #8
 8003474:	f102 0501 	add.w	r5, r2, #1
 8003478:	d019      	beq.n	80034ae <__ssvfiscanf_r+0x72>
 800347a:	6863      	ldr	r3, [r4, #4]
 800347c:	2b00      	cmp	r3, #0
 800347e:	dd0f      	ble.n	80034a0 <__ssvfiscanf_r+0x64>
 8003480:	6823      	ldr	r3, [r4, #0]
 8003482:	781a      	ldrb	r2, [r3, #0]
 8003484:	5cba      	ldrb	r2, [r7, r2]
 8003486:	0712      	lsls	r2, r2, #28
 8003488:	d401      	bmi.n	800348e <__ssvfiscanf_r+0x52>
 800348a:	462a      	mov	r2, r5
 800348c:	e7eb      	b.n	8003466 <__ssvfiscanf_r+0x2a>
 800348e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003490:	3201      	adds	r2, #1
 8003492:	9245      	str	r2, [sp, #276]	; 0x114
 8003494:	6862      	ldr	r2, [r4, #4]
 8003496:	3301      	adds	r3, #1
 8003498:	3a01      	subs	r2, #1
 800349a:	6062      	str	r2, [r4, #4]
 800349c:	6023      	str	r3, [r4, #0]
 800349e:	e7ec      	b.n	800347a <__ssvfiscanf_r+0x3e>
 80034a0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80034a2:	4621      	mov	r1, r4
 80034a4:	4630      	mov	r0, r6
 80034a6:	4798      	blx	r3
 80034a8:	2800      	cmp	r0, #0
 80034aa:	d0e9      	beq.n	8003480 <__ssvfiscanf_r+0x44>
 80034ac:	e7ed      	b.n	800348a <__ssvfiscanf_r+0x4e>
 80034ae:	2b25      	cmp	r3, #37	; 0x25
 80034b0:	d012      	beq.n	80034d8 <__ssvfiscanf_r+0x9c>
 80034b2:	469a      	mov	sl, r3
 80034b4:	6863      	ldr	r3, [r4, #4]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	f340 8091 	ble.w	80035de <__ssvfiscanf_r+0x1a2>
 80034bc:	6822      	ldr	r2, [r4, #0]
 80034be:	7813      	ldrb	r3, [r2, #0]
 80034c0:	4553      	cmp	r3, sl
 80034c2:	f040 812e 	bne.w	8003722 <__ssvfiscanf_r+0x2e6>
 80034c6:	6863      	ldr	r3, [r4, #4]
 80034c8:	3b01      	subs	r3, #1
 80034ca:	6063      	str	r3, [r4, #4]
 80034cc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80034ce:	3201      	adds	r2, #1
 80034d0:	3301      	adds	r3, #1
 80034d2:	6022      	str	r2, [r4, #0]
 80034d4:	9345      	str	r3, [sp, #276]	; 0x114
 80034d6:	e7d8      	b.n	800348a <__ssvfiscanf_r+0x4e>
 80034d8:	9141      	str	r1, [sp, #260]	; 0x104
 80034da:	9143      	str	r1, [sp, #268]	; 0x10c
 80034dc:	7853      	ldrb	r3, [r2, #1]
 80034de:	2b2a      	cmp	r3, #42	; 0x2a
 80034e0:	bf02      	ittt	eq
 80034e2:	2310      	moveq	r3, #16
 80034e4:	1c95      	addeq	r5, r2, #2
 80034e6:	9341      	streq	r3, [sp, #260]	; 0x104
 80034e8:	220a      	movs	r2, #10
 80034ea:	46aa      	mov	sl, r5
 80034ec:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80034f0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80034f4:	2b09      	cmp	r3, #9
 80034f6:	d91c      	bls.n	8003532 <__ssvfiscanf_r+0xf6>
 80034f8:	487e      	ldr	r0, [pc, #504]	; (80036f4 <__ssvfiscanf_r+0x2b8>)
 80034fa:	2203      	movs	r2, #3
 80034fc:	f7fc fe78 	bl	80001f0 <memchr>
 8003500:	b138      	cbz	r0, 8003512 <__ssvfiscanf_r+0xd6>
 8003502:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003504:	eba0 0009 	sub.w	r0, r0, r9
 8003508:	2301      	movs	r3, #1
 800350a:	4083      	lsls	r3, r0
 800350c:	4313      	orrs	r3, r2
 800350e:	9341      	str	r3, [sp, #260]	; 0x104
 8003510:	4655      	mov	r5, sl
 8003512:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003516:	2b78      	cmp	r3, #120	; 0x78
 8003518:	d806      	bhi.n	8003528 <__ssvfiscanf_r+0xec>
 800351a:	2b57      	cmp	r3, #87	; 0x57
 800351c:	d810      	bhi.n	8003540 <__ssvfiscanf_r+0x104>
 800351e:	2b25      	cmp	r3, #37	; 0x25
 8003520:	d0c7      	beq.n	80034b2 <__ssvfiscanf_r+0x76>
 8003522:	d857      	bhi.n	80035d4 <__ssvfiscanf_r+0x198>
 8003524:	2b00      	cmp	r3, #0
 8003526:	d065      	beq.n	80035f4 <__ssvfiscanf_r+0x1b8>
 8003528:	2303      	movs	r3, #3
 800352a:	9347      	str	r3, [sp, #284]	; 0x11c
 800352c:	230a      	movs	r3, #10
 800352e:	9342      	str	r3, [sp, #264]	; 0x108
 8003530:	e076      	b.n	8003620 <__ssvfiscanf_r+0x1e4>
 8003532:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8003534:	fb02 1103 	mla	r1, r2, r3, r1
 8003538:	3930      	subs	r1, #48	; 0x30
 800353a:	9143      	str	r1, [sp, #268]	; 0x10c
 800353c:	4655      	mov	r5, sl
 800353e:	e7d4      	b.n	80034ea <__ssvfiscanf_r+0xae>
 8003540:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8003544:	2a20      	cmp	r2, #32
 8003546:	d8ef      	bhi.n	8003528 <__ssvfiscanf_r+0xec>
 8003548:	a101      	add	r1, pc, #4	; (adr r1, 8003550 <__ssvfiscanf_r+0x114>)
 800354a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800354e:	bf00      	nop
 8003550:	08003603 	.word	0x08003603
 8003554:	08003529 	.word	0x08003529
 8003558:	08003529 	.word	0x08003529
 800355c:	08003661 	.word	0x08003661
 8003560:	08003529 	.word	0x08003529
 8003564:	08003529 	.word	0x08003529
 8003568:	08003529 	.word	0x08003529
 800356c:	08003529 	.word	0x08003529
 8003570:	08003529 	.word	0x08003529
 8003574:	08003529 	.word	0x08003529
 8003578:	08003529 	.word	0x08003529
 800357c:	08003677 	.word	0x08003677
 8003580:	0800365d 	.word	0x0800365d
 8003584:	080035db 	.word	0x080035db
 8003588:	080035db 	.word	0x080035db
 800358c:	080035db 	.word	0x080035db
 8003590:	08003529 	.word	0x08003529
 8003594:	08003619 	.word	0x08003619
 8003598:	08003529 	.word	0x08003529
 800359c:	08003529 	.word	0x08003529
 80035a0:	08003529 	.word	0x08003529
 80035a4:	08003529 	.word	0x08003529
 80035a8:	08003687 	.word	0x08003687
 80035ac:	08003655 	.word	0x08003655
 80035b0:	080035fb 	.word	0x080035fb
 80035b4:	08003529 	.word	0x08003529
 80035b8:	08003529 	.word	0x08003529
 80035bc:	08003683 	.word	0x08003683
 80035c0:	08003529 	.word	0x08003529
 80035c4:	0800365d 	.word	0x0800365d
 80035c8:	08003529 	.word	0x08003529
 80035cc:	08003529 	.word	0x08003529
 80035d0:	08003603 	.word	0x08003603
 80035d4:	3b45      	subs	r3, #69	; 0x45
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d8a6      	bhi.n	8003528 <__ssvfiscanf_r+0xec>
 80035da:	2305      	movs	r3, #5
 80035dc:	e01f      	b.n	800361e <__ssvfiscanf_r+0x1e2>
 80035de:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80035e0:	4621      	mov	r1, r4
 80035e2:	4630      	mov	r0, r6
 80035e4:	4798      	blx	r3
 80035e6:	2800      	cmp	r0, #0
 80035e8:	f43f af68 	beq.w	80034bc <__ssvfiscanf_r+0x80>
 80035ec:	9844      	ldr	r0, [sp, #272]	; 0x110
 80035ee:	2800      	cmp	r0, #0
 80035f0:	f040 808d 	bne.w	800370e <__ssvfiscanf_r+0x2d2>
 80035f4:	f04f 30ff 	mov.w	r0, #4294967295
 80035f8:	e08f      	b.n	800371a <__ssvfiscanf_r+0x2de>
 80035fa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80035fc:	f042 0220 	orr.w	r2, r2, #32
 8003600:	9241      	str	r2, [sp, #260]	; 0x104
 8003602:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003604:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003608:	9241      	str	r2, [sp, #260]	; 0x104
 800360a:	2210      	movs	r2, #16
 800360c:	2b6f      	cmp	r3, #111	; 0x6f
 800360e:	9242      	str	r2, [sp, #264]	; 0x108
 8003610:	bf34      	ite	cc
 8003612:	2303      	movcc	r3, #3
 8003614:	2304      	movcs	r3, #4
 8003616:	e002      	b.n	800361e <__ssvfiscanf_r+0x1e2>
 8003618:	2300      	movs	r3, #0
 800361a:	9342      	str	r3, [sp, #264]	; 0x108
 800361c:	2303      	movs	r3, #3
 800361e:	9347      	str	r3, [sp, #284]	; 0x11c
 8003620:	6863      	ldr	r3, [r4, #4]
 8003622:	2b00      	cmp	r3, #0
 8003624:	dd3d      	ble.n	80036a2 <__ssvfiscanf_r+0x266>
 8003626:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003628:	0659      	lsls	r1, r3, #25
 800362a:	d404      	bmi.n	8003636 <__ssvfiscanf_r+0x1fa>
 800362c:	6823      	ldr	r3, [r4, #0]
 800362e:	781a      	ldrb	r2, [r3, #0]
 8003630:	5cba      	ldrb	r2, [r7, r2]
 8003632:	0712      	lsls	r2, r2, #28
 8003634:	d43c      	bmi.n	80036b0 <__ssvfiscanf_r+0x274>
 8003636:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8003638:	2b02      	cmp	r3, #2
 800363a:	dc4b      	bgt.n	80036d4 <__ssvfiscanf_r+0x298>
 800363c:	466b      	mov	r3, sp
 800363e:	4622      	mov	r2, r4
 8003640:	a941      	add	r1, sp, #260	; 0x104
 8003642:	4630      	mov	r0, r6
 8003644:	f000 fa02 	bl	8003a4c <_scanf_chars>
 8003648:	2801      	cmp	r0, #1
 800364a:	d06a      	beq.n	8003722 <__ssvfiscanf_r+0x2e6>
 800364c:	2802      	cmp	r0, #2
 800364e:	f47f af1c 	bne.w	800348a <__ssvfiscanf_r+0x4e>
 8003652:	e7cb      	b.n	80035ec <__ssvfiscanf_r+0x1b0>
 8003654:	2308      	movs	r3, #8
 8003656:	9342      	str	r3, [sp, #264]	; 0x108
 8003658:	2304      	movs	r3, #4
 800365a:	e7e0      	b.n	800361e <__ssvfiscanf_r+0x1e2>
 800365c:	220a      	movs	r2, #10
 800365e:	e7d5      	b.n	800360c <__ssvfiscanf_r+0x1d0>
 8003660:	4629      	mov	r1, r5
 8003662:	4640      	mov	r0, r8
 8003664:	f000 fb40 	bl	8003ce8 <__sccl>
 8003668:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800366a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800366e:	9341      	str	r3, [sp, #260]	; 0x104
 8003670:	4605      	mov	r5, r0
 8003672:	2301      	movs	r3, #1
 8003674:	e7d3      	b.n	800361e <__ssvfiscanf_r+0x1e2>
 8003676:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003678:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800367c:	9341      	str	r3, [sp, #260]	; 0x104
 800367e:	2300      	movs	r3, #0
 8003680:	e7cd      	b.n	800361e <__ssvfiscanf_r+0x1e2>
 8003682:	2302      	movs	r3, #2
 8003684:	e7cb      	b.n	800361e <__ssvfiscanf_r+0x1e2>
 8003686:	9841      	ldr	r0, [sp, #260]	; 0x104
 8003688:	06c3      	lsls	r3, r0, #27
 800368a:	f53f aefe 	bmi.w	800348a <__ssvfiscanf_r+0x4e>
 800368e:	9b00      	ldr	r3, [sp, #0]
 8003690:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003692:	1d19      	adds	r1, r3, #4
 8003694:	9100      	str	r1, [sp, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	07c0      	lsls	r0, r0, #31
 800369a:	bf4c      	ite	mi
 800369c:	801a      	strhmi	r2, [r3, #0]
 800369e:	601a      	strpl	r2, [r3, #0]
 80036a0:	e6f3      	b.n	800348a <__ssvfiscanf_r+0x4e>
 80036a2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80036a4:	4621      	mov	r1, r4
 80036a6:	4630      	mov	r0, r6
 80036a8:	4798      	blx	r3
 80036aa:	2800      	cmp	r0, #0
 80036ac:	d0bb      	beq.n	8003626 <__ssvfiscanf_r+0x1ea>
 80036ae:	e79d      	b.n	80035ec <__ssvfiscanf_r+0x1b0>
 80036b0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80036b2:	3201      	adds	r2, #1
 80036b4:	9245      	str	r2, [sp, #276]	; 0x114
 80036b6:	6862      	ldr	r2, [r4, #4]
 80036b8:	3a01      	subs	r2, #1
 80036ba:	2a00      	cmp	r2, #0
 80036bc:	6062      	str	r2, [r4, #4]
 80036be:	dd02      	ble.n	80036c6 <__ssvfiscanf_r+0x28a>
 80036c0:	3301      	adds	r3, #1
 80036c2:	6023      	str	r3, [r4, #0]
 80036c4:	e7b2      	b.n	800362c <__ssvfiscanf_r+0x1f0>
 80036c6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80036c8:	4621      	mov	r1, r4
 80036ca:	4630      	mov	r0, r6
 80036cc:	4798      	blx	r3
 80036ce:	2800      	cmp	r0, #0
 80036d0:	d0ac      	beq.n	800362c <__ssvfiscanf_r+0x1f0>
 80036d2:	e78b      	b.n	80035ec <__ssvfiscanf_r+0x1b0>
 80036d4:	2b04      	cmp	r3, #4
 80036d6:	dc0f      	bgt.n	80036f8 <__ssvfiscanf_r+0x2bc>
 80036d8:	466b      	mov	r3, sp
 80036da:	4622      	mov	r2, r4
 80036dc:	a941      	add	r1, sp, #260	; 0x104
 80036de:	4630      	mov	r0, r6
 80036e0:	f000 fa0e 	bl	8003b00 <_scanf_i>
 80036e4:	e7b0      	b.n	8003648 <__ssvfiscanf_r+0x20c>
 80036e6:	bf00      	nop
 80036e8:	08003389 	.word	0x08003389
 80036ec:	08003403 	.word	0x08003403
 80036f0:	0800437b 	.word	0x0800437b
 80036f4:	08004332 	.word	0x08004332
 80036f8:	4b0b      	ldr	r3, [pc, #44]	; (8003728 <__ssvfiscanf_r+0x2ec>)
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	f43f aec5 	beq.w	800348a <__ssvfiscanf_r+0x4e>
 8003700:	466b      	mov	r3, sp
 8003702:	4622      	mov	r2, r4
 8003704:	a941      	add	r1, sp, #260	; 0x104
 8003706:	4630      	mov	r0, r6
 8003708:	f3af 8000 	nop.w
 800370c:	e79c      	b.n	8003648 <__ssvfiscanf_r+0x20c>
 800370e:	89a3      	ldrh	r3, [r4, #12]
 8003710:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003714:	bf18      	it	ne
 8003716:	f04f 30ff 	movne.w	r0, #4294967295
 800371a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800371e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003722:	9844      	ldr	r0, [sp, #272]	; 0x110
 8003724:	e7f9      	b.n	800371a <__ssvfiscanf_r+0x2de>
 8003726:	bf00      	nop
 8003728:	00000000 	.word	0x00000000

0800372c <_printf_common>:
 800372c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003730:	4616      	mov	r6, r2
 8003732:	4699      	mov	r9, r3
 8003734:	688a      	ldr	r2, [r1, #8]
 8003736:	690b      	ldr	r3, [r1, #16]
 8003738:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800373c:	4293      	cmp	r3, r2
 800373e:	bfb8      	it	lt
 8003740:	4613      	movlt	r3, r2
 8003742:	6033      	str	r3, [r6, #0]
 8003744:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003748:	4607      	mov	r7, r0
 800374a:	460c      	mov	r4, r1
 800374c:	b10a      	cbz	r2, 8003752 <_printf_common+0x26>
 800374e:	3301      	adds	r3, #1
 8003750:	6033      	str	r3, [r6, #0]
 8003752:	6823      	ldr	r3, [r4, #0]
 8003754:	0699      	lsls	r1, r3, #26
 8003756:	bf42      	ittt	mi
 8003758:	6833      	ldrmi	r3, [r6, #0]
 800375a:	3302      	addmi	r3, #2
 800375c:	6033      	strmi	r3, [r6, #0]
 800375e:	6825      	ldr	r5, [r4, #0]
 8003760:	f015 0506 	ands.w	r5, r5, #6
 8003764:	d106      	bne.n	8003774 <_printf_common+0x48>
 8003766:	f104 0a19 	add.w	sl, r4, #25
 800376a:	68e3      	ldr	r3, [r4, #12]
 800376c:	6832      	ldr	r2, [r6, #0]
 800376e:	1a9b      	subs	r3, r3, r2
 8003770:	42ab      	cmp	r3, r5
 8003772:	dc26      	bgt.n	80037c2 <_printf_common+0x96>
 8003774:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003778:	1e13      	subs	r3, r2, #0
 800377a:	6822      	ldr	r2, [r4, #0]
 800377c:	bf18      	it	ne
 800377e:	2301      	movne	r3, #1
 8003780:	0692      	lsls	r2, r2, #26
 8003782:	d42b      	bmi.n	80037dc <_printf_common+0xb0>
 8003784:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003788:	4649      	mov	r1, r9
 800378a:	4638      	mov	r0, r7
 800378c:	47c0      	blx	r8
 800378e:	3001      	adds	r0, #1
 8003790:	d01e      	beq.n	80037d0 <_printf_common+0xa4>
 8003792:	6823      	ldr	r3, [r4, #0]
 8003794:	6922      	ldr	r2, [r4, #16]
 8003796:	f003 0306 	and.w	r3, r3, #6
 800379a:	2b04      	cmp	r3, #4
 800379c:	bf02      	ittt	eq
 800379e:	68e5      	ldreq	r5, [r4, #12]
 80037a0:	6833      	ldreq	r3, [r6, #0]
 80037a2:	1aed      	subeq	r5, r5, r3
 80037a4:	68a3      	ldr	r3, [r4, #8]
 80037a6:	bf0c      	ite	eq
 80037a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80037ac:	2500      	movne	r5, #0
 80037ae:	4293      	cmp	r3, r2
 80037b0:	bfc4      	itt	gt
 80037b2:	1a9b      	subgt	r3, r3, r2
 80037b4:	18ed      	addgt	r5, r5, r3
 80037b6:	2600      	movs	r6, #0
 80037b8:	341a      	adds	r4, #26
 80037ba:	42b5      	cmp	r5, r6
 80037bc:	d11a      	bne.n	80037f4 <_printf_common+0xc8>
 80037be:	2000      	movs	r0, #0
 80037c0:	e008      	b.n	80037d4 <_printf_common+0xa8>
 80037c2:	2301      	movs	r3, #1
 80037c4:	4652      	mov	r2, sl
 80037c6:	4649      	mov	r1, r9
 80037c8:	4638      	mov	r0, r7
 80037ca:	47c0      	blx	r8
 80037cc:	3001      	adds	r0, #1
 80037ce:	d103      	bne.n	80037d8 <_printf_common+0xac>
 80037d0:	f04f 30ff 	mov.w	r0, #4294967295
 80037d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037d8:	3501      	adds	r5, #1
 80037da:	e7c6      	b.n	800376a <_printf_common+0x3e>
 80037dc:	18e1      	adds	r1, r4, r3
 80037de:	1c5a      	adds	r2, r3, #1
 80037e0:	2030      	movs	r0, #48	; 0x30
 80037e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80037e6:	4422      	add	r2, r4
 80037e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80037ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80037f0:	3302      	adds	r3, #2
 80037f2:	e7c7      	b.n	8003784 <_printf_common+0x58>
 80037f4:	2301      	movs	r3, #1
 80037f6:	4622      	mov	r2, r4
 80037f8:	4649      	mov	r1, r9
 80037fa:	4638      	mov	r0, r7
 80037fc:	47c0      	blx	r8
 80037fe:	3001      	adds	r0, #1
 8003800:	d0e6      	beq.n	80037d0 <_printf_common+0xa4>
 8003802:	3601      	adds	r6, #1
 8003804:	e7d9      	b.n	80037ba <_printf_common+0x8e>
	...

08003808 <_printf_i>:
 8003808:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800380c:	7e0f      	ldrb	r7, [r1, #24]
 800380e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003810:	2f78      	cmp	r7, #120	; 0x78
 8003812:	4691      	mov	r9, r2
 8003814:	4680      	mov	r8, r0
 8003816:	460c      	mov	r4, r1
 8003818:	469a      	mov	sl, r3
 800381a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800381e:	d807      	bhi.n	8003830 <_printf_i+0x28>
 8003820:	2f62      	cmp	r7, #98	; 0x62
 8003822:	d80a      	bhi.n	800383a <_printf_i+0x32>
 8003824:	2f00      	cmp	r7, #0
 8003826:	f000 80d4 	beq.w	80039d2 <_printf_i+0x1ca>
 800382a:	2f58      	cmp	r7, #88	; 0x58
 800382c:	f000 80c0 	beq.w	80039b0 <_printf_i+0x1a8>
 8003830:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003834:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003838:	e03a      	b.n	80038b0 <_printf_i+0xa8>
 800383a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800383e:	2b15      	cmp	r3, #21
 8003840:	d8f6      	bhi.n	8003830 <_printf_i+0x28>
 8003842:	a101      	add	r1, pc, #4	; (adr r1, 8003848 <_printf_i+0x40>)
 8003844:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003848:	080038a1 	.word	0x080038a1
 800384c:	080038b5 	.word	0x080038b5
 8003850:	08003831 	.word	0x08003831
 8003854:	08003831 	.word	0x08003831
 8003858:	08003831 	.word	0x08003831
 800385c:	08003831 	.word	0x08003831
 8003860:	080038b5 	.word	0x080038b5
 8003864:	08003831 	.word	0x08003831
 8003868:	08003831 	.word	0x08003831
 800386c:	08003831 	.word	0x08003831
 8003870:	08003831 	.word	0x08003831
 8003874:	080039b9 	.word	0x080039b9
 8003878:	080038e1 	.word	0x080038e1
 800387c:	08003973 	.word	0x08003973
 8003880:	08003831 	.word	0x08003831
 8003884:	08003831 	.word	0x08003831
 8003888:	080039db 	.word	0x080039db
 800388c:	08003831 	.word	0x08003831
 8003890:	080038e1 	.word	0x080038e1
 8003894:	08003831 	.word	0x08003831
 8003898:	08003831 	.word	0x08003831
 800389c:	0800397b 	.word	0x0800397b
 80038a0:	682b      	ldr	r3, [r5, #0]
 80038a2:	1d1a      	adds	r2, r3, #4
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	602a      	str	r2, [r5, #0]
 80038a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80038ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80038b0:	2301      	movs	r3, #1
 80038b2:	e09f      	b.n	80039f4 <_printf_i+0x1ec>
 80038b4:	6820      	ldr	r0, [r4, #0]
 80038b6:	682b      	ldr	r3, [r5, #0]
 80038b8:	0607      	lsls	r7, r0, #24
 80038ba:	f103 0104 	add.w	r1, r3, #4
 80038be:	6029      	str	r1, [r5, #0]
 80038c0:	d501      	bpl.n	80038c6 <_printf_i+0xbe>
 80038c2:	681e      	ldr	r6, [r3, #0]
 80038c4:	e003      	b.n	80038ce <_printf_i+0xc6>
 80038c6:	0646      	lsls	r6, r0, #25
 80038c8:	d5fb      	bpl.n	80038c2 <_printf_i+0xba>
 80038ca:	f9b3 6000 	ldrsh.w	r6, [r3]
 80038ce:	2e00      	cmp	r6, #0
 80038d0:	da03      	bge.n	80038da <_printf_i+0xd2>
 80038d2:	232d      	movs	r3, #45	; 0x2d
 80038d4:	4276      	negs	r6, r6
 80038d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038da:	485a      	ldr	r0, [pc, #360]	; (8003a44 <_printf_i+0x23c>)
 80038dc:	230a      	movs	r3, #10
 80038de:	e012      	b.n	8003906 <_printf_i+0xfe>
 80038e0:	682b      	ldr	r3, [r5, #0]
 80038e2:	6820      	ldr	r0, [r4, #0]
 80038e4:	1d19      	adds	r1, r3, #4
 80038e6:	6029      	str	r1, [r5, #0]
 80038e8:	0605      	lsls	r5, r0, #24
 80038ea:	d501      	bpl.n	80038f0 <_printf_i+0xe8>
 80038ec:	681e      	ldr	r6, [r3, #0]
 80038ee:	e002      	b.n	80038f6 <_printf_i+0xee>
 80038f0:	0641      	lsls	r1, r0, #25
 80038f2:	d5fb      	bpl.n	80038ec <_printf_i+0xe4>
 80038f4:	881e      	ldrh	r6, [r3, #0]
 80038f6:	4853      	ldr	r0, [pc, #332]	; (8003a44 <_printf_i+0x23c>)
 80038f8:	2f6f      	cmp	r7, #111	; 0x6f
 80038fa:	bf0c      	ite	eq
 80038fc:	2308      	moveq	r3, #8
 80038fe:	230a      	movne	r3, #10
 8003900:	2100      	movs	r1, #0
 8003902:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003906:	6865      	ldr	r5, [r4, #4]
 8003908:	60a5      	str	r5, [r4, #8]
 800390a:	2d00      	cmp	r5, #0
 800390c:	bfa2      	ittt	ge
 800390e:	6821      	ldrge	r1, [r4, #0]
 8003910:	f021 0104 	bicge.w	r1, r1, #4
 8003914:	6021      	strge	r1, [r4, #0]
 8003916:	b90e      	cbnz	r6, 800391c <_printf_i+0x114>
 8003918:	2d00      	cmp	r5, #0
 800391a:	d04b      	beq.n	80039b4 <_printf_i+0x1ac>
 800391c:	4615      	mov	r5, r2
 800391e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003922:	fb03 6711 	mls	r7, r3, r1, r6
 8003926:	5dc7      	ldrb	r7, [r0, r7]
 8003928:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800392c:	4637      	mov	r7, r6
 800392e:	42bb      	cmp	r3, r7
 8003930:	460e      	mov	r6, r1
 8003932:	d9f4      	bls.n	800391e <_printf_i+0x116>
 8003934:	2b08      	cmp	r3, #8
 8003936:	d10b      	bne.n	8003950 <_printf_i+0x148>
 8003938:	6823      	ldr	r3, [r4, #0]
 800393a:	07de      	lsls	r6, r3, #31
 800393c:	d508      	bpl.n	8003950 <_printf_i+0x148>
 800393e:	6923      	ldr	r3, [r4, #16]
 8003940:	6861      	ldr	r1, [r4, #4]
 8003942:	4299      	cmp	r1, r3
 8003944:	bfde      	ittt	le
 8003946:	2330      	movle	r3, #48	; 0x30
 8003948:	f805 3c01 	strble.w	r3, [r5, #-1]
 800394c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003950:	1b52      	subs	r2, r2, r5
 8003952:	6122      	str	r2, [r4, #16]
 8003954:	f8cd a000 	str.w	sl, [sp]
 8003958:	464b      	mov	r3, r9
 800395a:	aa03      	add	r2, sp, #12
 800395c:	4621      	mov	r1, r4
 800395e:	4640      	mov	r0, r8
 8003960:	f7ff fee4 	bl	800372c <_printf_common>
 8003964:	3001      	adds	r0, #1
 8003966:	d14a      	bne.n	80039fe <_printf_i+0x1f6>
 8003968:	f04f 30ff 	mov.w	r0, #4294967295
 800396c:	b004      	add	sp, #16
 800396e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003972:	6823      	ldr	r3, [r4, #0]
 8003974:	f043 0320 	orr.w	r3, r3, #32
 8003978:	6023      	str	r3, [r4, #0]
 800397a:	4833      	ldr	r0, [pc, #204]	; (8003a48 <_printf_i+0x240>)
 800397c:	2778      	movs	r7, #120	; 0x78
 800397e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003982:	6823      	ldr	r3, [r4, #0]
 8003984:	6829      	ldr	r1, [r5, #0]
 8003986:	061f      	lsls	r7, r3, #24
 8003988:	f851 6b04 	ldr.w	r6, [r1], #4
 800398c:	d402      	bmi.n	8003994 <_printf_i+0x18c>
 800398e:	065f      	lsls	r7, r3, #25
 8003990:	bf48      	it	mi
 8003992:	b2b6      	uxthmi	r6, r6
 8003994:	07df      	lsls	r7, r3, #31
 8003996:	bf48      	it	mi
 8003998:	f043 0320 	orrmi.w	r3, r3, #32
 800399c:	6029      	str	r1, [r5, #0]
 800399e:	bf48      	it	mi
 80039a0:	6023      	strmi	r3, [r4, #0]
 80039a2:	b91e      	cbnz	r6, 80039ac <_printf_i+0x1a4>
 80039a4:	6823      	ldr	r3, [r4, #0]
 80039a6:	f023 0320 	bic.w	r3, r3, #32
 80039aa:	6023      	str	r3, [r4, #0]
 80039ac:	2310      	movs	r3, #16
 80039ae:	e7a7      	b.n	8003900 <_printf_i+0xf8>
 80039b0:	4824      	ldr	r0, [pc, #144]	; (8003a44 <_printf_i+0x23c>)
 80039b2:	e7e4      	b.n	800397e <_printf_i+0x176>
 80039b4:	4615      	mov	r5, r2
 80039b6:	e7bd      	b.n	8003934 <_printf_i+0x12c>
 80039b8:	682b      	ldr	r3, [r5, #0]
 80039ba:	6826      	ldr	r6, [r4, #0]
 80039bc:	6961      	ldr	r1, [r4, #20]
 80039be:	1d18      	adds	r0, r3, #4
 80039c0:	6028      	str	r0, [r5, #0]
 80039c2:	0635      	lsls	r5, r6, #24
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	d501      	bpl.n	80039cc <_printf_i+0x1c4>
 80039c8:	6019      	str	r1, [r3, #0]
 80039ca:	e002      	b.n	80039d2 <_printf_i+0x1ca>
 80039cc:	0670      	lsls	r0, r6, #25
 80039ce:	d5fb      	bpl.n	80039c8 <_printf_i+0x1c0>
 80039d0:	8019      	strh	r1, [r3, #0]
 80039d2:	2300      	movs	r3, #0
 80039d4:	6123      	str	r3, [r4, #16]
 80039d6:	4615      	mov	r5, r2
 80039d8:	e7bc      	b.n	8003954 <_printf_i+0x14c>
 80039da:	682b      	ldr	r3, [r5, #0]
 80039dc:	1d1a      	adds	r2, r3, #4
 80039de:	602a      	str	r2, [r5, #0]
 80039e0:	681d      	ldr	r5, [r3, #0]
 80039e2:	6862      	ldr	r2, [r4, #4]
 80039e4:	2100      	movs	r1, #0
 80039e6:	4628      	mov	r0, r5
 80039e8:	f7fc fc02 	bl	80001f0 <memchr>
 80039ec:	b108      	cbz	r0, 80039f2 <_printf_i+0x1ea>
 80039ee:	1b40      	subs	r0, r0, r5
 80039f0:	6060      	str	r0, [r4, #4]
 80039f2:	6863      	ldr	r3, [r4, #4]
 80039f4:	6123      	str	r3, [r4, #16]
 80039f6:	2300      	movs	r3, #0
 80039f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039fc:	e7aa      	b.n	8003954 <_printf_i+0x14c>
 80039fe:	6923      	ldr	r3, [r4, #16]
 8003a00:	462a      	mov	r2, r5
 8003a02:	4649      	mov	r1, r9
 8003a04:	4640      	mov	r0, r8
 8003a06:	47d0      	blx	sl
 8003a08:	3001      	adds	r0, #1
 8003a0a:	d0ad      	beq.n	8003968 <_printf_i+0x160>
 8003a0c:	6823      	ldr	r3, [r4, #0]
 8003a0e:	079b      	lsls	r3, r3, #30
 8003a10:	d413      	bmi.n	8003a3a <_printf_i+0x232>
 8003a12:	68e0      	ldr	r0, [r4, #12]
 8003a14:	9b03      	ldr	r3, [sp, #12]
 8003a16:	4298      	cmp	r0, r3
 8003a18:	bfb8      	it	lt
 8003a1a:	4618      	movlt	r0, r3
 8003a1c:	e7a6      	b.n	800396c <_printf_i+0x164>
 8003a1e:	2301      	movs	r3, #1
 8003a20:	4632      	mov	r2, r6
 8003a22:	4649      	mov	r1, r9
 8003a24:	4640      	mov	r0, r8
 8003a26:	47d0      	blx	sl
 8003a28:	3001      	adds	r0, #1
 8003a2a:	d09d      	beq.n	8003968 <_printf_i+0x160>
 8003a2c:	3501      	adds	r5, #1
 8003a2e:	68e3      	ldr	r3, [r4, #12]
 8003a30:	9903      	ldr	r1, [sp, #12]
 8003a32:	1a5b      	subs	r3, r3, r1
 8003a34:	42ab      	cmp	r3, r5
 8003a36:	dcf2      	bgt.n	8003a1e <_printf_i+0x216>
 8003a38:	e7eb      	b.n	8003a12 <_printf_i+0x20a>
 8003a3a:	2500      	movs	r5, #0
 8003a3c:	f104 0619 	add.w	r6, r4, #25
 8003a40:	e7f5      	b.n	8003a2e <_printf_i+0x226>
 8003a42:	bf00      	nop
 8003a44:	0800433d 	.word	0x0800433d
 8003a48:	0800434e 	.word	0x0800434e

08003a4c <_scanf_chars>:
 8003a4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a50:	4615      	mov	r5, r2
 8003a52:	688a      	ldr	r2, [r1, #8]
 8003a54:	4680      	mov	r8, r0
 8003a56:	460c      	mov	r4, r1
 8003a58:	b932      	cbnz	r2, 8003a68 <_scanf_chars+0x1c>
 8003a5a:	698a      	ldr	r2, [r1, #24]
 8003a5c:	2a00      	cmp	r2, #0
 8003a5e:	bf0c      	ite	eq
 8003a60:	2201      	moveq	r2, #1
 8003a62:	f04f 32ff 	movne.w	r2, #4294967295
 8003a66:	608a      	str	r2, [r1, #8]
 8003a68:	6822      	ldr	r2, [r4, #0]
 8003a6a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8003afc <_scanf_chars+0xb0>
 8003a6e:	06d1      	lsls	r1, r2, #27
 8003a70:	bf5f      	itttt	pl
 8003a72:	681a      	ldrpl	r2, [r3, #0]
 8003a74:	1d11      	addpl	r1, r2, #4
 8003a76:	6019      	strpl	r1, [r3, #0]
 8003a78:	6816      	ldrpl	r6, [r2, #0]
 8003a7a:	2700      	movs	r7, #0
 8003a7c:	69a0      	ldr	r0, [r4, #24]
 8003a7e:	b188      	cbz	r0, 8003aa4 <_scanf_chars+0x58>
 8003a80:	2801      	cmp	r0, #1
 8003a82:	d107      	bne.n	8003a94 <_scanf_chars+0x48>
 8003a84:	682a      	ldr	r2, [r5, #0]
 8003a86:	7811      	ldrb	r1, [r2, #0]
 8003a88:	6962      	ldr	r2, [r4, #20]
 8003a8a:	5c52      	ldrb	r2, [r2, r1]
 8003a8c:	b952      	cbnz	r2, 8003aa4 <_scanf_chars+0x58>
 8003a8e:	2f00      	cmp	r7, #0
 8003a90:	d031      	beq.n	8003af6 <_scanf_chars+0xaa>
 8003a92:	e022      	b.n	8003ada <_scanf_chars+0x8e>
 8003a94:	2802      	cmp	r0, #2
 8003a96:	d120      	bne.n	8003ada <_scanf_chars+0x8e>
 8003a98:	682b      	ldr	r3, [r5, #0]
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8003aa0:	071b      	lsls	r3, r3, #28
 8003aa2:	d41a      	bmi.n	8003ada <_scanf_chars+0x8e>
 8003aa4:	6823      	ldr	r3, [r4, #0]
 8003aa6:	06da      	lsls	r2, r3, #27
 8003aa8:	bf5e      	ittt	pl
 8003aaa:	682b      	ldrpl	r3, [r5, #0]
 8003aac:	781b      	ldrbpl	r3, [r3, #0]
 8003aae:	f806 3b01 	strbpl.w	r3, [r6], #1
 8003ab2:	682a      	ldr	r2, [r5, #0]
 8003ab4:	686b      	ldr	r3, [r5, #4]
 8003ab6:	3201      	adds	r2, #1
 8003ab8:	602a      	str	r2, [r5, #0]
 8003aba:	68a2      	ldr	r2, [r4, #8]
 8003abc:	3b01      	subs	r3, #1
 8003abe:	3a01      	subs	r2, #1
 8003ac0:	606b      	str	r3, [r5, #4]
 8003ac2:	3701      	adds	r7, #1
 8003ac4:	60a2      	str	r2, [r4, #8]
 8003ac6:	b142      	cbz	r2, 8003ada <_scanf_chars+0x8e>
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	dcd7      	bgt.n	8003a7c <_scanf_chars+0x30>
 8003acc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003ad0:	4629      	mov	r1, r5
 8003ad2:	4640      	mov	r0, r8
 8003ad4:	4798      	blx	r3
 8003ad6:	2800      	cmp	r0, #0
 8003ad8:	d0d0      	beq.n	8003a7c <_scanf_chars+0x30>
 8003ada:	6823      	ldr	r3, [r4, #0]
 8003adc:	f013 0310 	ands.w	r3, r3, #16
 8003ae0:	d105      	bne.n	8003aee <_scanf_chars+0xa2>
 8003ae2:	68e2      	ldr	r2, [r4, #12]
 8003ae4:	3201      	adds	r2, #1
 8003ae6:	60e2      	str	r2, [r4, #12]
 8003ae8:	69a2      	ldr	r2, [r4, #24]
 8003aea:	b102      	cbz	r2, 8003aee <_scanf_chars+0xa2>
 8003aec:	7033      	strb	r3, [r6, #0]
 8003aee:	6923      	ldr	r3, [r4, #16]
 8003af0:	443b      	add	r3, r7
 8003af2:	6123      	str	r3, [r4, #16]
 8003af4:	2000      	movs	r0, #0
 8003af6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003afa:	bf00      	nop
 8003afc:	0800437b 	.word	0x0800437b

08003b00 <_scanf_i>:
 8003b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b04:	4698      	mov	r8, r3
 8003b06:	4b74      	ldr	r3, [pc, #464]	; (8003cd8 <_scanf_i+0x1d8>)
 8003b08:	460c      	mov	r4, r1
 8003b0a:	4682      	mov	sl, r0
 8003b0c:	4616      	mov	r6, r2
 8003b0e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003b12:	b087      	sub	sp, #28
 8003b14:	ab03      	add	r3, sp, #12
 8003b16:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003b1a:	4b70      	ldr	r3, [pc, #448]	; (8003cdc <_scanf_i+0x1dc>)
 8003b1c:	69a1      	ldr	r1, [r4, #24]
 8003b1e:	4a70      	ldr	r2, [pc, #448]	; (8003ce0 <_scanf_i+0x1e0>)
 8003b20:	2903      	cmp	r1, #3
 8003b22:	bf18      	it	ne
 8003b24:	461a      	movne	r2, r3
 8003b26:	68a3      	ldr	r3, [r4, #8]
 8003b28:	9201      	str	r2, [sp, #4]
 8003b2a:	1e5a      	subs	r2, r3, #1
 8003b2c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8003b30:	bf88      	it	hi
 8003b32:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8003b36:	4627      	mov	r7, r4
 8003b38:	bf82      	ittt	hi
 8003b3a:	eb03 0905 	addhi.w	r9, r3, r5
 8003b3e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003b42:	60a3      	strhi	r3, [r4, #8]
 8003b44:	f857 3b1c 	ldr.w	r3, [r7], #28
 8003b48:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8003b4c:	bf98      	it	ls
 8003b4e:	f04f 0900 	movls.w	r9, #0
 8003b52:	6023      	str	r3, [r4, #0]
 8003b54:	463d      	mov	r5, r7
 8003b56:	f04f 0b00 	mov.w	fp, #0
 8003b5a:	6831      	ldr	r1, [r6, #0]
 8003b5c:	ab03      	add	r3, sp, #12
 8003b5e:	7809      	ldrb	r1, [r1, #0]
 8003b60:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8003b64:	2202      	movs	r2, #2
 8003b66:	f7fc fb43 	bl	80001f0 <memchr>
 8003b6a:	b328      	cbz	r0, 8003bb8 <_scanf_i+0xb8>
 8003b6c:	f1bb 0f01 	cmp.w	fp, #1
 8003b70:	d159      	bne.n	8003c26 <_scanf_i+0x126>
 8003b72:	6862      	ldr	r2, [r4, #4]
 8003b74:	b92a      	cbnz	r2, 8003b82 <_scanf_i+0x82>
 8003b76:	6822      	ldr	r2, [r4, #0]
 8003b78:	2308      	movs	r3, #8
 8003b7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b7e:	6063      	str	r3, [r4, #4]
 8003b80:	6022      	str	r2, [r4, #0]
 8003b82:	6822      	ldr	r2, [r4, #0]
 8003b84:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8003b88:	6022      	str	r2, [r4, #0]
 8003b8a:	68a2      	ldr	r2, [r4, #8]
 8003b8c:	1e51      	subs	r1, r2, #1
 8003b8e:	60a1      	str	r1, [r4, #8]
 8003b90:	b192      	cbz	r2, 8003bb8 <_scanf_i+0xb8>
 8003b92:	6832      	ldr	r2, [r6, #0]
 8003b94:	1c51      	adds	r1, r2, #1
 8003b96:	6031      	str	r1, [r6, #0]
 8003b98:	7812      	ldrb	r2, [r2, #0]
 8003b9a:	f805 2b01 	strb.w	r2, [r5], #1
 8003b9e:	6872      	ldr	r2, [r6, #4]
 8003ba0:	3a01      	subs	r2, #1
 8003ba2:	2a00      	cmp	r2, #0
 8003ba4:	6072      	str	r2, [r6, #4]
 8003ba6:	dc07      	bgt.n	8003bb8 <_scanf_i+0xb8>
 8003ba8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8003bac:	4631      	mov	r1, r6
 8003bae:	4650      	mov	r0, sl
 8003bb0:	4790      	blx	r2
 8003bb2:	2800      	cmp	r0, #0
 8003bb4:	f040 8085 	bne.w	8003cc2 <_scanf_i+0x1c2>
 8003bb8:	f10b 0b01 	add.w	fp, fp, #1
 8003bbc:	f1bb 0f03 	cmp.w	fp, #3
 8003bc0:	d1cb      	bne.n	8003b5a <_scanf_i+0x5a>
 8003bc2:	6863      	ldr	r3, [r4, #4]
 8003bc4:	b90b      	cbnz	r3, 8003bca <_scanf_i+0xca>
 8003bc6:	230a      	movs	r3, #10
 8003bc8:	6063      	str	r3, [r4, #4]
 8003bca:	6863      	ldr	r3, [r4, #4]
 8003bcc:	4945      	ldr	r1, [pc, #276]	; (8003ce4 <_scanf_i+0x1e4>)
 8003bce:	6960      	ldr	r0, [r4, #20]
 8003bd0:	1ac9      	subs	r1, r1, r3
 8003bd2:	f000 f889 	bl	8003ce8 <__sccl>
 8003bd6:	f04f 0b00 	mov.w	fp, #0
 8003bda:	68a3      	ldr	r3, [r4, #8]
 8003bdc:	6822      	ldr	r2, [r4, #0]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d03d      	beq.n	8003c5e <_scanf_i+0x15e>
 8003be2:	6831      	ldr	r1, [r6, #0]
 8003be4:	6960      	ldr	r0, [r4, #20]
 8003be6:	f891 c000 	ldrb.w	ip, [r1]
 8003bea:	f810 000c 	ldrb.w	r0, [r0, ip]
 8003bee:	2800      	cmp	r0, #0
 8003bf0:	d035      	beq.n	8003c5e <_scanf_i+0x15e>
 8003bf2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8003bf6:	d124      	bne.n	8003c42 <_scanf_i+0x142>
 8003bf8:	0510      	lsls	r0, r2, #20
 8003bfa:	d522      	bpl.n	8003c42 <_scanf_i+0x142>
 8003bfc:	f10b 0b01 	add.w	fp, fp, #1
 8003c00:	f1b9 0f00 	cmp.w	r9, #0
 8003c04:	d003      	beq.n	8003c0e <_scanf_i+0x10e>
 8003c06:	3301      	adds	r3, #1
 8003c08:	f109 39ff 	add.w	r9, r9, #4294967295
 8003c0c:	60a3      	str	r3, [r4, #8]
 8003c0e:	6873      	ldr	r3, [r6, #4]
 8003c10:	3b01      	subs	r3, #1
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	6073      	str	r3, [r6, #4]
 8003c16:	dd1b      	ble.n	8003c50 <_scanf_i+0x150>
 8003c18:	6833      	ldr	r3, [r6, #0]
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	6033      	str	r3, [r6, #0]
 8003c1e:	68a3      	ldr	r3, [r4, #8]
 8003c20:	3b01      	subs	r3, #1
 8003c22:	60a3      	str	r3, [r4, #8]
 8003c24:	e7d9      	b.n	8003bda <_scanf_i+0xda>
 8003c26:	f1bb 0f02 	cmp.w	fp, #2
 8003c2a:	d1ae      	bne.n	8003b8a <_scanf_i+0x8a>
 8003c2c:	6822      	ldr	r2, [r4, #0]
 8003c2e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8003c32:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8003c36:	d1bf      	bne.n	8003bb8 <_scanf_i+0xb8>
 8003c38:	2310      	movs	r3, #16
 8003c3a:	6063      	str	r3, [r4, #4]
 8003c3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c40:	e7a2      	b.n	8003b88 <_scanf_i+0x88>
 8003c42:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8003c46:	6022      	str	r2, [r4, #0]
 8003c48:	780b      	ldrb	r3, [r1, #0]
 8003c4a:	f805 3b01 	strb.w	r3, [r5], #1
 8003c4e:	e7de      	b.n	8003c0e <_scanf_i+0x10e>
 8003c50:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003c54:	4631      	mov	r1, r6
 8003c56:	4650      	mov	r0, sl
 8003c58:	4798      	blx	r3
 8003c5a:	2800      	cmp	r0, #0
 8003c5c:	d0df      	beq.n	8003c1e <_scanf_i+0x11e>
 8003c5e:	6823      	ldr	r3, [r4, #0]
 8003c60:	05d9      	lsls	r1, r3, #23
 8003c62:	d50d      	bpl.n	8003c80 <_scanf_i+0x180>
 8003c64:	42bd      	cmp	r5, r7
 8003c66:	d909      	bls.n	8003c7c <_scanf_i+0x17c>
 8003c68:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8003c6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003c70:	4632      	mov	r2, r6
 8003c72:	4650      	mov	r0, sl
 8003c74:	4798      	blx	r3
 8003c76:	f105 39ff 	add.w	r9, r5, #4294967295
 8003c7a:	464d      	mov	r5, r9
 8003c7c:	42bd      	cmp	r5, r7
 8003c7e:	d028      	beq.n	8003cd2 <_scanf_i+0x1d2>
 8003c80:	6822      	ldr	r2, [r4, #0]
 8003c82:	f012 0210 	ands.w	r2, r2, #16
 8003c86:	d113      	bne.n	8003cb0 <_scanf_i+0x1b0>
 8003c88:	702a      	strb	r2, [r5, #0]
 8003c8a:	6863      	ldr	r3, [r4, #4]
 8003c8c:	9e01      	ldr	r6, [sp, #4]
 8003c8e:	4639      	mov	r1, r7
 8003c90:	4650      	mov	r0, sl
 8003c92:	47b0      	blx	r6
 8003c94:	f8d8 3000 	ldr.w	r3, [r8]
 8003c98:	6821      	ldr	r1, [r4, #0]
 8003c9a:	1d1a      	adds	r2, r3, #4
 8003c9c:	f8c8 2000 	str.w	r2, [r8]
 8003ca0:	f011 0f20 	tst.w	r1, #32
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	d00f      	beq.n	8003cc8 <_scanf_i+0x1c8>
 8003ca8:	6018      	str	r0, [r3, #0]
 8003caa:	68e3      	ldr	r3, [r4, #12]
 8003cac:	3301      	adds	r3, #1
 8003cae:	60e3      	str	r3, [r4, #12]
 8003cb0:	6923      	ldr	r3, [r4, #16]
 8003cb2:	1bed      	subs	r5, r5, r7
 8003cb4:	445d      	add	r5, fp
 8003cb6:	442b      	add	r3, r5
 8003cb8:	6123      	str	r3, [r4, #16]
 8003cba:	2000      	movs	r0, #0
 8003cbc:	b007      	add	sp, #28
 8003cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cc2:	f04f 0b00 	mov.w	fp, #0
 8003cc6:	e7ca      	b.n	8003c5e <_scanf_i+0x15e>
 8003cc8:	07ca      	lsls	r2, r1, #31
 8003cca:	bf4c      	ite	mi
 8003ccc:	8018      	strhmi	r0, [r3, #0]
 8003cce:	6018      	strpl	r0, [r3, #0]
 8003cd0:	e7eb      	b.n	8003caa <_scanf_i+0x1aa>
 8003cd2:	2001      	movs	r0, #1
 8003cd4:	e7f2      	b.n	8003cbc <_scanf_i+0x1bc>
 8003cd6:	bf00      	nop
 8003cd8:	08004308 	.word	0x08004308
 8003cdc:	0800408d 	.word	0x0800408d
 8003ce0:	08003fa5 	.word	0x08003fa5
 8003ce4:	0800436f 	.word	0x0800436f

08003ce8 <__sccl>:
 8003ce8:	b570      	push	{r4, r5, r6, lr}
 8003cea:	780b      	ldrb	r3, [r1, #0]
 8003cec:	4604      	mov	r4, r0
 8003cee:	2b5e      	cmp	r3, #94	; 0x5e
 8003cf0:	bf0b      	itete	eq
 8003cf2:	784b      	ldrbeq	r3, [r1, #1]
 8003cf4:	1c4a      	addne	r2, r1, #1
 8003cf6:	1c8a      	addeq	r2, r1, #2
 8003cf8:	2100      	movne	r1, #0
 8003cfa:	bf08      	it	eq
 8003cfc:	2101      	moveq	r1, #1
 8003cfe:	3801      	subs	r0, #1
 8003d00:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8003d04:	f800 1f01 	strb.w	r1, [r0, #1]!
 8003d08:	42a8      	cmp	r0, r5
 8003d0a:	d1fb      	bne.n	8003d04 <__sccl+0x1c>
 8003d0c:	b90b      	cbnz	r3, 8003d12 <__sccl+0x2a>
 8003d0e:	1e50      	subs	r0, r2, #1
 8003d10:	bd70      	pop	{r4, r5, r6, pc}
 8003d12:	f081 0101 	eor.w	r1, r1, #1
 8003d16:	54e1      	strb	r1, [r4, r3]
 8003d18:	4610      	mov	r0, r2
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003d20:	2d2d      	cmp	r5, #45	; 0x2d
 8003d22:	d005      	beq.n	8003d30 <__sccl+0x48>
 8003d24:	2d5d      	cmp	r5, #93	; 0x5d
 8003d26:	d016      	beq.n	8003d56 <__sccl+0x6e>
 8003d28:	2d00      	cmp	r5, #0
 8003d2a:	d0f1      	beq.n	8003d10 <__sccl+0x28>
 8003d2c:	462b      	mov	r3, r5
 8003d2e:	e7f2      	b.n	8003d16 <__sccl+0x2e>
 8003d30:	7846      	ldrb	r6, [r0, #1]
 8003d32:	2e5d      	cmp	r6, #93	; 0x5d
 8003d34:	d0fa      	beq.n	8003d2c <__sccl+0x44>
 8003d36:	42b3      	cmp	r3, r6
 8003d38:	dcf8      	bgt.n	8003d2c <__sccl+0x44>
 8003d3a:	3002      	adds	r0, #2
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	3201      	adds	r2, #1
 8003d40:	4296      	cmp	r6, r2
 8003d42:	54a1      	strb	r1, [r4, r2]
 8003d44:	dcfb      	bgt.n	8003d3e <__sccl+0x56>
 8003d46:	1af2      	subs	r2, r6, r3
 8003d48:	3a01      	subs	r2, #1
 8003d4a:	1c5d      	adds	r5, r3, #1
 8003d4c:	42b3      	cmp	r3, r6
 8003d4e:	bfa8      	it	ge
 8003d50:	2200      	movge	r2, #0
 8003d52:	18ab      	adds	r3, r5, r2
 8003d54:	e7e1      	b.n	8003d1a <__sccl+0x32>
 8003d56:	4610      	mov	r0, r2
 8003d58:	e7da      	b.n	8003d10 <__sccl+0x28>

08003d5a <__submore>:
 8003d5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d5e:	460c      	mov	r4, r1
 8003d60:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8003d62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003d66:	4299      	cmp	r1, r3
 8003d68:	d11d      	bne.n	8003da6 <__submore+0x4c>
 8003d6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003d6e:	f7ff f927 	bl	8002fc0 <_malloc_r>
 8003d72:	b918      	cbnz	r0, 8003d7c <__submore+0x22>
 8003d74:	f04f 30ff 	mov.w	r0, #4294967295
 8003d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d80:	63a3      	str	r3, [r4, #56]	; 0x38
 8003d82:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8003d86:	6360      	str	r0, [r4, #52]	; 0x34
 8003d88:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8003d8c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8003d90:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8003d94:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003d98:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8003d9c:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8003da0:	6020      	str	r0, [r4, #0]
 8003da2:	2000      	movs	r0, #0
 8003da4:	e7e8      	b.n	8003d78 <__submore+0x1e>
 8003da6:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8003da8:	0077      	lsls	r7, r6, #1
 8003daa:	463a      	mov	r2, r7
 8003dac:	f000 f848 	bl	8003e40 <_realloc_r>
 8003db0:	4605      	mov	r5, r0
 8003db2:	2800      	cmp	r0, #0
 8003db4:	d0de      	beq.n	8003d74 <__submore+0x1a>
 8003db6:	eb00 0806 	add.w	r8, r0, r6
 8003dba:	4601      	mov	r1, r0
 8003dbc:	4632      	mov	r2, r6
 8003dbe:	4640      	mov	r0, r8
 8003dc0:	f000 f830 	bl	8003e24 <memcpy>
 8003dc4:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8003dc8:	f8c4 8000 	str.w	r8, [r4]
 8003dcc:	e7e9      	b.n	8003da2 <__submore+0x48>

08003dce <memmove>:
 8003dce:	4288      	cmp	r0, r1
 8003dd0:	b510      	push	{r4, lr}
 8003dd2:	eb01 0402 	add.w	r4, r1, r2
 8003dd6:	d902      	bls.n	8003dde <memmove+0x10>
 8003dd8:	4284      	cmp	r4, r0
 8003dda:	4623      	mov	r3, r4
 8003ddc:	d807      	bhi.n	8003dee <memmove+0x20>
 8003dde:	1e43      	subs	r3, r0, #1
 8003de0:	42a1      	cmp	r1, r4
 8003de2:	d008      	beq.n	8003df6 <memmove+0x28>
 8003de4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003de8:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003dec:	e7f8      	b.n	8003de0 <memmove+0x12>
 8003dee:	4402      	add	r2, r0
 8003df0:	4601      	mov	r1, r0
 8003df2:	428a      	cmp	r2, r1
 8003df4:	d100      	bne.n	8003df8 <memmove+0x2a>
 8003df6:	bd10      	pop	{r4, pc}
 8003df8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003dfc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003e00:	e7f7      	b.n	8003df2 <memmove+0x24>
	...

08003e04 <_sbrk_r>:
 8003e04:	b538      	push	{r3, r4, r5, lr}
 8003e06:	4d06      	ldr	r5, [pc, #24]	; (8003e20 <_sbrk_r+0x1c>)
 8003e08:	2300      	movs	r3, #0
 8003e0a:	4604      	mov	r4, r0
 8003e0c:	4608      	mov	r0, r1
 8003e0e:	602b      	str	r3, [r5, #0]
 8003e10:	f7fc fe9e 	bl	8000b50 <_sbrk>
 8003e14:	1c43      	adds	r3, r0, #1
 8003e16:	d102      	bne.n	8003e1e <_sbrk_r+0x1a>
 8003e18:	682b      	ldr	r3, [r5, #0]
 8003e1a:	b103      	cbz	r3, 8003e1e <_sbrk_r+0x1a>
 8003e1c:	6023      	str	r3, [r4, #0]
 8003e1e:	bd38      	pop	{r3, r4, r5, pc}
 8003e20:	20000284 	.word	0x20000284

08003e24 <memcpy>:
 8003e24:	440a      	add	r2, r1
 8003e26:	4291      	cmp	r1, r2
 8003e28:	f100 33ff 	add.w	r3, r0, #4294967295
 8003e2c:	d100      	bne.n	8003e30 <memcpy+0xc>
 8003e2e:	4770      	bx	lr
 8003e30:	b510      	push	{r4, lr}
 8003e32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e3a:	4291      	cmp	r1, r2
 8003e3c:	d1f9      	bne.n	8003e32 <memcpy+0xe>
 8003e3e:	bd10      	pop	{r4, pc}

08003e40 <_realloc_r>:
 8003e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e44:	4680      	mov	r8, r0
 8003e46:	4614      	mov	r4, r2
 8003e48:	460e      	mov	r6, r1
 8003e4a:	b921      	cbnz	r1, 8003e56 <_realloc_r+0x16>
 8003e4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e50:	4611      	mov	r1, r2
 8003e52:	f7ff b8b5 	b.w	8002fc0 <_malloc_r>
 8003e56:	b92a      	cbnz	r2, 8003e64 <_realloc_r+0x24>
 8003e58:	f7ff f846 	bl	8002ee8 <_free_r>
 8003e5c:	4625      	mov	r5, r4
 8003e5e:	4628      	mov	r0, r5
 8003e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e64:	f000 f914 	bl	8004090 <_malloc_usable_size_r>
 8003e68:	4284      	cmp	r4, r0
 8003e6a:	4607      	mov	r7, r0
 8003e6c:	d802      	bhi.n	8003e74 <_realloc_r+0x34>
 8003e6e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003e72:	d812      	bhi.n	8003e9a <_realloc_r+0x5a>
 8003e74:	4621      	mov	r1, r4
 8003e76:	4640      	mov	r0, r8
 8003e78:	f7ff f8a2 	bl	8002fc0 <_malloc_r>
 8003e7c:	4605      	mov	r5, r0
 8003e7e:	2800      	cmp	r0, #0
 8003e80:	d0ed      	beq.n	8003e5e <_realloc_r+0x1e>
 8003e82:	42bc      	cmp	r4, r7
 8003e84:	4622      	mov	r2, r4
 8003e86:	4631      	mov	r1, r6
 8003e88:	bf28      	it	cs
 8003e8a:	463a      	movcs	r2, r7
 8003e8c:	f7ff ffca 	bl	8003e24 <memcpy>
 8003e90:	4631      	mov	r1, r6
 8003e92:	4640      	mov	r0, r8
 8003e94:	f7ff f828 	bl	8002ee8 <_free_r>
 8003e98:	e7e1      	b.n	8003e5e <_realloc_r+0x1e>
 8003e9a:	4635      	mov	r5, r6
 8003e9c:	e7df      	b.n	8003e5e <_realloc_r+0x1e>
	...

08003ea0 <_strtol_l.constprop.0>:
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ea6:	d001      	beq.n	8003eac <_strtol_l.constprop.0+0xc>
 8003ea8:	2b24      	cmp	r3, #36	; 0x24
 8003eaa:	d906      	bls.n	8003eba <_strtol_l.constprop.0+0x1a>
 8003eac:	f7fe fff0 	bl	8002e90 <__errno>
 8003eb0:	2316      	movs	r3, #22
 8003eb2:	6003      	str	r3, [r0, #0]
 8003eb4:	2000      	movs	r0, #0
 8003eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003eba:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8003fa0 <_strtol_l.constprop.0+0x100>
 8003ebe:	460d      	mov	r5, r1
 8003ec0:	462e      	mov	r6, r5
 8003ec2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003ec6:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8003eca:	f017 0708 	ands.w	r7, r7, #8
 8003ece:	d1f7      	bne.n	8003ec0 <_strtol_l.constprop.0+0x20>
 8003ed0:	2c2d      	cmp	r4, #45	; 0x2d
 8003ed2:	d132      	bne.n	8003f3a <_strtol_l.constprop.0+0x9a>
 8003ed4:	782c      	ldrb	r4, [r5, #0]
 8003ed6:	2701      	movs	r7, #1
 8003ed8:	1cb5      	adds	r5, r6, #2
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d05b      	beq.n	8003f96 <_strtol_l.constprop.0+0xf6>
 8003ede:	2b10      	cmp	r3, #16
 8003ee0:	d109      	bne.n	8003ef6 <_strtol_l.constprop.0+0x56>
 8003ee2:	2c30      	cmp	r4, #48	; 0x30
 8003ee4:	d107      	bne.n	8003ef6 <_strtol_l.constprop.0+0x56>
 8003ee6:	782c      	ldrb	r4, [r5, #0]
 8003ee8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8003eec:	2c58      	cmp	r4, #88	; 0x58
 8003eee:	d14d      	bne.n	8003f8c <_strtol_l.constprop.0+0xec>
 8003ef0:	786c      	ldrb	r4, [r5, #1]
 8003ef2:	2310      	movs	r3, #16
 8003ef4:	3502      	adds	r5, #2
 8003ef6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8003efa:	f108 38ff 	add.w	r8, r8, #4294967295
 8003efe:	f04f 0e00 	mov.w	lr, #0
 8003f02:	fbb8 f9f3 	udiv	r9, r8, r3
 8003f06:	4676      	mov	r6, lr
 8003f08:	fb03 8a19 	mls	sl, r3, r9, r8
 8003f0c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8003f10:	f1bc 0f09 	cmp.w	ip, #9
 8003f14:	d816      	bhi.n	8003f44 <_strtol_l.constprop.0+0xa4>
 8003f16:	4664      	mov	r4, ip
 8003f18:	42a3      	cmp	r3, r4
 8003f1a:	dd24      	ble.n	8003f66 <_strtol_l.constprop.0+0xc6>
 8003f1c:	f1be 3fff 	cmp.w	lr, #4294967295
 8003f20:	d008      	beq.n	8003f34 <_strtol_l.constprop.0+0x94>
 8003f22:	45b1      	cmp	r9, r6
 8003f24:	d31c      	bcc.n	8003f60 <_strtol_l.constprop.0+0xc0>
 8003f26:	d101      	bne.n	8003f2c <_strtol_l.constprop.0+0x8c>
 8003f28:	45a2      	cmp	sl, r4
 8003f2a:	db19      	blt.n	8003f60 <_strtol_l.constprop.0+0xc0>
 8003f2c:	fb06 4603 	mla	r6, r6, r3, r4
 8003f30:	f04f 0e01 	mov.w	lr, #1
 8003f34:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003f38:	e7e8      	b.n	8003f0c <_strtol_l.constprop.0+0x6c>
 8003f3a:	2c2b      	cmp	r4, #43	; 0x2b
 8003f3c:	bf04      	itt	eq
 8003f3e:	782c      	ldrbeq	r4, [r5, #0]
 8003f40:	1cb5      	addeq	r5, r6, #2
 8003f42:	e7ca      	b.n	8003eda <_strtol_l.constprop.0+0x3a>
 8003f44:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8003f48:	f1bc 0f19 	cmp.w	ip, #25
 8003f4c:	d801      	bhi.n	8003f52 <_strtol_l.constprop.0+0xb2>
 8003f4e:	3c37      	subs	r4, #55	; 0x37
 8003f50:	e7e2      	b.n	8003f18 <_strtol_l.constprop.0+0x78>
 8003f52:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8003f56:	f1bc 0f19 	cmp.w	ip, #25
 8003f5a:	d804      	bhi.n	8003f66 <_strtol_l.constprop.0+0xc6>
 8003f5c:	3c57      	subs	r4, #87	; 0x57
 8003f5e:	e7db      	b.n	8003f18 <_strtol_l.constprop.0+0x78>
 8003f60:	f04f 3eff 	mov.w	lr, #4294967295
 8003f64:	e7e6      	b.n	8003f34 <_strtol_l.constprop.0+0x94>
 8003f66:	f1be 3fff 	cmp.w	lr, #4294967295
 8003f6a:	d105      	bne.n	8003f78 <_strtol_l.constprop.0+0xd8>
 8003f6c:	2322      	movs	r3, #34	; 0x22
 8003f6e:	6003      	str	r3, [r0, #0]
 8003f70:	4646      	mov	r6, r8
 8003f72:	b942      	cbnz	r2, 8003f86 <_strtol_l.constprop.0+0xe6>
 8003f74:	4630      	mov	r0, r6
 8003f76:	e79e      	b.n	8003eb6 <_strtol_l.constprop.0+0x16>
 8003f78:	b107      	cbz	r7, 8003f7c <_strtol_l.constprop.0+0xdc>
 8003f7a:	4276      	negs	r6, r6
 8003f7c:	2a00      	cmp	r2, #0
 8003f7e:	d0f9      	beq.n	8003f74 <_strtol_l.constprop.0+0xd4>
 8003f80:	f1be 0f00 	cmp.w	lr, #0
 8003f84:	d000      	beq.n	8003f88 <_strtol_l.constprop.0+0xe8>
 8003f86:	1e69      	subs	r1, r5, #1
 8003f88:	6011      	str	r1, [r2, #0]
 8003f8a:	e7f3      	b.n	8003f74 <_strtol_l.constprop.0+0xd4>
 8003f8c:	2430      	movs	r4, #48	; 0x30
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1b1      	bne.n	8003ef6 <_strtol_l.constprop.0+0x56>
 8003f92:	2308      	movs	r3, #8
 8003f94:	e7af      	b.n	8003ef6 <_strtol_l.constprop.0+0x56>
 8003f96:	2c30      	cmp	r4, #48	; 0x30
 8003f98:	d0a5      	beq.n	8003ee6 <_strtol_l.constprop.0+0x46>
 8003f9a:	230a      	movs	r3, #10
 8003f9c:	e7ab      	b.n	8003ef6 <_strtol_l.constprop.0+0x56>
 8003f9e:	bf00      	nop
 8003fa0:	0800437b 	.word	0x0800437b

08003fa4 <_strtol_r>:
 8003fa4:	f7ff bf7c 	b.w	8003ea0 <_strtol_l.constprop.0>

08003fa8 <_strtoul_l.constprop.0>:
 8003fa8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003fac:	4f36      	ldr	r7, [pc, #216]	; (8004088 <_strtoul_l.constprop.0+0xe0>)
 8003fae:	4686      	mov	lr, r0
 8003fb0:	460d      	mov	r5, r1
 8003fb2:	4628      	mov	r0, r5
 8003fb4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003fb8:	5d3e      	ldrb	r6, [r7, r4]
 8003fba:	f016 0608 	ands.w	r6, r6, #8
 8003fbe:	d1f8      	bne.n	8003fb2 <_strtoul_l.constprop.0+0xa>
 8003fc0:	2c2d      	cmp	r4, #45	; 0x2d
 8003fc2:	d130      	bne.n	8004026 <_strtoul_l.constprop.0+0x7e>
 8003fc4:	782c      	ldrb	r4, [r5, #0]
 8003fc6:	2601      	movs	r6, #1
 8003fc8:	1c85      	adds	r5, r0, #2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d057      	beq.n	800407e <_strtoul_l.constprop.0+0xd6>
 8003fce:	2b10      	cmp	r3, #16
 8003fd0:	d109      	bne.n	8003fe6 <_strtoul_l.constprop.0+0x3e>
 8003fd2:	2c30      	cmp	r4, #48	; 0x30
 8003fd4:	d107      	bne.n	8003fe6 <_strtoul_l.constprop.0+0x3e>
 8003fd6:	7828      	ldrb	r0, [r5, #0]
 8003fd8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8003fdc:	2858      	cmp	r0, #88	; 0x58
 8003fde:	d149      	bne.n	8004074 <_strtoul_l.constprop.0+0xcc>
 8003fe0:	786c      	ldrb	r4, [r5, #1]
 8003fe2:	2310      	movs	r3, #16
 8003fe4:	3502      	adds	r5, #2
 8003fe6:	f04f 38ff 	mov.w	r8, #4294967295
 8003fea:	2700      	movs	r7, #0
 8003fec:	fbb8 f8f3 	udiv	r8, r8, r3
 8003ff0:	fb03 f908 	mul.w	r9, r3, r8
 8003ff4:	ea6f 0909 	mvn.w	r9, r9
 8003ff8:	4638      	mov	r0, r7
 8003ffa:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8003ffe:	f1bc 0f09 	cmp.w	ip, #9
 8004002:	d815      	bhi.n	8004030 <_strtoul_l.constprop.0+0x88>
 8004004:	4664      	mov	r4, ip
 8004006:	42a3      	cmp	r3, r4
 8004008:	dd23      	ble.n	8004052 <_strtoul_l.constprop.0+0xaa>
 800400a:	f1b7 3fff 	cmp.w	r7, #4294967295
 800400e:	d007      	beq.n	8004020 <_strtoul_l.constprop.0+0x78>
 8004010:	4580      	cmp	r8, r0
 8004012:	d31b      	bcc.n	800404c <_strtoul_l.constprop.0+0xa4>
 8004014:	d101      	bne.n	800401a <_strtoul_l.constprop.0+0x72>
 8004016:	45a1      	cmp	r9, r4
 8004018:	db18      	blt.n	800404c <_strtoul_l.constprop.0+0xa4>
 800401a:	fb00 4003 	mla	r0, r0, r3, r4
 800401e:	2701      	movs	r7, #1
 8004020:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004024:	e7e9      	b.n	8003ffa <_strtoul_l.constprop.0+0x52>
 8004026:	2c2b      	cmp	r4, #43	; 0x2b
 8004028:	bf04      	itt	eq
 800402a:	782c      	ldrbeq	r4, [r5, #0]
 800402c:	1c85      	addeq	r5, r0, #2
 800402e:	e7cc      	b.n	8003fca <_strtoul_l.constprop.0+0x22>
 8004030:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004034:	f1bc 0f19 	cmp.w	ip, #25
 8004038:	d801      	bhi.n	800403e <_strtoul_l.constprop.0+0x96>
 800403a:	3c37      	subs	r4, #55	; 0x37
 800403c:	e7e3      	b.n	8004006 <_strtoul_l.constprop.0+0x5e>
 800403e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004042:	f1bc 0f19 	cmp.w	ip, #25
 8004046:	d804      	bhi.n	8004052 <_strtoul_l.constprop.0+0xaa>
 8004048:	3c57      	subs	r4, #87	; 0x57
 800404a:	e7dc      	b.n	8004006 <_strtoul_l.constprop.0+0x5e>
 800404c:	f04f 37ff 	mov.w	r7, #4294967295
 8004050:	e7e6      	b.n	8004020 <_strtoul_l.constprop.0+0x78>
 8004052:	1c7b      	adds	r3, r7, #1
 8004054:	d106      	bne.n	8004064 <_strtoul_l.constprop.0+0xbc>
 8004056:	2322      	movs	r3, #34	; 0x22
 8004058:	f8ce 3000 	str.w	r3, [lr]
 800405c:	4638      	mov	r0, r7
 800405e:	b932      	cbnz	r2, 800406e <_strtoul_l.constprop.0+0xc6>
 8004060:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004064:	b106      	cbz	r6, 8004068 <_strtoul_l.constprop.0+0xc0>
 8004066:	4240      	negs	r0, r0
 8004068:	2a00      	cmp	r2, #0
 800406a:	d0f9      	beq.n	8004060 <_strtoul_l.constprop.0+0xb8>
 800406c:	b107      	cbz	r7, 8004070 <_strtoul_l.constprop.0+0xc8>
 800406e:	1e69      	subs	r1, r5, #1
 8004070:	6011      	str	r1, [r2, #0]
 8004072:	e7f5      	b.n	8004060 <_strtoul_l.constprop.0+0xb8>
 8004074:	2430      	movs	r4, #48	; 0x30
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1b5      	bne.n	8003fe6 <_strtoul_l.constprop.0+0x3e>
 800407a:	2308      	movs	r3, #8
 800407c:	e7b3      	b.n	8003fe6 <_strtoul_l.constprop.0+0x3e>
 800407e:	2c30      	cmp	r4, #48	; 0x30
 8004080:	d0a9      	beq.n	8003fd6 <_strtoul_l.constprop.0+0x2e>
 8004082:	230a      	movs	r3, #10
 8004084:	e7af      	b.n	8003fe6 <_strtoul_l.constprop.0+0x3e>
 8004086:	bf00      	nop
 8004088:	0800437b 	.word	0x0800437b

0800408c <_strtoul_r>:
 800408c:	f7ff bf8c 	b.w	8003fa8 <_strtoul_l.constprop.0>

08004090 <_malloc_usable_size_r>:
 8004090:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004094:	1f18      	subs	r0, r3, #4
 8004096:	2b00      	cmp	r3, #0
 8004098:	bfbc      	itt	lt
 800409a:	580b      	ldrlt	r3, [r1, r0]
 800409c:	18c0      	addlt	r0, r0, r3
 800409e:	4770      	bx	lr

080040a0 <_init>:
 80040a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040a2:	bf00      	nop
 80040a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040a6:	bc08      	pop	{r3}
 80040a8:	469e      	mov	lr, r3
 80040aa:	4770      	bx	lr

080040ac <_fini>:
 80040ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ae:	bf00      	nop
 80040b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040b2:	bc08      	pop	{r3}
 80040b4:	469e      	mov	lr, r3
 80040b6:	4770      	bx	lr
