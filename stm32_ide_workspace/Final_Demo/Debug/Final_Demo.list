
Final_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074ac  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a8  0800764c  0800764c  0001764c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007af4  08007af4  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08007af4  08007af4  00017af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007afc  08007afc  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007afc  08007afc  00017afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b00  08007b00  00017b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08007b04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000694  20000060  08007b60  00020060  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200006f4  08007b60  000206f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000eafe  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fd3  00000000  00000000  0002ebcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000db8  00000000  00000000  00030ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000acd  00000000  00000000  00031958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016dfb  00000000  00000000  00032425  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010729  00000000  00000000  00049220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009791e  00000000  00000000  00059949  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000044b0  00000000  00000000  000f1268  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000f5718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007634 	.word	0x08007634

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08007634 	.word	0x08007634

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_uldivmod>:
 8000b8c:	b953      	cbnz	r3, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b8e:	b94a      	cbnz	r2, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b90:	2900      	cmp	r1, #0
 8000b92:	bf08      	it	eq
 8000b94:	2800      	cmpeq	r0, #0
 8000b96:	bf1c      	itt	ne
 8000b98:	f04f 31ff 	movne.w	r1, #4294967295
 8000b9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba0:	f000 b970 	b.w	8000e84 <__aeabi_idiv0>
 8000ba4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bac:	f000 f806 	bl	8000bbc <__udivmoddi4>
 8000bb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb8:	b004      	add	sp, #16
 8000bba:	4770      	bx	lr

08000bbc <__udivmoddi4>:
 8000bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc0:	9e08      	ldr	r6, [sp, #32]
 8000bc2:	460d      	mov	r5, r1
 8000bc4:	4604      	mov	r4, r0
 8000bc6:	460f      	mov	r7, r1
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d14a      	bne.n	8000c62 <__udivmoddi4+0xa6>
 8000bcc:	428a      	cmp	r2, r1
 8000bce:	4694      	mov	ip, r2
 8000bd0:	d965      	bls.n	8000c9e <__udivmoddi4+0xe2>
 8000bd2:	fab2 f382 	clz	r3, r2
 8000bd6:	b143      	cbz	r3, 8000bea <__udivmoddi4+0x2e>
 8000bd8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bdc:	f1c3 0220 	rsb	r2, r3, #32
 8000be0:	409f      	lsls	r7, r3
 8000be2:	fa20 f202 	lsr.w	r2, r0, r2
 8000be6:	4317      	orrs	r7, r2
 8000be8:	409c      	lsls	r4, r3
 8000bea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bee:	fa1f f58c 	uxth.w	r5, ip
 8000bf2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bf6:	0c22      	lsrs	r2, r4, #16
 8000bf8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bfc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c00:	fb01 f005 	mul.w	r0, r1, r5
 8000c04:	4290      	cmp	r0, r2
 8000c06:	d90a      	bls.n	8000c1e <__udivmoddi4+0x62>
 8000c08:	eb1c 0202 	adds.w	r2, ip, r2
 8000c0c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c10:	f080 811c 	bcs.w	8000e4c <__udivmoddi4+0x290>
 8000c14:	4290      	cmp	r0, r2
 8000c16:	f240 8119 	bls.w	8000e4c <__udivmoddi4+0x290>
 8000c1a:	3902      	subs	r1, #2
 8000c1c:	4462      	add	r2, ip
 8000c1e:	1a12      	subs	r2, r2, r0
 8000c20:	b2a4      	uxth	r4, r4
 8000c22:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c26:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c2a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c2e:	fb00 f505 	mul.w	r5, r0, r5
 8000c32:	42a5      	cmp	r5, r4
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x90>
 8000c36:	eb1c 0404 	adds.w	r4, ip, r4
 8000c3a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c3e:	f080 8107 	bcs.w	8000e50 <__udivmoddi4+0x294>
 8000c42:	42a5      	cmp	r5, r4
 8000c44:	f240 8104 	bls.w	8000e50 <__udivmoddi4+0x294>
 8000c48:	4464      	add	r4, ip
 8000c4a:	3802      	subs	r0, #2
 8000c4c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c50:	1b64      	subs	r4, r4, r5
 8000c52:	2100      	movs	r1, #0
 8000c54:	b11e      	cbz	r6, 8000c5e <__udivmoddi4+0xa2>
 8000c56:	40dc      	lsrs	r4, r3
 8000c58:	2300      	movs	r3, #0
 8000c5a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c62:	428b      	cmp	r3, r1
 8000c64:	d908      	bls.n	8000c78 <__udivmoddi4+0xbc>
 8000c66:	2e00      	cmp	r6, #0
 8000c68:	f000 80ed 	beq.w	8000e46 <__udivmoddi4+0x28a>
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	e9c6 0500 	strd	r0, r5, [r6]
 8000c72:	4608      	mov	r0, r1
 8000c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c78:	fab3 f183 	clz	r1, r3
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	d149      	bne.n	8000d14 <__udivmoddi4+0x158>
 8000c80:	42ab      	cmp	r3, r5
 8000c82:	d302      	bcc.n	8000c8a <__udivmoddi4+0xce>
 8000c84:	4282      	cmp	r2, r0
 8000c86:	f200 80f8 	bhi.w	8000e7a <__udivmoddi4+0x2be>
 8000c8a:	1a84      	subs	r4, r0, r2
 8000c8c:	eb65 0203 	sbc.w	r2, r5, r3
 8000c90:	2001      	movs	r0, #1
 8000c92:	4617      	mov	r7, r2
 8000c94:	2e00      	cmp	r6, #0
 8000c96:	d0e2      	beq.n	8000c5e <__udivmoddi4+0xa2>
 8000c98:	e9c6 4700 	strd	r4, r7, [r6]
 8000c9c:	e7df      	b.n	8000c5e <__udivmoddi4+0xa2>
 8000c9e:	b902      	cbnz	r2, 8000ca2 <__udivmoddi4+0xe6>
 8000ca0:	deff      	udf	#255	; 0xff
 8000ca2:	fab2 f382 	clz	r3, r2
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	f040 8090 	bne.w	8000dcc <__udivmoddi4+0x210>
 8000cac:	1a8a      	subs	r2, r1, r2
 8000cae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cb2:	fa1f fe8c 	uxth.w	lr, ip
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cbc:	fb07 2015 	mls	r0, r7, r5, r2
 8000cc0:	0c22      	lsrs	r2, r4, #16
 8000cc2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cc6:	fb0e f005 	mul.w	r0, lr, r5
 8000cca:	4290      	cmp	r0, r2
 8000ccc:	d908      	bls.n	8000ce0 <__udivmoddi4+0x124>
 8000cce:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cd6:	d202      	bcs.n	8000cde <__udivmoddi4+0x122>
 8000cd8:	4290      	cmp	r0, r2
 8000cda:	f200 80cb 	bhi.w	8000e74 <__udivmoddi4+0x2b8>
 8000cde:	4645      	mov	r5, r8
 8000ce0:	1a12      	subs	r2, r2, r0
 8000ce2:	b2a4      	uxth	r4, r4
 8000ce4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ce8:	fb07 2210 	mls	r2, r7, r0, r2
 8000cec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cf0:	fb0e fe00 	mul.w	lr, lr, r0
 8000cf4:	45a6      	cmp	lr, r4
 8000cf6:	d908      	bls.n	8000d0a <__udivmoddi4+0x14e>
 8000cf8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cfc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d00:	d202      	bcs.n	8000d08 <__udivmoddi4+0x14c>
 8000d02:	45a6      	cmp	lr, r4
 8000d04:	f200 80bb 	bhi.w	8000e7e <__udivmoddi4+0x2c2>
 8000d08:	4610      	mov	r0, r2
 8000d0a:	eba4 040e 	sub.w	r4, r4, lr
 8000d0e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d12:	e79f      	b.n	8000c54 <__udivmoddi4+0x98>
 8000d14:	f1c1 0720 	rsb	r7, r1, #32
 8000d18:	408b      	lsls	r3, r1
 8000d1a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d1e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d22:	fa05 f401 	lsl.w	r4, r5, r1
 8000d26:	fa20 f307 	lsr.w	r3, r0, r7
 8000d2a:	40fd      	lsrs	r5, r7
 8000d2c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d30:	4323      	orrs	r3, r4
 8000d32:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d36:	fa1f fe8c 	uxth.w	lr, ip
 8000d3a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d3e:	0c1c      	lsrs	r4, r3, #16
 8000d40:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d44:	fb08 f50e 	mul.w	r5, r8, lr
 8000d48:	42a5      	cmp	r5, r4
 8000d4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d4e:	fa00 f001 	lsl.w	r0, r0, r1
 8000d52:	d90b      	bls.n	8000d6c <__udivmoddi4+0x1b0>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d5c:	f080 8088 	bcs.w	8000e70 <__udivmoddi4+0x2b4>
 8000d60:	42a5      	cmp	r5, r4
 8000d62:	f240 8085 	bls.w	8000e70 <__udivmoddi4+0x2b4>
 8000d66:	f1a8 0802 	sub.w	r8, r8, #2
 8000d6a:	4464      	add	r4, ip
 8000d6c:	1b64      	subs	r4, r4, r5
 8000d6e:	b29d      	uxth	r5, r3
 8000d70:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d74:	fb09 4413 	mls	r4, r9, r3, r4
 8000d78:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d7c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d80:	45a6      	cmp	lr, r4
 8000d82:	d908      	bls.n	8000d96 <__udivmoddi4+0x1da>
 8000d84:	eb1c 0404 	adds.w	r4, ip, r4
 8000d88:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d8c:	d26c      	bcs.n	8000e68 <__udivmoddi4+0x2ac>
 8000d8e:	45a6      	cmp	lr, r4
 8000d90:	d96a      	bls.n	8000e68 <__udivmoddi4+0x2ac>
 8000d92:	3b02      	subs	r3, #2
 8000d94:	4464      	add	r4, ip
 8000d96:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d9a:	fba3 9502 	umull	r9, r5, r3, r2
 8000d9e:	eba4 040e 	sub.w	r4, r4, lr
 8000da2:	42ac      	cmp	r4, r5
 8000da4:	46c8      	mov	r8, r9
 8000da6:	46ae      	mov	lr, r5
 8000da8:	d356      	bcc.n	8000e58 <__udivmoddi4+0x29c>
 8000daa:	d053      	beq.n	8000e54 <__udivmoddi4+0x298>
 8000dac:	b156      	cbz	r6, 8000dc4 <__udivmoddi4+0x208>
 8000dae:	ebb0 0208 	subs.w	r2, r0, r8
 8000db2:	eb64 040e 	sbc.w	r4, r4, lr
 8000db6:	fa04 f707 	lsl.w	r7, r4, r7
 8000dba:	40ca      	lsrs	r2, r1
 8000dbc:	40cc      	lsrs	r4, r1
 8000dbe:	4317      	orrs	r7, r2
 8000dc0:	e9c6 7400 	strd	r7, r4, [r6]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dcc:	f1c3 0120 	rsb	r1, r3, #32
 8000dd0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dd4:	fa20 f201 	lsr.w	r2, r0, r1
 8000dd8:	fa25 f101 	lsr.w	r1, r5, r1
 8000ddc:	409d      	lsls	r5, r3
 8000dde:	432a      	orrs	r2, r5
 8000de0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000de4:	fa1f fe8c 	uxth.w	lr, ip
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1510 	mls	r5, r7, r0, r1
 8000df0:	0c11      	lsrs	r1, r2, #16
 8000df2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000df6:	fb00 f50e 	mul.w	r5, r0, lr
 8000dfa:	428d      	cmp	r5, r1
 8000dfc:	fa04 f403 	lsl.w	r4, r4, r3
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x258>
 8000e02:	eb1c 0101 	adds.w	r1, ip, r1
 8000e06:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e0a:	d22f      	bcs.n	8000e6c <__udivmoddi4+0x2b0>
 8000e0c:	428d      	cmp	r5, r1
 8000e0e:	d92d      	bls.n	8000e6c <__udivmoddi4+0x2b0>
 8000e10:	3802      	subs	r0, #2
 8000e12:	4461      	add	r1, ip
 8000e14:	1b49      	subs	r1, r1, r5
 8000e16:	b292      	uxth	r2, r2
 8000e18:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e1c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e20:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e24:	fb05 f10e 	mul.w	r1, r5, lr
 8000e28:	4291      	cmp	r1, r2
 8000e2a:	d908      	bls.n	8000e3e <__udivmoddi4+0x282>
 8000e2c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e30:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e34:	d216      	bcs.n	8000e64 <__udivmoddi4+0x2a8>
 8000e36:	4291      	cmp	r1, r2
 8000e38:	d914      	bls.n	8000e64 <__udivmoddi4+0x2a8>
 8000e3a:	3d02      	subs	r5, #2
 8000e3c:	4462      	add	r2, ip
 8000e3e:	1a52      	subs	r2, r2, r1
 8000e40:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e44:	e738      	b.n	8000cb8 <__udivmoddi4+0xfc>
 8000e46:	4631      	mov	r1, r6
 8000e48:	4630      	mov	r0, r6
 8000e4a:	e708      	b.n	8000c5e <__udivmoddi4+0xa2>
 8000e4c:	4639      	mov	r1, r7
 8000e4e:	e6e6      	b.n	8000c1e <__udivmoddi4+0x62>
 8000e50:	4610      	mov	r0, r2
 8000e52:	e6fb      	b.n	8000c4c <__udivmoddi4+0x90>
 8000e54:	4548      	cmp	r0, r9
 8000e56:	d2a9      	bcs.n	8000dac <__udivmoddi4+0x1f0>
 8000e58:	ebb9 0802 	subs.w	r8, r9, r2
 8000e5c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e60:	3b01      	subs	r3, #1
 8000e62:	e7a3      	b.n	8000dac <__udivmoddi4+0x1f0>
 8000e64:	4645      	mov	r5, r8
 8000e66:	e7ea      	b.n	8000e3e <__udivmoddi4+0x282>
 8000e68:	462b      	mov	r3, r5
 8000e6a:	e794      	b.n	8000d96 <__udivmoddi4+0x1da>
 8000e6c:	4640      	mov	r0, r8
 8000e6e:	e7d1      	b.n	8000e14 <__udivmoddi4+0x258>
 8000e70:	46d0      	mov	r8, sl
 8000e72:	e77b      	b.n	8000d6c <__udivmoddi4+0x1b0>
 8000e74:	3d02      	subs	r5, #2
 8000e76:	4462      	add	r2, ip
 8000e78:	e732      	b.n	8000ce0 <__udivmoddi4+0x124>
 8000e7a:	4608      	mov	r0, r1
 8000e7c:	e70a      	b.n	8000c94 <__udivmoddi4+0xd8>
 8000e7e:	4464      	add	r4, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e742      	b.n	8000d0a <__udivmoddi4+0x14e>

08000e84 <__aeabi_idiv0>:
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop

08000e88 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == B1_Pin) {
 8000e92:	88fb      	ldrh	r3, [r7, #6]
 8000e94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e98:	d103      	bne.n	8000ea2 <HAL_GPIO_EXTI_Callback+0x1a>
    exit_while_loop = 1;
 8000e9a:	4b0d      	ldr	r3, [pc, #52]	; (8000ed0 <HAL_GPIO_EXTI_Callback+0x48>)
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	601a      	str	r2, [r3, #0]
    // if real_seconds is 1 second, calculate the rpm
    if (g_rpm_tick_count == UINT32_MAX) {
      g_rpm_tick_count = 0;
    }
  }
}
 8000ea0:	e00f      	b.n	8000ec2 <HAL_GPIO_EXTI_Callback+0x3a>
  else if (GPIO_Pin == RPM_TICK_Pin) {
 8000ea2:	88fb      	ldrh	r3, [r7, #6]
 8000ea4:	2b04      	cmp	r3, #4
 8000ea6:	d10c      	bne.n	8000ec2 <HAL_GPIO_EXTI_Callback+0x3a>
    g_rpm_tick_count++;
 8000ea8:	4b0a      	ldr	r3, [pc, #40]	; (8000ed4 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	3301      	adds	r3, #1
 8000eae:	4a09      	ldr	r2, [pc, #36]	; (8000ed4 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000eb0:	6013      	str	r3, [r2, #0]
    if (g_rpm_tick_count == UINT32_MAX) {
 8000eb2:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eba:	d102      	bne.n	8000ec2 <HAL_GPIO_EXTI_Callback+0x3a>
      g_rpm_tick_count = 0;
 8000ebc:	4b05      	ldr	r3, [pc, #20]	; (8000ed4 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
}
 8000ec2:	bf00      	nop
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	20000430 	.word	0x20000430
 8000ed4:	20000464 	.word	0x20000464

08000ed8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a19      	ldr	r2, [pc, #100]	; (8000f4c <HAL_UART_RxCpltCallback+0x74>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d12b      	bne.n	8000f42 <HAL_UART_RxCpltCallback+0x6a>
  {
    if (rx_data == '\r')
 8000eea:	4b19      	ldr	r3, [pc, #100]	; (8000f50 <HAL_UART_RxCpltCallback+0x78>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	2b0d      	cmp	r3, #13
 8000ef0:	d112      	bne.n	8000f18 <HAL_UART_RxCpltCallback+0x40>
    {
      buffer[buffer_index] = '\0';
 8000ef2:	4b18      	ldr	r3, [pc, #96]	; (8000f54 <HAL_UART_RxCpltCallback+0x7c>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a18      	ldr	r2, [pc, #96]	; (8000f58 <HAL_UART_RxCpltCallback+0x80>)
 8000ef8:	2100      	movs	r1, #0
 8000efa:	54d1      	strb	r1, [r2, r3]
      rcv_intpt_flag = 1;
 8000efc:	4b17      	ldr	r3, [pc, #92]	; (8000f5c <HAL_UART_RxCpltCallback+0x84>)
 8000efe:	2201      	movs	r2, #1
 8000f00:	701a      	strb	r2, [r3, #0]
      buffer_index = 0; // Reset buffer index for next input
 8000f02:	4b14      	ldr	r3, [pc, #80]	; (8000f54 <HAL_UART_RxCpltCallback+0x7c>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
      HAL_UART_Transmit(&huart6, (uint8_t *)"\r\n", 2, HAL_MAX_DELAY); // Echo newline
 8000f08:	f04f 33ff 	mov.w	r3, #4294967295
 8000f0c:	2202      	movs	r2, #2
 8000f0e:	4914      	ldr	r1, [pc, #80]	; (8000f60 <HAL_UART_RxCpltCallback+0x88>)
 8000f10:	4814      	ldr	r0, [pc, #80]	; (8000f64 <HAL_UART_RxCpltCallback+0x8c>)
 8000f12:	f004 f9d2 	bl	80052ba <HAL_UART_Transmit>
 8000f16:	e00f      	b.n	8000f38 <HAL_UART_RxCpltCallback+0x60>
    }
    else
    {
      buffer[buffer_index++] = rx_data;
 8000f18:	4b0e      	ldr	r3, [pc, #56]	; (8000f54 <HAL_UART_RxCpltCallback+0x7c>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	1c5a      	adds	r2, r3, #1
 8000f1e:	490d      	ldr	r1, [pc, #52]	; (8000f54 <HAL_UART_RxCpltCallback+0x7c>)
 8000f20:	600a      	str	r2, [r1, #0]
 8000f22:	4a0b      	ldr	r2, [pc, #44]	; (8000f50 <HAL_UART_RxCpltCallback+0x78>)
 8000f24:	7811      	ldrb	r1, [r2, #0]
 8000f26:	4a0c      	ldr	r2, [pc, #48]	; (8000f58 <HAL_UART_RxCpltCallback+0x80>)
 8000f28:	54d1      	strb	r1, [r2, r3]
      HAL_UART_Transmit(&huart6, &rx_data, 1, HAL_MAX_DELAY); // Echo the received character
 8000f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f2e:	2201      	movs	r2, #1
 8000f30:	4907      	ldr	r1, [pc, #28]	; (8000f50 <HAL_UART_RxCpltCallback+0x78>)
 8000f32:	480c      	ldr	r0, [pc, #48]	; (8000f64 <HAL_UART_RxCpltCallback+0x8c>)
 8000f34:	f004 f9c1 	bl	80052ba <HAL_UART_Transmit>
    }
    HAL_UART_Receive_IT(&huart6, &rx_data, 1);
 8000f38:	2201      	movs	r2, #1
 8000f3a:	4905      	ldr	r1, [pc, #20]	; (8000f50 <HAL_UART_RxCpltCallback+0x78>)
 8000f3c:	4809      	ldr	r0, [pc, #36]	; (8000f64 <HAL_UART_RxCpltCallback+0x8c>)
 8000f3e:	f004 fa4e 	bl	80053de <HAL_UART_Receive_IT>
  }
}
 8000f42:	bf00      	nop
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40011400 	.word	0x40011400
 8000f50:	2000042c 	.word	0x2000042c
 8000f54:	20000428 	.word	0x20000428
 8000f58:	20000228 	.word	0x20000228
 8000f5c:	2000042d 	.word	0x2000042d
 8000f60:	0800764c 	.word	0x0800764c
 8000f64:	200001e4 	.word	0x200001e4

08000f68 <handle_setup_mode>:

void handle_setup_mode(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000f6e:	af00      	add	r7, sp, #0
  char response[BUFFER_SIZE];

  snprintf(response, BUFFER_SIZE, "SETUP MODE\r\n");
 8000f70:	463b      	mov	r3, r7
 8000f72:	4a3c      	ldr	r2, [pc, #240]	; (8001064 <handle_setup_mode+0xfc>)
 8000f74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f005 f9c9 	bl	8006310 <sniprintf>
  HAL_UART_Transmit(&huart6, (uint8_t *)response, strlen(response), HAL_MAX_DELAY);
 8000f7e:	463b      	mov	r3, r7
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff f92d 	bl	80001e0 <strlen>
 8000f86:	4603      	mov	r3, r0
 8000f88:	b29a      	uxth	r2, r3
 8000f8a:	4639      	mov	r1, r7
 8000f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f90:	4835      	ldr	r0, [pc, #212]	; (8001068 <handle_setup_mode+0x100>)
 8000f92:	f004 f992 	bl	80052ba <HAL_UART_Transmit>
  snprintf(response, BUFFER_SIZE, "0 - MANUAL, 1 - 60% PWM, 2 - 80% PWM, 3 - 99% PWM\r\n");
 8000f96:	463b      	mov	r3, r7
 8000f98:	4a34      	ldr	r2, [pc, #208]	; (800106c <handle_setup_mode+0x104>)
 8000f9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f005 f9b6 	bl	8006310 <sniprintf>
  HAL_UART_Transmit(&huart6, (uint8_t *)response, strlen(response), HAL_MAX_DELAY);
 8000fa4:	463b      	mov	r3, r7
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff f91a 	bl	80001e0 <strlen>
 8000fac:	4603      	mov	r3, r0
 8000fae:	b29a      	uxth	r2, r3
 8000fb0:	4639      	mov	r1, r7
 8000fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb6:	482c      	ldr	r0, [pc, #176]	; (8001068 <handle_setup_mode+0x100>)
 8000fb8:	f004 f97f 	bl	80052ba <HAL_UART_Transmit>


  prompt_and_receive("Enter Inlet Motor Speed PWM (0-3): ", &inlet_pwm);
 8000fbc:	492c      	ldr	r1, [pc, #176]	; (8001070 <handle_setup_mode+0x108>)
 8000fbe:	482d      	ldr	r0, [pc, #180]	; (8001074 <handle_setup_mode+0x10c>)
 8000fc0:	f000 f88e 	bl	80010e0 <prompt_and_receive>
  prompt_and_receive("Enter Zone 1 Motor Speed PWM (0-3): ", &zone1_pwm);
 8000fc4:	492c      	ldr	r1, [pc, #176]	; (8001078 <handle_setup_mode+0x110>)
 8000fc6:	482d      	ldr	r0, [pc, #180]	; (800107c <handle_setup_mode+0x114>)
 8000fc8:	f000 f88a 	bl	80010e0 <prompt_and_receive>
  prompt_and_receive("Enter Zone 2 Motor Speed PWM (0-3): ", &zone2_pwm);
 8000fcc:	492c      	ldr	r1, [pc, #176]	; (8001080 <handle_setup_mode+0x118>)
 8000fce:	482d      	ldr	r0, [pc, #180]	; (8001084 <handle_setup_mode+0x11c>)
 8000fd0:	f000 f886 	bl	80010e0 <prompt_and_receive>
  prompt_and_receive("Enter Zone 3 Motor Speed PWM (0-3): ", &zone3_pwm);
 8000fd4:	492c      	ldr	r1, [pc, #176]	; (8001088 <handle_setup_mode+0x120>)
 8000fd6:	482d      	ldr	r0, [pc, #180]	; (800108c <handle_setup_mode+0x124>)
 8000fd8:	f000 f882 	bl	80010e0 <prompt_and_receive>
  snprintf(response, BUFFER_SIZE, "\n0 - 12AM, 1 - 1AM, ... , 22 - 10PM, 23 - 11PM\r\n");
 8000fdc:	463b      	mov	r3, r7
 8000fde:	4a2c      	ldr	r2, [pc, #176]	; (8001090 <handle_setup_mode+0x128>)
 8000fe0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f005 f993 	bl	8006310 <sniprintf>
  HAL_UART_Transmit(&huart6, (uint8_t *)response, strlen(response), HAL_MAX_DELAY);
 8000fea:	463b      	mov	r3, r7
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff f8f7 	bl	80001e0 <strlen>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	b29a      	uxth	r2, r3
 8000ff6:	4639      	mov	r1, r7
 8000ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffc:	481a      	ldr	r0, [pc, #104]	; (8001068 <handle_setup_mode+0x100>)
 8000ffe:	f004 f95c 	bl	80052ba <HAL_UART_Transmit>

  prompt_and_receive("Enter Current Wall Clock Time (00-23): ", &hours);
 8001002:	4924      	ldr	r1, [pc, #144]	; (8001094 <handle_setup_mode+0x12c>)
 8001004:	4824      	ldr	r0, [pc, #144]	; (8001098 <handle_setup_mode+0x130>)
 8001006:	f000 f86b 	bl	80010e0 <prompt_and_receive>
  prompt_and_receive("Enter Inlet Wall Clock Start Time (00-23): ", &inlet_start);
 800100a:	4924      	ldr	r1, [pc, #144]	; (800109c <handle_setup_mode+0x134>)
 800100c:	4824      	ldr	r0, [pc, #144]	; (80010a0 <handle_setup_mode+0x138>)
 800100e:	f000 f867 	bl	80010e0 <prompt_and_receive>
  prompt_and_receive("Enter Inlet Wall Clock Stop Time (00-23): ", &inlet_stop);
 8001012:	4924      	ldr	r1, [pc, #144]	; (80010a4 <handle_setup_mode+0x13c>)
 8001014:	4824      	ldr	r0, [pc, #144]	; (80010a8 <handle_setup_mode+0x140>)
 8001016:	f000 f863 	bl	80010e0 <prompt_and_receive>
  prompt_and_receive("Enter Zone 1 Wall Clock Start Time (00-23): ", &zone1_start);
 800101a:	4924      	ldr	r1, [pc, #144]	; (80010ac <handle_setup_mode+0x144>)
 800101c:	4824      	ldr	r0, [pc, #144]	; (80010b0 <handle_setup_mode+0x148>)
 800101e:	f000 f85f 	bl	80010e0 <prompt_and_receive>
  prompt_and_receive("Enter Zone 1 Wall Clock Stop Time (00-23): ", &zone1_stop);
 8001022:	4924      	ldr	r1, [pc, #144]	; (80010b4 <handle_setup_mode+0x14c>)
 8001024:	4824      	ldr	r0, [pc, #144]	; (80010b8 <handle_setup_mode+0x150>)
 8001026:	f000 f85b 	bl	80010e0 <prompt_and_receive>
  prompt_and_receive("Enter Zone 2 Wall Clock Start Time (00-23): ", &zone2_start);
 800102a:	4924      	ldr	r1, [pc, #144]	; (80010bc <handle_setup_mode+0x154>)
 800102c:	4824      	ldr	r0, [pc, #144]	; (80010c0 <handle_setup_mode+0x158>)
 800102e:	f000 f857 	bl	80010e0 <prompt_and_receive>
  prompt_and_receive("Enter Zone 2 Wall Clock Stop Time (00-23): ", &zone2_stop);
 8001032:	4924      	ldr	r1, [pc, #144]	; (80010c4 <handle_setup_mode+0x15c>)
 8001034:	4824      	ldr	r0, [pc, #144]	; (80010c8 <handle_setup_mode+0x160>)
 8001036:	f000 f853 	bl	80010e0 <prompt_and_receive>
  prompt_and_receive("Enter Zone 3 Wall Clock Start Time (00-23): ", &zone3_start);
 800103a:	4924      	ldr	r1, [pc, #144]	; (80010cc <handle_setup_mode+0x164>)
 800103c:	4824      	ldr	r0, [pc, #144]	; (80010d0 <handle_setup_mode+0x168>)
 800103e:	f000 f84f 	bl	80010e0 <prompt_and_receive>
  prompt_and_receive("Enter Zone 3 Wall Clock Stop Time (00-23): ", &zone3_stop);
 8001042:	4924      	ldr	r1, [pc, #144]	; (80010d4 <handle_setup_mode+0x16c>)
 8001044:	4824      	ldr	r0, [pc, #144]	; (80010d8 <handle_setup_mode+0x170>)
 8001046:	f000 f84b 	bl	80010e0 <prompt_and_receive>
//
//  snprintf(response, BUFFER_SIZE, "Configuration Completed:\r\nInlet PWM: %d\r\nZone 1 PWM: %d\r\nZone 2 PWM: %d\r\nZone 3 PWM: %d\r\nCurrent Time: %d\r\nInlet Start: %d\r\nInlet Stop: %d\r\nZone 1 Start: %d\r\nZone 1 Stop: %d\r\nZone 2 Start: %d\r\nZone 2 Stop: %d\r\nZone 3 Start: %d\r\nZone 3 Stop: %d\r\n",
//           inlet_pwm, zone1_pwm, zone2_pwm, zone3_pwm, current_time, inlet_start, inlet_stop, zone1_start, zone1_stop, zone2_start, zone2_stop, zone3_start, zone3_stop);
  HAL_UART_Transmit(&huart6, "\r\n", 2, HAL_MAX_DELAY);
 800104a:	f04f 33ff 	mov.w	r3, #4294967295
 800104e:	2202      	movs	r2, #2
 8001050:	4922      	ldr	r1, [pc, #136]	; (80010dc <handle_setup_mode+0x174>)
 8001052:	4805      	ldr	r0, [pc, #20]	; (8001068 <handle_setup_mode+0x100>)
 8001054:	f004 f931 	bl	80052ba <HAL_UART_Transmit>
}
 8001058:	bf00      	nop
 800105a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	08007650 	.word	0x08007650
 8001068:	200001e4 	.word	0x200001e4
 800106c:	08007660 	.word	0x08007660
 8001070:	20000434 	.word	0x20000434
 8001074:	08007694 	.word	0x08007694
 8001078:	20000438 	.word	0x20000438
 800107c:	080076b8 	.word	0x080076b8
 8001080:	2000043c 	.word	0x2000043c
 8001084:	080076e0 	.word	0x080076e0
 8001088:	20000440 	.word	0x20000440
 800108c:	08007708 	.word	0x08007708
 8001090:	08007730 	.word	0x08007730
 8001094:	20000480 	.word	0x20000480
 8001098:	08007764 	.word	0x08007764
 800109c:	20000444 	.word	0x20000444
 80010a0:	0800778c 	.word	0x0800778c
 80010a4:	20000448 	.word	0x20000448
 80010a8:	080077b8 	.word	0x080077b8
 80010ac:	2000044c 	.word	0x2000044c
 80010b0:	080077e4 	.word	0x080077e4
 80010b4:	20000450 	.word	0x20000450
 80010b8:	08007814 	.word	0x08007814
 80010bc:	20000454 	.word	0x20000454
 80010c0:	08007840 	.word	0x08007840
 80010c4:	20000458 	.word	0x20000458
 80010c8:	08007870 	.word	0x08007870
 80010cc:	2000045c 	.word	0x2000045c
 80010d0:	0800789c 	.word	0x0800789c
 80010d4:	20000460 	.word	0x20000460
 80010d8:	080078cc 	.word	0x080078cc
 80010dc:	0800764c 	.word	0x0800764c

080010e0 <prompt_and_receive>:

void prompt_and_receive(const char *prompt, int *value)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80010ec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80010f0:	6018      	str	r0, [r3, #0]
 80010f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80010f6:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80010fa:	6019      	str	r1, [r3, #0]
  char response[BUFFER_SIZE];

  HAL_UART_Transmit(&huart6, (uint8_t *)prompt, strlen(prompt), HAL_MAX_DELAY);
 80010fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001100:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001104:	6818      	ldr	r0, [r3, #0]
 8001106:	f7ff f86b 	bl	80001e0 <strlen>
 800110a:	4603      	mov	r3, r0
 800110c:	b29a      	uxth	r2, r3
 800110e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001112:	f5a3 7101 	sub.w	r1, r3, #516	; 0x204
 8001116:	f04f 33ff 	mov.w	r3, #4294967295
 800111a:	6809      	ldr	r1, [r1, #0]
 800111c:	480c      	ldr	r0, [pc, #48]	; (8001150 <prompt_and_receive+0x70>)
 800111e:	f004 f8cc 	bl	80052ba <HAL_UART_Transmit>
  rcv_intpt_flag = 0;
 8001122:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <prompt_and_receive+0x74>)
 8001124:	2200      	movs	r2, #0
 8001126:	701a      	strb	r2, [r3, #0]
  while (!rcv_intpt_flag); // Wait for input
 8001128:	bf00      	nop
 800112a:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <prompt_and_receive+0x74>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	b2db      	uxtb	r3, r3
 8001130:	2b00      	cmp	r3, #0
 8001132:	d0fa      	beq.n	800112a <prompt_and_receive+0x4a>
  sscanf(buffer, "%d", value); // load value with the inputted characters
 8001134:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001138:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	4906      	ldr	r1, [pc, #24]	; (8001158 <prompt_and_receive+0x78>)
 8001140:	4806      	ldr	r0, [pc, #24]	; (800115c <prompt_and_receive+0x7c>)
 8001142:	f005 f939 	bl	80063b8 <siscanf>
}
 8001146:	bf00      	nop
 8001148:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	200001e4 	.word	0x200001e4
 8001154:	2000042d 	.word	0x2000042d
 8001158:	080078f8 	.word	0x080078f8
 800115c:	20000228 	.word	0x20000228

08001160 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM4) {
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a46      	ldr	r2, [pc, #280]	; (8001288 <HAL_TIM_PeriodElapsedCallback+0x128>)
 800116e:	4293      	cmp	r3, r2
 8001170:	f040 8086 	bne.w	8001280 <HAL_TIM_PeriodElapsedCallback+0x120>
    real_seconds++;
 8001174:	4b45      	ldr	r3, [pc, #276]	; (800128c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	3301      	adds	r3, #1
 800117a:	4a44      	ldr	r2, [pc, #272]	; (800128c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800117c:	6013      	str	r3, [r2, #0]

    //global update vars adc, rpm
    g_adc_value = get_adc_value();
 800117e:	f000 f9f5 	bl	800156c <get_adc_value>
 8001182:	4603      	mov	r3, r0
 8001184:	461a      	mov	r2, r3
 8001186:	4b42      	ldr	r3, [pc, #264]	; (8001290 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001188:	601a      	str	r2, [r3, #0]
    uint32_t current_time = HAL_GetTick();
 800118a:	f001 f9bb 	bl	8002504 <HAL_GetTick>
 800118e:	60f8      	str	r0, [r7, #12]
    if (current_time - g_last_rpm_calc_time >= SAMPLE_PERIOD_MS)
 8001190:	4b40      	ldr	r3, [pc, #256]	; (8001294 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	68fa      	ldr	r2, [r7, #12]
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800119c:	d311      	bcc.n	80011c2 <HAL_TIM_PeriodElapsedCallback+0x62>
    {
        // Calculate RPM
        g_current_rpm = (g_rpm_tick_count * 60 * 1000) / (SLOTS_PER_REVOLUTION * SAMPLE_PERIOD_MS);
 800119e:	4b3e      	ldr	r3, [pc, #248]	; (8001298 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f64e 2260 	movw	r2, #60000	; 0xea60
 80011a6:	fb02 f303 	mul.w	r3, r2, r3
 80011aa:	4a3c      	ldr	r2, [pc, #240]	; (800129c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80011ac:	fba2 2303 	umull	r2, r3, r2, r3
 80011b0:	0b9b      	lsrs	r3, r3, #14
 80011b2:	4a3b      	ldr	r2, [pc, #236]	; (80012a0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80011b4:	6013      	str	r3, [r2, #0]
        g_rpm_tick_count = 0;  // Reset the count for the next sample period
 80011b6:	4b38      	ldr	r3, [pc, #224]	; (8001298 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
        g_last_rpm_calc_time = current_time;
 80011bc:	4a35      	ldr	r2, [pc, #212]	; (8001294 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	6013      	str	r3, [r2, #0]
    }


    seconds += 600;
 80011c2:	4b38      	ldr	r3, [pc, #224]	; (80012a4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80011ca:	4a36      	ldr	r2, [pc, #216]	; (80012a4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80011cc:	6013      	str	r3, [r2, #0]
    if (seconds >= 60) {
 80011ce:	4b35      	ldr	r3, [pc, #212]	; (80012a4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2b3b      	cmp	r3, #59	; 0x3b
 80011d4:	dd54      	ble.n	8001280 <HAL_TIM_PeriodElapsedCallback+0x120>
      minutes += seconds / 60;
 80011d6:	4b33      	ldr	r3, [pc, #204]	; (80012a4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a33      	ldr	r2, [pc, #204]	; (80012a8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80011dc:	fb82 1203 	smull	r1, r2, r2, r3
 80011e0:	441a      	add	r2, r3
 80011e2:	1152      	asrs	r2, r2, #5
 80011e4:	17db      	asrs	r3, r3, #31
 80011e6:	1ad2      	subs	r2, r2, r3
 80011e8:	4b30      	ldr	r3, [pc, #192]	; (80012ac <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4413      	add	r3, r2
 80011ee:	4a2f      	ldr	r2, [pc, #188]	; (80012ac <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80011f0:	6013      	str	r3, [r2, #0]
      seconds %= 60;
 80011f2:	4b2c      	ldr	r3, [pc, #176]	; (80012a4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	4b2c      	ldr	r3, [pc, #176]	; (80012a8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80011f8:	fb83 1302 	smull	r1, r3, r3, r2
 80011fc:	4413      	add	r3, r2
 80011fe:	1159      	asrs	r1, r3, #5
 8001200:	17d3      	asrs	r3, r2, #31
 8001202:	1ac9      	subs	r1, r1, r3
 8001204:	460b      	mov	r3, r1
 8001206:	011b      	lsls	r3, r3, #4
 8001208:	1a5b      	subs	r3, r3, r1
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	1ad1      	subs	r1, r2, r3
 800120e:	4b25      	ldr	r3, [pc, #148]	; (80012a4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001210:	6019      	str	r1, [r3, #0]
      if (minutes >= 60) {
 8001212:	4b26      	ldr	r3, [pc, #152]	; (80012ac <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2b3b      	cmp	r3, #59	; 0x3b
 8001218:	dd32      	ble.n	8001280 <HAL_TIM_PeriodElapsedCallback+0x120>
        hours += minutes / 60;
 800121a:	4b24      	ldr	r3, [pc, #144]	; (80012ac <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a22      	ldr	r2, [pc, #136]	; (80012a8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001220:	fb82 1203 	smull	r1, r2, r2, r3
 8001224:	441a      	add	r2, r3
 8001226:	1152      	asrs	r2, r2, #5
 8001228:	17db      	asrs	r3, r3, #31
 800122a:	1ad2      	subs	r2, r2, r3
 800122c:	4b20      	ldr	r3, [pc, #128]	; (80012b0 <HAL_TIM_PeriodElapsedCallback+0x150>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4413      	add	r3, r2
 8001232:	4a1f      	ldr	r2, [pc, #124]	; (80012b0 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001234:	6013      	str	r3, [r2, #0]
        minutes %= 60;
 8001236:	4b1d      	ldr	r3, [pc, #116]	; (80012ac <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	4b1b      	ldr	r3, [pc, #108]	; (80012a8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800123c:	fb83 1302 	smull	r1, r3, r3, r2
 8001240:	4413      	add	r3, r2
 8001242:	1159      	asrs	r1, r3, #5
 8001244:	17d3      	asrs	r3, r2, #31
 8001246:	1ac9      	subs	r1, r1, r3
 8001248:	460b      	mov	r3, r1
 800124a:	011b      	lsls	r3, r3, #4
 800124c:	1a5b      	subs	r3, r3, r1
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	1ad1      	subs	r1, r2, r3
 8001252:	4b16      	ldr	r3, [pc, #88]	; (80012ac <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001254:	6019      	str	r1, [r3, #0]
        if (hours >= 24) {
 8001256:	4b16      	ldr	r3, [pc, #88]	; (80012b0 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	2b17      	cmp	r3, #23
 800125c:	dd0e      	ble.n	800127c <HAL_TIM_PeriodElapsedCallback+0x11c>
          hours %= 24;
 800125e:	4b14      	ldr	r3, [pc, #80]	; (80012b0 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001260:	6819      	ldr	r1, [r3, #0]
 8001262:	4b14      	ldr	r3, [pc, #80]	; (80012b4 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001264:	fb83 2301 	smull	r2, r3, r3, r1
 8001268:	109a      	asrs	r2, r3, #2
 800126a:	17cb      	asrs	r3, r1, #31
 800126c:	1ad2      	subs	r2, r2, r3
 800126e:	4613      	mov	r3, r2
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	4413      	add	r3, r2
 8001274:	00db      	lsls	r3, r3, #3
 8001276:	1aca      	subs	r2, r1, r3
 8001278:	4b0d      	ldr	r3, [pc, #52]	; (80012b0 <HAL_TIM_PeriodElapsedCallback+0x150>)
 800127a:	601a      	str	r2, [r3, #0]
        }
        // Update display every hour
        update_display();
 800127c:	f000 f872 	bl	8001364 <update_display>
      }
    }
    //display_value_on_timer_board(g_water_depth);
  }
}
 8001280:	bf00      	nop
 8001282:	3710      	adds	r7, #16
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	40000800 	.word	0x40000800
 800128c:	2000048c 	.word	0x2000048c
 8001290:	20000474 	.word	0x20000474
 8001294:	20000478 	.word	0x20000478
 8001298:	20000464 	.word	0x20000464
 800129c:	d1b71759 	.word	0xd1b71759
 80012a0:	2000047c 	.word	0x2000047c
 80012a4:	20000488 	.word	0x20000488
 80012a8:	88888889 	.word	0x88888889
 80012ac:	20000484 	.word	0x20000484
 80012b0:	20000480 	.word	0x20000480
 80012b4:	2aaaaaab 	.word	0x2aaaaaab

080012b8 <HAL_TIM_IC_CaptureCallback>:
int g_time_edge1 = 0;
int g_time_edge2 = 0;
int g_time_diff = 0;
int g_hcsr04_Rx_flag = 0;
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
//	 HAL_UART_Transmit(&huart6, "AAA", 3, 1000);
    if (htim->Instance == TIM1)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a1f      	ldr	r2, [pc, #124]	; (8001344 <HAL_TIM_IC_CaptureCallback+0x8c>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d138      	bne.n	800133c <HAL_TIM_IC_CaptureCallback+0x84>
    {
        if (htim->Channel == 2)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	7f1b      	ldrb	r3, [r3, #28]
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d134      	bne.n	800133c <HAL_TIM_IC_CaptureCallback+0x84>
        {
             if (g_first_edge == 0)  // if the first value is not captured
 80012d2:	4b1d      	ldr	r3, [pc, #116]	; (8001348 <HAL_TIM_IC_CaptureCallback+0x90>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d10b      	bne.n	80012f2 <HAL_TIM_IC_CaptureCallback+0x3a>
             {
                 g_time_edge1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);  // read the first value
 80012da:	2104      	movs	r1, #4
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f003 fad1 	bl	8004884 <HAL_TIM_ReadCapturedValue>
 80012e2:	4603      	mov	r3, r0
 80012e4:	461a      	mov	r2, r3
 80012e6:	4b19      	ldr	r3, [pc, #100]	; (800134c <HAL_TIM_IC_CaptureCallback+0x94>)
 80012e8:	601a      	str	r2, [r3, #0]
                 g_first_edge = 1;  // set the first captured as true
 80012ea:	4b17      	ldr	r3, [pc, #92]	; (8001348 <HAL_TIM_IC_CaptureCallback+0x90>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	601a      	str	r2, [r3, #0]
             }


        }
    }
}
 80012f0:	e024      	b.n	800133c <HAL_TIM_IC_CaptureCallback+0x84>
                 g_time_edge2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);  // read second value
 80012f2:	2104      	movs	r1, #4
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f003 fac5 	bl	8004884 <HAL_TIM_ReadCapturedValue>
 80012fa:	4603      	mov	r3, r0
 80012fc:	461a      	mov	r2, r3
 80012fe:	4b14      	ldr	r3, [pc, #80]	; (8001350 <HAL_TIM_IC_CaptureCallback+0x98>)
 8001300:	601a      	str	r2, [r3, #0]
                 __HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2200      	movs	r2, #0
 8001308:	625a      	str	r2, [r3, #36]	; 0x24
                 g_hcsr04_Rx_flag = 1;  // set the interrupt flag for result done
 800130a:	4b12      	ldr	r3, [pc, #72]	; (8001354 <HAL_TIM_IC_CaptureCallback+0x9c>)
 800130c:	2201      	movs	r2, #1
 800130e:	601a      	str	r2, [r3, #0]
                 g_time_diff = g_time_edge2 - g_time_edge1;
 8001310:	4b0f      	ldr	r3, [pc, #60]	; (8001350 <HAL_TIM_IC_CaptureCallback+0x98>)
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	4b0d      	ldr	r3, [pc, #52]	; (800134c <HAL_TIM_IC_CaptureCallback+0x94>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	4a0f      	ldr	r2, [pc, #60]	; (8001358 <HAL_TIM_IC_CaptureCallback+0xa0>)
 800131c:	6013      	str	r3, [r2, #0]
                 g_water_depth = g_time_diff/148.0;
 800131e:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff f906 	bl	8000534 <__aeabi_i2d>
 8001328:	f04f 0200 	mov.w	r2, #0
 800132c:	4b0b      	ldr	r3, [pc, #44]	; (800135c <HAL_TIM_IC_CaptureCallback+0xa4>)
 800132e:	f7ff fa95 	bl	800085c <__aeabi_ddiv>
 8001332:	4602      	mov	r2, r0
 8001334:	460b      	mov	r3, r1
 8001336:	490a      	ldr	r1, [pc, #40]	; (8001360 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8001338:	e9c1 2300 	strd	r2, r3, [r1]
}
 800133c:	bf00      	nop
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40010000 	.word	0x40010000
 8001348:	20000590 	.word	0x20000590
 800134c:	20000594 	.word	0x20000594
 8001350:	20000598 	.word	0x20000598
 8001354:	200005a0 	.word	0x200005a0
 8001358:	2000059c 	.word	0x2000059c
 800135c:	40628000 	.word	0x40628000
 8001360:	20000468 	.word	0x20000468

08001364 <update_display>:

// Add this new function
void update_display(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b08a      	sub	sp, #40	; 0x28
 8001368:	af04      	add	r7, sp, #16
  char active_zone[10] = "None";
 800136a:	4a66      	ldr	r2, [pc, #408]	; (8001504 <update_display+0x1a0>)
 800136c:	463b      	mov	r3, r7
 800136e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001372:	6018      	str	r0, [r3, #0]
 8001374:	3304      	adds	r3, #4
 8001376:	7019      	strb	r1, [r3, #0]
 8001378:	1d7b      	adds	r3, r7, #5
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	711a      	strb	r2, [r3, #4]
  int active_pwm = 0;
 8001380:	2300      	movs	r3, #0
 8001382:	617b      	str	r3, [r7, #20]
  int motor_rpm = 0;
 8001384:	2300      	movs	r3, #0
 8001386:	60fb      	str	r3, [r7, #12]

  // Determine active zone and PWM
  if (hours >= inlet_start && hours < inlet_stop) {
 8001388:	4b5f      	ldr	r3, [pc, #380]	; (8001508 <update_display+0x1a4>)
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	4b5f      	ldr	r3, [pc, #380]	; (800150c <update_display+0x1a8>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	429a      	cmp	r2, r3
 8001392:	db10      	blt.n	80013b6 <update_display+0x52>
 8001394:	4b5c      	ldr	r3, [pc, #368]	; (8001508 <update_display+0x1a4>)
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	4b5d      	ldr	r3, [pc, #372]	; (8001510 <update_display+0x1ac>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	429a      	cmp	r2, r3
 800139e:	da0a      	bge.n	80013b6 <update_display+0x52>
    strcpy(active_zone, "Inlet");
 80013a0:	463b      	mov	r3, r7
 80013a2:	4a5c      	ldr	r2, [pc, #368]	; (8001514 <update_display+0x1b0>)
 80013a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013a8:	6018      	str	r0, [r3, #0]
 80013aa:	3304      	adds	r3, #4
 80013ac:	8019      	strh	r1, [r3, #0]
    active_pwm = inlet_pwm;
 80013ae:	4b5a      	ldr	r3, [pc, #360]	; (8001518 <update_display+0x1b4>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	617b      	str	r3, [r7, #20]
  if (hours >= inlet_start && hours < inlet_stop) {
 80013b4:	e04c      	b.n	8001450 <update_display+0xec>
  } else if (hours >= zone1_start && hours < zone1_stop) {
 80013b6:	4b54      	ldr	r3, [pc, #336]	; (8001508 <update_display+0x1a4>)
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	4b58      	ldr	r3, [pc, #352]	; (800151c <update_display+0x1b8>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	429a      	cmp	r2, r3
 80013c0:	db13      	blt.n	80013ea <update_display+0x86>
 80013c2:	4b51      	ldr	r3, [pc, #324]	; (8001508 <update_display+0x1a4>)
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	4b56      	ldr	r3, [pc, #344]	; (8001520 <update_display+0x1bc>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	429a      	cmp	r2, r3
 80013cc:	da0d      	bge.n	80013ea <update_display+0x86>
    strcpy(active_zone, "Zone 1");
 80013ce:	463b      	mov	r3, r7
 80013d0:	4a54      	ldr	r2, [pc, #336]	; (8001524 <update_display+0x1c0>)
 80013d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013d6:	6018      	str	r0, [r3, #0]
 80013d8:	3304      	adds	r3, #4
 80013da:	8019      	strh	r1, [r3, #0]
 80013dc:	3302      	adds	r3, #2
 80013de:	0c0a      	lsrs	r2, r1, #16
 80013e0:	701a      	strb	r2, [r3, #0]
    active_pwm = zone1_pwm;
 80013e2:	4b51      	ldr	r3, [pc, #324]	; (8001528 <update_display+0x1c4>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	617b      	str	r3, [r7, #20]
  } else if (hours >= zone1_start && hours < zone1_stop) {
 80013e8:	e032      	b.n	8001450 <update_display+0xec>
  } else if (hours >= zone2_start && hours < zone2_stop) {
 80013ea:	4b47      	ldr	r3, [pc, #284]	; (8001508 <update_display+0x1a4>)
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	4b4f      	ldr	r3, [pc, #316]	; (800152c <update_display+0x1c8>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	db13      	blt.n	800141e <update_display+0xba>
 80013f6:	4b44      	ldr	r3, [pc, #272]	; (8001508 <update_display+0x1a4>)
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	4b4d      	ldr	r3, [pc, #308]	; (8001530 <update_display+0x1cc>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	429a      	cmp	r2, r3
 8001400:	da0d      	bge.n	800141e <update_display+0xba>
    strcpy(active_zone, "Zone 2");
 8001402:	463b      	mov	r3, r7
 8001404:	4a4b      	ldr	r2, [pc, #300]	; (8001534 <update_display+0x1d0>)
 8001406:	e892 0003 	ldmia.w	r2, {r0, r1}
 800140a:	6018      	str	r0, [r3, #0]
 800140c:	3304      	adds	r3, #4
 800140e:	8019      	strh	r1, [r3, #0]
 8001410:	3302      	adds	r3, #2
 8001412:	0c0a      	lsrs	r2, r1, #16
 8001414:	701a      	strb	r2, [r3, #0]
    active_pwm = zone2_pwm;
 8001416:	4b48      	ldr	r3, [pc, #288]	; (8001538 <update_display+0x1d4>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	617b      	str	r3, [r7, #20]
  } else if (hours >= zone2_start && hours < zone2_stop) {
 800141c:	e018      	b.n	8001450 <update_display+0xec>
  } else if (hours >= zone3_start && hours < zone3_stop) {
 800141e:	4b3a      	ldr	r3, [pc, #232]	; (8001508 <update_display+0x1a4>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	4b46      	ldr	r3, [pc, #280]	; (800153c <update_display+0x1d8>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	429a      	cmp	r2, r3
 8001428:	db12      	blt.n	8001450 <update_display+0xec>
 800142a:	4b37      	ldr	r3, [pc, #220]	; (8001508 <update_display+0x1a4>)
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	4b44      	ldr	r3, [pc, #272]	; (8001540 <update_display+0x1dc>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	429a      	cmp	r2, r3
 8001434:	da0c      	bge.n	8001450 <update_display+0xec>
    strcpy(active_zone, "Zone 3");
 8001436:	463b      	mov	r3, r7
 8001438:	4a42      	ldr	r2, [pc, #264]	; (8001544 <update_display+0x1e0>)
 800143a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800143e:	6018      	str	r0, [r3, #0]
 8001440:	3304      	adds	r3, #4
 8001442:	8019      	strh	r1, [r3, #0]
 8001444:	3302      	adds	r3, #2
 8001446:	0c0a      	lsrs	r2, r1, #16
 8001448:	701a      	strb	r2, [r3, #0]
    active_pwm = zone3_pwm;
 800144a:	4b3f      	ldr	r3, [pc, #252]	; (8001548 <update_display+0x1e4>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	617b      	str	r3, [r7, #20]
  }

  // Determine motor pwm%
  int pwm_percent = 0;
 8001450:	2300      	movs	r3, #0
 8001452:	613b      	str	r3, [r7, #16]


  switch(active_pwm) {
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	2b03      	cmp	r3, #3
 8001458:	d82f      	bhi.n	80014ba <update_display+0x156>
 800145a:	a201      	add	r2, pc, #4	; (adr r2, 8001460 <update_display+0xfc>)
 800145c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001460:	08001471 	.word	0x08001471
 8001464:	080014a9 	.word	0x080014a9
 8001468:	080014af 	.word	0x080014af
 800146c:	080014b5 	.word	0x080014b5
    case 0: pwm_percent = (g_adc_value/256.0)*100; break;
 8001470:	4b36      	ldr	r3, [pc, #216]	; (800154c <update_display+0x1e8>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff f85d 	bl	8000534 <__aeabi_i2d>
 800147a:	f04f 0200 	mov.w	r2, #0
 800147e:	4b34      	ldr	r3, [pc, #208]	; (8001550 <update_display+0x1ec>)
 8001480:	f7ff f9ec 	bl	800085c <__aeabi_ddiv>
 8001484:	4602      	mov	r2, r0
 8001486:	460b      	mov	r3, r1
 8001488:	4610      	mov	r0, r2
 800148a:	4619      	mov	r1, r3
 800148c:	f04f 0200 	mov.w	r2, #0
 8001490:	4b30      	ldr	r3, [pc, #192]	; (8001554 <update_display+0x1f0>)
 8001492:	f7ff f8b9 	bl	8000608 <__aeabi_dmul>
 8001496:	4602      	mov	r2, r0
 8001498:	460b      	mov	r3, r1
 800149a:	4610      	mov	r0, r2
 800149c:	4619      	mov	r1, r3
 800149e:	f7ff fb4d 	bl	8000b3c <__aeabi_d2iz>
 80014a2:	4603      	mov	r3, r0
 80014a4:	613b      	str	r3, [r7, #16]
 80014a6:	e008      	b.n	80014ba <update_display+0x156>
    case 1: pwm_percent = 60; break;
 80014a8:	233c      	movs	r3, #60	; 0x3c
 80014aa:	613b      	str	r3, [r7, #16]
 80014ac:	e005      	b.n	80014ba <update_display+0x156>
    case 2: pwm_percent = 80; break;
 80014ae:	2350      	movs	r3, #80	; 0x50
 80014b0:	613b      	str	r3, [r7, #16]
 80014b2:	e002      	b.n	80014ba <update_display+0x156>
    case 3: pwm_percent = 99; break;
 80014b4:	2363      	movs	r3, #99	; 0x63
 80014b6:	613b      	str	r3, [r7, #16]
 80014b8:	bf00      	nop
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014ba:	b672      	cpsid	i
}
 80014bc:	bf00      	nop
  // depth assumed to be gotten
//  update_current_water_reservoir_depth();

  // Format and send the display update, atomically
  __disable_irq();
  sprintf(txd_msg_buffer, "Time: %d:00 | Zone: %s | Motor Speed: %d%% | Motor RPM: %d | Reservoir: %d%%\r\n",
 80014be:	4b12      	ldr	r3, [pc, #72]	; (8001508 <update_display+0x1a4>)
 80014c0:	6819      	ldr	r1, [r3, #0]
 80014c2:	4b25      	ldr	r3, [pc, #148]	; (8001558 <update_display+0x1f4>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a25      	ldr	r2, [pc, #148]	; (800155c <update_display+0x1f8>)
 80014c8:	6812      	ldr	r2, [r2, #0]
 80014ca:	4638      	mov	r0, r7
 80014cc:	9202      	str	r2, [sp, #8]
 80014ce:	9301      	str	r3, [sp, #4]
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	9300      	str	r3, [sp, #0]
 80014d4:	4603      	mov	r3, r0
 80014d6:	460a      	mov	r2, r1
 80014d8:	4921      	ldr	r1, [pc, #132]	; (8001560 <update_display+0x1fc>)
 80014da:	4822      	ldr	r0, [pc, #136]	; (8001564 <update_display+0x200>)
 80014dc:	f004 ff4c 	bl	8006378 <siprintf>
  __ASM volatile ("cpsie i" : : : "memory");
 80014e0:	b662      	cpsie	i
}
 80014e2:	bf00      	nop
          hours, active_zone, pwm_percent, g_current_rpm, g_water_depth_final);
  __enable_irq();
  HAL_UART_Transmit(&huart6, (uint8_t*)txd_msg_buffer, strlen(txd_msg_buffer), 1000);
 80014e4:	481f      	ldr	r0, [pc, #124]	; (8001564 <update_display+0x200>)
 80014e6:	f7fe fe7b 	bl	80001e0 <strlen>
 80014ea:	4603      	mov	r3, r0
 80014ec:	b29a      	uxth	r2, r3
 80014ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014f2:	491c      	ldr	r1, [pc, #112]	; (8001564 <update_display+0x200>)
 80014f4:	481c      	ldr	r0, [pc, #112]	; (8001568 <update_display+0x204>)
 80014f6:	f003 fee0 	bl	80052ba <HAL_UART_Transmit>
}
 80014fa:	bf00      	nop
 80014fc:	3718      	adds	r7, #24
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	0800796c 	.word	0x0800796c
 8001508:	20000480 	.word	0x20000480
 800150c:	20000444 	.word	0x20000444
 8001510:	20000448 	.word	0x20000448
 8001514:	080078fc 	.word	0x080078fc
 8001518:	20000434 	.word	0x20000434
 800151c:	2000044c 	.word	0x2000044c
 8001520:	20000450 	.word	0x20000450
 8001524:	08007904 	.word	0x08007904
 8001528:	20000438 	.word	0x20000438
 800152c:	20000454 	.word	0x20000454
 8001530:	20000458 	.word	0x20000458
 8001534:	0800790c 	.word	0x0800790c
 8001538:	2000043c 	.word	0x2000043c
 800153c:	2000045c 	.word	0x2000045c
 8001540:	20000460 	.word	0x20000460
 8001544:	08007914 	.word	0x08007914
 8001548:	20000440 	.word	0x20000440
 800154c:	20000474 	.word	0x20000474
 8001550:	40700000 	.word	0x40700000
 8001554:	40590000 	.word	0x40590000
 8001558:	2000047c 	.word	0x2000047c
 800155c:	20000470 	.word	0x20000470
 8001560:	0800791c 	.word	0x0800791c
 8001564:	20000490 	.word	0x20000490
 8001568:	200001e4 	.word	0x200001e4

0800156c <get_adc_value>:

uint8_t get_adc_value() {
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc1);
 8001572:	480a      	ldr	r0, [pc, #40]	; (800159c <get_adc_value+0x30>)
 8001574:	f001 f83a 	bl	80025ec <HAL_ADC_Start>
    // Poll for the end of the conversion
    HAL_ADC_PollForConversion(&hadc1, 1000);
 8001578:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800157c:	4807      	ldr	r0, [pc, #28]	; (800159c <get_adc_value+0x30>)
 800157e:	f001 f91c 	bl	80027ba <HAL_ADC_PollForConversion>
    // Get the converted value
    uint8_t ADC_CH9 = HAL_ADC_GetValue(&hadc1);
 8001582:	4806      	ldr	r0, [pc, #24]	; (800159c <get_adc_value+0x30>)
 8001584:	f001 f9a4 	bl	80028d0 <HAL_ADC_GetValue>
 8001588:	4603      	mov	r3, r0
 800158a:	71fb      	strb	r3, [r7, #7]
    // Stop the ADC
    HAL_ADC_Stop(&hadc1);
 800158c:	4803      	ldr	r0, [pc, #12]	; (800159c <get_adc_value+0x30>)
 800158e:	f001 f8e1 	bl	8002754 <HAL_ADC_Stop>
    // Return the ADC value
    return ADC_CH9;
 8001592:	79fb      	ldrb	r3, [r7, #7]
}
 8001594:	4618      	mov	r0, r3
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	2000007c 	.word	0x2000007c

080015a0 <update_current_water_reservoir_depth>:

int update_current_water_reservoir_depth(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
  // Simulate the water reservoir depth value; replace this with actual sensor reading if available
  uint32_t local_time = 0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	60bb      	str	r3, [r7, #8]
  uint32_t sensor_time = 0;
 80015aa:	2300      	movs	r3, #0
 80015ac:	607b      	str	r3, [r7, #4]
  uint32_t distance = 0;
 80015ae:	2300      	movs	r3, #0
 80015b0:	603b      	str	r3, [r7, #0]

  // Trigger the sensor by sending a 10us pulse
  HAL_GPIO_WritePin(HCSR04_TRIG_GPIO_Port, HCSR04_TRIG_Pin, GPIO_PIN_SET);
 80015b2:	2201      	movs	r2, #1
 80015b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015b8:	4837      	ldr	r0, [pc, #220]	; (8001698 <update_current_water_reservoir_depth+0xf8>)
 80015ba:	f001 fedd 	bl	8003378 <HAL_GPIO_WritePin>
  for (int j = 0; j < 20; j++) {};
 80015be:	2300      	movs	r3, #0
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	e002      	b.n	80015ca <update_current_water_reservoir_depth+0x2a>
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	3301      	adds	r3, #1
 80015c8:	60fb      	str	r3, [r7, #12]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	2b13      	cmp	r3, #19
 80015ce:	ddf9      	ble.n	80015c4 <update_current_water_reservoir_depth+0x24>
  HAL_GPIO_WritePin(HCSR04_TRIG_GPIO_Port, HCSR04_TRIG_Pin, GPIO_PIN_RESET);
 80015d0:	2200      	movs	r2, #0
 80015d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015d6:	4830      	ldr	r0, [pc, #192]	; (8001698 <update_current_water_reservoir_depth+0xf8>)
 80015d8:	f001 fece 	bl	8003378 <HAL_GPIO_WritePin>

  // Wait for the sensor to finish reading
  while (!g_hcsr04_Rx_flag) {
 80015dc:	bf00      	nop
 80015de:	4b2f      	ldr	r3, [pc, #188]	; (800169c <update_current_water_reservoir_depth+0xfc>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d0fb      	beq.n	80015de <update_current_water_reservoir_depth+0x3e>
  };

  // at this point distance in inches in the var: g_water_depth

  // set max of 10 inches, reverse the result (since closer distance means greater depth of water) and convert the depth to percent
  g_water_depth = (g_water_depth<=10) ? g_water_depth : 10.0;
 80015e6:	4b2e      	ldr	r3, [pc, #184]	; (80016a0 <update_current_water_reservoir_depth+0x100>)
 80015e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015ec:	f04f 0200 	mov.w	r2, #0
 80015f0:	4b2c      	ldr	r3, [pc, #176]	; (80016a4 <update_current_water_reservoir_depth+0x104>)
 80015f2:	f7ff fa85 	bl	8000b00 <__aeabi_dcmple>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d003      	beq.n	8001604 <update_current_water_reservoir_depth+0x64>
 80015fc:	4b28      	ldr	r3, [pc, #160]	; (80016a0 <update_current_water_reservoir_depth+0x100>)
 80015fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001602:	e002      	b.n	800160a <update_current_water_reservoir_depth+0x6a>
 8001604:	f04f 0200 	mov.w	r2, #0
 8001608:	4b26      	ldr	r3, [pc, #152]	; (80016a4 <update_current_water_reservoir_depth+0x104>)
 800160a:	4925      	ldr	r1, [pc, #148]	; (80016a0 <update_current_water_reservoir_depth+0x100>)
 800160c:	e9c1 2300 	strd	r2, r3, [r1]
  g_water_depth = 10.0 - g_water_depth;
 8001610:	4b23      	ldr	r3, [pc, #140]	; (80016a0 <update_current_water_reservoir_depth+0x100>)
 8001612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001616:	f04f 0000 	mov.w	r0, #0
 800161a:	4922      	ldr	r1, [pc, #136]	; (80016a4 <update_current_water_reservoir_depth+0x104>)
 800161c:	f7fe fe3c 	bl	8000298 <__aeabi_dsub>
 8001620:	4602      	mov	r2, r0
 8001622:	460b      	mov	r3, r1
 8001624:	491e      	ldr	r1, [pc, #120]	; (80016a0 <update_current_water_reservoir_depth+0x100>)
 8001626:	e9c1 2300 	strd	r2, r3, [r1]


  g_water_depth_final = ((g_water_depth / 10.0) < 1) ? (g_water_depth / 10.0)*100 : 99;
 800162a:	4b1d      	ldr	r3, [pc, #116]	; (80016a0 <update_current_water_reservoir_depth+0x100>)
 800162c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001630:	f04f 0200 	mov.w	r2, #0
 8001634:	4b1b      	ldr	r3, [pc, #108]	; (80016a4 <update_current_water_reservoir_depth+0x104>)
 8001636:	f7ff f911 	bl	800085c <__aeabi_ddiv>
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
 800163e:	4610      	mov	r0, r2
 8001640:	4619      	mov	r1, r3
 8001642:	f04f 0200 	mov.w	r2, #0
 8001646:	4b18      	ldr	r3, [pc, #96]	; (80016a8 <update_current_water_reservoir_depth+0x108>)
 8001648:	f7ff fa50 	bl	8000aec <__aeabi_dcmplt>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d018      	beq.n	8001684 <update_current_water_reservoir_depth+0xe4>
 8001652:	4b13      	ldr	r3, [pc, #76]	; (80016a0 <update_current_water_reservoir_depth+0x100>)
 8001654:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001658:	f04f 0200 	mov.w	r2, #0
 800165c:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <update_current_water_reservoir_depth+0x104>)
 800165e:	f7ff f8fd 	bl	800085c <__aeabi_ddiv>
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	4610      	mov	r0, r2
 8001668:	4619      	mov	r1, r3
 800166a:	f04f 0200 	mov.w	r2, #0
 800166e:	4b0f      	ldr	r3, [pc, #60]	; (80016ac <update_current_water_reservoir_depth+0x10c>)
 8001670:	f7fe ffca 	bl	8000608 <__aeabi_dmul>
 8001674:	4602      	mov	r2, r0
 8001676:	460b      	mov	r3, r1
 8001678:	4610      	mov	r0, r2
 800167a:	4619      	mov	r1, r3
 800167c:	f7ff fa5e 	bl	8000b3c <__aeabi_d2iz>
 8001680:	4603      	mov	r3, r0
 8001682:	e000      	b.n	8001686 <update_current_water_reservoir_depth+0xe6>
 8001684:	2363      	movs	r3, #99	; 0x63
 8001686:	4a0a      	ldr	r2, [pc, #40]	; (80016b0 <update_current_water_reservoir_depth+0x110>)
 8001688:	6013      	str	r3, [r2, #0]

//    sprintf(txd_msg_buffer, "Water Depth: %d\r\n", g_water_depth);
//    HAL_UART_Transmit(&huart6, (uint8_t*)txd_msg_buffer, strlen(txd_msg_buffer), 1000);


  return g_water_depth_final;
 800168a:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <update_current_water_reservoir_depth+0x110>)
 800168c:	681b      	ldr	r3, [r3, #0]
}
 800168e:	4618      	mov	r0, r3
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	40020000 	.word	0x40020000
 800169c:	200005a0 	.word	0x200005a0
 80016a0:	20000468 	.word	0x20000468
 80016a4:	40240000 	.word	0x40240000
 80016a8:	3ff00000 	.word	0x3ff00000
 80016ac:	40590000 	.word	0x40590000
 80016b0:	20000470 	.word	0x20000470

080016b4 <display_value_on_timer_board>:

void display_value_on_timer_board(int value)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
    B is ones digit

    B3 is MSb, ie writing 8 = 1000[B3,B2,B1,B0]
    A3 is MSb, ie writing 8 = 1000[A3,A2,A1,A0]
    */
    if (value < 0 || value > 99) {
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	db71      	blt.n	80017a6 <display_value_on_timer_board+0xf2>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2b63      	cmp	r3, #99	; 0x63
 80016c6:	dc6e      	bgt.n	80017a6 <display_value_on_timer_board+0xf2>
        // Invalid value, do nothing
        return;
    }

    int tens = value / 10;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4a39      	ldr	r2, [pc, #228]	; (80017b0 <display_value_on_timer_board+0xfc>)
 80016cc:	fb82 1203 	smull	r1, r2, r2, r3
 80016d0:	1092      	asrs	r2, r2, #2
 80016d2:	17db      	asrs	r3, r3, #31
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	60fb      	str	r3, [r7, #12]
    int ones = value % 10;
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	4b35      	ldr	r3, [pc, #212]	; (80017b0 <display_value_on_timer_board+0xfc>)
 80016dc:	fb83 1302 	smull	r1, r3, r3, r2
 80016e0:	1099      	asrs	r1, r3, #2
 80016e2:	17d3      	asrs	r3, r2, #31
 80016e4:	1ac9      	subs	r1, r1, r3
 80016e6:	460b      	mov	r3, r1
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	440b      	add	r3, r1
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	60bb      	str	r3, [r7, #8]

    // Write the tens digit to the first set of digit pins (DIGIT_A)
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, (tens & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);  // DIGIT_A0 -> PB3
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	461a      	mov	r2, r3
 80016fe:	2108      	movs	r1, #8
 8001700:	482c      	ldr	r0, [pc, #176]	; (80017b4 <display_value_on_timer_board+0x100>)
 8001702:	f001 fe39 	bl	8003378 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, (tens & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);  // DIGIT_A1 -> PB4
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	105b      	asrs	r3, r3, #1
 800170a:	b2db      	uxtb	r3, r3
 800170c:	f003 0301 	and.w	r3, r3, #1
 8001710:	b2db      	uxtb	r3, r3
 8001712:	461a      	mov	r2, r3
 8001714:	2110      	movs	r1, #16
 8001716:	4827      	ldr	r0, [pc, #156]	; (80017b4 <display_value_on_timer_board+0x100>)
 8001718:	f001 fe2e 	bl	8003378 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, (tens & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);  // DIGIT_A2 -> PB5
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	109b      	asrs	r3, r3, #2
 8001720:	b2db      	uxtb	r3, r3
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	b2db      	uxtb	r3, r3
 8001728:	461a      	mov	r2, r3
 800172a:	2120      	movs	r1, #32
 800172c:	4821      	ldr	r0, [pc, #132]	; (80017b4 <display_value_on_timer_board+0x100>)
 800172e:	f001 fe23 	bl	8003378 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, (tens & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);  // DIGIT_A3 -> PB6
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	10db      	asrs	r3, r3, #3
 8001736:	b2db      	uxtb	r3, r3
 8001738:	f003 0301 	and.w	r3, r3, #1
 800173c:	b2db      	uxtb	r3, r3
 800173e:	461a      	mov	r2, r3
 8001740:	2140      	movs	r1, #64	; 0x40
 8001742:	481c      	ldr	r0, [pc, #112]	; (80017b4 <display_value_on_timer_board+0x100>)
 8001744:	f001 fe18 	bl	8003378 <HAL_GPIO_WritePin>

    // Write the ones digit to the second set of digit pins (DIGIT_B)
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, (ones & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);  // DIGIT_B0 -> PB7
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	b2db      	uxtb	r3, r3
 800174c:	f003 0301 	and.w	r3, r3, #1
 8001750:	b2db      	uxtb	r3, r3
 8001752:	461a      	mov	r2, r3
 8001754:	2180      	movs	r1, #128	; 0x80
 8001756:	4817      	ldr	r0, [pc, #92]	; (80017b4 <display_value_on_timer_board+0x100>)
 8001758:	f001 fe0e 	bl	8003378 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, (ones & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);  // DIGIT_B1 -> PB8
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	105b      	asrs	r3, r3, #1
 8001760:	b2db      	uxtb	r3, r3
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	b2db      	uxtb	r3, r3
 8001768:	461a      	mov	r2, r3
 800176a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800176e:	4811      	ldr	r0, [pc, #68]	; (80017b4 <display_value_on_timer_board+0x100>)
 8001770:	f001 fe02 	bl	8003378 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, (ones & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);  // DIGIT_B2 -> PB9
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	109b      	asrs	r3, r3, #2
 8001778:	b2db      	uxtb	r3, r3
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	b2db      	uxtb	r3, r3
 8001780:	461a      	mov	r2, r3
 8001782:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001786:	480b      	ldr	r0, [pc, #44]	; (80017b4 <display_value_on_timer_board+0x100>)
 8001788:	f001 fdf6 	bl	8003378 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, (ones & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET); // DIGIT_B3 -> PB10
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	10db      	asrs	r3, r3, #3
 8001790:	b2db      	uxtb	r3, r3
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	b2db      	uxtb	r3, r3
 8001798:	461a      	mov	r2, r3
 800179a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800179e:	4805      	ldr	r0, [pc, #20]	; (80017b4 <display_value_on_timer_board+0x100>)
 80017a0:	f001 fdea 	bl	8003378 <HAL_GPIO_WritePin>
 80017a4:	e000      	b.n	80017a8 <display_value_on_timer_board+0xf4>
        return;
 80017a6:	bf00      	nop
}
 80017a8:	3710      	adds	r7, #16
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	66666667 	.word	0x66666667
 80017b4:	40020400 	.word	0x40020400

080017b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017be:	f000 fe3b 	bl	8002438 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017c2:	f000 f867 	bl	8001894 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017c6:	f000 fadf 	bl	8001d88 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 80017ca:	f000 fab3 	bl	8001d34 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 80017ce:	f000 f8c1 	bl	8001954 <MX_ADC1_Init>
  MX_TIM3_Init();
 80017d2:	f000 f985 	bl	8001ae0 <MX_TIM3_Init>
  MX_TIM5_Init();
 80017d6:	f000 fa35 	bl	8001c44 <MX_TIM5_Init>
  MX_TIM1_Init();
 80017da:	f000 f90d 	bl	80019f8 <MX_TIM1_Init>
  MX_TIM4_Init();
 80017de:	f000 f9e3 	bl	8001ba8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  // Turn off the green LED (PA5) at startup
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80017e2:	2200      	movs	r2, #0
 80017e4:	2120      	movs	r1, #32
 80017e6:	4823      	ldr	r0, [pc, #140]	; (8001874 <main+0xbc>)
 80017e8:	f001 fdc6 	bl	8003378 <HAL_GPIO_WritePin>

  // clear the uart terminal
  const char clearScreen[] = "\033[2J\033[H";
 80017ec:	4a22      	ldr	r2, [pc, #136]	; (8001878 <main+0xc0>)
 80017ee:	463b      	mov	r3, r7
 80017f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017f4:	e883 0003 	stmia.w	r3, {r0, r1}
  HAL_UART_Transmit(&huart6, (uint8_t*)clearScreen, strlen(clearScreen), HAL_MAX_DELAY);
 80017f8:	4639      	mov	r1, r7
 80017fa:	f04f 33ff 	mov.w	r3, #4294967295
 80017fe:	2207      	movs	r2, #7
 8001800:	481e      	ldr	r0, [pc, #120]	; (800187c <main+0xc4>)
 8001802:	f003 fd5a 	bl	80052ba <HAL_UART_Transmit>

  // Start receiving data via interrupt
  HAL_UART_Receive_IT(&huart6, &rx_data, 1);
 8001806:	2201      	movs	r2, #1
 8001808:	491d      	ldr	r1, [pc, #116]	; (8001880 <main+0xc8>)
 800180a:	481c      	ldr	r0, [pc, #112]	; (800187c <main+0xc4>)
 800180c:	f003 fde7 	bl	80053de <HAL_UART_Receive_IT>

  // Indicate entering setup mode
  handle_setup_mode();
 8001810:	f7ff fbaa 	bl	8000f68 <handle_setup_mode>

  // Turn on the green LED after setup mode
  while (1)
  {
    // Toggle the green LED
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001814:	2120      	movs	r1, #32
 8001816:	4817      	ldr	r0, [pc, #92]	; (8001874 <main+0xbc>)
 8001818:	f001 fdc7 	bl	80033aa <HAL_GPIO_TogglePin>

    // Wait for 200ms
    HAL_Delay(200);
 800181c:	20c8      	movs	r0, #200	; 0xc8
 800181e:	f000 fe7d 	bl	800251c <HAL_Delay>

    // Check if the external interrupt from pin C13 (the blue Nucleo push button) is triggered
    if (exit_while_loop)
 8001822:	4b18      	ldr	r3, [pc, #96]	; (8001884 <main+0xcc>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d100      	bne.n	800182c <main+0x74>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800182a:	e7f3      	b.n	8001814 <main+0x5c>
    {

      // Break out of the while loop
      break;
 800182c:	bf00      	nop
  }

  /* USER CODE BEGIN 2 */

  // Start the timer for the clock counter, depth sensor
  HAL_TIM_Base_Init(&htim4);
 800182e:	4816      	ldr	r0, [pc, #88]	; (8001888 <main+0xd0>)
 8001830:	f002 fa86 	bl	8003d40 <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start_IT(&htim4);
 8001834:	4814      	ldr	r0, [pc, #80]	; (8001888 <main+0xd0>)
 8001836:	f002 fad3 	bl	8003de0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Init(&htim1);
 800183a:	4814      	ldr	r0, [pc, #80]	; (800188c <main+0xd4>)
 800183c:	f002 fa80 	bl	8003d40 <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start_IT(&htim1);
 8001840:	4812      	ldr	r0, [pc, #72]	; (800188c <main+0xd4>)
 8001842:	f002 facd 	bl	8003de0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2);
 8001846:	2104      	movs	r1, #4
 8001848:	4810      	ldr	r0, [pc, #64]	; (800188c <main+0xd4>)
 800184a:	f002 fbd3 	bl	8003ff4 <HAL_TIM_IC_Start_IT>

  update_current_water_reservoir_depth();
 800184e:	f7ff fea7 	bl	80015a0 <update_current_water_reservoir_depth>
  update_display();
 8001852:	f7ff fd87 	bl	8001364 <update_display>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  update_current_water_reservoir_depth();
 8001856:	f7ff fea3 	bl	80015a0 <update_current_water_reservoir_depth>
  __ASM volatile ("cpsid i" : : : "memory");
 800185a:	b672      	cpsid	i
}
 800185c:	bf00      	nop
	  //atomically
	  __disable_irq();
	  display_value_on_timer_board(g_water_depth_final);
 800185e:	4b0c      	ldr	r3, [pc, #48]	; (8001890 <main+0xd8>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff ff26 	bl	80016b4 <display_value_on_timer_board>
  __ASM volatile ("cpsie i" : : : "memory");
 8001868:	b662      	cpsie	i
}
 800186a:	bf00      	nop
	  __enable_irq();
	  HAL_Delay(100);
 800186c:	2064      	movs	r0, #100	; 0x64
 800186e:	f000 fe55 	bl	800251c <HAL_Delay>
	  update_current_water_reservoir_depth();
 8001872:	e7f0      	b.n	8001856 <main+0x9e>
 8001874:	40020000 	.word	0x40020000
 8001878:	08007978 	.word	0x08007978
 800187c:	200001e4 	.word	0x200001e4
 8001880:	2000042c 	.word	0x2000042c
 8001884:	20000430 	.word	0x20000430
 8001888:	20000154 	.word	0x20000154
 800188c:	200000c4 	.word	0x200000c4
 8001890:	20000470 	.word	0x20000470

08001894 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b094      	sub	sp, #80	; 0x50
 8001898:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800189a:	f107 0320 	add.w	r3, r7, #32
 800189e:	2230      	movs	r2, #48	; 0x30
 80018a0:	2100      	movs	r1, #0
 80018a2:	4618      	mov	r0, r3
 80018a4:	f004 fdb6 	bl	8006414 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018a8:	f107 030c 	add.w	r3, r7, #12
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	60da      	str	r2, [r3, #12]
 80018b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018b8:	2300      	movs	r3, #0
 80018ba:	60bb      	str	r3, [r7, #8]
 80018bc:	4b23      	ldr	r3, [pc, #140]	; (800194c <SystemClock_Config+0xb8>)
 80018be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c0:	4a22      	ldr	r2, [pc, #136]	; (800194c <SystemClock_Config+0xb8>)
 80018c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018c6:	6413      	str	r3, [r2, #64]	; 0x40
 80018c8:	4b20      	ldr	r3, [pc, #128]	; (800194c <SystemClock_Config+0xb8>)
 80018ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d0:	60bb      	str	r3, [r7, #8]
 80018d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80018d4:	2300      	movs	r3, #0
 80018d6:	607b      	str	r3, [r7, #4]
 80018d8:	4b1d      	ldr	r3, [pc, #116]	; (8001950 <SystemClock_Config+0xbc>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80018e0:	4a1b      	ldr	r2, [pc, #108]	; (8001950 <SystemClock_Config+0xbc>)
 80018e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018e6:	6013      	str	r3, [r2, #0]
 80018e8:	4b19      	ldr	r3, [pc, #100]	; (8001950 <SystemClock_Config+0xbc>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018f0:	607b      	str	r3, [r7, #4]
 80018f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018f4:	2302      	movs	r3, #2
 80018f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018f8:	2301      	movs	r3, #1
 80018fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018fc:	2310      	movs	r3, #16
 80018fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001900:	2300      	movs	r3, #0
 8001902:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001904:	f107 0320 	add.w	r3, r7, #32
 8001908:	4618      	mov	r0, r3
 800190a:	f001 fd81 	bl	8003410 <HAL_RCC_OscConfig>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001914:	f000 faec 	bl	8001ef0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001918:	230f      	movs	r3, #15
 800191a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800191c:	2300      	movs	r3, #0
 800191e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001920:	2300      	movs	r3, #0
 8001922:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001924:	2300      	movs	r3, #0
 8001926:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001928:	2300      	movs	r3, #0
 800192a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800192c:	f107 030c 	add.w	r3, r7, #12
 8001930:	2100      	movs	r1, #0
 8001932:	4618      	mov	r0, r3
 8001934:	f001 ffe4 	bl	8003900 <HAL_RCC_ClockConfig>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800193e:	f000 fad7 	bl	8001ef0 <Error_Handler>
  }
}
 8001942:	bf00      	nop
 8001944:	3750      	adds	r7, #80	; 0x50
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40023800 	.word	0x40023800
 8001950:	40007000 	.word	0x40007000

08001954 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800195a:	463b      	mov	r3, r7
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	605a      	str	r2, [r3, #4]
 8001962:	609a      	str	r2, [r3, #8]
 8001964:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001966:	4b21      	ldr	r3, [pc, #132]	; (80019ec <MX_ADC1_Init+0x98>)
 8001968:	4a21      	ldr	r2, [pc, #132]	; (80019f0 <MX_ADC1_Init+0x9c>)
 800196a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800196c:	4b1f      	ldr	r3, [pc, #124]	; (80019ec <MX_ADC1_Init+0x98>)
 800196e:	2200      	movs	r2, #0
 8001970:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8001972:	4b1e      	ldr	r3, [pc, #120]	; (80019ec <MX_ADC1_Init+0x98>)
 8001974:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001978:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800197a:	4b1c      	ldr	r3, [pc, #112]	; (80019ec <MX_ADC1_Init+0x98>)
 800197c:	2201      	movs	r2, #1
 800197e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001980:	4b1a      	ldr	r3, [pc, #104]	; (80019ec <MX_ADC1_Init+0x98>)
 8001982:	2200      	movs	r2, #0
 8001984:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001986:	4b19      	ldr	r3, [pc, #100]	; (80019ec <MX_ADC1_Init+0x98>)
 8001988:	2200      	movs	r2, #0
 800198a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800198e:	4b17      	ldr	r3, [pc, #92]	; (80019ec <MX_ADC1_Init+0x98>)
 8001990:	2200      	movs	r2, #0
 8001992:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001994:	4b15      	ldr	r3, [pc, #84]	; (80019ec <MX_ADC1_Init+0x98>)
 8001996:	4a17      	ldr	r2, [pc, #92]	; (80019f4 <MX_ADC1_Init+0xa0>)
 8001998:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800199a:	4b14      	ldr	r3, [pc, #80]	; (80019ec <MX_ADC1_Init+0x98>)
 800199c:	2200      	movs	r2, #0
 800199e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80019a0:	4b12      	ldr	r3, [pc, #72]	; (80019ec <MX_ADC1_Init+0x98>)
 80019a2:	2201      	movs	r2, #1
 80019a4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80019a6:	4b11      	ldr	r3, [pc, #68]	; (80019ec <MX_ADC1_Init+0x98>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80019ae:	4b0f      	ldr	r3, [pc, #60]	; (80019ec <MX_ADC1_Init+0x98>)
 80019b0:	2201      	movs	r2, #1
 80019b2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019b4:	480d      	ldr	r0, [pc, #52]	; (80019ec <MX_ADC1_Init+0x98>)
 80019b6:	f000 fdd5 	bl	8002564 <HAL_ADC_Init>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80019c0:	f000 fa96 	bl	8001ef0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80019c4:	2301      	movs	r3, #1
 80019c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80019c8:	2301      	movs	r3, #1
 80019ca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80019cc:	2301      	movs	r3, #1
 80019ce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019d0:	463b      	mov	r3, r7
 80019d2:	4619      	mov	r1, r3
 80019d4:	4805      	ldr	r0, [pc, #20]	; (80019ec <MX_ADC1_Init+0x98>)
 80019d6:	f000 ff89 	bl	80028ec <HAL_ADC_ConfigChannel>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80019e0:	f000 fa86 	bl	8001ef0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80019e4:	bf00      	nop
 80019e6:	3710      	adds	r7, #16
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	2000007c 	.word	0x2000007c
 80019f0:	40012000 	.word	0x40012000
 80019f4:	0f000001 	.word	0x0f000001

080019f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b08a      	sub	sp, #40	; 0x28
 80019fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019fe:	f107 0318 	add.w	r3, r7, #24
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	605a      	str	r2, [r3, #4]
 8001a08:	609a      	str	r2, [r3, #8]
 8001a0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a0c:	f107 0310 	add.w	r3, r7, #16
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001a16:	463b      	mov	r3, r7
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	609a      	str	r2, [r3, #8]
 8001a20:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a22:	4b2d      	ldr	r3, [pc, #180]	; (8001ad8 <MX_TIM1_Init+0xe0>)
 8001a24:	4a2d      	ldr	r2, [pc, #180]	; (8001adc <MX_TIM1_Init+0xe4>)
 8001a26:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 8001a28:	4b2b      	ldr	r3, [pc, #172]	; (8001ad8 <MX_TIM1_Init+0xe0>)
 8001a2a:	220f      	movs	r2, #15
 8001a2c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a2e:	4b2a      	ldr	r3, [pc, #168]	; (8001ad8 <MX_TIM1_Init+0xe0>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 38000-1;
 8001a34:	4b28      	ldr	r3, [pc, #160]	; (8001ad8 <MX_TIM1_Init+0xe0>)
 8001a36:	f249 426f 	movw	r2, #37999	; 0x946f
 8001a3a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a3c:	4b26      	ldr	r3, [pc, #152]	; (8001ad8 <MX_TIM1_Init+0xe0>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a42:	4b25      	ldr	r3, [pc, #148]	; (8001ad8 <MX_TIM1_Init+0xe0>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a48:	4b23      	ldr	r3, [pc, #140]	; (8001ad8 <MX_TIM1_Init+0xe0>)
 8001a4a:	2280      	movs	r2, #128	; 0x80
 8001a4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a4e:	4822      	ldr	r0, [pc, #136]	; (8001ad8 <MX_TIM1_Init+0xe0>)
 8001a50:	f002 f976 	bl	8003d40 <HAL_TIM_Base_Init>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8001a5a:	f000 fa49 	bl	8001ef0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a62:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a64:	f107 0318 	add.w	r3, r7, #24
 8001a68:	4619      	mov	r1, r3
 8001a6a:	481b      	ldr	r0, [pc, #108]	; (8001ad8 <MX_TIM1_Init+0xe0>)
 8001a6c:	f002 fe42 	bl	80046f4 <HAL_TIM_ConfigClockSource>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001a76:	f000 fa3b 	bl	8001ef0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001a7a:	4817      	ldr	r0, [pc, #92]	; (8001ad8 <MX_TIM1_Init+0xe0>)
 8001a7c:	f002 fa61 	bl	8003f42 <HAL_TIM_IC_Init>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001a86:	f000 fa33 	bl	8001ef0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a92:	f107 0310 	add.w	r3, r7, #16
 8001a96:	4619      	mov	r1, r3
 8001a98:	480f      	ldr	r0, [pc, #60]	; (8001ad8 <MX_TIM1_Init+0xe0>)
 8001a9a:	f003 fb3f 	bl	800511c <HAL_TIMEx_MasterConfigSynchronization>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8001aa4:	f000 fa24 	bl	8001ef0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001aa8:	230a      	movs	r3, #10
 8001aaa:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001aac:	2301      	movs	r3, #1
 8001aae:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001ab8:	463b      	mov	r3, r7
 8001aba:	2204      	movs	r2, #4
 8001abc:	4619      	mov	r1, r3
 8001abe:	4806      	ldr	r0, [pc, #24]	; (8001ad8 <MX_TIM1_Init+0xe0>)
 8001ac0:	f002 fcba 	bl	8004438 <HAL_TIM_IC_ConfigChannel>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001aca:	f000 fa11 	bl	8001ef0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001ace:	bf00      	nop
 8001ad0:	3728      	adds	r7, #40	; 0x28
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	200000c4 	.word	0x200000c4
 8001adc:	40010000 	.word	0x40010000

08001ae0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b08a      	sub	sp, #40	; 0x28
 8001ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ae6:	f107 0320 	add.w	r3, r7, #32
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001af0:	1d3b      	adds	r3, r7, #4
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	605a      	str	r2, [r3, #4]
 8001af8:	609a      	str	r2, [r3, #8]
 8001afa:	60da      	str	r2, [r3, #12]
 8001afc:	611a      	str	r2, [r3, #16]
 8001afe:	615a      	str	r2, [r3, #20]
 8001b00:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b02:	4b27      	ldr	r3, [pc, #156]	; (8001ba0 <MX_TIM3_Init+0xc0>)
 8001b04:	4a27      	ldr	r2, [pc, #156]	; (8001ba4 <MX_TIM3_Init+0xc4>)
 8001b06:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 8001b08:	4b25      	ldr	r3, [pc, #148]	; (8001ba0 <MX_TIM3_Init+0xc0>)
 8001b0a:	220f      	movs	r2, #15
 8001b0c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b0e:	4b24      	ldr	r3, [pc, #144]	; (8001ba0 <MX_TIM3_Init+0xc0>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 8001b14:	4b22      	ldr	r3, [pc, #136]	; (8001ba0 <MX_TIM3_Init+0xc0>)
 8001b16:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001b1a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b1c:	4b20      	ldr	r3, [pc, #128]	; (8001ba0 <MX_TIM3_Init+0xc0>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b22:	4b1f      	ldr	r3, [pc, #124]	; (8001ba0 <MX_TIM3_Init+0xc0>)
 8001b24:	2280      	movs	r2, #128	; 0x80
 8001b26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001b28:	481d      	ldr	r0, [pc, #116]	; (8001ba0 <MX_TIM3_Init+0xc0>)
 8001b2a:	f002 f9bb 	bl	8003ea4 <HAL_TIM_PWM_Init>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001b34:	f000 f9dc 	bl	8001ef0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b40:	f107 0320 	add.w	r3, r7, #32
 8001b44:	4619      	mov	r1, r3
 8001b46:	4816      	ldr	r0, [pc, #88]	; (8001ba0 <MX_TIM3_Init+0xc0>)
 8001b48:	f003 fae8 	bl	800511c <HAL_TIMEx_MasterConfigSynchronization>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001b52:	f000 f9cd 	bl	8001ef0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b56:	2360      	movs	r3, #96	; 0x60
 8001b58:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b62:	2300      	movs	r3, #0
 8001b64:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b66:	1d3b      	adds	r3, r7, #4
 8001b68:	2200      	movs	r2, #0
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	480c      	ldr	r0, [pc, #48]	; (8001ba0 <MX_TIM3_Init+0xc0>)
 8001b6e:	f002 fcff 	bl	8004570 <HAL_TIM_PWM_ConfigChannel>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001b78:	f000 f9ba 	bl	8001ef0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b7c:	1d3b      	adds	r3, r7, #4
 8001b7e:	2204      	movs	r2, #4
 8001b80:	4619      	mov	r1, r3
 8001b82:	4807      	ldr	r0, [pc, #28]	; (8001ba0 <MX_TIM3_Init+0xc0>)
 8001b84:	f002 fcf4 	bl	8004570 <HAL_TIM_PWM_ConfigChannel>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001b8e:	f000 f9af 	bl	8001ef0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001b92:	4803      	ldr	r0, [pc, #12]	; (8001ba0 <MX_TIM3_Init+0xc0>)
 8001b94:	f000 facc 	bl	8002130 <HAL_TIM_MspPostInit>

}
 8001b98:	bf00      	nop
 8001b9a:	3728      	adds	r7, #40	; 0x28
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	2000010c 	.word	0x2000010c
 8001ba4:	40000400 	.word	0x40000400

08001ba8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bae:	f107 0308 	add.w	r3, r7, #8
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	605a      	str	r2, [r3, #4]
 8001bb8:	609a      	str	r2, [r3, #8]
 8001bba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bbc:	463b      	mov	r3, r7
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001bc4:	4b1d      	ldr	r3, [pc, #116]	; (8001c3c <MX_TIM4_Init+0x94>)
 8001bc6:	4a1e      	ldr	r2, [pc, #120]	; (8001c40 <MX_TIM4_Init+0x98>)
 8001bc8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16000-1;
 8001bca:	4b1c      	ldr	r3, [pc, #112]	; (8001c3c <MX_TIM4_Init+0x94>)
 8001bcc:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8001bd0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bd2:	4b1a      	ldr	r3, [pc, #104]	; (8001c3c <MX_TIM4_Init+0x94>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8001bd8:	4b18      	ldr	r3, [pc, #96]	; (8001c3c <MX_TIM4_Init+0x94>)
 8001bda:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001bde:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001be0:	4b16      	ldr	r3, [pc, #88]	; (8001c3c <MX_TIM4_Init+0x94>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001be6:	4b15      	ldr	r3, [pc, #84]	; (8001c3c <MX_TIM4_Init+0x94>)
 8001be8:	2280      	movs	r2, #128	; 0x80
 8001bea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001bec:	4813      	ldr	r0, [pc, #76]	; (8001c3c <MX_TIM4_Init+0x94>)
 8001bee:	f002 f8a7 	bl	8003d40 <HAL_TIM_Base_Init>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001bf8:	f000 f97a 	bl	8001ef0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c00:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001c02:	f107 0308 	add.w	r3, r7, #8
 8001c06:	4619      	mov	r1, r3
 8001c08:	480c      	ldr	r0, [pc, #48]	; (8001c3c <MX_TIM4_Init+0x94>)
 8001c0a:	f002 fd73 	bl	80046f4 <HAL_TIM_ConfigClockSource>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001c14:	f000 f96c 	bl	8001ef0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c20:	463b      	mov	r3, r7
 8001c22:	4619      	mov	r1, r3
 8001c24:	4805      	ldr	r0, [pc, #20]	; (8001c3c <MX_TIM4_Init+0x94>)
 8001c26:	f003 fa79 	bl	800511c <HAL_TIMEx_MasterConfigSynchronization>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001c30:	f000 f95e 	bl	8001ef0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001c34:	bf00      	nop
 8001c36:	3718      	adds	r7, #24
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	20000154 	.word	0x20000154
 8001c40:	40000800 	.word	0x40000800

08001c44 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b08e      	sub	sp, #56	; 0x38
 8001c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	605a      	str	r2, [r3, #4]
 8001c54:	609a      	str	r2, [r3, #8]
 8001c56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c58:	f107 0320 	add.w	r3, r7, #32
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c62:	1d3b      	adds	r3, r7, #4
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	605a      	str	r2, [r3, #4]
 8001c6a:	609a      	str	r2, [r3, #8]
 8001c6c:	60da      	str	r2, [r3, #12]
 8001c6e:	611a      	str	r2, [r3, #16]
 8001c70:	615a      	str	r2, [r3, #20]
 8001c72:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001c74:	4b2d      	ldr	r3, [pc, #180]	; (8001d2c <MX_TIM5_Init+0xe8>)
 8001c76:	4a2e      	ldr	r2, [pc, #184]	; (8001d30 <MX_TIM5_Init+0xec>)
 8001c78:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 16-1;
 8001c7a:	4b2c      	ldr	r3, [pc, #176]	; (8001d2c <MX_TIM5_Init+0xe8>)
 8001c7c:	220f      	movs	r2, #15
 8001c7e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c80:	4b2a      	ldr	r3, [pc, #168]	; (8001d2c <MX_TIM5_Init+0xe8>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 20000-1;
 8001c86:	4b29      	ldr	r3, [pc, #164]	; (8001d2c <MX_TIM5_Init+0xe8>)
 8001c88:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001c8c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c8e:	4b27      	ldr	r3, [pc, #156]	; (8001d2c <MX_TIM5_Init+0xe8>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c94:	4b25      	ldr	r3, [pc, #148]	; (8001d2c <MX_TIM5_Init+0xe8>)
 8001c96:	2280      	movs	r2, #128	; 0x80
 8001c98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001c9a:	4824      	ldr	r0, [pc, #144]	; (8001d2c <MX_TIM5_Init+0xe8>)
 8001c9c:	f002 f850 	bl	8003d40 <HAL_TIM_Base_Init>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8001ca6:	f000 f923 	bl	8001ef0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001caa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cae:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001cb0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	481d      	ldr	r0, [pc, #116]	; (8001d2c <MX_TIM5_Init+0xe8>)
 8001cb8:	f002 fd1c 	bl	80046f4 <HAL_TIM_ConfigClockSource>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8001cc2:	f000 f915 	bl	8001ef0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001cc6:	4819      	ldr	r0, [pc, #100]	; (8001d2c <MX_TIM5_Init+0xe8>)
 8001cc8:	f002 f8ec 	bl	8003ea4 <HAL_TIM_PWM_Init>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8001cd2:	f000 f90d 	bl	8001ef0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001cde:	f107 0320 	add.w	r3, r7, #32
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4811      	ldr	r0, [pc, #68]	; (8001d2c <MX_TIM5_Init+0xe8>)
 8001ce6:	f003 fa19 	bl	800511c <HAL_TIMEx_MasterConfigSynchronization>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8001cf0:	f000 f8fe 	bl	8001ef0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cf4:	2360      	movs	r3, #96	; 0x60
 8001cf6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8001cf8:	f240 13f3 	movw	r3, #499	; 0x1f3
 8001cfc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d02:	2300      	movs	r3, #0
 8001d04:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d06:	1d3b      	adds	r3, r7, #4
 8001d08:	2200      	movs	r2, #0
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	4807      	ldr	r0, [pc, #28]	; (8001d2c <MX_TIM5_Init+0xe8>)
 8001d0e:	f002 fc2f 	bl	8004570 <HAL_TIM_PWM_ConfigChannel>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8001d18:	f000 f8ea 	bl	8001ef0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001d1c:	4803      	ldr	r0, [pc, #12]	; (8001d2c <MX_TIM5_Init+0xe8>)
 8001d1e:	f000 fa07 	bl	8002130 <HAL_TIM_MspPostInit>

}
 8001d22:	bf00      	nop
 8001d24:	3738      	adds	r7, #56	; 0x38
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	2000019c 	.word	0x2000019c
 8001d30:	40000c00 	.word	0x40000c00

08001d34 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001d38:	4b11      	ldr	r3, [pc, #68]	; (8001d80 <MX_USART6_UART_Init+0x4c>)
 8001d3a:	4a12      	ldr	r2, [pc, #72]	; (8001d84 <MX_USART6_UART_Init+0x50>)
 8001d3c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001d3e:	4b10      	ldr	r3, [pc, #64]	; (8001d80 <MX_USART6_UART_Init+0x4c>)
 8001d40:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001d44:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001d46:	4b0e      	ldr	r3, [pc, #56]	; (8001d80 <MX_USART6_UART_Init+0x4c>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001d4c:	4b0c      	ldr	r3, [pc, #48]	; (8001d80 <MX_USART6_UART_Init+0x4c>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001d52:	4b0b      	ldr	r3, [pc, #44]	; (8001d80 <MX_USART6_UART_Init+0x4c>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001d58:	4b09      	ldr	r3, [pc, #36]	; (8001d80 <MX_USART6_UART_Init+0x4c>)
 8001d5a:	220c      	movs	r2, #12
 8001d5c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d5e:	4b08      	ldr	r3, [pc, #32]	; (8001d80 <MX_USART6_UART_Init+0x4c>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d64:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <MX_USART6_UART_Init+0x4c>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001d6a:	4805      	ldr	r0, [pc, #20]	; (8001d80 <MX_USART6_UART_Init+0x4c>)
 8001d6c:	f003 fa58 	bl	8005220 <HAL_UART_Init>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001d76:	f000 f8bb 	bl	8001ef0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001d7a:	bf00      	nop
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	200001e4 	.word	0x200001e4
 8001d84:	40011400 	.word	0x40011400

08001d88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b08a      	sub	sp, #40	; 0x28
 8001d8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d8e:	f107 0314 	add.w	r3, r7, #20
 8001d92:	2200      	movs	r2, #0
 8001d94:	601a      	str	r2, [r3, #0]
 8001d96:	605a      	str	r2, [r3, #4]
 8001d98:	609a      	str	r2, [r3, #8]
 8001d9a:	60da      	str	r2, [r3, #12]
 8001d9c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d9e:	2300      	movs	r3, #0
 8001da0:	613b      	str	r3, [r7, #16]
 8001da2:	4b4f      	ldr	r3, [pc, #316]	; (8001ee0 <MX_GPIO_Init+0x158>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da6:	4a4e      	ldr	r2, [pc, #312]	; (8001ee0 <MX_GPIO_Init+0x158>)
 8001da8:	f043 0304 	orr.w	r3, r3, #4
 8001dac:	6313      	str	r3, [r2, #48]	; 0x30
 8001dae:	4b4c      	ldr	r3, [pc, #304]	; (8001ee0 <MX_GPIO_Init+0x158>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	f003 0304 	and.w	r3, r3, #4
 8001db6:	613b      	str	r3, [r7, #16]
 8001db8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60fb      	str	r3, [r7, #12]
 8001dbe:	4b48      	ldr	r3, [pc, #288]	; (8001ee0 <MX_GPIO_Init+0x158>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	4a47      	ldr	r2, [pc, #284]	; (8001ee0 <MX_GPIO_Init+0x158>)
 8001dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dca:	4b45      	ldr	r3, [pc, #276]	; (8001ee0 <MX_GPIO_Init+0x158>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60bb      	str	r3, [r7, #8]
 8001dda:	4b41      	ldr	r3, [pc, #260]	; (8001ee0 <MX_GPIO_Init+0x158>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	4a40      	ldr	r2, [pc, #256]	; (8001ee0 <MX_GPIO_Init+0x158>)
 8001de0:	f043 0301 	orr.w	r3, r3, #1
 8001de4:	6313      	str	r3, [r2, #48]	; 0x30
 8001de6:	4b3e      	ldr	r3, [pc, #248]	; (8001ee0 <MX_GPIO_Init+0x158>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	60bb      	str	r3, [r7, #8]
 8001df0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	607b      	str	r3, [r7, #4]
 8001df6:	4b3a      	ldr	r3, [pc, #232]	; (8001ee0 <MX_GPIO_Init+0x158>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	4a39      	ldr	r2, [pc, #228]	; (8001ee0 <MX_GPIO_Init+0x158>)
 8001dfc:	f043 0302 	orr.w	r3, r3, #2
 8001e00:	6313      	str	r3, [r2, #48]	; 0x30
 8001e02:	4b37      	ldr	r3, [pc, #220]	; (8001ee0 <MX_GPIO_Init+0x158>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	607b      	str	r3, [r7, #4]
 8001e0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_BUILTIN_Pin|RED_Pin|HCSR04_TRIG_Pin|GRN_Pin
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f44f 51e9 	mov.w	r1, #7456	; 0x1d20
 8001e14:	4833      	ldr	r0, [pc, #204]	; (8001ee4 <MX_GPIO_Init+0x15c>)
 8001e16:	f001 faaf 	bl	8003378 <HAL_GPIO_WritePin>
                          |BLU_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIGIT_B3_Pin|DIGIT_A0_Pin|DIGIT_A1_Pin|DIGIT_A2_Pin
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f44f 61ff 	mov.w	r1, #2040	; 0x7f8
 8001e20:	4831      	ldr	r0, [pc, #196]	; (8001ee8 <MX_GPIO_Init+0x160>)
 8001e22:	f001 faa9 	bl	8003378 <HAL_GPIO_WritePin>
                          |DIGIT_A3_Pin|DIGIT_B0_Pin|DIGIT_B1_Pin|DIGIT_B2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e2c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001e30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e32:	2300      	movs	r3, #0
 8001e34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e36:	f107 0314 	add.w	r3, r7, #20
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	482b      	ldr	r0, [pc, #172]	; (8001eec <MX_GPIO_Init+0x164>)
 8001e3e:	f001 f917 	bl	8003070 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_BUILTIN_Pin RED_Pin GRN_Pin BLU_Pin */
  GPIO_InitStruct.Pin = LED_BUILTIN_Pin|RED_Pin|GRN_Pin|BLU_Pin;
 8001e42:	f44f 53c9 	mov.w	r3, #6432	; 0x1920
 8001e46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e50:	2300      	movs	r3, #0
 8001e52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e54:	f107 0314 	add.w	r3, r7, #20
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4822      	ldr	r0, [pc, #136]	; (8001ee4 <MX_GPIO_Init+0x15c>)
 8001e5c:	f001 f908 	bl	8003070 <HAL_GPIO_Init>

  /*Configure GPIO pin : RPM_TICK_Pin */
  GPIO_InitStruct.Pin = RPM_TICK_Pin;
 8001e60:	2304      	movs	r3, #4
 8001e62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e64:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001e68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RPM_TICK_GPIO_Port, &GPIO_InitStruct);
 8001e6e:	f107 0314 	add.w	r3, r7, #20
 8001e72:	4619      	mov	r1, r3
 8001e74:	481c      	ldr	r0, [pc, #112]	; (8001ee8 <MX_GPIO_Init+0x160>)
 8001e76:	f001 f8fb 	bl	8003070 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIGIT_B3_Pin DIGIT_A0_Pin DIGIT_A1_Pin DIGIT_A2_Pin
                           DIGIT_A3_Pin DIGIT_B0_Pin DIGIT_B1_Pin DIGIT_B2_Pin */
  GPIO_InitStruct.Pin = DIGIT_B3_Pin|DIGIT_A0_Pin|DIGIT_A1_Pin|DIGIT_A2_Pin
 8001e7a:	f44f 63ff 	mov.w	r3, #2040	; 0x7f8
 8001e7e:	617b      	str	r3, [r7, #20]
                          |DIGIT_A3_Pin|DIGIT_B0_Pin|DIGIT_B1_Pin|DIGIT_B2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e80:	2301      	movs	r3, #1
 8001e82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e84:	2300      	movs	r3, #0
 8001e86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e8c:	f107 0314 	add.w	r3, r7, #20
 8001e90:	4619      	mov	r1, r3
 8001e92:	4815      	ldr	r0, [pc, #84]	; (8001ee8 <MX_GPIO_Init+0x160>)
 8001e94:	f001 f8ec 	bl	8003070 <HAL_GPIO_Init>

  /*Configure GPIO pin : HCSR04_TRIG_Pin */
  GPIO_InitStruct.Pin = HCSR04_TRIG_Pin;
 8001e98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(HCSR04_TRIG_GPIO_Port, &GPIO_InitStruct);
 8001eaa:	f107 0314 	add.w	r3, r7, #20
 8001eae:	4619      	mov	r1, r3
 8001eb0:	480c      	ldr	r0, [pc, #48]	; (8001ee4 <MX_GPIO_Init+0x15c>)
 8001eb2:	f001 f8dd 	bl	8003070 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	2100      	movs	r1, #0
 8001eba:	2008      	movs	r0, #8
 8001ebc:	f001 f80f 	bl	8002ede <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001ec0:	2008      	movs	r0, #8
 8001ec2:	f001 f828 	bl	8002f16 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	2100      	movs	r1, #0
 8001eca:	2028      	movs	r0, #40	; 0x28
 8001ecc:	f001 f807 	bl	8002ede <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001ed0:	2028      	movs	r0, #40	; 0x28
 8001ed2:	f001 f820 	bl	8002f16 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ed6:	bf00      	nop
 8001ed8:	3728      	adds	r7, #40	; 0x28
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	40020000 	.word	0x40020000
 8001ee8:	40020400 	.word	0x40020400
 8001eec:	40020800 	.word	0x40020800

08001ef0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001ef4:	b672      	cpsid	i
}
 8001ef6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ef8:	e7fe      	b.n	8001ef8 <Error_Handler+0x8>
	...

08001efc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	607b      	str	r3, [r7, #4]
 8001f06:	4b10      	ldr	r3, [pc, #64]	; (8001f48 <HAL_MspInit+0x4c>)
 8001f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0a:	4a0f      	ldr	r2, [pc, #60]	; (8001f48 <HAL_MspInit+0x4c>)
 8001f0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f10:	6453      	str	r3, [r2, #68]	; 0x44
 8001f12:	4b0d      	ldr	r3, [pc, #52]	; (8001f48 <HAL_MspInit+0x4c>)
 8001f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f1a:	607b      	str	r3, [r7, #4]
 8001f1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f1e:	2300      	movs	r3, #0
 8001f20:	603b      	str	r3, [r7, #0]
 8001f22:	4b09      	ldr	r3, [pc, #36]	; (8001f48 <HAL_MspInit+0x4c>)
 8001f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f26:	4a08      	ldr	r2, [pc, #32]	; (8001f48 <HAL_MspInit+0x4c>)
 8001f28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f2e:	4b06      	ldr	r3, [pc, #24]	; (8001f48 <HAL_MspInit+0x4c>)
 8001f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f36:	603b      	str	r3, [r7, #0]
 8001f38:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001f3a:	2007      	movs	r0, #7
 8001f3c:	f000 ffc4 	bl	8002ec8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f40:	bf00      	nop
 8001f42:	3708      	adds	r7, #8
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40023800 	.word	0x40023800

08001f4c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b08a      	sub	sp, #40	; 0x28
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f54:	f107 0314 	add.w	r3, r7, #20
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	605a      	str	r2, [r3, #4]
 8001f5e:	609a      	str	r2, [r3, #8]
 8001f60:	60da      	str	r2, [r3, #12]
 8001f62:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a17      	ldr	r2, [pc, #92]	; (8001fc8 <HAL_ADC_MspInit+0x7c>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d127      	bne.n	8001fbe <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f6e:	2300      	movs	r3, #0
 8001f70:	613b      	str	r3, [r7, #16]
 8001f72:	4b16      	ldr	r3, [pc, #88]	; (8001fcc <HAL_ADC_MspInit+0x80>)
 8001f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f76:	4a15      	ldr	r2, [pc, #84]	; (8001fcc <HAL_ADC_MspInit+0x80>)
 8001f78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f7e:	4b13      	ldr	r3, [pc, #76]	; (8001fcc <HAL_ADC_MspInit+0x80>)
 8001f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f86:	613b      	str	r3, [r7, #16]
 8001f88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	60fb      	str	r3, [r7, #12]
 8001f8e:	4b0f      	ldr	r3, [pc, #60]	; (8001fcc <HAL_ADC_MspInit+0x80>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f92:	4a0e      	ldr	r2, [pc, #56]	; (8001fcc <HAL_ADC_MspInit+0x80>)
 8001f94:	f043 0301 	orr.w	r3, r3, #1
 8001f98:	6313      	str	r3, [r2, #48]	; 0x30
 8001f9a:	4b0c      	ldr	r3, [pc, #48]	; (8001fcc <HAL_ADC_MspInit+0x80>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	f003 0301 	and.w	r3, r3, #1
 8001fa2:	60fb      	str	r3, [r7, #12]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001faa:	2303      	movs	r3, #3
 8001fac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb2:	f107 0314 	add.w	r3, r7, #20
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	4805      	ldr	r0, [pc, #20]	; (8001fd0 <HAL_ADC_MspInit+0x84>)
 8001fba:	f001 f859 	bl	8003070 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001fbe:	bf00      	nop
 8001fc0:	3728      	adds	r7, #40	; 0x28
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	40012000 	.word	0x40012000
 8001fcc:	40023800 	.word	0x40023800
 8001fd0:	40020000 	.word	0x40020000

08001fd4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b08c      	sub	sp, #48	; 0x30
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fdc:	f107 031c 	add.w	r3, r7, #28
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	605a      	str	r2, [r3, #4]
 8001fe6:	609a      	str	r2, [r3, #8]
 8001fe8:	60da      	str	r2, [r3, #12]
 8001fea:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a39      	ldr	r2, [pc, #228]	; (80020d8 <HAL_TIM_Base_MspInit+0x104>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d135      	bne.n	8002062 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	61bb      	str	r3, [r7, #24]
 8001ffa:	4b38      	ldr	r3, [pc, #224]	; (80020dc <HAL_TIM_Base_MspInit+0x108>)
 8001ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffe:	4a37      	ldr	r2, [pc, #220]	; (80020dc <HAL_TIM_Base_MspInit+0x108>)
 8002000:	f043 0301 	orr.w	r3, r3, #1
 8002004:	6453      	str	r3, [r2, #68]	; 0x44
 8002006:	4b35      	ldr	r3, [pc, #212]	; (80020dc <HAL_TIM_Base_MspInit+0x108>)
 8002008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	61bb      	str	r3, [r7, #24]
 8002010:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	617b      	str	r3, [r7, #20]
 8002016:	4b31      	ldr	r3, [pc, #196]	; (80020dc <HAL_TIM_Base_MspInit+0x108>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201a:	4a30      	ldr	r2, [pc, #192]	; (80020dc <HAL_TIM_Base_MspInit+0x108>)
 800201c:	f043 0301 	orr.w	r3, r3, #1
 8002020:	6313      	str	r3, [r2, #48]	; 0x30
 8002022:	4b2e      	ldr	r3, [pc, #184]	; (80020dc <HAL_TIM_Base_MspInit+0x108>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	617b      	str	r3, [r7, #20]
 800202c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800202e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002032:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002034:	2302      	movs	r3, #2
 8002036:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002038:	2300      	movs	r3, #0
 800203a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203c:	2300      	movs	r3, #0
 800203e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002040:	2301      	movs	r3, #1
 8002042:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002044:	f107 031c 	add.w	r3, r7, #28
 8002048:	4619      	mov	r1, r3
 800204a:	4825      	ldr	r0, [pc, #148]	; (80020e0 <HAL_TIM_Base_MspInit+0x10c>)
 800204c:	f001 f810 	bl	8003070 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002050:	2200      	movs	r2, #0
 8002052:	2100      	movs	r1, #0
 8002054:	201b      	movs	r0, #27
 8002056:	f000 ff42 	bl	8002ede <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800205a:	201b      	movs	r0, #27
 800205c:	f000 ff5b 	bl	8002f16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002060:	e036      	b.n	80020d0 <HAL_TIM_Base_MspInit+0xfc>
  else if(htim_base->Instance==TIM4)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a1f      	ldr	r2, [pc, #124]	; (80020e4 <HAL_TIM_Base_MspInit+0x110>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d116      	bne.n	800209a <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800206c:	2300      	movs	r3, #0
 800206e:	613b      	str	r3, [r7, #16]
 8002070:	4b1a      	ldr	r3, [pc, #104]	; (80020dc <HAL_TIM_Base_MspInit+0x108>)
 8002072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002074:	4a19      	ldr	r2, [pc, #100]	; (80020dc <HAL_TIM_Base_MspInit+0x108>)
 8002076:	f043 0304 	orr.w	r3, r3, #4
 800207a:	6413      	str	r3, [r2, #64]	; 0x40
 800207c:	4b17      	ldr	r3, [pc, #92]	; (80020dc <HAL_TIM_Base_MspInit+0x108>)
 800207e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002080:	f003 0304 	and.w	r3, r3, #4
 8002084:	613b      	str	r3, [r7, #16]
 8002086:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002088:	2200      	movs	r2, #0
 800208a:	2100      	movs	r1, #0
 800208c:	201e      	movs	r0, #30
 800208e:	f000 ff26 	bl	8002ede <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002092:	201e      	movs	r0, #30
 8002094:	f000 ff3f 	bl	8002f16 <HAL_NVIC_EnableIRQ>
}
 8002098:	e01a      	b.n	80020d0 <HAL_TIM_Base_MspInit+0xfc>
  else if(htim_base->Instance==TIM5)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a12      	ldr	r2, [pc, #72]	; (80020e8 <HAL_TIM_Base_MspInit+0x114>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d115      	bne.n	80020d0 <HAL_TIM_Base_MspInit+0xfc>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80020a4:	2300      	movs	r3, #0
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	4b0c      	ldr	r3, [pc, #48]	; (80020dc <HAL_TIM_Base_MspInit+0x108>)
 80020aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ac:	4a0b      	ldr	r2, [pc, #44]	; (80020dc <HAL_TIM_Base_MspInit+0x108>)
 80020ae:	f043 0308 	orr.w	r3, r3, #8
 80020b2:	6413      	str	r3, [r2, #64]	; 0x40
 80020b4:	4b09      	ldr	r3, [pc, #36]	; (80020dc <HAL_TIM_Base_MspInit+0x108>)
 80020b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b8:	f003 0308 	and.w	r3, r3, #8
 80020bc:	60fb      	str	r3, [r7, #12]
 80020be:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80020c0:	2200      	movs	r2, #0
 80020c2:	2100      	movs	r1, #0
 80020c4:	2032      	movs	r0, #50	; 0x32
 80020c6:	f000 ff0a 	bl	8002ede <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80020ca:	2032      	movs	r0, #50	; 0x32
 80020cc:	f000 ff23 	bl	8002f16 <HAL_NVIC_EnableIRQ>
}
 80020d0:	bf00      	nop
 80020d2:	3730      	adds	r7, #48	; 0x30
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	40010000 	.word	0x40010000
 80020dc:	40023800 	.word	0x40023800
 80020e0:	40020000 	.word	0x40020000
 80020e4:	40000800 	.word	0x40000800
 80020e8:	40000c00 	.word	0x40000c00

080020ec <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a0b      	ldr	r2, [pc, #44]	; (8002128 <HAL_TIM_PWM_MspInit+0x3c>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d10d      	bne.n	800211a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020fe:	2300      	movs	r3, #0
 8002100:	60fb      	str	r3, [r7, #12]
 8002102:	4b0a      	ldr	r3, [pc, #40]	; (800212c <HAL_TIM_PWM_MspInit+0x40>)
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	4a09      	ldr	r2, [pc, #36]	; (800212c <HAL_TIM_PWM_MspInit+0x40>)
 8002108:	f043 0302 	orr.w	r3, r3, #2
 800210c:	6413      	str	r3, [r2, #64]	; 0x40
 800210e:	4b07      	ldr	r3, [pc, #28]	; (800212c <HAL_TIM_PWM_MspInit+0x40>)
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	60fb      	str	r3, [r7, #12]
 8002118:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800211a:	bf00      	nop
 800211c:	3714      	adds	r7, #20
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	40000400 	.word	0x40000400
 800212c:	40023800 	.word	0x40023800

08002130 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b08a      	sub	sp, #40	; 0x28
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002138:	f107 0314 	add.w	r3, r7, #20
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	605a      	str	r2, [r3, #4]
 8002142:	609a      	str	r2, [r3, #8]
 8002144:	60da      	str	r2, [r3, #12]
 8002146:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a24      	ldr	r2, [pc, #144]	; (80021e0 <HAL_TIM_MspPostInit+0xb0>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d11e      	bne.n	8002190 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002152:	2300      	movs	r3, #0
 8002154:	613b      	str	r3, [r7, #16]
 8002156:	4b23      	ldr	r3, [pc, #140]	; (80021e4 <HAL_TIM_MspPostInit+0xb4>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	4a22      	ldr	r2, [pc, #136]	; (80021e4 <HAL_TIM_MspPostInit+0xb4>)
 800215c:	f043 0301 	orr.w	r3, r3, #1
 8002160:	6313      	str	r3, [r2, #48]	; 0x30
 8002162:	4b20      	ldr	r3, [pc, #128]	; (80021e4 <HAL_TIM_MspPostInit+0xb4>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	613b      	str	r3, [r7, #16]
 800216c:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = TIM3_DC_MOTOR_Pin|TIM3_DC_MOTOR_REV_Pin;
 800216e:	23c0      	movs	r3, #192	; 0xc0
 8002170:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002172:	2302      	movs	r3, #2
 8002174:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002176:	2300      	movs	r3, #0
 8002178:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800217a:	2300      	movs	r3, #0
 800217c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800217e:	2302      	movs	r3, #2
 8002180:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002182:	f107 0314 	add.w	r3, r7, #20
 8002186:	4619      	mov	r1, r3
 8002188:	4817      	ldr	r0, [pc, #92]	; (80021e8 <HAL_TIM_MspPostInit+0xb8>)
 800218a:	f000 ff71 	bl	8003070 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800218e:	e022      	b.n	80021d6 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM5)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a15      	ldr	r2, [pc, #84]	; (80021ec <HAL_TIM_MspPostInit+0xbc>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d11d      	bne.n	80021d6 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800219a:	2300      	movs	r3, #0
 800219c:	60fb      	str	r3, [r7, #12]
 800219e:	4b11      	ldr	r3, [pc, #68]	; (80021e4 <HAL_TIM_MspPostInit+0xb4>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	4a10      	ldr	r2, [pc, #64]	; (80021e4 <HAL_TIM_MspPostInit+0xb4>)
 80021a4:	f043 0301 	orr.w	r3, r3, #1
 80021a8:	6313      	str	r3, [r2, #48]	; 0x30
 80021aa:	4b0e      	ldr	r3, [pc, #56]	; (80021e4 <HAL_TIM_MspPostInit+0xb4>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	60fb      	str	r3, [r7, #12]
 80021b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERV_PWM_OUT_Pin;
 80021b6:	2301      	movs	r3, #1
 80021b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ba:	2302      	movs	r3, #2
 80021bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021be:	2300      	movs	r3, #0
 80021c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c2:	2300      	movs	r3, #0
 80021c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80021c6:	2302      	movs	r3, #2
 80021c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERV_PWM_OUT_GPIO_Port, &GPIO_InitStruct);
 80021ca:	f107 0314 	add.w	r3, r7, #20
 80021ce:	4619      	mov	r1, r3
 80021d0:	4805      	ldr	r0, [pc, #20]	; (80021e8 <HAL_TIM_MspPostInit+0xb8>)
 80021d2:	f000 ff4d 	bl	8003070 <HAL_GPIO_Init>
}
 80021d6:	bf00      	nop
 80021d8:	3728      	adds	r7, #40	; 0x28
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40000400 	.word	0x40000400
 80021e4:	40023800 	.word	0x40023800
 80021e8:	40020000 	.word	0x40020000
 80021ec:	40000c00 	.word	0x40000c00

080021f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b08a      	sub	sp, #40	; 0x28
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f8:	f107 0314 	add.w	r3, r7, #20
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	605a      	str	r2, [r3, #4]
 8002202:	609a      	str	r2, [r3, #8]
 8002204:	60da      	str	r2, [r3, #12]
 8002206:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a1d      	ldr	r2, [pc, #116]	; (8002284 <HAL_UART_MspInit+0x94>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d133      	bne.n	800227a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8002212:	2300      	movs	r3, #0
 8002214:	613b      	str	r3, [r7, #16]
 8002216:	4b1c      	ldr	r3, [pc, #112]	; (8002288 <HAL_UART_MspInit+0x98>)
 8002218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221a:	4a1b      	ldr	r2, [pc, #108]	; (8002288 <HAL_UART_MspInit+0x98>)
 800221c:	f043 0320 	orr.w	r3, r3, #32
 8002220:	6453      	str	r3, [r2, #68]	; 0x44
 8002222:	4b19      	ldr	r3, [pc, #100]	; (8002288 <HAL_UART_MspInit+0x98>)
 8002224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002226:	f003 0320 	and.w	r3, r3, #32
 800222a:	613b      	str	r3, [r7, #16]
 800222c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	60fb      	str	r3, [r7, #12]
 8002232:	4b15      	ldr	r3, [pc, #84]	; (8002288 <HAL_UART_MspInit+0x98>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002236:	4a14      	ldr	r2, [pc, #80]	; (8002288 <HAL_UART_MspInit+0x98>)
 8002238:	f043 0304 	orr.w	r3, r3, #4
 800223c:	6313      	str	r3, [r2, #48]	; 0x30
 800223e:	4b12      	ldr	r3, [pc, #72]	; (8002288 <HAL_UART_MspInit+0x98>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002242:	f003 0304 	and.w	r3, r3, #4
 8002246:	60fb      	str	r3, [r7, #12]
 8002248:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800224a:	23c0      	movs	r3, #192	; 0xc0
 800224c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800224e:	2302      	movs	r3, #2
 8002250:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002252:	2300      	movs	r3, #0
 8002254:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002256:	2303      	movs	r3, #3
 8002258:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800225a:	2308      	movs	r3, #8
 800225c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800225e:	f107 0314 	add.w	r3, r7, #20
 8002262:	4619      	mov	r1, r3
 8002264:	4809      	ldr	r0, [pc, #36]	; (800228c <HAL_UART_MspInit+0x9c>)
 8002266:	f000 ff03 	bl	8003070 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800226a:	2200      	movs	r2, #0
 800226c:	2100      	movs	r1, #0
 800226e:	2047      	movs	r0, #71	; 0x47
 8002270:	f000 fe35 	bl	8002ede <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002274:	2047      	movs	r0, #71	; 0x47
 8002276:	f000 fe4e 	bl	8002f16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800227a:	bf00      	nop
 800227c:	3728      	adds	r7, #40	; 0x28
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	40011400 	.word	0x40011400
 8002288:	40023800 	.word	0x40023800
 800228c:	40020800 	.word	0x40020800

08002290 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002294:	e7fe      	b.n	8002294 <NMI_Handler+0x4>

08002296 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002296:	b480      	push	{r7}
 8002298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800229a:	e7fe      	b.n	800229a <HardFault_Handler+0x4>

0800229c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022a0:	e7fe      	b.n	80022a0 <MemManage_Handler+0x4>

080022a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022a2:	b480      	push	{r7}
 80022a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022a6:	e7fe      	b.n	80022a6 <BusFault_Handler+0x4>

080022a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022ac:	e7fe      	b.n	80022ac <UsageFault_Handler+0x4>

080022ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022ae:	b480      	push	{r7}
 80022b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022b2:	bf00      	nop
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022c0:	bf00      	nop
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr

080022ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022ca:	b480      	push	{r7}
 80022cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022ce:	bf00      	nop
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022dc:	f000 f8fe 	bl	80024dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022e0:	bf00      	nop
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RPM_TICK_Pin);
 80022e8:	2004      	movs	r0, #4
 80022ea:	f001 f879 	bl	80033e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80022ee:	bf00      	nop
 80022f0:	bd80      	pop	{r7, pc}
	...

080022f4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80022f8:	4802      	ldr	r0, [pc, #8]	; (8002304 <TIM1_CC_IRQHandler+0x10>)
 80022fa:	f001 ff95 	bl	8004228 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80022fe:	bf00      	nop
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	200000c4 	.word	0x200000c4

08002308 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800230c:	4802      	ldr	r0, [pc, #8]	; (8002318 <TIM4_IRQHandler+0x10>)
 800230e:	f001 ff8b 	bl	8004228 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002312:	bf00      	nop
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	20000154 	.word	0x20000154

0800231c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002320:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002324:	f001 f85c 	bl	80033e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002328:	bf00      	nop
 800232a:	bd80      	pop	{r7, pc}

0800232c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002330:	4802      	ldr	r0, [pc, #8]	; (800233c <TIM5_IRQHandler+0x10>)
 8002332:	f001 ff79 	bl	8004228 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002336:	bf00      	nop
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	2000019c 	.word	0x2000019c

08002340 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002344:	4802      	ldr	r0, [pc, #8]	; (8002350 <USART6_IRQHandler+0x10>)
 8002346:	f003 f87b 	bl	8005440 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800234a:	bf00      	nop
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	200001e4 	.word	0x200001e4

08002354 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800235c:	4a14      	ldr	r2, [pc, #80]	; (80023b0 <_sbrk+0x5c>)
 800235e:	4b15      	ldr	r3, [pc, #84]	; (80023b4 <_sbrk+0x60>)
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002368:	4b13      	ldr	r3, [pc, #76]	; (80023b8 <_sbrk+0x64>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d102      	bne.n	8002376 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002370:	4b11      	ldr	r3, [pc, #68]	; (80023b8 <_sbrk+0x64>)
 8002372:	4a12      	ldr	r2, [pc, #72]	; (80023bc <_sbrk+0x68>)
 8002374:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002376:	4b10      	ldr	r3, [pc, #64]	; (80023b8 <_sbrk+0x64>)
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4413      	add	r3, r2
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	429a      	cmp	r2, r3
 8002382:	d207      	bcs.n	8002394 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002384:	f004 f84e 	bl	8006424 <__errno>
 8002388:	4603      	mov	r3, r0
 800238a:	220c      	movs	r2, #12
 800238c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800238e:	f04f 33ff 	mov.w	r3, #4294967295
 8002392:	e009      	b.n	80023a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002394:	4b08      	ldr	r3, [pc, #32]	; (80023b8 <_sbrk+0x64>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800239a:	4b07      	ldr	r3, [pc, #28]	; (80023b8 <_sbrk+0x64>)
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4413      	add	r3, r2
 80023a2:	4a05      	ldr	r2, [pc, #20]	; (80023b8 <_sbrk+0x64>)
 80023a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023a6:	68fb      	ldr	r3, [r7, #12]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3718      	adds	r7, #24
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	20018000 	.word	0x20018000
 80023b4:	00000400 	.word	0x00000400
 80023b8:	200005a4 	.word	0x200005a4
 80023bc:	200006f8 	.word	0x200006f8

080023c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023c4:	4b06      	ldr	r3, [pc, #24]	; (80023e0 <SystemInit+0x20>)
 80023c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ca:	4a05      	ldr	r2, [pc, #20]	; (80023e0 <SystemInit+0x20>)
 80023cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023d4:	bf00      	nop
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	e000ed00 	.word	0xe000ed00

080023e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80023e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800241c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023e8:	480d      	ldr	r0, [pc, #52]	; (8002420 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80023ea:	490e      	ldr	r1, [pc, #56]	; (8002424 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80023ec:	4a0e      	ldr	r2, [pc, #56]	; (8002428 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023f0:	e002      	b.n	80023f8 <LoopCopyDataInit>

080023f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023f6:	3304      	adds	r3, #4

080023f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023fc:	d3f9      	bcc.n	80023f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023fe:	4a0b      	ldr	r2, [pc, #44]	; (800242c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002400:	4c0b      	ldr	r4, [pc, #44]	; (8002430 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002402:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002404:	e001      	b.n	800240a <LoopFillZerobss>

08002406 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002406:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002408:	3204      	adds	r2, #4

0800240a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800240a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800240c:	d3fb      	bcc.n	8002406 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800240e:	f7ff ffd7 	bl	80023c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002412:	f004 f80d 	bl	8006430 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002416:	f7ff f9cf 	bl	80017b8 <main>
  bx  lr    
 800241a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800241c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002420:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002424:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002428:	08007b04 	.word	0x08007b04
  ldr r2, =_sbss
 800242c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002430:	200006f4 	.word	0x200006f4

08002434 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002434:	e7fe      	b.n	8002434 <ADC_IRQHandler>
	...

08002438 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800243c:	4b0e      	ldr	r3, [pc, #56]	; (8002478 <HAL_Init+0x40>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a0d      	ldr	r2, [pc, #52]	; (8002478 <HAL_Init+0x40>)
 8002442:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002446:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002448:	4b0b      	ldr	r3, [pc, #44]	; (8002478 <HAL_Init+0x40>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a0a      	ldr	r2, [pc, #40]	; (8002478 <HAL_Init+0x40>)
 800244e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002452:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002454:	4b08      	ldr	r3, [pc, #32]	; (8002478 <HAL_Init+0x40>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a07      	ldr	r2, [pc, #28]	; (8002478 <HAL_Init+0x40>)
 800245a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800245e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002460:	2003      	movs	r0, #3
 8002462:	f000 fd31 	bl	8002ec8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002466:	2000      	movs	r0, #0
 8002468:	f000 f808 	bl	800247c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800246c:	f7ff fd46 	bl	8001efc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	40023c00 	.word	0x40023c00

0800247c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002484:	4b12      	ldr	r3, [pc, #72]	; (80024d0 <HAL_InitTick+0x54>)
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	4b12      	ldr	r3, [pc, #72]	; (80024d4 <HAL_InitTick+0x58>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	4619      	mov	r1, r3
 800248e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002492:	fbb3 f3f1 	udiv	r3, r3, r1
 8002496:	fbb2 f3f3 	udiv	r3, r2, r3
 800249a:	4618      	mov	r0, r3
 800249c:	f000 fd49 	bl	8002f32 <HAL_SYSTICK_Config>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e00e      	b.n	80024c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2b0f      	cmp	r3, #15
 80024ae:	d80a      	bhi.n	80024c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024b0:	2200      	movs	r2, #0
 80024b2:	6879      	ldr	r1, [r7, #4]
 80024b4:	f04f 30ff 	mov.w	r0, #4294967295
 80024b8:	f000 fd11 	bl	8002ede <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024bc:	4a06      	ldr	r2, [pc, #24]	; (80024d8 <HAL_InitTick+0x5c>)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
 80024c4:	e000      	b.n	80024c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3708      	adds	r7, #8
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	20000000 	.word	0x20000000
 80024d4:	20000008 	.word	0x20000008
 80024d8:	20000004 	.word	0x20000004

080024dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024e0:	4b06      	ldr	r3, [pc, #24]	; (80024fc <HAL_IncTick+0x20>)
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	461a      	mov	r2, r3
 80024e6:	4b06      	ldr	r3, [pc, #24]	; (8002500 <HAL_IncTick+0x24>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4413      	add	r3, r2
 80024ec:	4a04      	ldr	r2, [pc, #16]	; (8002500 <HAL_IncTick+0x24>)
 80024ee:	6013      	str	r3, [r2, #0]
}
 80024f0:	bf00      	nop
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	20000008 	.word	0x20000008
 8002500:	200005a8 	.word	0x200005a8

08002504 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  return uwTick;
 8002508:	4b03      	ldr	r3, [pc, #12]	; (8002518 <HAL_GetTick+0x14>)
 800250a:	681b      	ldr	r3, [r3, #0]
}
 800250c:	4618      	mov	r0, r3
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	200005a8 	.word	0x200005a8

0800251c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002524:	f7ff ffee 	bl	8002504 <HAL_GetTick>
 8002528:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002534:	d005      	beq.n	8002542 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002536:	4b0a      	ldr	r3, [pc, #40]	; (8002560 <HAL_Delay+0x44>)
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	461a      	mov	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	4413      	add	r3, r2
 8002540:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002542:	bf00      	nop
 8002544:	f7ff ffde 	bl	8002504 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	68fa      	ldr	r2, [r7, #12]
 8002550:	429a      	cmp	r2, r3
 8002552:	d8f7      	bhi.n	8002544 <HAL_Delay+0x28>
  {
  }
}
 8002554:	bf00      	nop
 8002556:	bf00      	nop
 8002558:	3710      	adds	r7, #16
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	20000008 	.word	0x20000008

08002564 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800256c:	2300      	movs	r3, #0
 800256e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e033      	b.n	80025e2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257e:	2b00      	cmp	r3, #0
 8002580:	d109      	bne.n	8002596 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f7ff fce2 	bl	8001f4c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	f003 0310 	and.w	r3, r3, #16
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d118      	bne.n	80025d4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80025aa:	f023 0302 	bic.w	r3, r3, #2
 80025ae:	f043 0202 	orr.w	r2, r3, #2
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 faba 	bl	8002b30 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c6:	f023 0303 	bic.w	r3, r3, #3
 80025ca:	f043 0201 	orr.w	r2, r3, #1
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	641a      	str	r2, [r3, #64]	; 0x40
 80025d2:	e001      	b.n	80025d8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80025e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3710      	adds	r7, #16
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
	...

080025ec <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80025f4:	2300      	movs	r3, #0
 80025f6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d101      	bne.n	8002606 <HAL_ADC_Start+0x1a>
 8002602:	2302      	movs	r3, #2
 8002604:	e097      	b.n	8002736 <HAL_ADC_Start+0x14a>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2201      	movs	r2, #1
 800260a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f003 0301 	and.w	r3, r3, #1
 8002618:	2b01      	cmp	r3, #1
 800261a:	d018      	beq.n	800264e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	689a      	ldr	r2, [r3, #8]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f042 0201 	orr.w	r2, r2, #1
 800262a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800262c:	4b45      	ldr	r3, [pc, #276]	; (8002744 <HAL_ADC_Start+0x158>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a45      	ldr	r2, [pc, #276]	; (8002748 <HAL_ADC_Start+0x15c>)
 8002632:	fba2 2303 	umull	r2, r3, r2, r3
 8002636:	0c9a      	lsrs	r2, r3, #18
 8002638:	4613      	mov	r3, r2
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	4413      	add	r3, r2
 800263e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002640:	e002      	b.n	8002648 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	3b01      	subs	r3, #1
 8002646:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1f9      	bne.n	8002642 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f003 0301 	and.w	r3, r3, #1
 8002658:	2b01      	cmp	r3, #1
 800265a:	d15f      	bne.n	800271c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002660:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002664:	f023 0301 	bic.w	r3, r3, #1
 8002668:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800267a:	2b00      	cmp	r3, #0
 800267c:	d007      	beq.n	800268e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002686:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002692:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002696:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800269a:	d106      	bne.n	80026aa <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a0:	f023 0206 	bic.w	r2, r3, #6
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	645a      	str	r2, [r3, #68]	; 0x44
 80026a8:	e002      	b.n	80026b0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026b8:	4b24      	ldr	r3, [pc, #144]	; (800274c <HAL_ADC_Start+0x160>)
 80026ba:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80026c4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f003 031f 	and.w	r3, r3, #31
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d10f      	bne.n	80026f2 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d129      	bne.n	8002734 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	689a      	ldr	r2, [r3, #8]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80026ee:	609a      	str	r2, [r3, #8]
 80026f0:	e020      	b.n	8002734 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a16      	ldr	r2, [pc, #88]	; (8002750 <HAL_ADC_Start+0x164>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d11b      	bne.n	8002734 <HAL_ADC_Start+0x148>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d114      	bne.n	8002734 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	689a      	ldr	r2, [r3, #8]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002718:	609a      	str	r2, [r3, #8]
 800271a:	e00b      	b.n	8002734 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002720:	f043 0210 	orr.w	r2, r3, #16
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272c:	f043 0201 	orr.w	r2, r3, #1
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3714      	adds	r7, #20
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	20000000 	.word	0x20000000
 8002748:	431bde83 	.word	0x431bde83
 800274c:	40012300 	.word	0x40012300
 8002750:	40012000 	.word	0x40012000

08002754 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002762:	2b01      	cmp	r3, #1
 8002764:	d101      	bne.n	800276a <HAL_ADC_Stop+0x16>
 8002766:	2302      	movs	r3, #2
 8002768:	e021      	b.n	80027ae <HAL_ADC_Stop+0x5a>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2201      	movs	r2, #1
 800276e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	689a      	ldr	r2, [r3, #8]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 0201 	bic.w	r2, r2, #1
 8002780:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f003 0301 	and.w	r3, r3, #1
 800278c:	2b00      	cmp	r3, #0
 800278e:	d109      	bne.n	80027a4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002794:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002798:	f023 0301 	bic.w	r3, r3, #1
 800279c:	f043 0201 	orr.w	r2, r3, #1
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr

080027ba <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b084      	sub	sp, #16
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
 80027c2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80027c4:	2300      	movs	r3, #0
 80027c6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027d6:	d113      	bne.n	8002800 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80027e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027e6:	d10b      	bne.n	8002800 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ec:	f043 0220 	orr.w	r2, r3, #32
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e063      	b.n	80028c8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002800:	f7ff fe80 	bl	8002504 <HAL_GetTick>
 8002804:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002806:	e021      	b.n	800284c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800280e:	d01d      	beq.n	800284c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d007      	beq.n	8002826 <HAL_ADC_PollForConversion+0x6c>
 8002816:	f7ff fe75 	bl	8002504 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	429a      	cmp	r2, r3
 8002824:	d212      	bcs.n	800284c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	2b02      	cmp	r3, #2
 8002832:	d00b      	beq.n	800284c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002838:	f043 0204 	orr.w	r2, r3, #4
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e03d      	b.n	80028c8 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b02      	cmp	r3, #2
 8002858:	d1d6      	bne.n	8002808 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f06f 0212 	mvn.w	r2, #18
 8002862:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002868:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d123      	bne.n	80028c6 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002882:	2b00      	cmp	r3, #0
 8002884:	d11f      	bne.n	80028c6 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800288c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002890:	2b00      	cmp	r3, #0
 8002892:	d006      	beq.n	80028a2 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d111      	bne.n	80028c6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d105      	bne.n	80028c6 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028be:	f043 0201 	orr.w	r2, r3, #1
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3710      	adds	r7, #16
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80028de:	4618      	mov	r0, r3
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
	...

080028ec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80028f6:	2300      	movs	r3, #0
 80028f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002900:	2b01      	cmp	r3, #1
 8002902:	d101      	bne.n	8002908 <HAL_ADC_ConfigChannel+0x1c>
 8002904:	2302      	movs	r3, #2
 8002906:	e105      	b.n	8002b14 <HAL_ADC_ConfigChannel+0x228>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2b09      	cmp	r3, #9
 8002916:	d925      	bls.n	8002964 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68d9      	ldr	r1, [r3, #12]
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	b29b      	uxth	r3, r3
 8002924:	461a      	mov	r2, r3
 8002926:	4613      	mov	r3, r2
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	4413      	add	r3, r2
 800292c:	3b1e      	subs	r3, #30
 800292e:	2207      	movs	r2, #7
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	43da      	mvns	r2, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	400a      	ands	r2, r1
 800293c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	68d9      	ldr	r1, [r3, #12]
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	689a      	ldr	r2, [r3, #8]
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	b29b      	uxth	r3, r3
 800294e:	4618      	mov	r0, r3
 8002950:	4603      	mov	r3, r0
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	4403      	add	r3, r0
 8002956:	3b1e      	subs	r3, #30
 8002958:	409a      	lsls	r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	430a      	orrs	r2, r1
 8002960:	60da      	str	r2, [r3, #12]
 8002962:	e022      	b.n	80029aa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	6919      	ldr	r1, [r3, #16]
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	b29b      	uxth	r3, r3
 8002970:	461a      	mov	r2, r3
 8002972:	4613      	mov	r3, r2
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	4413      	add	r3, r2
 8002978:	2207      	movs	r2, #7
 800297a:	fa02 f303 	lsl.w	r3, r2, r3
 800297e:	43da      	mvns	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	400a      	ands	r2, r1
 8002986:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	6919      	ldr	r1, [r3, #16]
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	689a      	ldr	r2, [r3, #8]
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	b29b      	uxth	r3, r3
 8002998:	4618      	mov	r0, r3
 800299a:	4603      	mov	r3, r0
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	4403      	add	r3, r0
 80029a0:	409a      	lsls	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	430a      	orrs	r2, r1
 80029a8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	2b06      	cmp	r3, #6
 80029b0:	d824      	bhi.n	80029fc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	4613      	mov	r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	4413      	add	r3, r2
 80029c2:	3b05      	subs	r3, #5
 80029c4:	221f      	movs	r2, #31
 80029c6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ca:	43da      	mvns	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	400a      	ands	r2, r1
 80029d2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	b29b      	uxth	r3, r3
 80029e0:	4618      	mov	r0, r3
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685a      	ldr	r2, [r3, #4]
 80029e6:	4613      	mov	r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	4413      	add	r3, r2
 80029ec:	3b05      	subs	r3, #5
 80029ee:	fa00 f203 	lsl.w	r2, r0, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	430a      	orrs	r2, r1
 80029f8:	635a      	str	r2, [r3, #52]	; 0x34
 80029fa:	e04c      	b.n	8002a96 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	2b0c      	cmp	r3, #12
 8002a02:	d824      	bhi.n	8002a4e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	685a      	ldr	r2, [r3, #4]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	4413      	add	r3, r2
 8002a14:	3b23      	subs	r3, #35	; 0x23
 8002a16:	221f      	movs	r2, #31
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	43da      	mvns	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	400a      	ands	r2, r1
 8002a24:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	4618      	mov	r0, r3
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685a      	ldr	r2, [r3, #4]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	4413      	add	r3, r2
 8002a3e:	3b23      	subs	r3, #35	; 0x23
 8002a40:	fa00 f203 	lsl.w	r2, r0, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	631a      	str	r2, [r3, #48]	; 0x30
 8002a4c:	e023      	b.n	8002a96 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685a      	ldr	r2, [r3, #4]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	4413      	add	r3, r2
 8002a5e:	3b41      	subs	r3, #65	; 0x41
 8002a60:	221f      	movs	r2, #31
 8002a62:	fa02 f303 	lsl.w	r3, r2, r3
 8002a66:	43da      	mvns	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	400a      	ands	r2, r1
 8002a6e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685a      	ldr	r2, [r3, #4]
 8002a82:	4613      	mov	r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	4413      	add	r3, r2
 8002a88:	3b41      	subs	r3, #65	; 0x41
 8002a8a:	fa00 f203 	lsl.w	r2, r0, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	430a      	orrs	r2, r1
 8002a94:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a96:	4b22      	ldr	r3, [pc, #136]	; (8002b20 <HAL_ADC_ConfigChannel+0x234>)
 8002a98:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a21      	ldr	r2, [pc, #132]	; (8002b24 <HAL_ADC_ConfigChannel+0x238>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d109      	bne.n	8002ab8 <HAL_ADC_ConfigChannel+0x1cc>
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2b12      	cmp	r3, #18
 8002aaa:	d105      	bne.n	8002ab8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a19      	ldr	r2, [pc, #100]	; (8002b24 <HAL_ADC_ConfigChannel+0x238>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d123      	bne.n	8002b0a <HAL_ADC_ConfigChannel+0x21e>
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2b10      	cmp	r3, #16
 8002ac8:	d003      	beq.n	8002ad2 <HAL_ADC_ConfigChannel+0x1e6>
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2b11      	cmp	r3, #17
 8002ad0:	d11b      	bne.n	8002b0a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2b10      	cmp	r3, #16
 8002ae4:	d111      	bne.n	8002b0a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ae6:	4b10      	ldr	r3, [pc, #64]	; (8002b28 <HAL_ADC_ConfigChannel+0x23c>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a10      	ldr	r2, [pc, #64]	; (8002b2c <HAL_ADC_ConfigChannel+0x240>)
 8002aec:	fba2 2303 	umull	r2, r3, r2, r3
 8002af0:	0c9a      	lsrs	r2, r3, #18
 8002af2:	4613      	mov	r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4413      	add	r3, r2
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002afc:	e002      	b.n	8002b04 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	3b01      	subs	r3, #1
 8002b02:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1f9      	bne.n	8002afe <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3714      	adds	r7, #20
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr
 8002b20:	40012300 	.word	0x40012300
 8002b24:	40012000 	.word	0x40012000
 8002b28:	20000000 	.word	0x20000000
 8002b2c:	431bde83 	.word	0x431bde83

08002b30 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b38:	4b79      	ldr	r3, [pc, #484]	; (8002d20 <ADC_Init+0x1f0>)
 8002b3a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	685a      	ldr	r2, [r3, #4]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	431a      	orrs	r2, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	685a      	ldr	r2, [r3, #4]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	6859      	ldr	r1, [r3, #4]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	021a      	lsls	r2, r3, #8
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	430a      	orrs	r2, r1
 8002b78:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	685a      	ldr	r2, [r3, #4]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002b88:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	6859      	ldr	r1, [r3, #4]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689a      	ldr	r2, [r3, #8]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	689a      	ldr	r2, [r3, #8]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002baa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	6899      	ldr	r1, [r3, #8]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	68da      	ldr	r2, [r3, #12]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc2:	4a58      	ldr	r2, [pc, #352]	; (8002d24 <ADC_Init+0x1f4>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d022      	beq.n	8002c0e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	689a      	ldr	r2, [r3, #8]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002bd6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	6899      	ldr	r1, [r3, #8]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	430a      	orrs	r2, r1
 8002be8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	689a      	ldr	r2, [r3, #8]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002bf8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	6899      	ldr	r1, [r3, #8]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	609a      	str	r2, [r3, #8]
 8002c0c:	e00f      	b.n	8002c2e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	689a      	ldr	r2, [r3, #8]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c1c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	689a      	ldr	r2, [r3, #8]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c2c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f022 0202 	bic.w	r2, r2, #2
 8002c3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	6899      	ldr	r1, [r3, #8]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	7e1b      	ldrb	r3, [r3, #24]
 8002c48:	005a      	lsls	r2, r3, #1
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d01b      	beq.n	8002c94 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	685a      	ldr	r2, [r3, #4]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c6a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	685a      	ldr	r2, [r3, #4]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002c7a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	6859      	ldr	r1, [r3, #4]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c86:	3b01      	subs	r3, #1
 8002c88:	035a      	lsls	r2, r3, #13
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	605a      	str	r2, [r3, #4]
 8002c92:	e007      	b.n	8002ca4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	685a      	ldr	r2, [r3, #4]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ca2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002cb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	69db      	ldr	r3, [r3, #28]
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	051a      	lsls	r2, r3, #20
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	689a      	ldr	r2, [r3, #8]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002cd8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	6899      	ldr	r1, [r3, #8]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ce6:	025a      	lsls	r2, r3, #9
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	430a      	orrs	r2, r1
 8002cee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	689a      	ldr	r2, [r3, #8]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cfe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	6899      	ldr	r1, [r3, #8]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	029a      	lsls	r2, r3, #10
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	430a      	orrs	r2, r1
 8002d12:	609a      	str	r2, [r3, #8]
}
 8002d14:	bf00      	nop
 8002d16:	3714      	adds	r7, #20
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr
 8002d20:	40012300 	.word	0x40012300
 8002d24:	0f000001 	.word	0x0f000001

08002d28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b085      	sub	sp, #20
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f003 0307 	and.w	r3, r3, #7
 8002d36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d38:	4b0c      	ldr	r3, [pc, #48]	; (8002d6c <__NVIC_SetPriorityGrouping+0x44>)
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d3e:	68ba      	ldr	r2, [r7, #8]
 8002d40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d44:	4013      	ands	r3, r2
 8002d46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d5a:	4a04      	ldr	r2, [pc, #16]	; (8002d6c <__NVIC_SetPriorityGrouping+0x44>)
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	60d3      	str	r3, [r2, #12]
}
 8002d60:	bf00      	nop
 8002d62:	3714      	adds	r7, #20
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr
 8002d6c:	e000ed00 	.word	0xe000ed00

08002d70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d74:	4b04      	ldr	r3, [pc, #16]	; (8002d88 <__NVIC_GetPriorityGrouping+0x18>)
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	0a1b      	lsrs	r3, r3, #8
 8002d7a:	f003 0307 	and.w	r3, r3, #7
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr
 8002d88:	e000ed00 	.word	0xe000ed00

08002d8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	4603      	mov	r3, r0
 8002d94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	db0b      	blt.n	8002db6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d9e:	79fb      	ldrb	r3, [r7, #7]
 8002da0:	f003 021f 	and.w	r2, r3, #31
 8002da4:	4907      	ldr	r1, [pc, #28]	; (8002dc4 <__NVIC_EnableIRQ+0x38>)
 8002da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002daa:	095b      	lsrs	r3, r3, #5
 8002dac:	2001      	movs	r0, #1
 8002dae:	fa00 f202 	lsl.w	r2, r0, r2
 8002db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002db6:	bf00      	nop
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	e000e100 	.word	0xe000e100

08002dc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	4603      	mov	r3, r0
 8002dd0:	6039      	str	r1, [r7, #0]
 8002dd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	db0a      	blt.n	8002df2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	b2da      	uxtb	r2, r3
 8002de0:	490c      	ldr	r1, [pc, #48]	; (8002e14 <__NVIC_SetPriority+0x4c>)
 8002de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de6:	0112      	lsls	r2, r2, #4
 8002de8:	b2d2      	uxtb	r2, r2
 8002dea:	440b      	add	r3, r1
 8002dec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002df0:	e00a      	b.n	8002e08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	b2da      	uxtb	r2, r3
 8002df6:	4908      	ldr	r1, [pc, #32]	; (8002e18 <__NVIC_SetPriority+0x50>)
 8002df8:	79fb      	ldrb	r3, [r7, #7]
 8002dfa:	f003 030f 	and.w	r3, r3, #15
 8002dfe:	3b04      	subs	r3, #4
 8002e00:	0112      	lsls	r2, r2, #4
 8002e02:	b2d2      	uxtb	r2, r2
 8002e04:	440b      	add	r3, r1
 8002e06:	761a      	strb	r2, [r3, #24]
}
 8002e08:	bf00      	nop
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr
 8002e14:	e000e100 	.word	0xe000e100
 8002e18:	e000ed00 	.word	0xe000ed00

08002e1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b089      	sub	sp, #36	; 0x24
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f003 0307 	and.w	r3, r3, #7
 8002e2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	f1c3 0307 	rsb	r3, r3, #7
 8002e36:	2b04      	cmp	r3, #4
 8002e38:	bf28      	it	cs
 8002e3a:	2304      	movcs	r3, #4
 8002e3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	3304      	adds	r3, #4
 8002e42:	2b06      	cmp	r3, #6
 8002e44:	d902      	bls.n	8002e4c <NVIC_EncodePriority+0x30>
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	3b03      	subs	r3, #3
 8002e4a:	e000      	b.n	8002e4e <NVIC_EncodePriority+0x32>
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e50:	f04f 32ff 	mov.w	r2, #4294967295
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5a:	43da      	mvns	r2, r3
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	401a      	ands	r2, r3
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e64:	f04f 31ff 	mov.w	r1, #4294967295
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e6e:	43d9      	mvns	r1, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e74:	4313      	orrs	r3, r2
         );
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3724      	adds	r7, #36	; 0x24
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
	...

08002e84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e94:	d301      	bcc.n	8002e9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e96:	2301      	movs	r3, #1
 8002e98:	e00f      	b.n	8002eba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e9a:	4a0a      	ldr	r2, [pc, #40]	; (8002ec4 <SysTick_Config+0x40>)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ea2:	210f      	movs	r1, #15
 8002ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ea8:	f7ff ff8e 	bl	8002dc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002eac:	4b05      	ldr	r3, [pc, #20]	; (8002ec4 <SysTick_Config+0x40>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002eb2:	4b04      	ldr	r3, [pc, #16]	; (8002ec4 <SysTick_Config+0x40>)
 8002eb4:	2207      	movs	r2, #7
 8002eb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3708      	adds	r7, #8
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	e000e010 	.word	0xe000e010

08002ec8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f7ff ff29 	bl	8002d28 <__NVIC_SetPriorityGrouping>
}
 8002ed6:	bf00      	nop
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b086      	sub	sp, #24
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	60b9      	str	r1, [r7, #8]
 8002ee8:	607a      	str	r2, [r7, #4]
 8002eea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002eec:	2300      	movs	r3, #0
 8002eee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ef0:	f7ff ff3e 	bl	8002d70 <__NVIC_GetPriorityGrouping>
 8002ef4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	68b9      	ldr	r1, [r7, #8]
 8002efa:	6978      	ldr	r0, [r7, #20]
 8002efc:	f7ff ff8e 	bl	8002e1c <NVIC_EncodePriority>
 8002f00:	4602      	mov	r2, r0
 8002f02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f06:	4611      	mov	r1, r2
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7ff ff5d 	bl	8002dc8 <__NVIC_SetPriority>
}
 8002f0e:	bf00      	nop
 8002f10:	3718      	adds	r7, #24
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b082      	sub	sp, #8
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7ff ff31 	bl	8002d8c <__NVIC_EnableIRQ>
}
 8002f2a:	bf00      	nop
 8002f2c:	3708      	adds	r7, #8
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f32:	b580      	push	{r7, lr}
 8002f34:	b082      	sub	sp, #8
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f7ff ffa2 	bl	8002e84 <SysTick_Config>
 8002f40:	4603      	mov	r3, r0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	b084      	sub	sp, #16
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f56:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002f58:	f7ff fad4 	bl	8002504 <HAL_GetTick>
 8002f5c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d008      	beq.n	8002f7c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2280      	movs	r2, #128	; 0x80
 8002f6e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e052      	b.n	8003022 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f022 0216 	bic.w	r2, r2, #22
 8002f8a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	695a      	ldr	r2, [r3, #20]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f9a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d103      	bne.n	8002fac <HAL_DMA_Abort+0x62>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d007      	beq.n	8002fbc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f022 0208 	bic.w	r2, r2, #8
 8002fba:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f022 0201 	bic.w	r2, r2, #1
 8002fca:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fcc:	e013      	b.n	8002ff6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002fce:	f7ff fa99 	bl	8002504 <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	2b05      	cmp	r3, #5
 8002fda:	d90c      	bls.n	8002ff6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2220      	movs	r2, #32
 8002fe0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2203      	movs	r2, #3
 8002fe6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e015      	b.n	8003022 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0301 	and.w	r3, r3, #1
 8003000:	2b00      	cmp	r3, #0
 8003002:	d1e4      	bne.n	8002fce <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003008:	223f      	movs	r2, #63	; 0x3f
 800300a:	409a      	lsls	r2, r3
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}

0800302a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800302a:	b480      	push	{r7}
 800302c:	b083      	sub	sp, #12
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b02      	cmp	r3, #2
 800303c:	d004      	beq.n	8003048 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2280      	movs	r2, #128	; 0x80
 8003042:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e00c      	b.n	8003062 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2205      	movs	r2, #5
 800304c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f022 0201 	bic.w	r2, r2, #1
 800305e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	370c      	adds	r7, #12
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
	...

08003070 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003070:	b480      	push	{r7}
 8003072:	b089      	sub	sp, #36	; 0x24
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800307a:	2300      	movs	r3, #0
 800307c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800307e:	2300      	movs	r3, #0
 8003080:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003082:	2300      	movs	r3, #0
 8003084:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003086:	2300      	movs	r3, #0
 8003088:	61fb      	str	r3, [r7, #28]
 800308a:	e159      	b.n	8003340 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800308c:	2201      	movs	r2, #1
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	fa02 f303 	lsl.w	r3, r2, r3
 8003094:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	697a      	ldr	r2, [r7, #20]
 800309c:	4013      	ands	r3, r2
 800309e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030a0:	693a      	ldr	r2, [r7, #16]
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	f040 8148 	bne.w	800333a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f003 0303 	and.w	r3, r3, #3
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d005      	beq.n	80030c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d130      	bne.n	8003124 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	005b      	lsls	r3, r3, #1
 80030cc:	2203      	movs	r2, #3
 80030ce:	fa02 f303 	lsl.w	r3, r2, r3
 80030d2:	43db      	mvns	r3, r3
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	4013      	ands	r3, r2
 80030d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	68da      	ldr	r2, [r3, #12]
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	fa02 f303 	lsl.w	r3, r2, r3
 80030e6:	69ba      	ldr	r2, [r7, #24]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	69ba      	ldr	r2, [r7, #24]
 80030f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030f8:	2201      	movs	r2, #1
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003100:	43db      	mvns	r3, r3
 8003102:	69ba      	ldr	r2, [r7, #24]
 8003104:	4013      	ands	r3, r2
 8003106:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	091b      	lsrs	r3, r3, #4
 800310e:	f003 0201 	and.w	r2, r3, #1
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	fa02 f303 	lsl.w	r3, r2, r3
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	4313      	orrs	r3, r2
 800311c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	69ba      	ldr	r2, [r7, #24]
 8003122:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f003 0303 	and.w	r3, r3, #3
 800312c:	2b03      	cmp	r3, #3
 800312e:	d017      	beq.n	8003160 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	2203      	movs	r2, #3
 800313c:	fa02 f303 	lsl.w	r3, r2, r3
 8003140:	43db      	mvns	r3, r3
 8003142:	69ba      	ldr	r2, [r7, #24]
 8003144:	4013      	ands	r3, r2
 8003146:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	689a      	ldr	r2, [r3, #8]
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	005b      	lsls	r3, r3, #1
 8003150:	fa02 f303 	lsl.w	r3, r2, r3
 8003154:	69ba      	ldr	r2, [r7, #24]
 8003156:	4313      	orrs	r3, r2
 8003158:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f003 0303 	and.w	r3, r3, #3
 8003168:	2b02      	cmp	r3, #2
 800316a:	d123      	bne.n	80031b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	08da      	lsrs	r2, r3, #3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	3208      	adds	r2, #8
 8003174:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003178:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	f003 0307 	and.w	r3, r3, #7
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	220f      	movs	r2, #15
 8003184:	fa02 f303 	lsl.w	r3, r2, r3
 8003188:	43db      	mvns	r3, r3
 800318a:	69ba      	ldr	r2, [r7, #24]
 800318c:	4013      	ands	r3, r2
 800318e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	691a      	ldr	r2, [r3, #16]
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	f003 0307 	and.w	r3, r3, #7
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	fa02 f303 	lsl.w	r3, r2, r3
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	08da      	lsrs	r2, r3, #3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	3208      	adds	r2, #8
 80031ae:	69b9      	ldr	r1, [r7, #24]
 80031b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	005b      	lsls	r3, r3, #1
 80031be:	2203      	movs	r2, #3
 80031c0:	fa02 f303 	lsl.w	r3, r2, r3
 80031c4:	43db      	mvns	r3, r3
 80031c6:	69ba      	ldr	r2, [r7, #24]
 80031c8:	4013      	ands	r3, r2
 80031ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f003 0203 	and.w	r2, r3, #3
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	005b      	lsls	r3, r3, #1
 80031d8:	fa02 f303 	lsl.w	r3, r2, r3
 80031dc:	69ba      	ldr	r2, [r7, #24]
 80031de:	4313      	orrs	r3, r2
 80031e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	f000 80a2 	beq.w	800333a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031f6:	2300      	movs	r3, #0
 80031f8:	60fb      	str	r3, [r7, #12]
 80031fa:	4b57      	ldr	r3, [pc, #348]	; (8003358 <HAL_GPIO_Init+0x2e8>)
 80031fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031fe:	4a56      	ldr	r2, [pc, #344]	; (8003358 <HAL_GPIO_Init+0x2e8>)
 8003200:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003204:	6453      	str	r3, [r2, #68]	; 0x44
 8003206:	4b54      	ldr	r3, [pc, #336]	; (8003358 <HAL_GPIO_Init+0x2e8>)
 8003208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800320a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800320e:	60fb      	str	r3, [r7, #12]
 8003210:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003212:	4a52      	ldr	r2, [pc, #328]	; (800335c <HAL_GPIO_Init+0x2ec>)
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	089b      	lsrs	r3, r3, #2
 8003218:	3302      	adds	r3, #2
 800321a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800321e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	f003 0303 	and.w	r3, r3, #3
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	220f      	movs	r2, #15
 800322a:	fa02 f303 	lsl.w	r3, r2, r3
 800322e:	43db      	mvns	r3, r3
 8003230:	69ba      	ldr	r2, [r7, #24]
 8003232:	4013      	ands	r3, r2
 8003234:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a49      	ldr	r2, [pc, #292]	; (8003360 <HAL_GPIO_Init+0x2f0>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d019      	beq.n	8003272 <HAL_GPIO_Init+0x202>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a48      	ldr	r2, [pc, #288]	; (8003364 <HAL_GPIO_Init+0x2f4>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d013      	beq.n	800326e <HAL_GPIO_Init+0x1fe>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a47      	ldr	r2, [pc, #284]	; (8003368 <HAL_GPIO_Init+0x2f8>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d00d      	beq.n	800326a <HAL_GPIO_Init+0x1fa>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a46      	ldr	r2, [pc, #280]	; (800336c <HAL_GPIO_Init+0x2fc>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d007      	beq.n	8003266 <HAL_GPIO_Init+0x1f6>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a45      	ldr	r2, [pc, #276]	; (8003370 <HAL_GPIO_Init+0x300>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d101      	bne.n	8003262 <HAL_GPIO_Init+0x1f2>
 800325e:	2304      	movs	r3, #4
 8003260:	e008      	b.n	8003274 <HAL_GPIO_Init+0x204>
 8003262:	2307      	movs	r3, #7
 8003264:	e006      	b.n	8003274 <HAL_GPIO_Init+0x204>
 8003266:	2303      	movs	r3, #3
 8003268:	e004      	b.n	8003274 <HAL_GPIO_Init+0x204>
 800326a:	2302      	movs	r3, #2
 800326c:	e002      	b.n	8003274 <HAL_GPIO_Init+0x204>
 800326e:	2301      	movs	r3, #1
 8003270:	e000      	b.n	8003274 <HAL_GPIO_Init+0x204>
 8003272:	2300      	movs	r3, #0
 8003274:	69fa      	ldr	r2, [r7, #28]
 8003276:	f002 0203 	and.w	r2, r2, #3
 800327a:	0092      	lsls	r2, r2, #2
 800327c:	4093      	lsls	r3, r2
 800327e:	69ba      	ldr	r2, [r7, #24]
 8003280:	4313      	orrs	r3, r2
 8003282:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003284:	4935      	ldr	r1, [pc, #212]	; (800335c <HAL_GPIO_Init+0x2ec>)
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	089b      	lsrs	r3, r3, #2
 800328a:	3302      	adds	r3, #2
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003292:	4b38      	ldr	r3, [pc, #224]	; (8003374 <HAL_GPIO_Init+0x304>)
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	43db      	mvns	r3, r3
 800329c:	69ba      	ldr	r2, [r7, #24]
 800329e:	4013      	ands	r3, r2
 80032a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d003      	beq.n	80032b6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80032ae:	69ba      	ldr	r2, [r7, #24]
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032b6:	4a2f      	ldr	r2, [pc, #188]	; (8003374 <HAL_GPIO_Init+0x304>)
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032bc:	4b2d      	ldr	r3, [pc, #180]	; (8003374 <HAL_GPIO_Init+0x304>)
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	43db      	mvns	r3, r3
 80032c6:	69ba      	ldr	r2, [r7, #24]
 80032c8:	4013      	ands	r3, r2
 80032ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d003      	beq.n	80032e0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	4313      	orrs	r3, r2
 80032de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032e0:	4a24      	ldr	r2, [pc, #144]	; (8003374 <HAL_GPIO_Init+0x304>)
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80032e6:	4b23      	ldr	r3, [pc, #140]	; (8003374 <HAL_GPIO_Init+0x304>)
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	43db      	mvns	r3, r3
 80032f0:	69ba      	ldr	r2, [r7, #24]
 80032f2:	4013      	ands	r3, r2
 80032f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d003      	beq.n	800330a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003302:	69ba      	ldr	r2, [r7, #24]
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	4313      	orrs	r3, r2
 8003308:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800330a:	4a1a      	ldr	r2, [pc, #104]	; (8003374 <HAL_GPIO_Init+0x304>)
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003310:	4b18      	ldr	r3, [pc, #96]	; (8003374 <HAL_GPIO_Init+0x304>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	43db      	mvns	r3, r3
 800331a:	69ba      	ldr	r2, [r7, #24]
 800331c:	4013      	ands	r3, r2
 800331e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d003      	beq.n	8003334 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800332c:	69ba      	ldr	r2, [r7, #24]
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	4313      	orrs	r3, r2
 8003332:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003334:	4a0f      	ldr	r2, [pc, #60]	; (8003374 <HAL_GPIO_Init+0x304>)
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	3301      	adds	r3, #1
 800333e:	61fb      	str	r3, [r7, #28]
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	2b0f      	cmp	r3, #15
 8003344:	f67f aea2 	bls.w	800308c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003348:	bf00      	nop
 800334a:	bf00      	nop
 800334c:	3724      	adds	r7, #36	; 0x24
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	40023800 	.word	0x40023800
 800335c:	40013800 	.word	0x40013800
 8003360:	40020000 	.word	0x40020000
 8003364:	40020400 	.word	0x40020400
 8003368:	40020800 	.word	0x40020800
 800336c:	40020c00 	.word	0x40020c00
 8003370:	40021000 	.word	0x40021000
 8003374:	40013c00 	.word	0x40013c00

08003378 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	460b      	mov	r3, r1
 8003382:	807b      	strh	r3, [r7, #2]
 8003384:	4613      	mov	r3, r2
 8003386:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003388:	787b      	ldrb	r3, [r7, #1]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d003      	beq.n	8003396 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800338e:	887a      	ldrh	r2, [r7, #2]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003394:	e003      	b.n	800339e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003396:	887b      	ldrh	r3, [r7, #2]
 8003398:	041a      	lsls	r2, r3, #16
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	619a      	str	r2, [r3, #24]
}
 800339e:	bf00      	nop
 80033a0:	370c      	adds	r7, #12
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr

080033aa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80033aa:	b480      	push	{r7}
 80033ac:	b085      	sub	sp, #20
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
 80033b2:	460b      	mov	r3, r1
 80033b4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80033bc:	887a      	ldrh	r2, [r7, #2]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	4013      	ands	r3, r2
 80033c2:	041a      	lsls	r2, r3, #16
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	43d9      	mvns	r1, r3
 80033c8:	887b      	ldrh	r3, [r7, #2]
 80033ca:	400b      	ands	r3, r1
 80033cc:	431a      	orrs	r2, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	619a      	str	r2, [r3, #24]
}
 80033d2:	bf00      	nop
 80033d4:	3714      	adds	r7, #20
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
	...

080033e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	4603      	mov	r3, r0
 80033e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80033ea:	4b08      	ldr	r3, [pc, #32]	; (800340c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033ec:	695a      	ldr	r2, [r3, #20]
 80033ee:	88fb      	ldrh	r3, [r7, #6]
 80033f0:	4013      	ands	r3, r2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d006      	beq.n	8003404 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80033f6:	4a05      	ldr	r2, [pc, #20]	; (800340c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033f8:	88fb      	ldrh	r3, [r7, #6]
 80033fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80033fc:	88fb      	ldrh	r3, [r7, #6]
 80033fe:	4618      	mov	r0, r3
 8003400:	f7fd fd42 	bl	8000e88 <HAL_GPIO_EXTI_Callback>
  }
}
 8003404:	bf00      	nop
 8003406:	3708      	adds	r7, #8
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}
 800340c:	40013c00 	.word	0x40013c00

08003410 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b086      	sub	sp, #24
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e267      	b.n	80038f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	2b00      	cmp	r3, #0
 800342c:	d075      	beq.n	800351a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800342e:	4b88      	ldr	r3, [pc, #544]	; (8003650 <HAL_RCC_OscConfig+0x240>)
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f003 030c 	and.w	r3, r3, #12
 8003436:	2b04      	cmp	r3, #4
 8003438:	d00c      	beq.n	8003454 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800343a:	4b85      	ldr	r3, [pc, #532]	; (8003650 <HAL_RCC_OscConfig+0x240>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003442:	2b08      	cmp	r3, #8
 8003444:	d112      	bne.n	800346c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003446:	4b82      	ldr	r3, [pc, #520]	; (8003650 <HAL_RCC_OscConfig+0x240>)
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800344e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003452:	d10b      	bne.n	800346c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003454:	4b7e      	ldr	r3, [pc, #504]	; (8003650 <HAL_RCC_OscConfig+0x240>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d05b      	beq.n	8003518 <HAL_RCC_OscConfig+0x108>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d157      	bne.n	8003518 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e242      	b.n	80038f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003474:	d106      	bne.n	8003484 <HAL_RCC_OscConfig+0x74>
 8003476:	4b76      	ldr	r3, [pc, #472]	; (8003650 <HAL_RCC_OscConfig+0x240>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a75      	ldr	r2, [pc, #468]	; (8003650 <HAL_RCC_OscConfig+0x240>)
 800347c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003480:	6013      	str	r3, [r2, #0]
 8003482:	e01d      	b.n	80034c0 <HAL_RCC_OscConfig+0xb0>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800348c:	d10c      	bne.n	80034a8 <HAL_RCC_OscConfig+0x98>
 800348e:	4b70      	ldr	r3, [pc, #448]	; (8003650 <HAL_RCC_OscConfig+0x240>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a6f      	ldr	r2, [pc, #444]	; (8003650 <HAL_RCC_OscConfig+0x240>)
 8003494:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003498:	6013      	str	r3, [r2, #0]
 800349a:	4b6d      	ldr	r3, [pc, #436]	; (8003650 <HAL_RCC_OscConfig+0x240>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a6c      	ldr	r2, [pc, #432]	; (8003650 <HAL_RCC_OscConfig+0x240>)
 80034a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034a4:	6013      	str	r3, [r2, #0]
 80034a6:	e00b      	b.n	80034c0 <HAL_RCC_OscConfig+0xb0>
 80034a8:	4b69      	ldr	r3, [pc, #420]	; (8003650 <HAL_RCC_OscConfig+0x240>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a68      	ldr	r2, [pc, #416]	; (8003650 <HAL_RCC_OscConfig+0x240>)
 80034ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034b2:	6013      	str	r3, [r2, #0]
 80034b4:	4b66      	ldr	r3, [pc, #408]	; (8003650 <HAL_RCC_OscConfig+0x240>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a65      	ldr	r2, [pc, #404]	; (8003650 <HAL_RCC_OscConfig+0x240>)
 80034ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d013      	beq.n	80034f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c8:	f7ff f81c 	bl	8002504 <HAL_GetTick>
 80034cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ce:	e008      	b.n	80034e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034d0:	f7ff f818 	bl	8002504 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b64      	cmp	r3, #100	; 0x64
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e207      	b.n	80038f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034e2:	4b5b      	ldr	r3, [pc, #364]	; (8003650 <HAL_RCC_OscConfig+0x240>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d0f0      	beq.n	80034d0 <HAL_RCC_OscConfig+0xc0>
 80034ee:	e014      	b.n	800351a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f0:	f7ff f808 	bl	8002504 <HAL_GetTick>
 80034f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034f6:	e008      	b.n	800350a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034f8:	f7ff f804 	bl	8002504 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b64      	cmp	r3, #100	; 0x64
 8003504:	d901      	bls.n	800350a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e1f3      	b.n	80038f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800350a:	4b51      	ldr	r3, [pc, #324]	; (8003650 <HAL_RCC_OscConfig+0x240>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1f0      	bne.n	80034f8 <HAL_RCC_OscConfig+0xe8>
 8003516:	e000      	b.n	800351a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003518:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d063      	beq.n	80035ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003526:	4b4a      	ldr	r3, [pc, #296]	; (8003650 <HAL_RCC_OscConfig+0x240>)
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f003 030c 	and.w	r3, r3, #12
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00b      	beq.n	800354a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003532:	4b47      	ldr	r3, [pc, #284]	; (8003650 <HAL_RCC_OscConfig+0x240>)
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800353a:	2b08      	cmp	r3, #8
 800353c:	d11c      	bne.n	8003578 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800353e:	4b44      	ldr	r3, [pc, #272]	; (8003650 <HAL_RCC_OscConfig+0x240>)
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d116      	bne.n	8003578 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800354a:	4b41      	ldr	r3, [pc, #260]	; (8003650 <HAL_RCC_OscConfig+0x240>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d005      	beq.n	8003562 <HAL_RCC_OscConfig+0x152>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	2b01      	cmp	r3, #1
 800355c:	d001      	beq.n	8003562 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e1c7      	b.n	80038f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003562:	4b3b      	ldr	r3, [pc, #236]	; (8003650 <HAL_RCC_OscConfig+0x240>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	00db      	lsls	r3, r3, #3
 8003570:	4937      	ldr	r1, [pc, #220]	; (8003650 <HAL_RCC_OscConfig+0x240>)
 8003572:	4313      	orrs	r3, r2
 8003574:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003576:	e03a      	b.n	80035ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d020      	beq.n	80035c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003580:	4b34      	ldr	r3, [pc, #208]	; (8003654 <HAL_RCC_OscConfig+0x244>)
 8003582:	2201      	movs	r2, #1
 8003584:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003586:	f7fe ffbd 	bl	8002504 <HAL_GetTick>
 800358a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800358c:	e008      	b.n	80035a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800358e:	f7fe ffb9 	bl	8002504 <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	2b02      	cmp	r3, #2
 800359a:	d901      	bls.n	80035a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e1a8      	b.n	80038f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035a0:	4b2b      	ldr	r3, [pc, #172]	; (8003650 <HAL_RCC_OscConfig+0x240>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0302 	and.w	r3, r3, #2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d0f0      	beq.n	800358e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035ac:	4b28      	ldr	r3, [pc, #160]	; (8003650 <HAL_RCC_OscConfig+0x240>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	00db      	lsls	r3, r3, #3
 80035ba:	4925      	ldr	r1, [pc, #148]	; (8003650 <HAL_RCC_OscConfig+0x240>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	600b      	str	r3, [r1, #0]
 80035c0:	e015      	b.n	80035ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035c2:	4b24      	ldr	r3, [pc, #144]	; (8003654 <HAL_RCC_OscConfig+0x244>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c8:	f7fe ff9c 	bl	8002504 <HAL_GetTick>
 80035cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ce:	e008      	b.n	80035e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035d0:	f7fe ff98 	bl	8002504 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e187      	b.n	80038f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035e2:	4b1b      	ldr	r3, [pc, #108]	; (8003650 <HAL_RCC_OscConfig+0x240>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d1f0      	bne.n	80035d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0308 	and.w	r3, r3, #8
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d036      	beq.n	8003668 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d016      	beq.n	8003630 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003602:	4b15      	ldr	r3, [pc, #84]	; (8003658 <HAL_RCC_OscConfig+0x248>)
 8003604:	2201      	movs	r2, #1
 8003606:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003608:	f7fe ff7c 	bl	8002504 <HAL_GetTick>
 800360c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800360e:	e008      	b.n	8003622 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003610:	f7fe ff78 	bl	8002504 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b02      	cmp	r3, #2
 800361c:	d901      	bls.n	8003622 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e167      	b.n	80038f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003622:	4b0b      	ldr	r3, [pc, #44]	; (8003650 <HAL_RCC_OscConfig+0x240>)
 8003624:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	2b00      	cmp	r3, #0
 800362c:	d0f0      	beq.n	8003610 <HAL_RCC_OscConfig+0x200>
 800362e:	e01b      	b.n	8003668 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003630:	4b09      	ldr	r3, [pc, #36]	; (8003658 <HAL_RCC_OscConfig+0x248>)
 8003632:	2200      	movs	r2, #0
 8003634:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003636:	f7fe ff65 	bl	8002504 <HAL_GetTick>
 800363a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800363c:	e00e      	b.n	800365c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800363e:	f7fe ff61 	bl	8002504 <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	2b02      	cmp	r3, #2
 800364a:	d907      	bls.n	800365c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e150      	b.n	80038f2 <HAL_RCC_OscConfig+0x4e2>
 8003650:	40023800 	.word	0x40023800
 8003654:	42470000 	.word	0x42470000
 8003658:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800365c:	4b88      	ldr	r3, [pc, #544]	; (8003880 <HAL_RCC_OscConfig+0x470>)
 800365e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003660:	f003 0302 	and.w	r3, r3, #2
 8003664:	2b00      	cmp	r3, #0
 8003666:	d1ea      	bne.n	800363e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0304 	and.w	r3, r3, #4
 8003670:	2b00      	cmp	r3, #0
 8003672:	f000 8097 	beq.w	80037a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003676:	2300      	movs	r3, #0
 8003678:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800367a:	4b81      	ldr	r3, [pc, #516]	; (8003880 <HAL_RCC_OscConfig+0x470>)
 800367c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d10f      	bne.n	80036a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003686:	2300      	movs	r3, #0
 8003688:	60bb      	str	r3, [r7, #8]
 800368a:	4b7d      	ldr	r3, [pc, #500]	; (8003880 <HAL_RCC_OscConfig+0x470>)
 800368c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368e:	4a7c      	ldr	r2, [pc, #496]	; (8003880 <HAL_RCC_OscConfig+0x470>)
 8003690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003694:	6413      	str	r3, [r2, #64]	; 0x40
 8003696:	4b7a      	ldr	r3, [pc, #488]	; (8003880 <HAL_RCC_OscConfig+0x470>)
 8003698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800369e:	60bb      	str	r3, [r7, #8]
 80036a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036a2:	2301      	movs	r3, #1
 80036a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036a6:	4b77      	ldr	r3, [pc, #476]	; (8003884 <HAL_RCC_OscConfig+0x474>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d118      	bne.n	80036e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036b2:	4b74      	ldr	r3, [pc, #464]	; (8003884 <HAL_RCC_OscConfig+0x474>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a73      	ldr	r2, [pc, #460]	; (8003884 <HAL_RCC_OscConfig+0x474>)
 80036b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036be:	f7fe ff21 	bl	8002504 <HAL_GetTick>
 80036c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036c4:	e008      	b.n	80036d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036c6:	f7fe ff1d 	bl	8002504 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d901      	bls.n	80036d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e10c      	b.n	80038f2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036d8:	4b6a      	ldr	r3, [pc, #424]	; (8003884 <HAL_RCC_OscConfig+0x474>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d0f0      	beq.n	80036c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d106      	bne.n	80036fa <HAL_RCC_OscConfig+0x2ea>
 80036ec:	4b64      	ldr	r3, [pc, #400]	; (8003880 <HAL_RCC_OscConfig+0x470>)
 80036ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f0:	4a63      	ldr	r2, [pc, #396]	; (8003880 <HAL_RCC_OscConfig+0x470>)
 80036f2:	f043 0301 	orr.w	r3, r3, #1
 80036f6:	6713      	str	r3, [r2, #112]	; 0x70
 80036f8:	e01c      	b.n	8003734 <HAL_RCC_OscConfig+0x324>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	2b05      	cmp	r3, #5
 8003700:	d10c      	bne.n	800371c <HAL_RCC_OscConfig+0x30c>
 8003702:	4b5f      	ldr	r3, [pc, #380]	; (8003880 <HAL_RCC_OscConfig+0x470>)
 8003704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003706:	4a5e      	ldr	r2, [pc, #376]	; (8003880 <HAL_RCC_OscConfig+0x470>)
 8003708:	f043 0304 	orr.w	r3, r3, #4
 800370c:	6713      	str	r3, [r2, #112]	; 0x70
 800370e:	4b5c      	ldr	r3, [pc, #368]	; (8003880 <HAL_RCC_OscConfig+0x470>)
 8003710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003712:	4a5b      	ldr	r2, [pc, #364]	; (8003880 <HAL_RCC_OscConfig+0x470>)
 8003714:	f043 0301 	orr.w	r3, r3, #1
 8003718:	6713      	str	r3, [r2, #112]	; 0x70
 800371a:	e00b      	b.n	8003734 <HAL_RCC_OscConfig+0x324>
 800371c:	4b58      	ldr	r3, [pc, #352]	; (8003880 <HAL_RCC_OscConfig+0x470>)
 800371e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003720:	4a57      	ldr	r2, [pc, #348]	; (8003880 <HAL_RCC_OscConfig+0x470>)
 8003722:	f023 0301 	bic.w	r3, r3, #1
 8003726:	6713      	str	r3, [r2, #112]	; 0x70
 8003728:	4b55      	ldr	r3, [pc, #340]	; (8003880 <HAL_RCC_OscConfig+0x470>)
 800372a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800372c:	4a54      	ldr	r2, [pc, #336]	; (8003880 <HAL_RCC_OscConfig+0x470>)
 800372e:	f023 0304 	bic.w	r3, r3, #4
 8003732:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d015      	beq.n	8003768 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800373c:	f7fe fee2 	bl	8002504 <HAL_GetTick>
 8003740:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003742:	e00a      	b.n	800375a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003744:	f7fe fede 	bl	8002504 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003752:	4293      	cmp	r3, r2
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e0cb      	b.n	80038f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800375a:	4b49      	ldr	r3, [pc, #292]	; (8003880 <HAL_RCC_OscConfig+0x470>)
 800375c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800375e:	f003 0302 	and.w	r3, r3, #2
 8003762:	2b00      	cmp	r3, #0
 8003764:	d0ee      	beq.n	8003744 <HAL_RCC_OscConfig+0x334>
 8003766:	e014      	b.n	8003792 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003768:	f7fe fecc 	bl	8002504 <HAL_GetTick>
 800376c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800376e:	e00a      	b.n	8003786 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003770:	f7fe fec8 	bl	8002504 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	f241 3288 	movw	r2, #5000	; 0x1388
 800377e:	4293      	cmp	r3, r2
 8003780:	d901      	bls.n	8003786 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e0b5      	b.n	80038f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003786:	4b3e      	ldr	r3, [pc, #248]	; (8003880 <HAL_RCC_OscConfig+0x470>)
 8003788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d1ee      	bne.n	8003770 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003792:	7dfb      	ldrb	r3, [r7, #23]
 8003794:	2b01      	cmp	r3, #1
 8003796:	d105      	bne.n	80037a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003798:	4b39      	ldr	r3, [pc, #228]	; (8003880 <HAL_RCC_OscConfig+0x470>)
 800379a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379c:	4a38      	ldr	r2, [pc, #224]	; (8003880 <HAL_RCC_OscConfig+0x470>)
 800379e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	f000 80a1 	beq.w	80038f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037ae:	4b34      	ldr	r3, [pc, #208]	; (8003880 <HAL_RCC_OscConfig+0x470>)
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f003 030c 	and.w	r3, r3, #12
 80037b6:	2b08      	cmp	r3, #8
 80037b8:	d05c      	beq.n	8003874 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	699b      	ldr	r3, [r3, #24]
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d141      	bne.n	8003846 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037c2:	4b31      	ldr	r3, [pc, #196]	; (8003888 <HAL_RCC_OscConfig+0x478>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c8:	f7fe fe9c 	bl	8002504 <HAL_GetTick>
 80037cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ce:	e008      	b.n	80037e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037d0:	f7fe fe98 	bl	8002504 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e087      	b.n	80038f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037e2:	4b27      	ldr	r3, [pc, #156]	; (8003880 <HAL_RCC_OscConfig+0x470>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d1f0      	bne.n	80037d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	69da      	ldr	r2, [r3, #28]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a1b      	ldr	r3, [r3, #32]
 80037f6:	431a      	orrs	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fc:	019b      	lsls	r3, r3, #6
 80037fe:	431a      	orrs	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003804:	085b      	lsrs	r3, r3, #1
 8003806:	3b01      	subs	r3, #1
 8003808:	041b      	lsls	r3, r3, #16
 800380a:	431a      	orrs	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003810:	061b      	lsls	r3, r3, #24
 8003812:	491b      	ldr	r1, [pc, #108]	; (8003880 <HAL_RCC_OscConfig+0x470>)
 8003814:	4313      	orrs	r3, r2
 8003816:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003818:	4b1b      	ldr	r3, [pc, #108]	; (8003888 <HAL_RCC_OscConfig+0x478>)
 800381a:	2201      	movs	r2, #1
 800381c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800381e:	f7fe fe71 	bl	8002504 <HAL_GetTick>
 8003822:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003824:	e008      	b.n	8003838 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003826:	f7fe fe6d 	bl	8002504 <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	2b02      	cmp	r3, #2
 8003832:	d901      	bls.n	8003838 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e05c      	b.n	80038f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003838:	4b11      	ldr	r3, [pc, #68]	; (8003880 <HAL_RCC_OscConfig+0x470>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d0f0      	beq.n	8003826 <HAL_RCC_OscConfig+0x416>
 8003844:	e054      	b.n	80038f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003846:	4b10      	ldr	r3, [pc, #64]	; (8003888 <HAL_RCC_OscConfig+0x478>)
 8003848:	2200      	movs	r2, #0
 800384a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800384c:	f7fe fe5a 	bl	8002504 <HAL_GetTick>
 8003850:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003852:	e008      	b.n	8003866 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003854:	f7fe fe56 	bl	8002504 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b02      	cmp	r3, #2
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e045      	b.n	80038f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003866:	4b06      	ldr	r3, [pc, #24]	; (8003880 <HAL_RCC_OscConfig+0x470>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d1f0      	bne.n	8003854 <HAL_RCC_OscConfig+0x444>
 8003872:	e03d      	b.n	80038f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d107      	bne.n	800388c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e038      	b.n	80038f2 <HAL_RCC_OscConfig+0x4e2>
 8003880:	40023800 	.word	0x40023800
 8003884:	40007000 	.word	0x40007000
 8003888:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800388c:	4b1b      	ldr	r3, [pc, #108]	; (80038fc <HAL_RCC_OscConfig+0x4ec>)
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d028      	beq.n	80038ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d121      	bne.n	80038ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d11a      	bne.n	80038ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80038bc:	4013      	ands	r3, r2
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80038c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d111      	bne.n	80038ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d2:	085b      	lsrs	r3, r3, #1
 80038d4:	3b01      	subs	r3, #1
 80038d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038d8:	429a      	cmp	r2, r3
 80038da:	d107      	bne.n	80038ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d001      	beq.n	80038f0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e000      	b.n	80038f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3718      	adds	r7, #24
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	40023800 	.word	0x40023800

08003900 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d101      	bne.n	8003914 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e0cc      	b.n	8003aae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003914:	4b68      	ldr	r3, [pc, #416]	; (8003ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0307 	and.w	r3, r3, #7
 800391c:	683a      	ldr	r2, [r7, #0]
 800391e:	429a      	cmp	r2, r3
 8003920:	d90c      	bls.n	800393c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003922:	4b65      	ldr	r3, [pc, #404]	; (8003ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8003924:	683a      	ldr	r2, [r7, #0]
 8003926:	b2d2      	uxtb	r2, r2
 8003928:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800392a:	4b63      	ldr	r3, [pc, #396]	; (8003ab8 <HAL_RCC_ClockConfig+0x1b8>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0307 	and.w	r3, r3, #7
 8003932:	683a      	ldr	r2, [r7, #0]
 8003934:	429a      	cmp	r2, r3
 8003936:	d001      	beq.n	800393c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e0b8      	b.n	8003aae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0302 	and.w	r3, r3, #2
 8003944:	2b00      	cmp	r3, #0
 8003946:	d020      	beq.n	800398a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0304 	and.w	r3, r3, #4
 8003950:	2b00      	cmp	r3, #0
 8003952:	d005      	beq.n	8003960 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003954:	4b59      	ldr	r3, [pc, #356]	; (8003abc <HAL_RCC_ClockConfig+0x1bc>)
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	4a58      	ldr	r2, [pc, #352]	; (8003abc <HAL_RCC_ClockConfig+0x1bc>)
 800395a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800395e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0308 	and.w	r3, r3, #8
 8003968:	2b00      	cmp	r3, #0
 800396a:	d005      	beq.n	8003978 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800396c:	4b53      	ldr	r3, [pc, #332]	; (8003abc <HAL_RCC_ClockConfig+0x1bc>)
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	4a52      	ldr	r2, [pc, #328]	; (8003abc <HAL_RCC_ClockConfig+0x1bc>)
 8003972:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003976:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003978:	4b50      	ldr	r3, [pc, #320]	; (8003abc <HAL_RCC_ClockConfig+0x1bc>)
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	494d      	ldr	r1, [pc, #308]	; (8003abc <HAL_RCC_ClockConfig+0x1bc>)
 8003986:	4313      	orrs	r3, r2
 8003988:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0301 	and.w	r3, r3, #1
 8003992:	2b00      	cmp	r3, #0
 8003994:	d044      	beq.n	8003a20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	2b01      	cmp	r3, #1
 800399c:	d107      	bne.n	80039ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800399e:	4b47      	ldr	r3, [pc, #284]	; (8003abc <HAL_RCC_ClockConfig+0x1bc>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d119      	bne.n	80039de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e07f      	b.n	8003aae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d003      	beq.n	80039be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039ba:	2b03      	cmp	r3, #3
 80039bc:	d107      	bne.n	80039ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039be:	4b3f      	ldr	r3, [pc, #252]	; (8003abc <HAL_RCC_ClockConfig+0x1bc>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d109      	bne.n	80039de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e06f      	b.n	8003aae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039ce:	4b3b      	ldr	r3, [pc, #236]	; (8003abc <HAL_RCC_ClockConfig+0x1bc>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e067      	b.n	8003aae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039de:	4b37      	ldr	r3, [pc, #220]	; (8003abc <HAL_RCC_ClockConfig+0x1bc>)
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f023 0203 	bic.w	r2, r3, #3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	4934      	ldr	r1, [pc, #208]	; (8003abc <HAL_RCC_ClockConfig+0x1bc>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039f0:	f7fe fd88 	bl	8002504 <HAL_GetTick>
 80039f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039f6:	e00a      	b.n	8003a0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039f8:	f7fe fd84 	bl	8002504 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d901      	bls.n	8003a0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e04f      	b.n	8003aae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a0e:	4b2b      	ldr	r3, [pc, #172]	; (8003abc <HAL_RCC_ClockConfig+0x1bc>)
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f003 020c 	and.w	r2, r3, #12
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d1eb      	bne.n	80039f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a20:	4b25      	ldr	r3, [pc, #148]	; (8003ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0307 	and.w	r3, r3, #7
 8003a28:	683a      	ldr	r2, [r7, #0]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d20c      	bcs.n	8003a48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a2e:	4b22      	ldr	r3, [pc, #136]	; (8003ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a30:	683a      	ldr	r2, [r7, #0]
 8003a32:	b2d2      	uxtb	r2, r2
 8003a34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a36:	4b20      	ldr	r3, [pc, #128]	; (8003ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0307 	and.w	r3, r3, #7
 8003a3e:	683a      	ldr	r2, [r7, #0]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d001      	beq.n	8003a48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e032      	b.n	8003aae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0304 	and.w	r3, r3, #4
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d008      	beq.n	8003a66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a54:	4b19      	ldr	r3, [pc, #100]	; (8003abc <HAL_RCC_ClockConfig+0x1bc>)
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	4916      	ldr	r1, [pc, #88]	; (8003abc <HAL_RCC_ClockConfig+0x1bc>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0308 	and.w	r3, r3, #8
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d009      	beq.n	8003a86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a72:	4b12      	ldr	r3, [pc, #72]	; (8003abc <HAL_RCC_ClockConfig+0x1bc>)
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	00db      	lsls	r3, r3, #3
 8003a80:	490e      	ldr	r1, [pc, #56]	; (8003abc <HAL_RCC_ClockConfig+0x1bc>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a86:	f000 f821 	bl	8003acc <HAL_RCC_GetSysClockFreq>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	4b0b      	ldr	r3, [pc, #44]	; (8003abc <HAL_RCC_ClockConfig+0x1bc>)
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	091b      	lsrs	r3, r3, #4
 8003a92:	f003 030f 	and.w	r3, r3, #15
 8003a96:	490a      	ldr	r1, [pc, #40]	; (8003ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8003a98:	5ccb      	ldrb	r3, [r1, r3]
 8003a9a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a9e:	4a09      	ldr	r2, [pc, #36]	; (8003ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8003aa0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003aa2:	4b09      	ldr	r3, [pc, #36]	; (8003ac8 <HAL_RCC_ClockConfig+0x1c8>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7fe fce8 	bl	800247c <HAL_InitTick>

  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3710      	adds	r7, #16
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	40023c00 	.word	0x40023c00
 8003abc:	40023800 	.word	0x40023800
 8003ac0:	0800798c 	.word	0x0800798c
 8003ac4:	20000000 	.word	0x20000000
 8003ac8:	20000004 	.word	0x20000004

08003acc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003acc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ad0:	b094      	sub	sp, #80	; 0x50
 8003ad2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	647b      	str	r3, [r7, #68]	; 0x44
 8003ad8:	2300      	movs	r3, #0
 8003ada:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003adc:	2300      	movs	r3, #0
 8003ade:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ae4:	4b79      	ldr	r3, [pc, #484]	; (8003ccc <HAL_RCC_GetSysClockFreq+0x200>)
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f003 030c 	and.w	r3, r3, #12
 8003aec:	2b08      	cmp	r3, #8
 8003aee:	d00d      	beq.n	8003b0c <HAL_RCC_GetSysClockFreq+0x40>
 8003af0:	2b08      	cmp	r3, #8
 8003af2:	f200 80e1 	bhi.w	8003cb8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d002      	beq.n	8003b00 <HAL_RCC_GetSysClockFreq+0x34>
 8003afa:	2b04      	cmp	r3, #4
 8003afc:	d003      	beq.n	8003b06 <HAL_RCC_GetSysClockFreq+0x3a>
 8003afe:	e0db      	b.n	8003cb8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b00:	4b73      	ldr	r3, [pc, #460]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b02:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003b04:	e0db      	b.n	8003cbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b06:	4b73      	ldr	r3, [pc, #460]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003b08:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b0a:	e0d8      	b.n	8003cbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b0c:	4b6f      	ldr	r3, [pc, #444]	; (8003ccc <HAL_RCC_GetSysClockFreq+0x200>)
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b14:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b16:	4b6d      	ldr	r3, [pc, #436]	; (8003ccc <HAL_RCC_GetSysClockFreq+0x200>)
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d063      	beq.n	8003bea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b22:	4b6a      	ldr	r3, [pc, #424]	; (8003ccc <HAL_RCC_GetSysClockFreq+0x200>)
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	099b      	lsrs	r3, r3, #6
 8003b28:	2200      	movs	r2, #0
 8003b2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b2c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b34:	633b      	str	r3, [r7, #48]	; 0x30
 8003b36:	2300      	movs	r3, #0
 8003b38:	637b      	str	r3, [r7, #52]	; 0x34
 8003b3a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003b3e:	4622      	mov	r2, r4
 8003b40:	462b      	mov	r3, r5
 8003b42:	f04f 0000 	mov.w	r0, #0
 8003b46:	f04f 0100 	mov.w	r1, #0
 8003b4a:	0159      	lsls	r1, r3, #5
 8003b4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b50:	0150      	lsls	r0, r2, #5
 8003b52:	4602      	mov	r2, r0
 8003b54:	460b      	mov	r3, r1
 8003b56:	4621      	mov	r1, r4
 8003b58:	1a51      	subs	r1, r2, r1
 8003b5a:	6139      	str	r1, [r7, #16]
 8003b5c:	4629      	mov	r1, r5
 8003b5e:	eb63 0301 	sbc.w	r3, r3, r1
 8003b62:	617b      	str	r3, [r7, #20]
 8003b64:	f04f 0200 	mov.w	r2, #0
 8003b68:	f04f 0300 	mov.w	r3, #0
 8003b6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b70:	4659      	mov	r1, fp
 8003b72:	018b      	lsls	r3, r1, #6
 8003b74:	4651      	mov	r1, sl
 8003b76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b7a:	4651      	mov	r1, sl
 8003b7c:	018a      	lsls	r2, r1, #6
 8003b7e:	4651      	mov	r1, sl
 8003b80:	ebb2 0801 	subs.w	r8, r2, r1
 8003b84:	4659      	mov	r1, fp
 8003b86:	eb63 0901 	sbc.w	r9, r3, r1
 8003b8a:	f04f 0200 	mov.w	r2, #0
 8003b8e:	f04f 0300 	mov.w	r3, #0
 8003b92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b9e:	4690      	mov	r8, r2
 8003ba0:	4699      	mov	r9, r3
 8003ba2:	4623      	mov	r3, r4
 8003ba4:	eb18 0303 	adds.w	r3, r8, r3
 8003ba8:	60bb      	str	r3, [r7, #8]
 8003baa:	462b      	mov	r3, r5
 8003bac:	eb49 0303 	adc.w	r3, r9, r3
 8003bb0:	60fb      	str	r3, [r7, #12]
 8003bb2:	f04f 0200 	mov.w	r2, #0
 8003bb6:	f04f 0300 	mov.w	r3, #0
 8003bba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003bbe:	4629      	mov	r1, r5
 8003bc0:	024b      	lsls	r3, r1, #9
 8003bc2:	4621      	mov	r1, r4
 8003bc4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003bc8:	4621      	mov	r1, r4
 8003bca:	024a      	lsls	r2, r1, #9
 8003bcc:	4610      	mov	r0, r2
 8003bce:	4619      	mov	r1, r3
 8003bd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bd6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003bd8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003bdc:	f7fc ffd6 	bl	8000b8c <__aeabi_uldivmod>
 8003be0:	4602      	mov	r2, r0
 8003be2:	460b      	mov	r3, r1
 8003be4:	4613      	mov	r3, r2
 8003be6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003be8:	e058      	b.n	8003c9c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bea:	4b38      	ldr	r3, [pc, #224]	; (8003ccc <HAL_RCC_GetSysClockFreq+0x200>)
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	099b      	lsrs	r3, r3, #6
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	4611      	mov	r1, r2
 8003bf6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003bfa:	623b      	str	r3, [r7, #32]
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	627b      	str	r3, [r7, #36]	; 0x24
 8003c00:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003c04:	4642      	mov	r2, r8
 8003c06:	464b      	mov	r3, r9
 8003c08:	f04f 0000 	mov.w	r0, #0
 8003c0c:	f04f 0100 	mov.w	r1, #0
 8003c10:	0159      	lsls	r1, r3, #5
 8003c12:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c16:	0150      	lsls	r0, r2, #5
 8003c18:	4602      	mov	r2, r0
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	4641      	mov	r1, r8
 8003c1e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003c22:	4649      	mov	r1, r9
 8003c24:	eb63 0b01 	sbc.w	fp, r3, r1
 8003c28:	f04f 0200 	mov.w	r2, #0
 8003c2c:	f04f 0300 	mov.w	r3, #0
 8003c30:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003c34:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003c38:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003c3c:	ebb2 040a 	subs.w	r4, r2, sl
 8003c40:	eb63 050b 	sbc.w	r5, r3, fp
 8003c44:	f04f 0200 	mov.w	r2, #0
 8003c48:	f04f 0300 	mov.w	r3, #0
 8003c4c:	00eb      	lsls	r3, r5, #3
 8003c4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c52:	00e2      	lsls	r2, r4, #3
 8003c54:	4614      	mov	r4, r2
 8003c56:	461d      	mov	r5, r3
 8003c58:	4643      	mov	r3, r8
 8003c5a:	18e3      	adds	r3, r4, r3
 8003c5c:	603b      	str	r3, [r7, #0]
 8003c5e:	464b      	mov	r3, r9
 8003c60:	eb45 0303 	adc.w	r3, r5, r3
 8003c64:	607b      	str	r3, [r7, #4]
 8003c66:	f04f 0200 	mov.w	r2, #0
 8003c6a:	f04f 0300 	mov.w	r3, #0
 8003c6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c72:	4629      	mov	r1, r5
 8003c74:	028b      	lsls	r3, r1, #10
 8003c76:	4621      	mov	r1, r4
 8003c78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c7c:	4621      	mov	r1, r4
 8003c7e:	028a      	lsls	r2, r1, #10
 8003c80:	4610      	mov	r0, r2
 8003c82:	4619      	mov	r1, r3
 8003c84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c86:	2200      	movs	r2, #0
 8003c88:	61bb      	str	r3, [r7, #24]
 8003c8a:	61fa      	str	r2, [r7, #28]
 8003c8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c90:	f7fc ff7c 	bl	8000b8c <__aeabi_uldivmod>
 8003c94:	4602      	mov	r2, r0
 8003c96:	460b      	mov	r3, r1
 8003c98:	4613      	mov	r3, r2
 8003c9a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c9c:	4b0b      	ldr	r3, [pc, #44]	; (8003ccc <HAL_RCC_GetSysClockFreq+0x200>)
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	0c1b      	lsrs	r3, r3, #16
 8003ca2:	f003 0303 	and.w	r3, r3, #3
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	005b      	lsls	r3, r3, #1
 8003caa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003cac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003cae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cb4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003cb6:	e002      	b.n	8003cbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003cb8:	4b05      	ldr	r3, [pc, #20]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003cba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003cbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3750      	adds	r7, #80	; 0x50
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cca:	bf00      	nop
 8003ccc:	40023800 	.word	0x40023800
 8003cd0:	00f42400 	.word	0x00f42400
 8003cd4:	007a1200 	.word	0x007a1200

08003cd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cdc:	4b03      	ldr	r3, [pc, #12]	; (8003cec <HAL_RCC_GetHCLKFreq+0x14>)
 8003cde:	681b      	ldr	r3, [r3, #0]
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	20000000 	.word	0x20000000

08003cf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003cf4:	f7ff fff0 	bl	8003cd8 <HAL_RCC_GetHCLKFreq>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	4b05      	ldr	r3, [pc, #20]	; (8003d10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	0a9b      	lsrs	r3, r3, #10
 8003d00:	f003 0307 	and.w	r3, r3, #7
 8003d04:	4903      	ldr	r1, [pc, #12]	; (8003d14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d06:	5ccb      	ldrb	r3, [r1, r3]
 8003d08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	40023800 	.word	0x40023800
 8003d14:	0800799c 	.word	0x0800799c

08003d18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d1c:	f7ff ffdc 	bl	8003cd8 <HAL_RCC_GetHCLKFreq>
 8003d20:	4602      	mov	r2, r0
 8003d22:	4b05      	ldr	r3, [pc, #20]	; (8003d38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	0b5b      	lsrs	r3, r3, #13
 8003d28:	f003 0307 	and.w	r3, r3, #7
 8003d2c:	4903      	ldr	r1, [pc, #12]	; (8003d3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d2e:	5ccb      	ldrb	r3, [r1, r3]
 8003d30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	40023800 	.word	0x40023800
 8003d3c:	0800799c 	.word	0x0800799c

08003d40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d101      	bne.n	8003d52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e041      	b.n	8003dd6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d106      	bne.n	8003d6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f7fe f934 	bl	8001fd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2202      	movs	r2, #2
 8003d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	3304      	adds	r3, #4
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	4610      	mov	r0, r2
 8003d80:	f000 fde2 	bl	8004948 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3708      	adds	r7, #8
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
	...

08003de0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b085      	sub	sp, #20
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d001      	beq.n	8003df8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e044      	b.n	8003e82 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2202      	movs	r2, #2
 8003dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68da      	ldr	r2, [r3, #12]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f042 0201 	orr.w	r2, r2, #1
 8003e0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a1e      	ldr	r2, [pc, #120]	; (8003e90 <HAL_TIM_Base_Start_IT+0xb0>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d018      	beq.n	8003e4c <HAL_TIM_Base_Start_IT+0x6c>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e22:	d013      	beq.n	8003e4c <HAL_TIM_Base_Start_IT+0x6c>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a1a      	ldr	r2, [pc, #104]	; (8003e94 <HAL_TIM_Base_Start_IT+0xb4>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d00e      	beq.n	8003e4c <HAL_TIM_Base_Start_IT+0x6c>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a19      	ldr	r2, [pc, #100]	; (8003e98 <HAL_TIM_Base_Start_IT+0xb8>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d009      	beq.n	8003e4c <HAL_TIM_Base_Start_IT+0x6c>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a17      	ldr	r2, [pc, #92]	; (8003e9c <HAL_TIM_Base_Start_IT+0xbc>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d004      	beq.n	8003e4c <HAL_TIM_Base_Start_IT+0x6c>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a16      	ldr	r2, [pc, #88]	; (8003ea0 <HAL_TIM_Base_Start_IT+0xc0>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d111      	bne.n	8003e70 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f003 0307 	and.w	r3, r3, #7
 8003e56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2b06      	cmp	r3, #6
 8003e5c:	d010      	beq.n	8003e80 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f042 0201 	orr.w	r2, r2, #1
 8003e6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e6e:	e007      	b.n	8003e80 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f042 0201 	orr.w	r2, r2, #1
 8003e7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3714      	adds	r7, #20
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	40010000 	.word	0x40010000
 8003e94:	40000400 	.word	0x40000400
 8003e98:	40000800 	.word	0x40000800
 8003e9c:	40000c00 	.word	0x40000c00
 8003ea0:	40014000 	.word	0x40014000

08003ea4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d101      	bne.n	8003eb6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e041      	b.n	8003f3a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d106      	bne.n	8003ed0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f7fe f90e 	bl	80020ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2202      	movs	r2, #2
 8003ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	3304      	adds	r3, #4
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	4610      	mov	r0, r2
 8003ee4:	f000 fd30 	bl	8004948 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3708      	adds	r7, #8
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}

08003f42 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003f42:	b580      	push	{r7, lr}
 8003f44:	b082      	sub	sp, #8
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d101      	bne.n	8003f54 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e041      	b.n	8003fd8 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d106      	bne.n	8003f6e <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 f839 	bl	8003fe0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2202      	movs	r2, #2
 8003f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	3304      	adds	r3, #4
 8003f7e:	4619      	mov	r1, r3
 8003f80:	4610      	mov	r0, r2
 8003f82:	f000 fce1 	bl	8004948 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2201      	movs	r2, #1
 8003f92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3708      	adds	r7, #8
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003fe8:	bf00      	nop
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ffe:	2300      	movs	r3, #0
 8004000:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d104      	bne.n	8004012 <HAL_TIM_IC_Start_IT+0x1e>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800400e:	b2db      	uxtb	r3, r3
 8004010:	e013      	b.n	800403a <HAL_TIM_IC_Start_IT+0x46>
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	2b04      	cmp	r3, #4
 8004016:	d104      	bne.n	8004022 <HAL_TIM_IC_Start_IT+0x2e>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800401e:	b2db      	uxtb	r3, r3
 8004020:	e00b      	b.n	800403a <HAL_TIM_IC_Start_IT+0x46>
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	2b08      	cmp	r3, #8
 8004026:	d104      	bne.n	8004032 <HAL_TIM_IC_Start_IT+0x3e>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800402e:	b2db      	uxtb	r3, r3
 8004030:	e003      	b.n	800403a <HAL_TIM_IC_Start_IT+0x46>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004038:	b2db      	uxtb	r3, r3
 800403a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d104      	bne.n	800404c <HAL_TIM_IC_Start_IT+0x58>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004048:	b2db      	uxtb	r3, r3
 800404a:	e013      	b.n	8004074 <HAL_TIM_IC_Start_IT+0x80>
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	2b04      	cmp	r3, #4
 8004050:	d104      	bne.n	800405c <HAL_TIM_IC_Start_IT+0x68>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004058:	b2db      	uxtb	r3, r3
 800405a:	e00b      	b.n	8004074 <HAL_TIM_IC_Start_IT+0x80>
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	2b08      	cmp	r3, #8
 8004060:	d104      	bne.n	800406c <HAL_TIM_IC_Start_IT+0x78>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004068:	b2db      	uxtb	r3, r3
 800406a:	e003      	b.n	8004074 <HAL_TIM_IC_Start_IT+0x80>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004072:	b2db      	uxtb	r3, r3
 8004074:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004076:	7bbb      	ldrb	r3, [r7, #14]
 8004078:	2b01      	cmp	r3, #1
 800407a:	d102      	bne.n	8004082 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800407c:	7b7b      	ldrb	r3, [r7, #13]
 800407e:	2b01      	cmp	r3, #1
 8004080:	d001      	beq.n	8004086 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e0c2      	b.n	800420c <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d104      	bne.n	8004096 <HAL_TIM_IC_Start_IT+0xa2>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2202      	movs	r2, #2
 8004090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004094:	e013      	b.n	80040be <HAL_TIM_IC_Start_IT+0xca>
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	2b04      	cmp	r3, #4
 800409a:	d104      	bne.n	80040a6 <HAL_TIM_IC_Start_IT+0xb2>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2202      	movs	r2, #2
 80040a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040a4:	e00b      	b.n	80040be <HAL_TIM_IC_Start_IT+0xca>
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	2b08      	cmp	r3, #8
 80040aa:	d104      	bne.n	80040b6 <HAL_TIM_IC_Start_IT+0xc2>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2202      	movs	r2, #2
 80040b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040b4:	e003      	b.n	80040be <HAL_TIM_IC_Start_IT+0xca>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2202      	movs	r2, #2
 80040ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d104      	bne.n	80040ce <HAL_TIM_IC_Start_IT+0xda>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2202      	movs	r2, #2
 80040c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040cc:	e013      	b.n	80040f6 <HAL_TIM_IC_Start_IT+0x102>
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	2b04      	cmp	r3, #4
 80040d2:	d104      	bne.n	80040de <HAL_TIM_IC_Start_IT+0xea>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2202      	movs	r2, #2
 80040d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040dc:	e00b      	b.n	80040f6 <HAL_TIM_IC_Start_IT+0x102>
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	2b08      	cmp	r3, #8
 80040e2:	d104      	bne.n	80040ee <HAL_TIM_IC_Start_IT+0xfa>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2202      	movs	r2, #2
 80040e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040ec:	e003      	b.n	80040f6 <HAL_TIM_IC_Start_IT+0x102>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2202      	movs	r2, #2
 80040f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	2b0c      	cmp	r3, #12
 80040fa:	d841      	bhi.n	8004180 <HAL_TIM_IC_Start_IT+0x18c>
 80040fc:	a201      	add	r2, pc, #4	; (adr r2, 8004104 <HAL_TIM_IC_Start_IT+0x110>)
 80040fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004102:	bf00      	nop
 8004104:	08004139 	.word	0x08004139
 8004108:	08004181 	.word	0x08004181
 800410c:	08004181 	.word	0x08004181
 8004110:	08004181 	.word	0x08004181
 8004114:	0800414b 	.word	0x0800414b
 8004118:	08004181 	.word	0x08004181
 800411c:	08004181 	.word	0x08004181
 8004120:	08004181 	.word	0x08004181
 8004124:	0800415d 	.word	0x0800415d
 8004128:	08004181 	.word	0x08004181
 800412c:	08004181 	.word	0x08004181
 8004130:	08004181 	.word	0x08004181
 8004134:	0800416f 	.word	0x0800416f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68da      	ldr	r2, [r3, #12]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f042 0202 	orr.w	r2, r2, #2
 8004146:	60da      	str	r2, [r3, #12]
      break;
 8004148:	e01d      	b.n	8004186 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68da      	ldr	r2, [r3, #12]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f042 0204 	orr.w	r2, r2, #4
 8004158:	60da      	str	r2, [r3, #12]
      break;
 800415a:	e014      	b.n	8004186 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68da      	ldr	r2, [r3, #12]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f042 0208 	orr.w	r2, r2, #8
 800416a:	60da      	str	r2, [r3, #12]
      break;
 800416c:	e00b      	b.n	8004186 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68da      	ldr	r2, [r3, #12]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f042 0210 	orr.w	r2, r2, #16
 800417c:	60da      	str	r2, [r3, #12]
      break;
 800417e:	e002      	b.n	8004186 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	73fb      	strb	r3, [r7, #15]
      break;
 8004184:	bf00      	nop
  }

  if (status == HAL_OK)
 8004186:	7bfb      	ldrb	r3, [r7, #15]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d13e      	bne.n	800420a <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2201      	movs	r2, #1
 8004192:	6839      	ldr	r1, [r7, #0]
 8004194:	4618      	mov	r0, r3
 8004196:	f000 ff9b 	bl	80050d0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a1d      	ldr	r2, [pc, #116]	; (8004214 <HAL_TIM_IC_Start_IT+0x220>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d018      	beq.n	80041d6 <HAL_TIM_IC_Start_IT+0x1e2>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ac:	d013      	beq.n	80041d6 <HAL_TIM_IC_Start_IT+0x1e2>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a19      	ldr	r2, [pc, #100]	; (8004218 <HAL_TIM_IC_Start_IT+0x224>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d00e      	beq.n	80041d6 <HAL_TIM_IC_Start_IT+0x1e2>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a17      	ldr	r2, [pc, #92]	; (800421c <HAL_TIM_IC_Start_IT+0x228>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d009      	beq.n	80041d6 <HAL_TIM_IC_Start_IT+0x1e2>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a16      	ldr	r2, [pc, #88]	; (8004220 <HAL_TIM_IC_Start_IT+0x22c>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d004      	beq.n	80041d6 <HAL_TIM_IC_Start_IT+0x1e2>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a14      	ldr	r2, [pc, #80]	; (8004224 <HAL_TIM_IC_Start_IT+0x230>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d111      	bne.n	80041fa <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f003 0307 	and.w	r3, r3, #7
 80041e0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	2b06      	cmp	r3, #6
 80041e6:	d010      	beq.n	800420a <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f042 0201 	orr.w	r2, r2, #1
 80041f6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041f8:	e007      	b.n	800420a <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f042 0201 	orr.w	r2, r2, #1
 8004208:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800420a:	7bfb      	ldrb	r3, [r7, #15]
}
 800420c:	4618      	mov	r0, r3
 800420e:	3710      	adds	r7, #16
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	40010000 	.word	0x40010000
 8004218:	40000400 	.word	0x40000400
 800421c:	40000800 	.word	0x40000800
 8004220:	40000c00 	.word	0x40000c00
 8004224:	40014000 	.word	0x40014000

08004228 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	f003 0302 	and.w	r3, r3, #2
 800423a:	2b02      	cmp	r3, #2
 800423c:	d122      	bne.n	8004284 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	f003 0302 	and.w	r3, r3, #2
 8004248:	2b02      	cmp	r3, #2
 800424a:	d11b      	bne.n	8004284 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f06f 0202 	mvn.w	r2, #2
 8004254:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2201      	movs	r2, #1
 800425a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	699b      	ldr	r3, [r3, #24]
 8004262:	f003 0303 	and.w	r3, r3, #3
 8004266:	2b00      	cmp	r3, #0
 8004268:	d003      	beq.n	8004272 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f7fd f824 	bl	80012b8 <HAL_TIM_IC_CaptureCallback>
 8004270:	e005      	b.n	800427e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 fb4a 	bl	800490c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f000 fb51 	bl	8004920 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	f003 0304 	and.w	r3, r3, #4
 800428e:	2b04      	cmp	r3, #4
 8004290:	d122      	bne.n	80042d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	f003 0304 	and.w	r3, r3, #4
 800429c:	2b04      	cmp	r3, #4
 800429e:	d11b      	bne.n	80042d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f06f 0204 	mvn.w	r2, #4
 80042a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2202      	movs	r2, #2
 80042ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	699b      	ldr	r3, [r3, #24]
 80042b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d003      	beq.n	80042c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f7fc fffa 	bl	80012b8 <HAL_TIM_IC_CaptureCallback>
 80042c4:	e005      	b.n	80042d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 fb20 	bl	800490c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f000 fb27 	bl	8004920 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	f003 0308 	and.w	r3, r3, #8
 80042e2:	2b08      	cmp	r3, #8
 80042e4:	d122      	bne.n	800432c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	f003 0308 	and.w	r3, r3, #8
 80042f0:	2b08      	cmp	r3, #8
 80042f2:	d11b      	bne.n	800432c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f06f 0208 	mvn.w	r2, #8
 80042fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2204      	movs	r2, #4
 8004302:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	69db      	ldr	r3, [r3, #28]
 800430a:	f003 0303 	and.w	r3, r3, #3
 800430e:	2b00      	cmp	r3, #0
 8004310:	d003      	beq.n	800431a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f7fc ffd0 	bl	80012b8 <HAL_TIM_IC_CaptureCallback>
 8004318:	e005      	b.n	8004326 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 faf6 	bl	800490c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f000 fafd 	bl	8004920 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	f003 0310 	and.w	r3, r3, #16
 8004336:	2b10      	cmp	r3, #16
 8004338:	d122      	bne.n	8004380 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	f003 0310 	and.w	r3, r3, #16
 8004344:	2b10      	cmp	r3, #16
 8004346:	d11b      	bne.n	8004380 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f06f 0210 	mvn.w	r2, #16
 8004350:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2208      	movs	r2, #8
 8004356:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	69db      	ldr	r3, [r3, #28]
 800435e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004362:	2b00      	cmp	r3, #0
 8004364:	d003      	beq.n	800436e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f7fc ffa6 	bl	80012b8 <HAL_TIM_IC_CaptureCallback>
 800436c:	e005      	b.n	800437a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 facc 	bl	800490c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f000 fad3 	bl	8004920 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	f003 0301 	and.w	r3, r3, #1
 800438a:	2b01      	cmp	r3, #1
 800438c:	d10e      	bne.n	80043ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	f003 0301 	and.w	r3, r3, #1
 8004398:	2b01      	cmp	r3, #1
 800439a:	d107      	bne.n	80043ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f06f 0201 	mvn.w	r2, #1
 80043a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f7fc feda 	bl	8001160 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043b6:	2b80      	cmp	r3, #128	; 0x80
 80043b8:	d10e      	bne.n	80043d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043c4:	2b80      	cmp	r3, #128	; 0x80
 80043c6:	d107      	bne.n	80043d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80043d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 ff1a 	bl	800520c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043e2:	2b40      	cmp	r3, #64	; 0x40
 80043e4:	d10e      	bne.n	8004404 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f0:	2b40      	cmp	r3, #64	; 0x40
 80043f2:	d107      	bne.n	8004404 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80043fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 fa98 	bl	8004934 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	f003 0320 	and.w	r3, r3, #32
 800440e:	2b20      	cmp	r3, #32
 8004410:	d10e      	bne.n	8004430 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	f003 0320 	and.w	r3, r3, #32
 800441c:	2b20      	cmp	r3, #32
 800441e:	d107      	bne.n	8004430 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f06f 0220 	mvn.w	r2, #32
 8004428:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 fee4 	bl	80051f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004430:	bf00      	nop
 8004432:	3708      	adds	r7, #8
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b086      	sub	sp, #24
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004444:	2300      	movs	r3, #0
 8004446:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800444e:	2b01      	cmp	r3, #1
 8004450:	d101      	bne.n	8004456 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004452:	2302      	movs	r3, #2
 8004454:	e088      	b.n	8004568 <HAL_TIM_IC_ConfigChannel+0x130>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2201      	movs	r2, #1
 800445a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d11b      	bne.n	800449c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6818      	ldr	r0, [r3, #0]
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	6819      	ldr	r1, [r3, #0]
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	685a      	ldr	r2, [r3, #4]
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	f000 fc74 	bl	8004d60 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	699a      	ldr	r2, [r3, #24]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f022 020c 	bic.w	r2, r2, #12
 8004486:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	6999      	ldr	r1, [r3, #24]
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	689a      	ldr	r2, [r3, #8]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	430a      	orrs	r2, r1
 8004498:	619a      	str	r2, [r3, #24]
 800449a:	e060      	b.n	800455e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b04      	cmp	r3, #4
 80044a0:	d11c      	bne.n	80044dc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6818      	ldr	r0, [r3, #0]
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	6819      	ldr	r1, [r3, #0]
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	685a      	ldr	r2, [r3, #4]
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	f000 fcec 	bl	8004e8e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	699a      	ldr	r2, [r3, #24]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80044c4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	6999      	ldr	r1, [r3, #24]
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	021a      	lsls	r2, r3, #8
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	430a      	orrs	r2, r1
 80044d8:	619a      	str	r2, [r3, #24]
 80044da:	e040      	b.n	800455e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2b08      	cmp	r3, #8
 80044e0:	d11b      	bne.n	800451a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6818      	ldr	r0, [r3, #0]
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	6819      	ldr	r1, [r3, #0]
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	685a      	ldr	r2, [r3, #4]
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	f000 fd39 	bl	8004f68 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	69da      	ldr	r2, [r3, #28]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f022 020c 	bic.w	r2, r2, #12
 8004504:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	69d9      	ldr	r1, [r3, #28]
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	689a      	ldr	r2, [r3, #8]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	430a      	orrs	r2, r1
 8004516:	61da      	str	r2, [r3, #28]
 8004518:	e021      	b.n	800455e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2b0c      	cmp	r3, #12
 800451e:	d11c      	bne.n	800455a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6818      	ldr	r0, [r3, #0]
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	6819      	ldr	r1, [r3, #0]
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	685a      	ldr	r2, [r3, #4]
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	f000 fd56 	bl	8004fe0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	69da      	ldr	r2, [r3, #28]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004542:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	69d9      	ldr	r1, [r3, #28]
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	021a      	lsls	r2, r3, #8
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	430a      	orrs	r2, r1
 8004556:	61da      	str	r2, [r3, #28]
 8004558:	e001      	b.n	800455e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004566:	7dfb      	ldrb	r3, [r7, #23]
}
 8004568:	4618      	mov	r0, r3
 800456a:	3718      	adds	r7, #24
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b086      	sub	sp, #24
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800457c:	2300      	movs	r3, #0
 800457e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004586:	2b01      	cmp	r3, #1
 8004588:	d101      	bne.n	800458e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800458a:	2302      	movs	r3, #2
 800458c:	e0ae      	b.n	80046ec <HAL_TIM_PWM_ConfigChannel+0x17c>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2201      	movs	r2, #1
 8004592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2b0c      	cmp	r3, #12
 800459a:	f200 809f 	bhi.w	80046dc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800459e:	a201      	add	r2, pc, #4	; (adr r2, 80045a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80045a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a4:	080045d9 	.word	0x080045d9
 80045a8:	080046dd 	.word	0x080046dd
 80045ac:	080046dd 	.word	0x080046dd
 80045b0:	080046dd 	.word	0x080046dd
 80045b4:	08004619 	.word	0x08004619
 80045b8:	080046dd 	.word	0x080046dd
 80045bc:	080046dd 	.word	0x080046dd
 80045c0:	080046dd 	.word	0x080046dd
 80045c4:	0800465b 	.word	0x0800465b
 80045c8:	080046dd 	.word	0x080046dd
 80045cc:	080046dd 	.word	0x080046dd
 80045d0:	080046dd 	.word	0x080046dd
 80045d4:	0800469b 	.word	0x0800469b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68b9      	ldr	r1, [r7, #8]
 80045de:	4618      	mov	r0, r3
 80045e0:	f000 fa32 	bl	8004a48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	699a      	ldr	r2, [r3, #24]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f042 0208 	orr.w	r2, r2, #8
 80045f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	699a      	ldr	r2, [r3, #24]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f022 0204 	bic.w	r2, r2, #4
 8004602:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	6999      	ldr	r1, [r3, #24]
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	691a      	ldr	r2, [r3, #16]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	430a      	orrs	r2, r1
 8004614:	619a      	str	r2, [r3, #24]
      break;
 8004616:	e064      	b.n	80046e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68b9      	ldr	r1, [r7, #8]
 800461e:	4618      	mov	r0, r3
 8004620:	f000 fa78 	bl	8004b14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	699a      	ldr	r2, [r3, #24]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004632:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	699a      	ldr	r2, [r3, #24]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004642:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	6999      	ldr	r1, [r3, #24]
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	021a      	lsls	r2, r3, #8
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	430a      	orrs	r2, r1
 8004656:	619a      	str	r2, [r3, #24]
      break;
 8004658:	e043      	b.n	80046e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68b9      	ldr	r1, [r7, #8]
 8004660:	4618      	mov	r0, r3
 8004662:	f000 fac3 	bl	8004bec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	69da      	ldr	r2, [r3, #28]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f042 0208 	orr.w	r2, r2, #8
 8004674:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	69da      	ldr	r2, [r3, #28]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f022 0204 	bic.w	r2, r2, #4
 8004684:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	69d9      	ldr	r1, [r3, #28]
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	691a      	ldr	r2, [r3, #16]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	430a      	orrs	r2, r1
 8004696:	61da      	str	r2, [r3, #28]
      break;
 8004698:	e023      	b.n	80046e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68b9      	ldr	r1, [r7, #8]
 80046a0:	4618      	mov	r0, r3
 80046a2:	f000 fb0d 	bl	8004cc0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	69da      	ldr	r2, [r3, #28]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	69da      	ldr	r2, [r3, #28]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	69d9      	ldr	r1, [r3, #28]
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	691b      	ldr	r3, [r3, #16]
 80046d0:	021a      	lsls	r2, r3, #8
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	430a      	orrs	r2, r1
 80046d8:	61da      	str	r2, [r3, #28]
      break;
 80046da:	e002      	b.n	80046e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	75fb      	strb	r3, [r7, #23]
      break;
 80046e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3718      	adds	r7, #24
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046fe:	2300      	movs	r3, #0
 8004700:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004708:	2b01      	cmp	r3, #1
 800470a:	d101      	bne.n	8004710 <HAL_TIM_ConfigClockSource+0x1c>
 800470c:	2302      	movs	r3, #2
 800470e:	e0b4      	b.n	800487a <HAL_TIM_ConfigClockSource+0x186>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2202      	movs	r2, #2
 800471c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800472e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004736:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68ba      	ldr	r2, [r7, #8]
 800473e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004748:	d03e      	beq.n	80047c8 <HAL_TIM_ConfigClockSource+0xd4>
 800474a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800474e:	f200 8087 	bhi.w	8004860 <HAL_TIM_ConfigClockSource+0x16c>
 8004752:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004756:	f000 8086 	beq.w	8004866 <HAL_TIM_ConfigClockSource+0x172>
 800475a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800475e:	d87f      	bhi.n	8004860 <HAL_TIM_ConfigClockSource+0x16c>
 8004760:	2b70      	cmp	r3, #112	; 0x70
 8004762:	d01a      	beq.n	800479a <HAL_TIM_ConfigClockSource+0xa6>
 8004764:	2b70      	cmp	r3, #112	; 0x70
 8004766:	d87b      	bhi.n	8004860 <HAL_TIM_ConfigClockSource+0x16c>
 8004768:	2b60      	cmp	r3, #96	; 0x60
 800476a:	d050      	beq.n	800480e <HAL_TIM_ConfigClockSource+0x11a>
 800476c:	2b60      	cmp	r3, #96	; 0x60
 800476e:	d877      	bhi.n	8004860 <HAL_TIM_ConfigClockSource+0x16c>
 8004770:	2b50      	cmp	r3, #80	; 0x50
 8004772:	d03c      	beq.n	80047ee <HAL_TIM_ConfigClockSource+0xfa>
 8004774:	2b50      	cmp	r3, #80	; 0x50
 8004776:	d873      	bhi.n	8004860 <HAL_TIM_ConfigClockSource+0x16c>
 8004778:	2b40      	cmp	r3, #64	; 0x40
 800477a:	d058      	beq.n	800482e <HAL_TIM_ConfigClockSource+0x13a>
 800477c:	2b40      	cmp	r3, #64	; 0x40
 800477e:	d86f      	bhi.n	8004860 <HAL_TIM_ConfigClockSource+0x16c>
 8004780:	2b30      	cmp	r3, #48	; 0x30
 8004782:	d064      	beq.n	800484e <HAL_TIM_ConfigClockSource+0x15a>
 8004784:	2b30      	cmp	r3, #48	; 0x30
 8004786:	d86b      	bhi.n	8004860 <HAL_TIM_ConfigClockSource+0x16c>
 8004788:	2b20      	cmp	r3, #32
 800478a:	d060      	beq.n	800484e <HAL_TIM_ConfigClockSource+0x15a>
 800478c:	2b20      	cmp	r3, #32
 800478e:	d867      	bhi.n	8004860 <HAL_TIM_ConfigClockSource+0x16c>
 8004790:	2b00      	cmp	r3, #0
 8004792:	d05c      	beq.n	800484e <HAL_TIM_ConfigClockSource+0x15a>
 8004794:	2b10      	cmp	r3, #16
 8004796:	d05a      	beq.n	800484e <HAL_TIM_ConfigClockSource+0x15a>
 8004798:	e062      	b.n	8004860 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6818      	ldr	r0, [r3, #0]
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	6899      	ldr	r1, [r3, #8]
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	685a      	ldr	r2, [r3, #4]
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	f000 fc71 	bl	8005090 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68ba      	ldr	r2, [r7, #8]
 80047c4:	609a      	str	r2, [r3, #8]
      break;
 80047c6:	e04f      	b.n	8004868 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6818      	ldr	r0, [r3, #0]
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	6899      	ldr	r1, [r3, #8]
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	685a      	ldr	r2, [r3, #4]
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	f000 fc5a 	bl	8005090 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	689a      	ldr	r2, [r3, #8]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047ea:	609a      	str	r2, [r3, #8]
      break;
 80047ec:	e03c      	b.n	8004868 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6818      	ldr	r0, [r3, #0]
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	6859      	ldr	r1, [r3, #4]
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	461a      	mov	r2, r3
 80047fc:	f000 fb18 	bl	8004e30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2150      	movs	r1, #80	; 0x50
 8004806:	4618      	mov	r0, r3
 8004808:	f000 fc27 	bl	800505a <TIM_ITRx_SetConfig>
      break;
 800480c:	e02c      	b.n	8004868 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6818      	ldr	r0, [r3, #0]
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	6859      	ldr	r1, [r3, #4]
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	461a      	mov	r2, r3
 800481c:	f000 fb74 	bl	8004f08 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2160      	movs	r1, #96	; 0x60
 8004826:	4618      	mov	r0, r3
 8004828:	f000 fc17 	bl	800505a <TIM_ITRx_SetConfig>
      break;
 800482c:	e01c      	b.n	8004868 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6818      	ldr	r0, [r3, #0]
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	6859      	ldr	r1, [r3, #4]
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	461a      	mov	r2, r3
 800483c:	f000 faf8 	bl	8004e30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2140      	movs	r1, #64	; 0x40
 8004846:	4618      	mov	r0, r3
 8004848:	f000 fc07 	bl	800505a <TIM_ITRx_SetConfig>
      break;
 800484c:	e00c      	b.n	8004868 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4619      	mov	r1, r3
 8004858:	4610      	mov	r0, r2
 800485a:	f000 fbfe 	bl	800505a <TIM_ITRx_SetConfig>
      break;
 800485e:	e003      	b.n	8004868 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	73fb      	strb	r3, [r7, #15]
      break;
 8004864:	e000      	b.n	8004868 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004866:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004878:	7bfb      	ldrb	r3, [r7, #15]
}
 800487a:	4618      	mov	r0, r3
 800487c:	3710      	adds	r7, #16
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
	...

08004884 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004884:	b480      	push	{r7}
 8004886:	b085      	sub	sp, #20
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800488e:	2300      	movs	r3, #0
 8004890:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	2b0c      	cmp	r3, #12
 8004896:	d831      	bhi.n	80048fc <HAL_TIM_ReadCapturedValue+0x78>
 8004898:	a201      	add	r2, pc, #4	; (adr r2, 80048a0 <HAL_TIM_ReadCapturedValue+0x1c>)
 800489a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800489e:	bf00      	nop
 80048a0:	080048d5 	.word	0x080048d5
 80048a4:	080048fd 	.word	0x080048fd
 80048a8:	080048fd 	.word	0x080048fd
 80048ac:	080048fd 	.word	0x080048fd
 80048b0:	080048df 	.word	0x080048df
 80048b4:	080048fd 	.word	0x080048fd
 80048b8:	080048fd 	.word	0x080048fd
 80048bc:	080048fd 	.word	0x080048fd
 80048c0:	080048e9 	.word	0x080048e9
 80048c4:	080048fd 	.word	0x080048fd
 80048c8:	080048fd 	.word	0x080048fd
 80048cc:	080048fd 	.word	0x080048fd
 80048d0:	080048f3 	.word	0x080048f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048da:	60fb      	str	r3, [r7, #12]

      break;
 80048dc:	e00f      	b.n	80048fe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e4:	60fb      	str	r3, [r7, #12]

      break;
 80048e6:	e00a      	b.n	80048fe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ee:	60fb      	str	r3, [r7, #12]

      break;
 80048f0:	e005      	b.n	80048fe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f8:	60fb      	str	r3, [r7, #12]

      break;
 80048fa:	e000      	b.n	80048fe <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80048fc:	bf00      	nop
  }

  return tmpreg;
 80048fe:	68fb      	ldr	r3, [r7, #12]
}
 8004900:	4618      	mov	r0, r3
 8004902:	3714      	adds	r7, #20
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004914:	bf00      	nop
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004928:	bf00      	nop
 800492a:	370c      	adds	r7, #12
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800493c:	bf00      	nop
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4a34      	ldr	r2, [pc, #208]	; (8004a2c <TIM_Base_SetConfig+0xe4>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d00f      	beq.n	8004980 <TIM_Base_SetConfig+0x38>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004966:	d00b      	beq.n	8004980 <TIM_Base_SetConfig+0x38>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a31      	ldr	r2, [pc, #196]	; (8004a30 <TIM_Base_SetConfig+0xe8>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d007      	beq.n	8004980 <TIM_Base_SetConfig+0x38>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a30      	ldr	r2, [pc, #192]	; (8004a34 <TIM_Base_SetConfig+0xec>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d003      	beq.n	8004980 <TIM_Base_SetConfig+0x38>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4a2f      	ldr	r2, [pc, #188]	; (8004a38 <TIM_Base_SetConfig+0xf0>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d108      	bne.n	8004992 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004986:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	68fa      	ldr	r2, [r7, #12]
 800498e:	4313      	orrs	r3, r2
 8004990:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a25      	ldr	r2, [pc, #148]	; (8004a2c <TIM_Base_SetConfig+0xe4>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d01b      	beq.n	80049d2 <TIM_Base_SetConfig+0x8a>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049a0:	d017      	beq.n	80049d2 <TIM_Base_SetConfig+0x8a>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a22      	ldr	r2, [pc, #136]	; (8004a30 <TIM_Base_SetConfig+0xe8>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d013      	beq.n	80049d2 <TIM_Base_SetConfig+0x8a>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a21      	ldr	r2, [pc, #132]	; (8004a34 <TIM_Base_SetConfig+0xec>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d00f      	beq.n	80049d2 <TIM_Base_SetConfig+0x8a>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a20      	ldr	r2, [pc, #128]	; (8004a38 <TIM_Base_SetConfig+0xf0>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d00b      	beq.n	80049d2 <TIM_Base_SetConfig+0x8a>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a1f      	ldr	r2, [pc, #124]	; (8004a3c <TIM_Base_SetConfig+0xf4>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d007      	beq.n	80049d2 <TIM_Base_SetConfig+0x8a>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a1e      	ldr	r2, [pc, #120]	; (8004a40 <TIM_Base_SetConfig+0xf8>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d003      	beq.n	80049d2 <TIM_Base_SetConfig+0x8a>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a1d      	ldr	r2, [pc, #116]	; (8004a44 <TIM_Base_SetConfig+0xfc>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d108      	bne.n	80049e4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	68fa      	ldr	r2, [r7, #12]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	695b      	ldr	r3, [r3, #20]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	68fa      	ldr	r2, [r7, #12]
 80049f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	689a      	ldr	r2, [r3, #8]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a08      	ldr	r2, [pc, #32]	; (8004a2c <TIM_Base_SetConfig+0xe4>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d103      	bne.n	8004a18 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	691a      	ldr	r2, [r3, #16]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	615a      	str	r2, [r3, #20]
}
 8004a1e:	bf00      	nop
 8004a20:	3714      	adds	r7, #20
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	40010000 	.word	0x40010000
 8004a30:	40000400 	.word	0x40000400
 8004a34:	40000800 	.word	0x40000800
 8004a38:	40000c00 	.word	0x40000c00
 8004a3c:	40014000 	.word	0x40014000
 8004a40:	40014400 	.word	0x40014400
 8004a44:	40014800 	.word	0x40014800

08004a48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b087      	sub	sp, #28
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a1b      	ldr	r3, [r3, #32]
 8004a56:	f023 0201 	bic.w	r2, r3, #1
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a1b      	ldr	r3, [r3, #32]
 8004a62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	699b      	ldr	r3, [r3, #24]
 8004a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f023 0303 	bic.w	r3, r3, #3
 8004a7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68fa      	ldr	r2, [r7, #12]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	f023 0302 	bic.w	r3, r3, #2
 8004a90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	697a      	ldr	r2, [r7, #20]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4a1c      	ldr	r2, [pc, #112]	; (8004b10 <TIM_OC1_SetConfig+0xc8>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d10c      	bne.n	8004abe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	f023 0308 	bic.w	r3, r3, #8
 8004aaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	697a      	ldr	r2, [r7, #20]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	f023 0304 	bic.w	r3, r3, #4
 8004abc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4a13      	ldr	r2, [pc, #76]	; (8004b10 <TIM_OC1_SetConfig+0xc8>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d111      	bne.n	8004aea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004acc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ad4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	695b      	ldr	r3, [r3, #20]
 8004ada:	693a      	ldr	r2, [r7, #16]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	699b      	ldr	r3, [r3, #24]
 8004ae4:	693a      	ldr	r2, [r7, #16]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	693a      	ldr	r2, [r7, #16]
 8004aee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	685a      	ldr	r2, [r3, #4]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	697a      	ldr	r2, [r7, #20]
 8004b02:	621a      	str	r2, [r3, #32]
}
 8004b04:	bf00      	nop
 8004b06:	371c      	adds	r7, #28
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr
 8004b10:	40010000 	.word	0x40010000

08004b14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b087      	sub	sp, #28
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a1b      	ldr	r3, [r3, #32]
 8004b22:	f023 0210 	bic.w	r2, r3, #16
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a1b      	ldr	r3, [r3, #32]
 8004b2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	699b      	ldr	r3, [r3, #24]
 8004b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	021b      	lsls	r3, r3, #8
 8004b52:	68fa      	ldr	r2, [r7, #12]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	f023 0320 	bic.w	r3, r3, #32
 8004b5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	011b      	lsls	r3, r3, #4
 8004b66:	697a      	ldr	r2, [r7, #20]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a1e      	ldr	r2, [pc, #120]	; (8004be8 <TIM_OC2_SetConfig+0xd4>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d10d      	bne.n	8004b90 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	011b      	lsls	r3, r3, #4
 8004b82:	697a      	ldr	r2, [r7, #20]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b8e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a15      	ldr	r2, [pc, #84]	; (8004be8 <TIM_OC2_SetConfig+0xd4>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d113      	bne.n	8004bc0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ba6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	695b      	ldr	r3, [r3, #20]
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	693a      	ldr	r2, [r7, #16]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	699b      	ldr	r3, [r3, #24]
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	693a      	ldr	r2, [r7, #16]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	693a      	ldr	r2, [r7, #16]
 8004bc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	68fa      	ldr	r2, [r7, #12]
 8004bca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	685a      	ldr	r2, [r3, #4]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	697a      	ldr	r2, [r7, #20]
 8004bd8:	621a      	str	r2, [r3, #32]
}
 8004bda:	bf00      	nop
 8004bdc:	371c      	adds	r7, #28
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
 8004be6:	bf00      	nop
 8004be8:	40010000 	.word	0x40010000

08004bec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b087      	sub	sp, #28
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
 8004bfa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a1b      	ldr	r3, [r3, #32]
 8004c06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	69db      	ldr	r3, [r3, #28]
 8004c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f023 0303 	bic.w	r3, r3, #3
 8004c22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68fa      	ldr	r2, [r7, #12]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	021b      	lsls	r3, r3, #8
 8004c3c:	697a      	ldr	r2, [r7, #20]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a1d      	ldr	r2, [pc, #116]	; (8004cbc <TIM_OC3_SetConfig+0xd0>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d10d      	bne.n	8004c66 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	021b      	lsls	r3, r3, #8
 8004c58:	697a      	ldr	r2, [r7, #20]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a14      	ldr	r2, [pc, #80]	; (8004cbc <TIM_OC3_SetConfig+0xd0>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d113      	bne.n	8004c96 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	695b      	ldr	r3, [r3, #20]
 8004c82:	011b      	lsls	r3, r3, #4
 8004c84:	693a      	ldr	r2, [r7, #16]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	699b      	ldr	r3, [r3, #24]
 8004c8e:	011b      	lsls	r3, r3, #4
 8004c90:	693a      	ldr	r2, [r7, #16]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	693a      	ldr	r2, [r7, #16]
 8004c9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	68fa      	ldr	r2, [r7, #12]
 8004ca0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	685a      	ldr	r2, [r3, #4]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	697a      	ldr	r2, [r7, #20]
 8004cae:	621a      	str	r2, [r3, #32]
}
 8004cb0:	bf00      	nop
 8004cb2:	371c      	adds	r7, #28
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr
 8004cbc:	40010000 	.word	0x40010000

08004cc0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b087      	sub	sp, #28
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a1b      	ldr	r3, [r3, #32]
 8004cce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a1b      	ldr	r3, [r3, #32]
 8004cda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	69db      	ldr	r3, [r3, #28]
 8004ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	021b      	lsls	r3, r3, #8
 8004cfe:	68fa      	ldr	r2, [r7, #12]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	031b      	lsls	r3, r3, #12
 8004d12:	693a      	ldr	r2, [r7, #16]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4a10      	ldr	r2, [pc, #64]	; (8004d5c <TIM_OC4_SetConfig+0x9c>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d109      	bne.n	8004d34 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	695b      	ldr	r3, [r3, #20]
 8004d2c:	019b      	lsls	r3, r3, #6
 8004d2e:	697a      	ldr	r2, [r7, #20]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	697a      	ldr	r2, [r7, #20]
 8004d38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	68fa      	ldr	r2, [r7, #12]
 8004d3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	685a      	ldr	r2, [r3, #4]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	693a      	ldr	r2, [r7, #16]
 8004d4c:	621a      	str	r2, [r3, #32]
}
 8004d4e:	bf00      	nop
 8004d50:	371c      	adds	r7, #28
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	40010000 	.word	0x40010000

08004d60 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b087      	sub	sp, #28
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	607a      	str	r2, [r7, #4]
 8004d6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6a1b      	ldr	r3, [r3, #32]
 8004d72:	f023 0201 	bic.w	r2, r3, #1
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	699b      	ldr	r3, [r3, #24]
 8004d7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6a1b      	ldr	r3, [r3, #32]
 8004d84:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	4a24      	ldr	r2, [pc, #144]	; (8004e1c <TIM_TI1_SetConfig+0xbc>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d013      	beq.n	8004db6 <TIM_TI1_SetConfig+0x56>
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d94:	d00f      	beq.n	8004db6 <TIM_TI1_SetConfig+0x56>
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	4a21      	ldr	r2, [pc, #132]	; (8004e20 <TIM_TI1_SetConfig+0xc0>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d00b      	beq.n	8004db6 <TIM_TI1_SetConfig+0x56>
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	4a20      	ldr	r2, [pc, #128]	; (8004e24 <TIM_TI1_SetConfig+0xc4>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d007      	beq.n	8004db6 <TIM_TI1_SetConfig+0x56>
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	4a1f      	ldr	r2, [pc, #124]	; (8004e28 <TIM_TI1_SetConfig+0xc8>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d003      	beq.n	8004db6 <TIM_TI1_SetConfig+0x56>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	4a1e      	ldr	r2, [pc, #120]	; (8004e2c <TIM_TI1_SetConfig+0xcc>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d101      	bne.n	8004dba <TIM_TI1_SetConfig+0x5a>
 8004db6:	2301      	movs	r3, #1
 8004db8:	e000      	b.n	8004dbc <TIM_TI1_SetConfig+0x5c>
 8004dba:	2300      	movs	r3, #0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d008      	beq.n	8004dd2 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	f023 0303 	bic.w	r3, r3, #3
 8004dc6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004dc8:	697a      	ldr	r2, [r7, #20]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	617b      	str	r3, [r7, #20]
 8004dd0:	e003      	b.n	8004dda <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	f043 0301 	orr.w	r3, r3, #1
 8004dd8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004de0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	011b      	lsls	r3, r3, #4
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	697a      	ldr	r2, [r7, #20]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	f023 030a 	bic.w	r3, r3, #10
 8004df4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	f003 030a 	and.w	r3, r3, #10
 8004dfc:	693a      	ldr	r2, [r7, #16]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	697a      	ldr	r2, [r7, #20]
 8004e06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	693a      	ldr	r2, [r7, #16]
 8004e0c:	621a      	str	r2, [r3, #32]
}
 8004e0e:	bf00      	nop
 8004e10:	371c      	adds	r7, #28
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	40010000 	.word	0x40010000
 8004e20:	40000400 	.word	0x40000400
 8004e24:	40000800 	.word	0x40000800
 8004e28:	40000c00 	.word	0x40000c00
 8004e2c:	40014000 	.word	0x40014000

08004e30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b087      	sub	sp, #28
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	60b9      	str	r1, [r7, #8]
 8004e3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6a1b      	ldr	r3, [r3, #32]
 8004e40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6a1b      	ldr	r3, [r3, #32]
 8004e46:	f023 0201 	bic.w	r2, r3, #1
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	011b      	lsls	r3, r3, #4
 8004e60:	693a      	ldr	r2, [r7, #16]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	f023 030a 	bic.w	r3, r3, #10
 8004e6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e6e:	697a      	ldr	r2, [r7, #20]
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	693a      	ldr	r2, [r7, #16]
 8004e7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	697a      	ldr	r2, [r7, #20]
 8004e80:	621a      	str	r2, [r3, #32]
}
 8004e82:	bf00      	nop
 8004e84:	371c      	adds	r7, #28
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr

08004e8e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004e8e:	b480      	push	{r7}
 8004e90:	b087      	sub	sp, #28
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	60f8      	str	r0, [r7, #12]
 8004e96:	60b9      	str	r1, [r7, #8]
 8004e98:	607a      	str	r2, [r7, #4]
 8004e9a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6a1b      	ldr	r3, [r3, #32]
 8004ea0:	f023 0210 	bic.w	r2, r3, #16
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	699b      	ldr	r3, [r3, #24]
 8004eac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6a1b      	ldr	r3, [r3, #32]
 8004eb2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	021b      	lsls	r3, r3, #8
 8004ec0:	697a      	ldr	r2, [r7, #20]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ecc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	031b      	lsls	r3, r3, #12
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	697a      	ldr	r2, [r7, #20]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ee0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	011b      	lsls	r3, r3, #4
 8004ee6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004eea:	693a      	ldr	r2, [r7, #16]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	697a      	ldr	r2, [r7, #20]
 8004ef4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	693a      	ldr	r2, [r7, #16]
 8004efa:	621a      	str	r2, [r3, #32]
}
 8004efc:	bf00      	nop
 8004efe:	371c      	adds	r7, #28
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b087      	sub	sp, #28
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6a1b      	ldr	r3, [r3, #32]
 8004f18:	f023 0210 	bic.w	r2, r3, #16
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	699b      	ldr	r3, [r3, #24]
 8004f24:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6a1b      	ldr	r3, [r3, #32]
 8004f2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f32:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	031b      	lsls	r3, r3, #12
 8004f38:	697a      	ldr	r2, [r7, #20]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f44:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	011b      	lsls	r3, r3, #4
 8004f4a:	693a      	ldr	r2, [r7, #16]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	697a      	ldr	r2, [r7, #20]
 8004f54:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	693a      	ldr	r2, [r7, #16]
 8004f5a:	621a      	str	r2, [r3, #32]
}
 8004f5c:	bf00      	nop
 8004f5e:	371c      	adds	r7, #28
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b087      	sub	sp, #28
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	607a      	str	r2, [r7, #4]
 8004f74:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6a1b      	ldr	r3, [r3, #32]
 8004f7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	69db      	ldr	r3, [r3, #28]
 8004f86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6a1b      	ldr	r3, [r3, #32]
 8004f8c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	f023 0303 	bic.w	r3, r3, #3
 8004f94:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004f96:	697a      	ldr	r2, [r7, #20]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fa4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	011b      	lsls	r3, r3, #4
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	697a      	ldr	r2, [r7, #20]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004fb8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	021b      	lsls	r3, r3, #8
 8004fbe:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004fc2:	693a      	ldr	r2, [r7, #16]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	697a      	ldr	r2, [r7, #20]
 8004fcc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	693a      	ldr	r2, [r7, #16]
 8004fd2:	621a      	str	r2, [r3, #32]
}
 8004fd4:	bf00      	nop
 8004fd6:	371c      	adds	r7, #28
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b087      	sub	sp, #28
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	60b9      	str	r1, [r7, #8]
 8004fea:	607a      	str	r2, [r7, #4]
 8004fec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	6a1b      	ldr	r3, [r3, #32]
 8004ff2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	69db      	ldr	r3, [r3, #28]
 8004ffe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6a1b      	ldr	r3, [r3, #32]
 8005004:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800500c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	021b      	lsls	r3, r3, #8
 8005012:	697a      	ldr	r2, [r7, #20]
 8005014:	4313      	orrs	r3, r2
 8005016:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800501e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	031b      	lsls	r3, r3, #12
 8005024:	b29b      	uxth	r3, r3
 8005026:	697a      	ldr	r2, [r7, #20]
 8005028:	4313      	orrs	r3, r2
 800502a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005032:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	031b      	lsls	r3, r3, #12
 8005038:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800503c:	693a      	ldr	r2, [r7, #16]
 800503e:	4313      	orrs	r3, r2
 8005040:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	697a      	ldr	r2, [r7, #20]
 8005046:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	693a      	ldr	r2, [r7, #16]
 800504c:	621a      	str	r2, [r3, #32]
}
 800504e:	bf00      	nop
 8005050:	371c      	adds	r7, #28
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr

0800505a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800505a:	b480      	push	{r7}
 800505c:	b085      	sub	sp, #20
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
 8005062:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005070:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005072:	683a      	ldr	r2, [r7, #0]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	4313      	orrs	r3, r2
 8005078:	f043 0307 	orr.w	r3, r3, #7
 800507c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	609a      	str	r2, [r3, #8]
}
 8005084:	bf00      	nop
 8005086:	3714      	adds	r7, #20
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005090:	b480      	push	{r7}
 8005092:	b087      	sub	sp, #28
 8005094:	af00      	add	r7, sp, #0
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	60b9      	str	r1, [r7, #8]
 800509a:	607a      	str	r2, [r7, #4]
 800509c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	021a      	lsls	r2, r3, #8
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	431a      	orrs	r2, r3
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	697a      	ldr	r2, [r7, #20]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	697a      	ldr	r2, [r7, #20]
 80050c2:	609a      	str	r2, [r3, #8]
}
 80050c4:	bf00      	nop
 80050c6:	371c      	adds	r7, #28
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b087      	sub	sp, #28
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	f003 031f 	and.w	r3, r3, #31
 80050e2:	2201      	movs	r2, #1
 80050e4:	fa02 f303 	lsl.w	r3, r2, r3
 80050e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6a1a      	ldr	r2, [r3, #32]
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	43db      	mvns	r3, r3
 80050f2:	401a      	ands	r2, r3
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6a1a      	ldr	r2, [r3, #32]
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	f003 031f 	and.w	r3, r3, #31
 8005102:	6879      	ldr	r1, [r7, #4]
 8005104:	fa01 f303 	lsl.w	r3, r1, r3
 8005108:	431a      	orrs	r2, r3
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	621a      	str	r2, [r3, #32]
}
 800510e:	bf00      	nop
 8005110:	371c      	adds	r7, #28
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr
	...

0800511c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800511c:	b480      	push	{r7}
 800511e:	b085      	sub	sp, #20
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800512c:	2b01      	cmp	r3, #1
 800512e:	d101      	bne.n	8005134 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005130:	2302      	movs	r3, #2
 8005132:	e050      	b.n	80051d6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2202      	movs	r2, #2
 8005140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800515a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	4313      	orrs	r3, r2
 8005164:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a1c      	ldr	r2, [pc, #112]	; (80051e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d018      	beq.n	80051aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005180:	d013      	beq.n	80051aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a18      	ldr	r2, [pc, #96]	; (80051e8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d00e      	beq.n	80051aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a16      	ldr	r2, [pc, #88]	; (80051ec <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d009      	beq.n	80051aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a15      	ldr	r2, [pc, #84]	; (80051f0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d004      	beq.n	80051aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a13      	ldr	r2, [pc, #76]	; (80051f4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d10c      	bne.n	80051c4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	68ba      	ldr	r2, [r7, #8]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68ba      	ldr	r2, [r7, #8]
 80051c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3714      	adds	r7, #20
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop
 80051e4:	40010000 	.word	0x40010000
 80051e8:	40000400 	.word	0x40000400
 80051ec:	40000800 	.word	0x40000800
 80051f0:	40000c00 	.word	0x40000c00
 80051f4:	40014000 	.word	0x40014000

080051f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b083      	sub	sp, #12
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005200:	bf00      	nop
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005214:	bf00      	nop
 8005216:	370c      	adds	r7, #12
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr

08005220 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b082      	sub	sp, #8
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d101      	bne.n	8005232 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e03f      	b.n	80052b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005238:	b2db      	uxtb	r3, r3
 800523a:	2b00      	cmp	r3, #0
 800523c:	d106      	bne.n	800524c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f7fc ffd2 	bl	80021f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2224      	movs	r2, #36	; 0x24
 8005250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68da      	ldr	r2, [r3, #12]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005262:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f000 fddf 	bl	8005e28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	691a      	ldr	r2, [r3, #16]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005278:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	695a      	ldr	r2, [r3, #20]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005288:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68da      	ldr	r2, [r3, #12]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005298:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2220      	movs	r2, #32
 80052a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2220      	movs	r2, #32
 80052ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3708      	adds	r7, #8
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}

080052ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052ba:	b580      	push	{r7, lr}
 80052bc:	b08a      	sub	sp, #40	; 0x28
 80052be:	af02      	add	r7, sp, #8
 80052c0:	60f8      	str	r0, [r7, #12]
 80052c2:	60b9      	str	r1, [r7, #8]
 80052c4:	603b      	str	r3, [r7, #0]
 80052c6:	4613      	mov	r3, r2
 80052c8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80052ca:	2300      	movs	r3, #0
 80052cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	2b20      	cmp	r3, #32
 80052d8:	d17c      	bne.n	80053d4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d002      	beq.n	80052e6 <HAL_UART_Transmit+0x2c>
 80052e0:	88fb      	ldrh	r3, [r7, #6]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d101      	bne.n	80052ea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e075      	b.n	80053d6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d101      	bne.n	80052f8 <HAL_UART_Transmit+0x3e>
 80052f4:	2302      	movs	r3, #2
 80052f6:	e06e      	b.n	80053d6 <HAL_UART_Transmit+0x11c>
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2200      	movs	r2, #0
 8005304:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2221      	movs	r2, #33	; 0x21
 800530a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800530e:	f7fd f8f9 	bl	8002504 <HAL_GetTick>
 8005312:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	88fa      	ldrh	r2, [r7, #6]
 8005318:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	88fa      	ldrh	r2, [r7, #6]
 800531e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005328:	d108      	bne.n	800533c <HAL_UART_Transmit+0x82>
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	691b      	ldr	r3, [r3, #16]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d104      	bne.n	800533c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005332:	2300      	movs	r3, #0
 8005334:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	61bb      	str	r3, [r7, #24]
 800533a:	e003      	b.n	8005344 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005340:	2300      	movs	r3, #0
 8005342:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2200      	movs	r2, #0
 8005348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800534c:	e02a      	b.n	80053a4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	9300      	str	r3, [sp, #0]
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	2200      	movs	r2, #0
 8005356:	2180      	movs	r1, #128	; 0x80
 8005358:	68f8      	ldr	r0, [r7, #12]
 800535a:	f000 fb1f 	bl	800599c <UART_WaitOnFlagUntilTimeout>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d001      	beq.n	8005368 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005364:	2303      	movs	r3, #3
 8005366:	e036      	b.n	80053d6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d10b      	bne.n	8005386 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	881b      	ldrh	r3, [r3, #0]
 8005372:	461a      	mov	r2, r3
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800537c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	3302      	adds	r3, #2
 8005382:	61bb      	str	r3, [r7, #24]
 8005384:	e007      	b.n	8005396 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	781a      	ldrb	r2, [r3, #0]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	3301      	adds	r3, #1
 8005394:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800539a:	b29b      	uxth	r3, r3
 800539c:	3b01      	subs	r3, #1
 800539e:	b29a      	uxth	r2, r3
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d1cf      	bne.n	800534e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	9300      	str	r3, [sp, #0]
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	2200      	movs	r2, #0
 80053b6:	2140      	movs	r1, #64	; 0x40
 80053b8:	68f8      	ldr	r0, [r7, #12]
 80053ba:	f000 faef 	bl	800599c <UART_WaitOnFlagUntilTimeout>
 80053be:	4603      	mov	r3, r0
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d001      	beq.n	80053c8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80053c4:	2303      	movs	r3, #3
 80053c6:	e006      	b.n	80053d6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2220      	movs	r2, #32
 80053cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80053d0:	2300      	movs	r3, #0
 80053d2:	e000      	b.n	80053d6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80053d4:	2302      	movs	r3, #2
  }
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3720      	adds	r7, #32
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}

080053de <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053de:	b580      	push	{r7, lr}
 80053e0:	b084      	sub	sp, #16
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	60f8      	str	r0, [r7, #12]
 80053e6:	60b9      	str	r1, [r7, #8]
 80053e8:	4613      	mov	r3, r2
 80053ea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	2b20      	cmp	r3, #32
 80053f6:	d11d      	bne.n	8005434 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d002      	beq.n	8005404 <HAL_UART_Receive_IT+0x26>
 80053fe:	88fb      	ldrh	r3, [r7, #6]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d101      	bne.n	8005408 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e016      	b.n	8005436 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800540e:	2b01      	cmp	r3, #1
 8005410:	d101      	bne.n	8005416 <HAL_UART_Receive_IT+0x38>
 8005412:	2302      	movs	r3, #2
 8005414:	e00f      	b.n	8005436 <HAL_UART_Receive_IT+0x58>
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2201      	movs	r2, #1
 800541a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2200      	movs	r2, #0
 8005422:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005424:	88fb      	ldrh	r3, [r7, #6]
 8005426:	461a      	mov	r2, r3
 8005428:	68b9      	ldr	r1, [r7, #8]
 800542a:	68f8      	ldr	r0, [r7, #12]
 800542c:	f000 fb24 	bl	8005a78 <UART_Start_Receive_IT>
 8005430:	4603      	mov	r3, r0
 8005432:	e000      	b.n	8005436 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005434:	2302      	movs	r3, #2
  }
}
 8005436:	4618      	mov	r0, r3
 8005438:	3710      	adds	r7, #16
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
	...

08005440 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b0ba      	sub	sp, #232	; 0xe8
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	695b      	ldr	r3, [r3, #20]
 8005462:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005466:	2300      	movs	r3, #0
 8005468:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800546c:	2300      	movs	r3, #0
 800546e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005472:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005476:	f003 030f 	and.w	r3, r3, #15
 800547a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800547e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005482:	2b00      	cmp	r3, #0
 8005484:	d10f      	bne.n	80054a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800548a:	f003 0320 	and.w	r3, r3, #32
 800548e:	2b00      	cmp	r3, #0
 8005490:	d009      	beq.n	80054a6 <HAL_UART_IRQHandler+0x66>
 8005492:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005496:	f003 0320 	and.w	r3, r3, #32
 800549a:	2b00      	cmp	r3, #0
 800549c:	d003      	beq.n	80054a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 fc07 	bl	8005cb2 <UART_Receive_IT>
      return;
 80054a4:	e256      	b.n	8005954 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80054a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	f000 80de 	beq.w	800566c <HAL_UART_IRQHandler+0x22c>
 80054b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054b4:	f003 0301 	and.w	r3, r3, #1
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d106      	bne.n	80054ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80054bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054c0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	f000 80d1 	beq.w	800566c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80054ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054ce:	f003 0301 	and.w	r3, r3, #1
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d00b      	beq.n	80054ee <HAL_UART_IRQHandler+0xae>
 80054d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d005      	beq.n	80054ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e6:	f043 0201 	orr.w	r2, r3, #1
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054f2:	f003 0304 	and.w	r3, r3, #4
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00b      	beq.n	8005512 <HAL_UART_IRQHandler+0xd2>
 80054fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054fe:	f003 0301 	and.w	r3, r3, #1
 8005502:	2b00      	cmp	r3, #0
 8005504:	d005      	beq.n	8005512 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550a:	f043 0202 	orr.w	r2, r3, #2
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005516:	f003 0302 	and.w	r3, r3, #2
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00b      	beq.n	8005536 <HAL_UART_IRQHandler+0xf6>
 800551e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005522:	f003 0301 	and.w	r3, r3, #1
 8005526:	2b00      	cmp	r3, #0
 8005528:	d005      	beq.n	8005536 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552e:	f043 0204 	orr.w	r2, r3, #4
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800553a:	f003 0308 	and.w	r3, r3, #8
 800553e:	2b00      	cmp	r3, #0
 8005540:	d011      	beq.n	8005566 <HAL_UART_IRQHandler+0x126>
 8005542:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005546:	f003 0320 	and.w	r3, r3, #32
 800554a:	2b00      	cmp	r3, #0
 800554c:	d105      	bne.n	800555a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800554e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005552:	f003 0301 	and.w	r3, r3, #1
 8005556:	2b00      	cmp	r3, #0
 8005558:	d005      	beq.n	8005566 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555e:	f043 0208 	orr.w	r2, r3, #8
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556a:	2b00      	cmp	r3, #0
 800556c:	f000 81ed 	beq.w	800594a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005570:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005574:	f003 0320 	and.w	r3, r3, #32
 8005578:	2b00      	cmp	r3, #0
 800557a:	d008      	beq.n	800558e <HAL_UART_IRQHandler+0x14e>
 800557c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005580:	f003 0320 	and.w	r3, r3, #32
 8005584:	2b00      	cmp	r3, #0
 8005586:	d002      	beq.n	800558e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f000 fb92 	bl	8005cb2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	695b      	ldr	r3, [r3, #20]
 8005594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005598:	2b40      	cmp	r3, #64	; 0x40
 800559a:	bf0c      	ite	eq
 800559c:	2301      	moveq	r3, #1
 800559e:	2300      	movne	r3, #0
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055aa:	f003 0308 	and.w	r3, r3, #8
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d103      	bne.n	80055ba <HAL_UART_IRQHandler+0x17a>
 80055b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d04f      	beq.n	800565a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f000 fa9a 	bl	8005af4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	695b      	ldr	r3, [r3, #20]
 80055c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ca:	2b40      	cmp	r3, #64	; 0x40
 80055cc:	d141      	bne.n	8005652 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	3314      	adds	r3, #20
 80055d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80055dc:	e853 3f00 	ldrex	r3, [r3]
 80055e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80055e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80055e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	3314      	adds	r3, #20
 80055f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80055fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80055fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005602:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005606:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800560a:	e841 2300 	strex	r3, r2, [r1]
 800560e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005612:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d1d9      	bne.n	80055ce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800561e:	2b00      	cmp	r3, #0
 8005620:	d013      	beq.n	800564a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005626:	4a7d      	ldr	r2, [pc, #500]	; (800581c <HAL_UART_IRQHandler+0x3dc>)
 8005628:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800562e:	4618      	mov	r0, r3
 8005630:	f7fd fcfb 	bl	800302a <HAL_DMA_Abort_IT>
 8005634:	4603      	mov	r3, r0
 8005636:	2b00      	cmp	r3, #0
 8005638:	d016      	beq.n	8005668 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800563e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005644:	4610      	mov	r0, r2
 8005646:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005648:	e00e      	b.n	8005668 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 f990 	bl	8005970 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005650:	e00a      	b.n	8005668 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 f98c 	bl	8005970 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005658:	e006      	b.n	8005668 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f000 f988 	bl	8005970 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005666:	e170      	b.n	800594a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005668:	bf00      	nop
    return;
 800566a:	e16e      	b.n	800594a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005670:	2b01      	cmp	r3, #1
 8005672:	f040 814a 	bne.w	800590a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800567a:	f003 0310 	and.w	r3, r3, #16
 800567e:	2b00      	cmp	r3, #0
 8005680:	f000 8143 	beq.w	800590a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005684:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005688:	f003 0310 	and.w	r3, r3, #16
 800568c:	2b00      	cmp	r3, #0
 800568e:	f000 813c 	beq.w	800590a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005692:	2300      	movs	r3, #0
 8005694:	60bb      	str	r3, [r7, #8]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	60bb      	str	r3, [r7, #8]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	60bb      	str	r3, [r7, #8]
 80056a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	695b      	ldr	r3, [r3, #20]
 80056ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056b2:	2b40      	cmp	r3, #64	; 0x40
 80056b4:	f040 80b4 	bne.w	8005820 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80056c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	f000 8140 	beq.w	800594e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80056d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80056d6:	429a      	cmp	r2, r3
 80056d8:	f080 8139 	bcs.w	800594e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80056e2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e8:	69db      	ldr	r3, [r3, #28]
 80056ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056ee:	f000 8088 	beq.w	8005802 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	330c      	adds	r3, #12
 80056f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005700:	e853 3f00 	ldrex	r3, [r3]
 8005704:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005708:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800570c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005710:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	330c      	adds	r3, #12
 800571a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800571e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005722:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005726:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800572a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800572e:	e841 2300 	strex	r3, r2, [r1]
 8005732:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005736:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800573a:	2b00      	cmp	r3, #0
 800573c:	d1d9      	bne.n	80056f2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	3314      	adds	r3, #20
 8005744:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005746:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005748:	e853 3f00 	ldrex	r3, [r3]
 800574c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800574e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005750:	f023 0301 	bic.w	r3, r3, #1
 8005754:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	3314      	adds	r3, #20
 800575e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005762:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005766:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005768:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800576a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800576e:	e841 2300 	strex	r3, r2, [r1]
 8005772:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005774:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005776:	2b00      	cmp	r3, #0
 8005778:	d1e1      	bne.n	800573e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	3314      	adds	r3, #20
 8005780:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005782:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005784:	e853 3f00 	ldrex	r3, [r3]
 8005788:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800578a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800578c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005790:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	3314      	adds	r3, #20
 800579a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800579e:	66fa      	str	r2, [r7, #108]	; 0x6c
 80057a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80057a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80057a6:	e841 2300 	strex	r3, r2, [r1]
 80057aa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80057ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d1e3      	bne.n	800577a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2220      	movs	r2, #32
 80057b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	330c      	adds	r3, #12
 80057c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057ca:	e853 3f00 	ldrex	r3, [r3]
 80057ce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80057d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057d2:	f023 0310 	bic.w	r3, r3, #16
 80057d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	330c      	adds	r3, #12
 80057e0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80057e4:	65ba      	str	r2, [r7, #88]	; 0x58
 80057e6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80057ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80057ec:	e841 2300 	strex	r3, r2, [r1]
 80057f0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80057f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d1e3      	bne.n	80057c0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057fc:	4618      	mov	r0, r3
 80057fe:	f7fd fba4 	bl	8002f4a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800580a:	b29b      	uxth	r3, r3
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	b29b      	uxth	r3, r3
 8005810:	4619      	mov	r1, r3
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 f8b6 	bl	8005984 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005818:	e099      	b.n	800594e <HAL_UART_IRQHandler+0x50e>
 800581a:	bf00      	nop
 800581c:	08005bbb 	.word	0x08005bbb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005828:	b29b      	uxth	r3, r3
 800582a:	1ad3      	subs	r3, r2, r3
 800582c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005834:	b29b      	uxth	r3, r3
 8005836:	2b00      	cmp	r3, #0
 8005838:	f000 808b 	beq.w	8005952 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800583c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005840:	2b00      	cmp	r3, #0
 8005842:	f000 8086 	beq.w	8005952 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	330c      	adds	r3, #12
 800584c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800584e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005850:	e853 3f00 	ldrex	r3, [r3]
 8005854:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005858:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800585c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	330c      	adds	r3, #12
 8005866:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800586a:	647a      	str	r2, [r7, #68]	; 0x44
 800586c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800586e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005870:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005872:	e841 2300 	strex	r3, r2, [r1]
 8005876:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800587a:	2b00      	cmp	r3, #0
 800587c:	d1e3      	bne.n	8005846 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	3314      	adds	r3, #20
 8005884:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005888:	e853 3f00 	ldrex	r3, [r3]
 800588c:	623b      	str	r3, [r7, #32]
   return(result);
 800588e:	6a3b      	ldr	r3, [r7, #32]
 8005890:	f023 0301 	bic.w	r3, r3, #1
 8005894:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	3314      	adds	r3, #20
 800589e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80058a2:	633a      	str	r2, [r7, #48]	; 0x30
 80058a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058aa:	e841 2300 	strex	r3, r2, [r1]
 80058ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80058b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d1e3      	bne.n	800587e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2220      	movs	r2, #32
 80058ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	330c      	adds	r3, #12
 80058ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	e853 3f00 	ldrex	r3, [r3]
 80058d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f023 0310 	bic.w	r3, r3, #16
 80058da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	330c      	adds	r3, #12
 80058e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80058e8:	61fa      	str	r2, [r7, #28]
 80058ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ec:	69b9      	ldr	r1, [r7, #24]
 80058ee:	69fa      	ldr	r2, [r7, #28]
 80058f0:	e841 2300 	strex	r3, r2, [r1]
 80058f4:	617b      	str	r3, [r7, #20]
   return(result);
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d1e3      	bne.n	80058c4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80058fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005900:	4619      	mov	r1, r3
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 f83e 	bl	8005984 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005908:	e023      	b.n	8005952 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800590a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800590e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005912:	2b00      	cmp	r3, #0
 8005914:	d009      	beq.n	800592a <HAL_UART_IRQHandler+0x4ea>
 8005916:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800591a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800591e:	2b00      	cmp	r3, #0
 8005920:	d003      	beq.n	800592a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 f95d 	bl	8005be2 <UART_Transmit_IT>
    return;
 8005928:	e014      	b.n	8005954 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800592a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800592e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005932:	2b00      	cmp	r3, #0
 8005934:	d00e      	beq.n	8005954 <HAL_UART_IRQHandler+0x514>
 8005936:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800593a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800593e:	2b00      	cmp	r3, #0
 8005940:	d008      	beq.n	8005954 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 f99d 	bl	8005c82 <UART_EndTransmit_IT>
    return;
 8005948:	e004      	b.n	8005954 <HAL_UART_IRQHandler+0x514>
    return;
 800594a:	bf00      	nop
 800594c:	e002      	b.n	8005954 <HAL_UART_IRQHandler+0x514>
      return;
 800594e:	bf00      	nop
 8005950:	e000      	b.n	8005954 <HAL_UART_IRQHandler+0x514>
      return;
 8005952:	bf00      	nop
  }
}
 8005954:	37e8      	adds	r7, #232	; 0xe8
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop

0800595c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005964:	bf00      	nop
 8005966:	370c      	adds	r7, #12
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr

08005970 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005978:	bf00      	nop
 800597a:	370c      	adds	r7, #12
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	460b      	mov	r3, r1
 800598e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005990:	bf00      	nop
 8005992:	370c      	adds	r7, #12
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b090      	sub	sp, #64	; 0x40
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	60b9      	str	r1, [r7, #8]
 80059a6:	603b      	str	r3, [r7, #0]
 80059a8:	4613      	mov	r3, r2
 80059aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059ac:	e050      	b.n	8005a50 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059b4:	d04c      	beq.n	8005a50 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80059b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d007      	beq.n	80059cc <UART_WaitOnFlagUntilTimeout+0x30>
 80059bc:	f7fc fda2 	bl	8002504 <HAL_GetTick>
 80059c0:	4602      	mov	r2, r0
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d241      	bcs.n	8005a50 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	330c      	adds	r3, #12
 80059d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d6:	e853 3f00 	ldrex	r3, [r3]
 80059da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059de:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80059e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	330c      	adds	r3, #12
 80059ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80059ec:	637a      	str	r2, [r7, #52]	; 0x34
 80059ee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80059f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059f4:	e841 2300 	strex	r3, r2, [r1]
 80059f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80059fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d1e5      	bne.n	80059cc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	3314      	adds	r3, #20
 8005a06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	e853 3f00 	ldrex	r3, [r3]
 8005a0e:	613b      	str	r3, [r7, #16]
   return(result);
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	f023 0301 	bic.w	r3, r3, #1
 8005a16:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	3314      	adds	r3, #20
 8005a1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a20:	623a      	str	r2, [r7, #32]
 8005a22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a24:	69f9      	ldr	r1, [r7, #28]
 8005a26:	6a3a      	ldr	r2, [r7, #32]
 8005a28:	e841 2300 	strex	r3, r2, [r1]
 8005a2c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d1e5      	bne.n	8005a00 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2220      	movs	r2, #32
 8005a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2220      	movs	r2, #32
 8005a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2200      	movs	r2, #0
 8005a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	e00f      	b.n	8005a70 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	4013      	ands	r3, r2
 8005a5a:	68ba      	ldr	r2, [r7, #8]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	bf0c      	ite	eq
 8005a60:	2301      	moveq	r3, #1
 8005a62:	2300      	movne	r3, #0
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	461a      	mov	r2, r3
 8005a68:	79fb      	ldrb	r3, [r7, #7]
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d09f      	beq.n	80059ae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a6e:	2300      	movs	r3, #0
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3740      	adds	r7, #64	; 0x40
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b085      	sub	sp, #20
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	4613      	mov	r3, r2
 8005a84:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	68ba      	ldr	r2, [r7, #8]
 8005a8a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	88fa      	ldrh	r2, [r7, #6]
 8005a90:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	88fa      	ldrh	r2, [r7, #6]
 8005a96:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2222      	movs	r2, #34	; 0x22
 8005aa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	691b      	ldr	r3, [r3, #16]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d007      	beq.n	8005ac6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	68da      	ldr	r2, [r3, #12]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ac4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	695a      	ldr	r2, [r3, #20]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f042 0201 	orr.w	r2, r2, #1
 8005ad4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	68da      	ldr	r2, [r3, #12]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f042 0220 	orr.w	r2, r2, #32
 8005ae4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005ae6:	2300      	movs	r3, #0
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3714      	adds	r7, #20
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b095      	sub	sp, #84	; 0x54
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	330c      	adds	r3, #12
 8005b02:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b06:	e853 3f00 	ldrex	r3, [r3]
 8005b0a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b0e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	330c      	adds	r3, #12
 8005b1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b1c:	643a      	str	r2, [r7, #64]	; 0x40
 8005b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b20:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b24:	e841 2300 	strex	r3, r2, [r1]
 8005b28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d1e5      	bne.n	8005afc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	3314      	adds	r3, #20
 8005b36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b38:	6a3b      	ldr	r3, [r7, #32]
 8005b3a:	e853 3f00 	ldrex	r3, [r3]
 8005b3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	f023 0301 	bic.w	r3, r3, #1
 8005b46:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	3314      	adds	r3, #20
 8005b4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b50:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b58:	e841 2300 	strex	r3, r2, [r1]
 8005b5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d1e5      	bne.n	8005b30 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d119      	bne.n	8005ba0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	330c      	adds	r3, #12
 8005b72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	e853 3f00 	ldrex	r3, [r3]
 8005b7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	f023 0310 	bic.w	r3, r3, #16
 8005b82:	647b      	str	r3, [r7, #68]	; 0x44
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	330c      	adds	r3, #12
 8005b8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b8c:	61ba      	str	r2, [r7, #24]
 8005b8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b90:	6979      	ldr	r1, [r7, #20]
 8005b92:	69ba      	ldr	r2, [r7, #24]
 8005b94:	e841 2300 	strex	r3, r2, [r1]
 8005b98:	613b      	str	r3, [r7, #16]
   return(result);
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d1e5      	bne.n	8005b6c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2220      	movs	r2, #32
 8005ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005bae:	bf00      	nop
 8005bb0:	3754      	adds	r7, #84	; 0x54
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr

08005bba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005bba:	b580      	push	{r7, lr}
 8005bbc:	b084      	sub	sp, #16
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005bd4:	68f8      	ldr	r0, [r7, #12]
 8005bd6:	f7ff fecb 	bl	8005970 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bda:	bf00      	nop
 8005bdc:	3710      	adds	r7, #16
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}

08005be2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005be2:	b480      	push	{r7}
 8005be4:	b085      	sub	sp, #20
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	2b21      	cmp	r3, #33	; 0x21
 8005bf4:	d13e      	bne.n	8005c74 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bfe:	d114      	bne.n	8005c2a <UART_Transmit_IT+0x48>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	691b      	ldr	r3, [r3, #16]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d110      	bne.n	8005c2a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6a1b      	ldr	r3, [r3, #32]
 8005c0c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	881b      	ldrh	r3, [r3, #0]
 8005c12:	461a      	mov	r2, r3
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c1c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a1b      	ldr	r3, [r3, #32]
 8005c22:	1c9a      	adds	r2, r3, #2
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	621a      	str	r2, [r3, #32]
 8005c28:	e008      	b.n	8005c3c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6a1b      	ldr	r3, [r3, #32]
 8005c2e:	1c59      	adds	r1, r3, #1
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	6211      	str	r1, [r2, #32]
 8005c34:	781a      	ldrb	r2, [r3, #0]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	3b01      	subs	r3, #1
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	4619      	mov	r1, r3
 8005c4a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d10f      	bne.n	8005c70 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68da      	ldr	r2, [r3, #12]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c5e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	68da      	ldr	r2, [r3, #12]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c6e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005c70:	2300      	movs	r3, #0
 8005c72:	e000      	b.n	8005c76 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005c74:	2302      	movs	r3, #2
  }
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3714      	adds	r7, #20
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr

08005c82 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c82:	b580      	push	{r7, lr}
 8005c84:	b082      	sub	sp, #8
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	68da      	ldr	r2, [r3, #12]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c98:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2220      	movs	r2, #32
 8005c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f7ff fe5a 	bl	800595c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005ca8:	2300      	movs	r3, #0
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3708      	adds	r7, #8
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}

08005cb2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005cb2:	b580      	push	{r7, lr}
 8005cb4:	b08c      	sub	sp, #48	; 0x30
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	2b22      	cmp	r3, #34	; 0x22
 8005cc4:	f040 80ab 	bne.w	8005e1e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cd0:	d117      	bne.n	8005d02 <UART_Receive_IT+0x50>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	691b      	ldr	r3, [r3, #16]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d113      	bne.n	8005d02 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cf0:	b29a      	uxth	r2, r3
 8005cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cfa:	1c9a      	adds	r2, r3, #2
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	629a      	str	r2, [r3, #40]	; 0x28
 8005d00:	e026      	b.n	8005d50 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d06:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d14:	d007      	beq.n	8005d26 <UART_Receive_IT+0x74>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d10a      	bne.n	8005d34 <UART_Receive_IT+0x82>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d106      	bne.n	8005d34 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	b2da      	uxtb	r2, r3
 8005d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d30:	701a      	strb	r2, [r3, #0]
 8005d32:	e008      	b.n	8005d46 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d40:	b2da      	uxtb	r2, r3
 8005d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d44:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d4a:	1c5a      	adds	r2, r3, #1
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	3b01      	subs	r3, #1
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	4619      	mov	r1, r3
 8005d5e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d15a      	bne.n	8005e1a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	68da      	ldr	r2, [r3, #12]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f022 0220 	bic.w	r2, r2, #32
 8005d72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68da      	ldr	r2, [r3, #12]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	695a      	ldr	r2, [r3, #20]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f022 0201 	bic.w	r2, r2, #1
 8005d92:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2220      	movs	r2, #32
 8005d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d135      	bne.n	8005e10 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	330c      	adds	r3, #12
 8005db0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	e853 3f00 	ldrex	r3, [r3]
 8005db8:	613b      	str	r3, [r7, #16]
   return(result);
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	f023 0310 	bic.w	r3, r3, #16
 8005dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	330c      	adds	r3, #12
 8005dc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dca:	623a      	str	r2, [r7, #32]
 8005dcc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dce:	69f9      	ldr	r1, [r7, #28]
 8005dd0:	6a3a      	ldr	r2, [r7, #32]
 8005dd2:	e841 2300 	strex	r3, r2, [r1]
 8005dd6:	61bb      	str	r3, [r7, #24]
   return(result);
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d1e5      	bne.n	8005daa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f003 0310 	and.w	r3, r3, #16
 8005de8:	2b10      	cmp	r3, #16
 8005dea:	d10a      	bne.n	8005e02 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005dec:	2300      	movs	r3, #0
 8005dee:	60fb      	str	r3, [r7, #12]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	60fb      	str	r3, [r7, #12]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	60fb      	str	r3, [r7, #12]
 8005e00:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e06:	4619      	mov	r1, r3
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f7ff fdbb 	bl	8005984 <HAL_UARTEx_RxEventCallback>
 8005e0e:	e002      	b.n	8005e16 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f7fb f861 	bl	8000ed8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005e16:	2300      	movs	r3, #0
 8005e18:	e002      	b.n	8005e20 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	e000      	b.n	8005e20 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005e1e:	2302      	movs	r3, #2
  }
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3730      	adds	r7, #48	; 0x30
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e2c:	b0c0      	sub	sp, #256	; 0x100
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	691b      	ldr	r3, [r3, #16]
 8005e3c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e44:	68d9      	ldr	r1, [r3, #12]
 8005e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	ea40 0301 	orr.w	r3, r0, r1
 8005e50:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e56:	689a      	ldr	r2, [r3, #8]
 8005e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	431a      	orrs	r2, r3
 8005e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e64:	695b      	ldr	r3, [r3, #20]
 8005e66:	431a      	orrs	r2, r3
 8005e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e6c:	69db      	ldr	r3, [r3, #28]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005e80:	f021 010c 	bic.w	r1, r1, #12
 8005e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e8e:	430b      	orrs	r3, r1
 8005e90:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	695b      	ldr	r3, [r3, #20]
 8005e9a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005e9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ea2:	6999      	ldr	r1, [r3, #24]
 8005ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	ea40 0301 	orr.w	r3, r0, r1
 8005eae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	4b8f      	ldr	r3, [pc, #572]	; (80060f4 <UART_SetConfig+0x2cc>)
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d005      	beq.n	8005ec8 <UART_SetConfig+0xa0>
 8005ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	4b8d      	ldr	r3, [pc, #564]	; (80060f8 <UART_SetConfig+0x2d0>)
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d104      	bne.n	8005ed2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ec8:	f7fd ff26 	bl	8003d18 <HAL_RCC_GetPCLK2Freq>
 8005ecc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005ed0:	e003      	b.n	8005eda <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005ed2:	f7fd ff0d 	bl	8003cf0 <HAL_RCC_GetPCLK1Freq>
 8005ed6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ede:	69db      	ldr	r3, [r3, #28]
 8005ee0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ee4:	f040 810c 	bne.w	8006100 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ee8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005eec:	2200      	movs	r2, #0
 8005eee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005ef2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005ef6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005efa:	4622      	mov	r2, r4
 8005efc:	462b      	mov	r3, r5
 8005efe:	1891      	adds	r1, r2, r2
 8005f00:	65b9      	str	r1, [r7, #88]	; 0x58
 8005f02:	415b      	adcs	r3, r3
 8005f04:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f06:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005f0a:	4621      	mov	r1, r4
 8005f0c:	eb12 0801 	adds.w	r8, r2, r1
 8005f10:	4629      	mov	r1, r5
 8005f12:	eb43 0901 	adc.w	r9, r3, r1
 8005f16:	f04f 0200 	mov.w	r2, #0
 8005f1a:	f04f 0300 	mov.w	r3, #0
 8005f1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f2a:	4690      	mov	r8, r2
 8005f2c:	4699      	mov	r9, r3
 8005f2e:	4623      	mov	r3, r4
 8005f30:	eb18 0303 	adds.w	r3, r8, r3
 8005f34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005f38:	462b      	mov	r3, r5
 8005f3a:	eb49 0303 	adc.w	r3, r9, r3
 8005f3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005f4e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005f52:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005f56:	460b      	mov	r3, r1
 8005f58:	18db      	adds	r3, r3, r3
 8005f5a:	653b      	str	r3, [r7, #80]	; 0x50
 8005f5c:	4613      	mov	r3, r2
 8005f5e:	eb42 0303 	adc.w	r3, r2, r3
 8005f62:	657b      	str	r3, [r7, #84]	; 0x54
 8005f64:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005f68:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005f6c:	f7fa fe0e 	bl	8000b8c <__aeabi_uldivmod>
 8005f70:	4602      	mov	r2, r0
 8005f72:	460b      	mov	r3, r1
 8005f74:	4b61      	ldr	r3, [pc, #388]	; (80060fc <UART_SetConfig+0x2d4>)
 8005f76:	fba3 2302 	umull	r2, r3, r3, r2
 8005f7a:	095b      	lsrs	r3, r3, #5
 8005f7c:	011c      	lsls	r4, r3, #4
 8005f7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f82:	2200      	movs	r2, #0
 8005f84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f88:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005f8c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005f90:	4642      	mov	r2, r8
 8005f92:	464b      	mov	r3, r9
 8005f94:	1891      	adds	r1, r2, r2
 8005f96:	64b9      	str	r1, [r7, #72]	; 0x48
 8005f98:	415b      	adcs	r3, r3
 8005f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f9c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005fa0:	4641      	mov	r1, r8
 8005fa2:	eb12 0a01 	adds.w	sl, r2, r1
 8005fa6:	4649      	mov	r1, r9
 8005fa8:	eb43 0b01 	adc.w	fp, r3, r1
 8005fac:	f04f 0200 	mov.w	r2, #0
 8005fb0:	f04f 0300 	mov.w	r3, #0
 8005fb4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005fb8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005fbc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005fc0:	4692      	mov	sl, r2
 8005fc2:	469b      	mov	fp, r3
 8005fc4:	4643      	mov	r3, r8
 8005fc6:	eb1a 0303 	adds.w	r3, sl, r3
 8005fca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005fce:	464b      	mov	r3, r9
 8005fd0:	eb4b 0303 	adc.w	r3, fp, r3
 8005fd4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005fe4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005fe8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005fec:	460b      	mov	r3, r1
 8005fee:	18db      	adds	r3, r3, r3
 8005ff0:	643b      	str	r3, [r7, #64]	; 0x40
 8005ff2:	4613      	mov	r3, r2
 8005ff4:	eb42 0303 	adc.w	r3, r2, r3
 8005ff8:	647b      	str	r3, [r7, #68]	; 0x44
 8005ffa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005ffe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006002:	f7fa fdc3 	bl	8000b8c <__aeabi_uldivmod>
 8006006:	4602      	mov	r2, r0
 8006008:	460b      	mov	r3, r1
 800600a:	4611      	mov	r1, r2
 800600c:	4b3b      	ldr	r3, [pc, #236]	; (80060fc <UART_SetConfig+0x2d4>)
 800600e:	fba3 2301 	umull	r2, r3, r3, r1
 8006012:	095b      	lsrs	r3, r3, #5
 8006014:	2264      	movs	r2, #100	; 0x64
 8006016:	fb02 f303 	mul.w	r3, r2, r3
 800601a:	1acb      	subs	r3, r1, r3
 800601c:	00db      	lsls	r3, r3, #3
 800601e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006022:	4b36      	ldr	r3, [pc, #216]	; (80060fc <UART_SetConfig+0x2d4>)
 8006024:	fba3 2302 	umull	r2, r3, r3, r2
 8006028:	095b      	lsrs	r3, r3, #5
 800602a:	005b      	lsls	r3, r3, #1
 800602c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006030:	441c      	add	r4, r3
 8006032:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006036:	2200      	movs	r2, #0
 8006038:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800603c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006040:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006044:	4642      	mov	r2, r8
 8006046:	464b      	mov	r3, r9
 8006048:	1891      	adds	r1, r2, r2
 800604a:	63b9      	str	r1, [r7, #56]	; 0x38
 800604c:	415b      	adcs	r3, r3
 800604e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006050:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006054:	4641      	mov	r1, r8
 8006056:	1851      	adds	r1, r2, r1
 8006058:	6339      	str	r1, [r7, #48]	; 0x30
 800605a:	4649      	mov	r1, r9
 800605c:	414b      	adcs	r3, r1
 800605e:	637b      	str	r3, [r7, #52]	; 0x34
 8006060:	f04f 0200 	mov.w	r2, #0
 8006064:	f04f 0300 	mov.w	r3, #0
 8006068:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800606c:	4659      	mov	r1, fp
 800606e:	00cb      	lsls	r3, r1, #3
 8006070:	4651      	mov	r1, sl
 8006072:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006076:	4651      	mov	r1, sl
 8006078:	00ca      	lsls	r2, r1, #3
 800607a:	4610      	mov	r0, r2
 800607c:	4619      	mov	r1, r3
 800607e:	4603      	mov	r3, r0
 8006080:	4642      	mov	r2, r8
 8006082:	189b      	adds	r3, r3, r2
 8006084:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006088:	464b      	mov	r3, r9
 800608a:	460a      	mov	r2, r1
 800608c:	eb42 0303 	adc.w	r3, r2, r3
 8006090:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80060a0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80060a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80060a8:	460b      	mov	r3, r1
 80060aa:	18db      	adds	r3, r3, r3
 80060ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80060ae:	4613      	mov	r3, r2
 80060b0:	eb42 0303 	adc.w	r3, r2, r3
 80060b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80060ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80060be:	f7fa fd65 	bl	8000b8c <__aeabi_uldivmod>
 80060c2:	4602      	mov	r2, r0
 80060c4:	460b      	mov	r3, r1
 80060c6:	4b0d      	ldr	r3, [pc, #52]	; (80060fc <UART_SetConfig+0x2d4>)
 80060c8:	fba3 1302 	umull	r1, r3, r3, r2
 80060cc:	095b      	lsrs	r3, r3, #5
 80060ce:	2164      	movs	r1, #100	; 0x64
 80060d0:	fb01 f303 	mul.w	r3, r1, r3
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	00db      	lsls	r3, r3, #3
 80060d8:	3332      	adds	r3, #50	; 0x32
 80060da:	4a08      	ldr	r2, [pc, #32]	; (80060fc <UART_SetConfig+0x2d4>)
 80060dc:	fba2 2303 	umull	r2, r3, r2, r3
 80060e0:	095b      	lsrs	r3, r3, #5
 80060e2:	f003 0207 	and.w	r2, r3, #7
 80060e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4422      	add	r2, r4
 80060ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80060f0:	e106      	b.n	8006300 <UART_SetConfig+0x4d8>
 80060f2:	bf00      	nop
 80060f4:	40011000 	.word	0x40011000
 80060f8:	40011400 	.word	0x40011400
 80060fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006100:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006104:	2200      	movs	r2, #0
 8006106:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800610a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800610e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006112:	4642      	mov	r2, r8
 8006114:	464b      	mov	r3, r9
 8006116:	1891      	adds	r1, r2, r2
 8006118:	6239      	str	r1, [r7, #32]
 800611a:	415b      	adcs	r3, r3
 800611c:	627b      	str	r3, [r7, #36]	; 0x24
 800611e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006122:	4641      	mov	r1, r8
 8006124:	1854      	adds	r4, r2, r1
 8006126:	4649      	mov	r1, r9
 8006128:	eb43 0501 	adc.w	r5, r3, r1
 800612c:	f04f 0200 	mov.w	r2, #0
 8006130:	f04f 0300 	mov.w	r3, #0
 8006134:	00eb      	lsls	r3, r5, #3
 8006136:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800613a:	00e2      	lsls	r2, r4, #3
 800613c:	4614      	mov	r4, r2
 800613e:	461d      	mov	r5, r3
 8006140:	4643      	mov	r3, r8
 8006142:	18e3      	adds	r3, r4, r3
 8006144:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006148:	464b      	mov	r3, r9
 800614a:	eb45 0303 	adc.w	r3, r5, r3
 800614e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800615e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006162:	f04f 0200 	mov.w	r2, #0
 8006166:	f04f 0300 	mov.w	r3, #0
 800616a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800616e:	4629      	mov	r1, r5
 8006170:	008b      	lsls	r3, r1, #2
 8006172:	4621      	mov	r1, r4
 8006174:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006178:	4621      	mov	r1, r4
 800617a:	008a      	lsls	r2, r1, #2
 800617c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006180:	f7fa fd04 	bl	8000b8c <__aeabi_uldivmod>
 8006184:	4602      	mov	r2, r0
 8006186:	460b      	mov	r3, r1
 8006188:	4b60      	ldr	r3, [pc, #384]	; (800630c <UART_SetConfig+0x4e4>)
 800618a:	fba3 2302 	umull	r2, r3, r3, r2
 800618e:	095b      	lsrs	r3, r3, #5
 8006190:	011c      	lsls	r4, r3, #4
 8006192:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006196:	2200      	movs	r2, #0
 8006198:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800619c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80061a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80061a4:	4642      	mov	r2, r8
 80061a6:	464b      	mov	r3, r9
 80061a8:	1891      	adds	r1, r2, r2
 80061aa:	61b9      	str	r1, [r7, #24]
 80061ac:	415b      	adcs	r3, r3
 80061ae:	61fb      	str	r3, [r7, #28]
 80061b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80061b4:	4641      	mov	r1, r8
 80061b6:	1851      	adds	r1, r2, r1
 80061b8:	6139      	str	r1, [r7, #16]
 80061ba:	4649      	mov	r1, r9
 80061bc:	414b      	adcs	r3, r1
 80061be:	617b      	str	r3, [r7, #20]
 80061c0:	f04f 0200 	mov.w	r2, #0
 80061c4:	f04f 0300 	mov.w	r3, #0
 80061c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80061cc:	4659      	mov	r1, fp
 80061ce:	00cb      	lsls	r3, r1, #3
 80061d0:	4651      	mov	r1, sl
 80061d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061d6:	4651      	mov	r1, sl
 80061d8:	00ca      	lsls	r2, r1, #3
 80061da:	4610      	mov	r0, r2
 80061dc:	4619      	mov	r1, r3
 80061de:	4603      	mov	r3, r0
 80061e0:	4642      	mov	r2, r8
 80061e2:	189b      	adds	r3, r3, r2
 80061e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80061e8:	464b      	mov	r3, r9
 80061ea:	460a      	mov	r2, r1
 80061ec:	eb42 0303 	adc.w	r3, r2, r3
 80061f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80061f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80061fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006200:	f04f 0200 	mov.w	r2, #0
 8006204:	f04f 0300 	mov.w	r3, #0
 8006208:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800620c:	4649      	mov	r1, r9
 800620e:	008b      	lsls	r3, r1, #2
 8006210:	4641      	mov	r1, r8
 8006212:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006216:	4641      	mov	r1, r8
 8006218:	008a      	lsls	r2, r1, #2
 800621a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800621e:	f7fa fcb5 	bl	8000b8c <__aeabi_uldivmod>
 8006222:	4602      	mov	r2, r0
 8006224:	460b      	mov	r3, r1
 8006226:	4611      	mov	r1, r2
 8006228:	4b38      	ldr	r3, [pc, #224]	; (800630c <UART_SetConfig+0x4e4>)
 800622a:	fba3 2301 	umull	r2, r3, r3, r1
 800622e:	095b      	lsrs	r3, r3, #5
 8006230:	2264      	movs	r2, #100	; 0x64
 8006232:	fb02 f303 	mul.w	r3, r2, r3
 8006236:	1acb      	subs	r3, r1, r3
 8006238:	011b      	lsls	r3, r3, #4
 800623a:	3332      	adds	r3, #50	; 0x32
 800623c:	4a33      	ldr	r2, [pc, #204]	; (800630c <UART_SetConfig+0x4e4>)
 800623e:	fba2 2303 	umull	r2, r3, r2, r3
 8006242:	095b      	lsrs	r3, r3, #5
 8006244:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006248:	441c      	add	r4, r3
 800624a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800624e:	2200      	movs	r2, #0
 8006250:	673b      	str	r3, [r7, #112]	; 0x70
 8006252:	677a      	str	r2, [r7, #116]	; 0x74
 8006254:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006258:	4642      	mov	r2, r8
 800625a:	464b      	mov	r3, r9
 800625c:	1891      	adds	r1, r2, r2
 800625e:	60b9      	str	r1, [r7, #8]
 8006260:	415b      	adcs	r3, r3
 8006262:	60fb      	str	r3, [r7, #12]
 8006264:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006268:	4641      	mov	r1, r8
 800626a:	1851      	adds	r1, r2, r1
 800626c:	6039      	str	r1, [r7, #0]
 800626e:	4649      	mov	r1, r9
 8006270:	414b      	adcs	r3, r1
 8006272:	607b      	str	r3, [r7, #4]
 8006274:	f04f 0200 	mov.w	r2, #0
 8006278:	f04f 0300 	mov.w	r3, #0
 800627c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006280:	4659      	mov	r1, fp
 8006282:	00cb      	lsls	r3, r1, #3
 8006284:	4651      	mov	r1, sl
 8006286:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800628a:	4651      	mov	r1, sl
 800628c:	00ca      	lsls	r2, r1, #3
 800628e:	4610      	mov	r0, r2
 8006290:	4619      	mov	r1, r3
 8006292:	4603      	mov	r3, r0
 8006294:	4642      	mov	r2, r8
 8006296:	189b      	adds	r3, r3, r2
 8006298:	66bb      	str	r3, [r7, #104]	; 0x68
 800629a:	464b      	mov	r3, r9
 800629c:	460a      	mov	r2, r1
 800629e:	eb42 0303 	adc.w	r3, r2, r3
 80062a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80062a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	663b      	str	r3, [r7, #96]	; 0x60
 80062ae:	667a      	str	r2, [r7, #100]	; 0x64
 80062b0:	f04f 0200 	mov.w	r2, #0
 80062b4:	f04f 0300 	mov.w	r3, #0
 80062b8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80062bc:	4649      	mov	r1, r9
 80062be:	008b      	lsls	r3, r1, #2
 80062c0:	4641      	mov	r1, r8
 80062c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062c6:	4641      	mov	r1, r8
 80062c8:	008a      	lsls	r2, r1, #2
 80062ca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80062ce:	f7fa fc5d 	bl	8000b8c <__aeabi_uldivmod>
 80062d2:	4602      	mov	r2, r0
 80062d4:	460b      	mov	r3, r1
 80062d6:	4b0d      	ldr	r3, [pc, #52]	; (800630c <UART_SetConfig+0x4e4>)
 80062d8:	fba3 1302 	umull	r1, r3, r3, r2
 80062dc:	095b      	lsrs	r3, r3, #5
 80062de:	2164      	movs	r1, #100	; 0x64
 80062e0:	fb01 f303 	mul.w	r3, r1, r3
 80062e4:	1ad3      	subs	r3, r2, r3
 80062e6:	011b      	lsls	r3, r3, #4
 80062e8:	3332      	adds	r3, #50	; 0x32
 80062ea:	4a08      	ldr	r2, [pc, #32]	; (800630c <UART_SetConfig+0x4e4>)
 80062ec:	fba2 2303 	umull	r2, r3, r2, r3
 80062f0:	095b      	lsrs	r3, r3, #5
 80062f2:	f003 020f 	and.w	r2, r3, #15
 80062f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4422      	add	r2, r4
 80062fe:	609a      	str	r2, [r3, #8]
}
 8006300:	bf00      	nop
 8006302:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006306:	46bd      	mov	sp, r7
 8006308:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800630c:	51eb851f 	.word	0x51eb851f

08006310 <sniprintf>:
 8006310:	b40c      	push	{r2, r3}
 8006312:	b530      	push	{r4, r5, lr}
 8006314:	4b17      	ldr	r3, [pc, #92]	; (8006374 <sniprintf+0x64>)
 8006316:	1e0c      	subs	r4, r1, #0
 8006318:	681d      	ldr	r5, [r3, #0]
 800631a:	b09d      	sub	sp, #116	; 0x74
 800631c:	da08      	bge.n	8006330 <sniprintf+0x20>
 800631e:	238b      	movs	r3, #139	; 0x8b
 8006320:	602b      	str	r3, [r5, #0]
 8006322:	f04f 30ff 	mov.w	r0, #4294967295
 8006326:	b01d      	add	sp, #116	; 0x74
 8006328:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800632c:	b002      	add	sp, #8
 800632e:	4770      	bx	lr
 8006330:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006334:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006338:	bf14      	ite	ne
 800633a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800633e:	4623      	moveq	r3, r4
 8006340:	9304      	str	r3, [sp, #16]
 8006342:	9307      	str	r3, [sp, #28]
 8006344:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006348:	9002      	str	r0, [sp, #8]
 800634a:	9006      	str	r0, [sp, #24]
 800634c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006350:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006352:	ab21      	add	r3, sp, #132	; 0x84
 8006354:	a902      	add	r1, sp, #8
 8006356:	4628      	mov	r0, r5
 8006358:	9301      	str	r3, [sp, #4]
 800635a:	f000 f9e1 	bl	8006720 <_svfiprintf_r>
 800635e:	1c43      	adds	r3, r0, #1
 8006360:	bfbc      	itt	lt
 8006362:	238b      	movlt	r3, #139	; 0x8b
 8006364:	602b      	strlt	r3, [r5, #0]
 8006366:	2c00      	cmp	r4, #0
 8006368:	d0dd      	beq.n	8006326 <sniprintf+0x16>
 800636a:	9b02      	ldr	r3, [sp, #8]
 800636c:	2200      	movs	r2, #0
 800636e:	701a      	strb	r2, [r3, #0]
 8006370:	e7d9      	b.n	8006326 <sniprintf+0x16>
 8006372:	bf00      	nop
 8006374:	20000058 	.word	0x20000058

08006378 <siprintf>:
 8006378:	b40e      	push	{r1, r2, r3}
 800637a:	b500      	push	{lr}
 800637c:	b09c      	sub	sp, #112	; 0x70
 800637e:	ab1d      	add	r3, sp, #116	; 0x74
 8006380:	9002      	str	r0, [sp, #8]
 8006382:	9006      	str	r0, [sp, #24]
 8006384:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006388:	4809      	ldr	r0, [pc, #36]	; (80063b0 <siprintf+0x38>)
 800638a:	9107      	str	r1, [sp, #28]
 800638c:	9104      	str	r1, [sp, #16]
 800638e:	4909      	ldr	r1, [pc, #36]	; (80063b4 <siprintf+0x3c>)
 8006390:	f853 2b04 	ldr.w	r2, [r3], #4
 8006394:	9105      	str	r1, [sp, #20]
 8006396:	6800      	ldr	r0, [r0, #0]
 8006398:	9301      	str	r3, [sp, #4]
 800639a:	a902      	add	r1, sp, #8
 800639c:	f000 f9c0 	bl	8006720 <_svfiprintf_r>
 80063a0:	9b02      	ldr	r3, [sp, #8]
 80063a2:	2200      	movs	r2, #0
 80063a4:	701a      	strb	r2, [r3, #0]
 80063a6:	b01c      	add	sp, #112	; 0x70
 80063a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80063ac:	b003      	add	sp, #12
 80063ae:	4770      	bx	lr
 80063b0:	20000058 	.word	0x20000058
 80063b4:	ffff0208 	.word	0xffff0208

080063b8 <siscanf>:
 80063b8:	b40e      	push	{r1, r2, r3}
 80063ba:	b510      	push	{r4, lr}
 80063bc:	b09f      	sub	sp, #124	; 0x7c
 80063be:	ac21      	add	r4, sp, #132	; 0x84
 80063c0:	f44f 7101 	mov.w	r1, #516	; 0x204
 80063c4:	f854 2b04 	ldr.w	r2, [r4], #4
 80063c8:	9201      	str	r2, [sp, #4]
 80063ca:	f8ad 101c 	strh.w	r1, [sp, #28]
 80063ce:	9004      	str	r0, [sp, #16]
 80063d0:	9008      	str	r0, [sp, #32]
 80063d2:	f7f9 ff05 	bl	80001e0 <strlen>
 80063d6:	4b0c      	ldr	r3, [pc, #48]	; (8006408 <siscanf+0x50>)
 80063d8:	9005      	str	r0, [sp, #20]
 80063da:	9009      	str	r0, [sp, #36]	; 0x24
 80063dc:	930d      	str	r3, [sp, #52]	; 0x34
 80063de:	480b      	ldr	r0, [pc, #44]	; (800640c <siscanf+0x54>)
 80063e0:	9a01      	ldr	r2, [sp, #4]
 80063e2:	6800      	ldr	r0, [r0, #0]
 80063e4:	9403      	str	r4, [sp, #12]
 80063e6:	2300      	movs	r3, #0
 80063e8:	9311      	str	r3, [sp, #68]	; 0x44
 80063ea:	9316      	str	r3, [sp, #88]	; 0x58
 80063ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80063f0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80063f4:	a904      	add	r1, sp, #16
 80063f6:	4623      	mov	r3, r4
 80063f8:	f000 faea 	bl	80069d0 <__ssvfiscanf_r>
 80063fc:	b01f      	add	sp, #124	; 0x7c
 80063fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006402:	b003      	add	sp, #12
 8006404:	4770      	bx	lr
 8006406:	bf00      	nop
 8006408:	08006411 	.word	0x08006411
 800640c:	20000058 	.word	0x20000058

08006410 <__seofread>:
 8006410:	2000      	movs	r0, #0
 8006412:	4770      	bx	lr

08006414 <memset>:
 8006414:	4402      	add	r2, r0
 8006416:	4603      	mov	r3, r0
 8006418:	4293      	cmp	r3, r2
 800641a:	d100      	bne.n	800641e <memset+0xa>
 800641c:	4770      	bx	lr
 800641e:	f803 1b01 	strb.w	r1, [r3], #1
 8006422:	e7f9      	b.n	8006418 <memset+0x4>

08006424 <__errno>:
 8006424:	4b01      	ldr	r3, [pc, #4]	; (800642c <__errno+0x8>)
 8006426:	6818      	ldr	r0, [r3, #0]
 8006428:	4770      	bx	lr
 800642a:	bf00      	nop
 800642c:	20000058 	.word	0x20000058

08006430 <__libc_init_array>:
 8006430:	b570      	push	{r4, r5, r6, lr}
 8006432:	4d0d      	ldr	r5, [pc, #52]	; (8006468 <__libc_init_array+0x38>)
 8006434:	4c0d      	ldr	r4, [pc, #52]	; (800646c <__libc_init_array+0x3c>)
 8006436:	1b64      	subs	r4, r4, r5
 8006438:	10a4      	asrs	r4, r4, #2
 800643a:	2600      	movs	r6, #0
 800643c:	42a6      	cmp	r6, r4
 800643e:	d109      	bne.n	8006454 <__libc_init_array+0x24>
 8006440:	4d0b      	ldr	r5, [pc, #44]	; (8006470 <__libc_init_array+0x40>)
 8006442:	4c0c      	ldr	r4, [pc, #48]	; (8006474 <__libc_init_array+0x44>)
 8006444:	f001 f8f6 	bl	8007634 <_init>
 8006448:	1b64      	subs	r4, r4, r5
 800644a:	10a4      	asrs	r4, r4, #2
 800644c:	2600      	movs	r6, #0
 800644e:	42a6      	cmp	r6, r4
 8006450:	d105      	bne.n	800645e <__libc_init_array+0x2e>
 8006452:	bd70      	pop	{r4, r5, r6, pc}
 8006454:	f855 3b04 	ldr.w	r3, [r5], #4
 8006458:	4798      	blx	r3
 800645a:	3601      	adds	r6, #1
 800645c:	e7ee      	b.n	800643c <__libc_init_array+0xc>
 800645e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006462:	4798      	blx	r3
 8006464:	3601      	adds	r6, #1
 8006466:	e7f2      	b.n	800644e <__libc_init_array+0x1e>
 8006468:	08007afc 	.word	0x08007afc
 800646c:	08007afc 	.word	0x08007afc
 8006470:	08007afc 	.word	0x08007afc
 8006474:	08007b00 	.word	0x08007b00

08006478 <__retarget_lock_acquire_recursive>:
 8006478:	4770      	bx	lr

0800647a <__retarget_lock_release_recursive>:
 800647a:	4770      	bx	lr

0800647c <_free_r>:
 800647c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800647e:	2900      	cmp	r1, #0
 8006480:	d044      	beq.n	800650c <_free_r+0x90>
 8006482:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006486:	9001      	str	r0, [sp, #4]
 8006488:	2b00      	cmp	r3, #0
 800648a:	f1a1 0404 	sub.w	r4, r1, #4
 800648e:	bfb8      	it	lt
 8006490:	18e4      	addlt	r4, r4, r3
 8006492:	f000 f8df 	bl	8006654 <__malloc_lock>
 8006496:	4a1e      	ldr	r2, [pc, #120]	; (8006510 <_free_r+0x94>)
 8006498:	9801      	ldr	r0, [sp, #4]
 800649a:	6813      	ldr	r3, [r2, #0]
 800649c:	b933      	cbnz	r3, 80064ac <_free_r+0x30>
 800649e:	6063      	str	r3, [r4, #4]
 80064a0:	6014      	str	r4, [r2, #0]
 80064a2:	b003      	add	sp, #12
 80064a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80064a8:	f000 b8da 	b.w	8006660 <__malloc_unlock>
 80064ac:	42a3      	cmp	r3, r4
 80064ae:	d908      	bls.n	80064c2 <_free_r+0x46>
 80064b0:	6825      	ldr	r5, [r4, #0]
 80064b2:	1961      	adds	r1, r4, r5
 80064b4:	428b      	cmp	r3, r1
 80064b6:	bf01      	itttt	eq
 80064b8:	6819      	ldreq	r1, [r3, #0]
 80064ba:	685b      	ldreq	r3, [r3, #4]
 80064bc:	1949      	addeq	r1, r1, r5
 80064be:	6021      	streq	r1, [r4, #0]
 80064c0:	e7ed      	b.n	800649e <_free_r+0x22>
 80064c2:	461a      	mov	r2, r3
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	b10b      	cbz	r3, 80064cc <_free_r+0x50>
 80064c8:	42a3      	cmp	r3, r4
 80064ca:	d9fa      	bls.n	80064c2 <_free_r+0x46>
 80064cc:	6811      	ldr	r1, [r2, #0]
 80064ce:	1855      	adds	r5, r2, r1
 80064d0:	42a5      	cmp	r5, r4
 80064d2:	d10b      	bne.n	80064ec <_free_r+0x70>
 80064d4:	6824      	ldr	r4, [r4, #0]
 80064d6:	4421      	add	r1, r4
 80064d8:	1854      	adds	r4, r2, r1
 80064da:	42a3      	cmp	r3, r4
 80064dc:	6011      	str	r1, [r2, #0]
 80064de:	d1e0      	bne.n	80064a2 <_free_r+0x26>
 80064e0:	681c      	ldr	r4, [r3, #0]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	6053      	str	r3, [r2, #4]
 80064e6:	440c      	add	r4, r1
 80064e8:	6014      	str	r4, [r2, #0]
 80064ea:	e7da      	b.n	80064a2 <_free_r+0x26>
 80064ec:	d902      	bls.n	80064f4 <_free_r+0x78>
 80064ee:	230c      	movs	r3, #12
 80064f0:	6003      	str	r3, [r0, #0]
 80064f2:	e7d6      	b.n	80064a2 <_free_r+0x26>
 80064f4:	6825      	ldr	r5, [r4, #0]
 80064f6:	1961      	adds	r1, r4, r5
 80064f8:	428b      	cmp	r3, r1
 80064fa:	bf04      	itt	eq
 80064fc:	6819      	ldreq	r1, [r3, #0]
 80064fe:	685b      	ldreq	r3, [r3, #4]
 8006500:	6063      	str	r3, [r4, #4]
 8006502:	bf04      	itt	eq
 8006504:	1949      	addeq	r1, r1, r5
 8006506:	6021      	streq	r1, [r4, #0]
 8006508:	6054      	str	r4, [r2, #4]
 800650a:	e7ca      	b.n	80064a2 <_free_r+0x26>
 800650c:	b003      	add	sp, #12
 800650e:	bd30      	pop	{r4, r5, pc}
 8006510:	200006ec 	.word	0x200006ec

08006514 <sbrk_aligned>:
 8006514:	b570      	push	{r4, r5, r6, lr}
 8006516:	4e0e      	ldr	r6, [pc, #56]	; (8006550 <sbrk_aligned+0x3c>)
 8006518:	460c      	mov	r4, r1
 800651a:	6831      	ldr	r1, [r6, #0]
 800651c:	4605      	mov	r5, r0
 800651e:	b911      	cbnz	r1, 8006526 <sbrk_aligned+0x12>
 8006520:	f000 ff3a 	bl	8007398 <_sbrk_r>
 8006524:	6030      	str	r0, [r6, #0]
 8006526:	4621      	mov	r1, r4
 8006528:	4628      	mov	r0, r5
 800652a:	f000 ff35 	bl	8007398 <_sbrk_r>
 800652e:	1c43      	adds	r3, r0, #1
 8006530:	d00a      	beq.n	8006548 <sbrk_aligned+0x34>
 8006532:	1cc4      	adds	r4, r0, #3
 8006534:	f024 0403 	bic.w	r4, r4, #3
 8006538:	42a0      	cmp	r0, r4
 800653a:	d007      	beq.n	800654c <sbrk_aligned+0x38>
 800653c:	1a21      	subs	r1, r4, r0
 800653e:	4628      	mov	r0, r5
 8006540:	f000 ff2a 	bl	8007398 <_sbrk_r>
 8006544:	3001      	adds	r0, #1
 8006546:	d101      	bne.n	800654c <sbrk_aligned+0x38>
 8006548:	f04f 34ff 	mov.w	r4, #4294967295
 800654c:	4620      	mov	r0, r4
 800654e:	bd70      	pop	{r4, r5, r6, pc}
 8006550:	200006f0 	.word	0x200006f0

08006554 <_malloc_r>:
 8006554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006558:	1ccd      	adds	r5, r1, #3
 800655a:	f025 0503 	bic.w	r5, r5, #3
 800655e:	3508      	adds	r5, #8
 8006560:	2d0c      	cmp	r5, #12
 8006562:	bf38      	it	cc
 8006564:	250c      	movcc	r5, #12
 8006566:	2d00      	cmp	r5, #0
 8006568:	4607      	mov	r7, r0
 800656a:	db01      	blt.n	8006570 <_malloc_r+0x1c>
 800656c:	42a9      	cmp	r1, r5
 800656e:	d905      	bls.n	800657c <_malloc_r+0x28>
 8006570:	230c      	movs	r3, #12
 8006572:	603b      	str	r3, [r7, #0]
 8006574:	2600      	movs	r6, #0
 8006576:	4630      	mov	r0, r6
 8006578:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800657c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006650 <_malloc_r+0xfc>
 8006580:	f000 f868 	bl	8006654 <__malloc_lock>
 8006584:	f8d8 3000 	ldr.w	r3, [r8]
 8006588:	461c      	mov	r4, r3
 800658a:	bb5c      	cbnz	r4, 80065e4 <_malloc_r+0x90>
 800658c:	4629      	mov	r1, r5
 800658e:	4638      	mov	r0, r7
 8006590:	f7ff ffc0 	bl	8006514 <sbrk_aligned>
 8006594:	1c43      	adds	r3, r0, #1
 8006596:	4604      	mov	r4, r0
 8006598:	d155      	bne.n	8006646 <_malloc_r+0xf2>
 800659a:	f8d8 4000 	ldr.w	r4, [r8]
 800659e:	4626      	mov	r6, r4
 80065a0:	2e00      	cmp	r6, #0
 80065a2:	d145      	bne.n	8006630 <_malloc_r+0xdc>
 80065a4:	2c00      	cmp	r4, #0
 80065a6:	d048      	beq.n	800663a <_malloc_r+0xe6>
 80065a8:	6823      	ldr	r3, [r4, #0]
 80065aa:	4631      	mov	r1, r6
 80065ac:	4638      	mov	r0, r7
 80065ae:	eb04 0903 	add.w	r9, r4, r3
 80065b2:	f000 fef1 	bl	8007398 <_sbrk_r>
 80065b6:	4581      	cmp	r9, r0
 80065b8:	d13f      	bne.n	800663a <_malloc_r+0xe6>
 80065ba:	6821      	ldr	r1, [r4, #0]
 80065bc:	1a6d      	subs	r5, r5, r1
 80065be:	4629      	mov	r1, r5
 80065c0:	4638      	mov	r0, r7
 80065c2:	f7ff ffa7 	bl	8006514 <sbrk_aligned>
 80065c6:	3001      	adds	r0, #1
 80065c8:	d037      	beq.n	800663a <_malloc_r+0xe6>
 80065ca:	6823      	ldr	r3, [r4, #0]
 80065cc:	442b      	add	r3, r5
 80065ce:	6023      	str	r3, [r4, #0]
 80065d0:	f8d8 3000 	ldr.w	r3, [r8]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d038      	beq.n	800664a <_malloc_r+0xf6>
 80065d8:	685a      	ldr	r2, [r3, #4]
 80065da:	42a2      	cmp	r2, r4
 80065dc:	d12b      	bne.n	8006636 <_malloc_r+0xe2>
 80065de:	2200      	movs	r2, #0
 80065e0:	605a      	str	r2, [r3, #4]
 80065e2:	e00f      	b.n	8006604 <_malloc_r+0xb0>
 80065e4:	6822      	ldr	r2, [r4, #0]
 80065e6:	1b52      	subs	r2, r2, r5
 80065e8:	d41f      	bmi.n	800662a <_malloc_r+0xd6>
 80065ea:	2a0b      	cmp	r2, #11
 80065ec:	d917      	bls.n	800661e <_malloc_r+0xca>
 80065ee:	1961      	adds	r1, r4, r5
 80065f0:	42a3      	cmp	r3, r4
 80065f2:	6025      	str	r5, [r4, #0]
 80065f4:	bf18      	it	ne
 80065f6:	6059      	strne	r1, [r3, #4]
 80065f8:	6863      	ldr	r3, [r4, #4]
 80065fa:	bf08      	it	eq
 80065fc:	f8c8 1000 	streq.w	r1, [r8]
 8006600:	5162      	str	r2, [r4, r5]
 8006602:	604b      	str	r3, [r1, #4]
 8006604:	4638      	mov	r0, r7
 8006606:	f104 060b 	add.w	r6, r4, #11
 800660a:	f000 f829 	bl	8006660 <__malloc_unlock>
 800660e:	f026 0607 	bic.w	r6, r6, #7
 8006612:	1d23      	adds	r3, r4, #4
 8006614:	1af2      	subs	r2, r6, r3
 8006616:	d0ae      	beq.n	8006576 <_malloc_r+0x22>
 8006618:	1b9b      	subs	r3, r3, r6
 800661a:	50a3      	str	r3, [r4, r2]
 800661c:	e7ab      	b.n	8006576 <_malloc_r+0x22>
 800661e:	42a3      	cmp	r3, r4
 8006620:	6862      	ldr	r2, [r4, #4]
 8006622:	d1dd      	bne.n	80065e0 <_malloc_r+0x8c>
 8006624:	f8c8 2000 	str.w	r2, [r8]
 8006628:	e7ec      	b.n	8006604 <_malloc_r+0xb0>
 800662a:	4623      	mov	r3, r4
 800662c:	6864      	ldr	r4, [r4, #4]
 800662e:	e7ac      	b.n	800658a <_malloc_r+0x36>
 8006630:	4634      	mov	r4, r6
 8006632:	6876      	ldr	r6, [r6, #4]
 8006634:	e7b4      	b.n	80065a0 <_malloc_r+0x4c>
 8006636:	4613      	mov	r3, r2
 8006638:	e7cc      	b.n	80065d4 <_malloc_r+0x80>
 800663a:	230c      	movs	r3, #12
 800663c:	603b      	str	r3, [r7, #0]
 800663e:	4638      	mov	r0, r7
 8006640:	f000 f80e 	bl	8006660 <__malloc_unlock>
 8006644:	e797      	b.n	8006576 <_malloc_r+0x22>
 8006646:	6025      	str	r5, [r4, #0]
 8006648:	e7dc      	b.n	8006604 <_malloc_r+0xb0>
 800664a:	605b      	str	r3, [r3, #4]
 800664c:	deff      	udf	#255	; 0xff
 800664e:	bf00      	nop
 8006650:	200006ec 	.word	0x200006ec

08006654 <__malloc_lock>:
 8006654:	4801      	ldr	r0, [pc, #4]	; (800665c <__malloc_lock+0x8>)
 8006656:	f7ff bf0f 	b.w	8006478 <__retarget_lock_acquire_recursive>
 800665a:	bf00      	nop
 800665c:	200006e8 	.word	0x200006e8

08006660 <__malloc_unlock>:
 8006660:	4801      	ldr	r0, [pc, #4]	; (8006668 <__malloc_unlock+0x8>)
 8006662:	f7ff bf0a 	b.w	800647a <__retarget_lock_release_recursive>
 8006666:	bf00      	nop
 8006668:	200006e8 	.word	0x200006e8

0800666c <__ssputs_r>:
 800666c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006670:	688e      	ldr	r6, [r1, #8]
 8006672:	461f      	mov	r7, r3
 8006674:	42be      	cmp	r6, r7
 8006676:	680b      	ldr	r3, [r1, #0]
 8006678:	4682      	mov	sl, r0
 800667a:	460c      	mov	r4, r1
 800667c:	4690      	mov	r8, r2
 800667e:	d82c      	bhi.n	80066da <__ssputs_r+0x6e>
 8006680:	898a      	ldrh	r2, [r1, #12]
 8006682:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006686:	d026      	beq.n	80066d6 <__ssputs_r+0x6a>
 8006688:	6965      	ldr	r5, [r4, #20]
 800668a:	6909      	ldr	r1, [r1, #16]
 800668c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006690:	eba3 0901 	sub.w	r9, r3, r1
 8006694:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006698:	1c7b      	adds	r3, r7, #1
 800669a:	444b      	add	r3, r9
 800669c:	106d      	asrs	r5, r5, #1
 800669e:	429d      	cmp	r5, r3
 80066a0:	bf38      	it	cc
 80066a2:	461d      	movcc	r5, r3
 80066a4:	0553      	lsls	r3, r2, #21
 80066a6:	d527      	bpl.n	80066f8 <__ssputs_r+0x8c>
 80066a8:	4629      	mov	r1, r5
 80066aa:	f7ff ff53 	bl	8006554 <_malloc_r>
 80066ae:	4606      	mov	r6, r0
 80066b0:	b360      	cbz	r0, 800670c <__ssputs_r+0xa0>
 80066b2:	6921      	ldr	r1, [r4, #16]
 80066b4:	464a      	mov	r2, r9
 80066b6:	f000 fe7f 	bl	80073b8 <memcpy>
 80066ba:	89a3      	ldrh	r3, [r4, #12]
 80066bc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80066c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066c4:	81a3      	strh	r3, [r4, #12]
 80066c6:	6126      	str	r6, [r4, #16]
 80066c8:	6165      	str	r5, [r4, #20]
 80066ca:	444e      	add	r6, r9
 80066cc:	eba5 0509 	sub.w	r5, r5, r9
 80066d0:	6026      	str	r6, [r4, #0]
 80066d2:	60a5      	str	r5, [r4, #8]
 80066d4:	463e      	mov	r6, r7
 80066d6:	42be      	cmp	r6, r7
 80066d8:	d900      	bls.n	80066dc <__ssputs_r+0x70>
 80066da:	463e      	mov	r6, r7
 80066dc:	6820      	ldr	r0, [r4, #0]
 80066de:	4632      	mov	r2, r6
 80066e0:	4641      	mov	r1, r8
 80066e2:	f000 fe3e 	bl	8007362 <memmove>
 80066e6:	68a3      	ldr	r3, [r4, #8]
 80066e8:	1b9b      	subs	r3, r3, r6
 80066ea:	60a3      	str	r3, [r4, #8]
 80066ec:	6823      	ldr	r3, [r4, #0]
 80066ee:	4433      	add	r3, r6
 80066f0:	6023      	str	r3, [r4, #0]
 80066f2:	2000      	movs	r0, #0
 80066f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066f8:	462a      	mov	r2, r5
 80066fa:	f000 fe6b 	bl	80073d4 <_realloc_r>
 80066fe:	4606      	mov	r6, r0
 8006700:	2800      	cmp	r0, #0
 8006702:	d1e0      	bne.n	80066c6 <__ssputs_r+0x5a>
 8006704:	6921      	ldr	r1, [r4, #16]
 8006706:	4650      	mov	r0, sl
 8006708:	f7ff feb8 	bl	800647c <_free_r>
 800670c:	230c      	movs	r3, #12
 800670e:	f8ca 3000 	str.w	r3, [sl]
 8006712:	89a3      	ldrh	r3, [r4, #12]
 8006714:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006718:	81a3      	strh	r3, [r4, #12]
 800671a:	f04f 30ff 	mov.w	r0, #4294967295
 800671e:	e7e9      	b.n	80066f4 <__ssputs_r+0x88>

08006720 <_svfiprintf_r>:
 8006720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006724:	4698      	mov	r8, r3
 8006726:	898b      	ldrh	r3, [r1, #12]
 8006728:	061b      	lsls	r3, r3, #24
 800672a:	b09d      	sub	sp, #116	; 0x74
 800672c:	4607      	mov	r7, r0
 800672e:	460d      	mov	r5, r1
 8006730:	4614      	mov	r4, r2
 8006732:	d50e      	bpl.n	8006752 <_svfiprintf_r+0x32>
 8006734:	690b      	ldr	r3, [r1, #16]
 8006736:	b963      	cbnz	r3, 8006752 <_svfiprintf_r+0x32>
 8006738:	2140      	movs	r1, #64	; 0x40
 800673a:	f7ff ff0b 	bl	8006554 <_malloc_r>
 800673e:	6028      	str	r0, [r5, #0]
 8006740:	6128      	str	r0, [r5, #16]
 8006742:	b920      	cbnz	r0, 800674e <_svfiprintf_r+0x2e>
 8006744:	230c      	movs	r3, #12
 8006746:	603b      	str	r3, [r7, #0]
 8006748:	f04f 30ff 	mov.w	r0, #4294967295
 800674c:	e0d0      	b.n	80068f0 <_svfiprintf_r+0x1d0>
 800674e:	2340      	movs	r3, #64	; 0x40
 8006750:	616b      	str	r3, [r5, #20]
 8006752:	2300      	movs	r3, #0
 8006754:	9309      	str	r3, [sp, #36]	; 0x24
 8006756:	2320      	movs	r3, #32
 8006758:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800675c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006760:	2330      	movs	r3, #48	; 0x30
 8006762:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006908 <_svfiprintf_r+0x1e8>
 8006766:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800676a:	f04f 0901 	mov.w	r9, #1
 800676e:	4623      	mov	r3, r4
 8006770:	469a      	mov	sl, r3
 8006772:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006776:	b10a      	cbz	r2, 800677c <_svfiprintf_r+0x5c>
 8006778:	2a25      	cmp	r2, #37	; 0x25
 800677a:	d1f9      	bne.n	8006770 <_svfiprintf_r+0x50>
 800677c:	ebba 0b04 	subs.w	fp, sl, r4
 8006780:	d00b      	beq.n	800679a <_svfiprintf_r+0x7a>
 8006782:	465b      	mov	r3, fp
 8006784:	4622      	mov	r2, r4
 8006786:	4629      	mov	r1, r5
 8006788:	4638      	mov	r0, r7
 800678a:	f7ff ff6f 	bl	800666c <__ssputs_r>
 800678e:	3001      	adds	r0, #1
 8006790:	f000 80a9 	beq.w	80068e6 <_svfiprintf_r+0x1c6>
 8006794:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006796:	445a      	add	r2, fp
 8006798:	9209      	str	r2, [sp, #36]	; 0x24
 800679a:	f89a 3000 	ldrb.w	r3, [sl]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	f000 80a1 	beq.w	80068e6 <_svfiprintf_r+0x1c6>
 80067a4:	2300      	movs	r3, #0
 80067a6:	f04f 32ff 	mov.w	r2, #4294967295
 80067aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80067ae:	f10a 0a01 	add.w	sl, sl, #1
 80067b2:	9304      	str	r3, [sp, #16]
 80067b4:	9307      	str	r3, [sp, #28]
 80067b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80067ba:	931a      	str	r3, [sp, #104]	; 0x68
 80067bc:	4654      	mov	r4, sl
 80067be:	2205      	movs	r2, #5
 80067c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067c4:	4850      	ldr	r0, [pc, #320]	; (8006908 <_svfiprintf_r+0x1e8>)
 80067c6:	f7f9 fd13 	bl	80001f0 <memchr>
 80067ca:	9a04      	ldr	r2, [sp, #16]
 80067cc:	b9d8      	cbnz	r0, 8006806 <_svfiprintf_r+0xe6>
 80067ce:	06d0      	lsls	r0, r2, #27
 80067d0:	bf44      	itt	mi
 80067d2:	2320      	movmi	r3, #32
 80067d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067d8:	0711      	lsls	r1, r2, #28
 80067da:	bf44      	itt	mi
 80067dc:	232b      	movmi	r3, #43	; 0x2b
 80067de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067e2:	f89a 3000 	ldrb.w	r3, [sl]
 80067e6:	2b2a      	cmp	r3, #42	; 0x2a
 80067e8:	d015      	beq.n	8006816 <_svfiprintf_r+0xf6>
 80067ea:	9a07      	ldr	r2, [sp, #28]
 80067ec:	4654      	mov	r4, sl
 80067ee:	2000      	movs	r0, #0
 80067f0:	f04f 0c0a 	mov.w	ip, #10
 80067f4:	4621      	mov	r1, r4
 80067f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80067fa:	3b30      	subs	r3, #48	; 0x30
 80067fc:	2b09      	cmp	r3, #9
 80067fe:	d94d      	bls.n	800689c <_svfiprintf_r+0x17c>
 8006800:	b1b0      	cbz	r0, 8006830 <_svfiprintf_r+0x110>
 8006802:	9207      	str	r2, [sp, #28]
 8006804:	e014      	b.n	8006830 <_svfiprintf_r+0x110>
 8006806:	eba0 0308 	sub.w	r3, r0, r8
 800680a:	fa09 f303 	lsl.w	r3, r9, r3
 800680e:	4313      	orrs	r3, r2
 8006810:	9304      	str	r3, [sp, #16]
 8006812:	46a2      	mov	sl, r4
 8006814:	e7d2      	b.n	80067bc <_svfiprintf_r+0x9c>
 8006816:	9b03      	ldr	r3, [sp, #12]
 8006818:	1d19      	adds	r1, r3, #4
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	9103      	str	r1, [sp, #12]
 800681e:	2b00      	cmp	r3, #0
 8006820:	bfbb      	ittet	lt
 8006822:	425b      	neglt	r3, r3
 8006824:	f042 0202 	orrlt.w	r2, r2, #2
 8006828:	9307      	strge	r3, [sp, #28]
 800682a:	9307      	strlt	r3, [sp, #28]
 800682c:	bfb8      	it	lt
 800682e:	9204      	strlt	r2, [sp, #16]
 8006830:	7823      	ldrb	r3, [r4, #0]
 8006832:	2b2e      	cmp	r3, #46	; 0x2e
 8006834:	d10c      	bne.n	8006850 <_svfiprintf_r+0x130>
 8006836:	7863      	ldrb	r3, [r4, #1]
 8006838:	2b2a      	cmp	r3, #42	; 0x2a
 800683a:	d134      	bne.n	80068a6 <_svfiprintf_r+0x186>
 800683c:	9b03      	ldr	r3, [sp, #12]
 800683e:	1d1a      	adds	r2, r3, #4
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	9203      	str	r2, [sp, #12]
 8006844:	2b00      	cmp	r3, #0
 8006846:	bfb8      	it	lt
 8006848:	f04f 33ff 	movlt.w	r3, #4294967295
 800684c:	3402      	adds	r4, #2
 800684e:	9305      	str	r3, [sp, #20]
 8006850:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006918 <_svfiprintf_r+0x1f8>
 8006854:	7821      	ldrb	r1, [r4, #0]
 8006856:	2203      	movs	r2, #3
 8006858:	4650      	mov	r0, sl
 800685a:	f7f9 fcc9 	bl	80001f0 <memchr>
 800685e:	b138      	cbz	r0, 8006870 <_svfiprintf_r+0x150>
 8006860:	9b04      	ldr	r3, [sp, #16]
 8006862:	eba0 000a 	sub.w	r0, r0, sl
 8006866:	2240      	movs	r2, #64	; 0x40
 8006868:	4082      	lsls	r2, r0
 800686a:	4313      	orrs	r3, r2
 800686c:	3401      	adds	r4, #1
 800686e:	9304      	str	r3, [sp, #16]
 8006870:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006874:	4825      	ldr	r0, [pc, #148]	; (800690c <_svfiprintf_r+0x1ec>)
 8006876:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800687a:	2206      	movs	r2, #6
 800687c:	f7f9 fcb8 	bl	80001f0 <memchr>
 8006880:	2800      	cmp	r0, #0
 8006882:	d038      	beq.n	80068f6 <_svfiprintf_r+0x1d6>
 8006884:	4b22      	ldr	r3, [pc, #136]	; (8006910 <_svfiprintf_r+0x1f0>)
 8006886:	bb1b      	cbnz	r3, 80068d0 <_svfiprintf_r+0x1b0>
 8006888:	9b03      	ldr	r3, [sp, #12]
 800688a:	3307      	adds	r3, #7
 800688c:	f023 0307 	bic.w	r3, r3, #7
 8006890:	3308      	adds	r3, #8
 8006892:	9303      	str	r3, [sp, #12]
 8006894:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006896:	4433      	add	r3, r6
 8006898:	9309      	str	r3, [sp, #36]	; 0x24
 800689a:	e768      	b.n	800676e <_svfiprintf_r+0x4e>
 800689c:	fb0c 3202 	mla	r2, ip, r2, r3
 80068a0:	460c      	mov	r4, r1
 80068a2:	2001      	movs	r0, #1
 80068a4:	e7a6      	b.n	80067f4 <_svfiprintf_r+0xd4>
 80068a6:	2300      	movs	r3, #0
 80068a8:	3401      	adds	r4, #1
 80068aa:	9305      	str	r3, [sp, #20]
 80068ac:	4619      	mov	r1, r3
 80068ae:	f04f 0c0a 	mov.w	ip, #10
 80068b2:	4620      	mov	r0, r4
 80068b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80068b8:	3a30      	subs	r2, #48	; 0x30
 80068ba:	2a09      	cmp	r2, #9
 80068bc:	d903      	bls.n	80068c6 <_svfiprintf_r+0x1a6>
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d0c6      	beq.n	8006850 <_svfiprintf_r+0x130>
 80068c2:	9105      	str	r1, [sp, #20]
 80068c4:	e7c4      	b.n	8006850 <_svfiprintf_r+0x130>
 80068c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80068ca:	4604      	mov	r4, r0
 80068cc:	2301      	movs	r3, #1
 80068ce:	e7f0      	b.n	80068b2 <_svfiprintf_r+0x192>
 80068d0:	ab03      	add	r3, sp, #12
 80068d2:	9300      	str	r3, [sp, #0]
 80068d4:	462a      	mov	r2, r5
 80068d6:	4b0f      	ldr	r3, [pc, #60]	; (8006914 <_svfiprintf_r+0x1f4>)
 80068d8:	a904      	add	r1, sp, #16
 80068da:	4638      	mov	r0, r7
 80068dc:	f3af 8000 	nop.w
 80068e0:	1c42      	adds	r2, r0, #1
 80068e2:	4606      	mov	r6, r0
 80068e4:	d1d6      	bne.n	8006894 <_svfiprintf_r+0x174>
 80068e6:	89ab      	ldrh	r3, [r5, #12]
 80068e8:	065b      	lsls	r3, r3, #25
 80068ea:	f53f af2d 	bmi.w	8006748 <_svfiprintf_r+0x28>
 80068ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 80068f0:	b01d      	add	sp, #116	; 0x74
 80068f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068f6:	ab03      	add	r3, sp, #12
 80068f8:	9300      	str	r3, [sp, #0]
 80068fa:	462a      	mov	r2, r5
 80068fc:	4b05      	ldr	r3, [pc, #20]	; (8006914 <_svfiprintf_r+0x1f4>)
 80068fe:	a904      	add	r1, sp, #16
 8006900:	4638      	mov	r0, r7
 8006902:	f000 fa4b 	bl	8006d9c <_printf_i>
 8006906:	e7eb      	b.n	80068e0 <_svfiprintf_r+0x1c0>
 8006908:	080079a4 	.word	0x080079a4
 800690c:	080079ae 	.word	0x080079ae
 8006910:	00000000 	.word	0x00000000
 8006914:	0800666d 	.word	0x0800666d
 8006918:	080079aa 	.word	0x080079aa

0800691c <_sungetc_r>:
 800691c:	b538      	push	{r3, r4, r5, lr}
 800691e:	1c4b      	adds	r3, r1, #1
 8006920:	4614      	mov	r4, r2
 8006922:	d103      	bne.n	800692c <_sungetc_r+0x10>
 8006924:	f04f 35ff 	mov.w	r5, #4294967295
 8006928:	4628      	mov	r0, r5
 800692a:	bd38      	pop	{r3, r4, r5, pc}
 800692c:	8993      	ldrh	r3, [r2, #12]
 800692e:	f023 0320 	bic.w	r3, r3, #32
 8006932:	8193      	strh	r3, [r2, #12]
 8006934:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006936:	6852      	ldr	r2, [r2, #4]
 8006938:	b2cd      	uxtb	r5, r1
 800693a:	b18b      	cbz	r3, 8006960 <_sungetc_r+0x44>
 800693c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800693e:	4293      	cmp	r3, r2
 8006940:	dd08      	ble.n	8006954 <_sungetc_r+0x38>
 8006942:	6823      	ldr	r3, [r4, #0]
 8006944:	1e5a      	subs	r2, r3, #1
 8006946:	6022      	str	r2, [r4, #0]
 8006948:	f803 5c01 	strb.w	r5, [r3, #-1]
 800694c:	6863      	ldr	r3, [r4, #4]
 800694e:	3301      	adds	r3, #1
 8006950:	6063      	str	r3, [r4, #4]
 8006952:	e7e9      	b.n	8006928 <_sungetc_r+0xc>
 8006954:	4621      	mov	r1, r4
 8006956:	f000 fcca 	bl	80072ee <__submore>
 800695a:	2800      	cmp	r0, #0
 800695c:	d0f1      	beq.n	8006942 <_sungetc_r+0x26>
 800695e:	e7e1      	b.n	8006924 <_sungetc_r+0x8>
 8006960:	6921      	ldr	r1, [r4, #16]
 8006962:	6823      	ldr	r3, [r4, #0]
 8006964:	b151      	cbz	r1, 800697c <_sungetc_r+0x60>
 8006966:	4299      	cmp	r1, r3
 8006968:	d208      	bcs.n	800697c <_sungetc_r+0x60>
 800696a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800696e:	42a9      	cmp	r1, r5
 8006970:	d104      	bne.n	800697c <_sungetc_r+0x60>
 8006972:	3b01      	subs	r3, #1
 8006974:	3201      	adds	r2, #1
 8006976:	6023      	str	r3, [r4, #0]
 8006978:	6062      	str	r2, [r4, #4]
 800697a:	e7d5      	b.n	8006928 <_sungetc_r+0xc>
 800697c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8006980:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006984:	6363      	str	r3, [r4, #52]	; 0x34
 8006986:	2303      	movs	r3, #3
 8006988:	63a3      	str	r3, [r4, #56]	; 0x38
 800698a:	4623      	mov	r3, r4
 800698c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8006990:	6023      	str	r3, [r4, #0]
 8006992:	2301      	movs	r3, #1
 8006994:	e7dc      	b.n	8006950 <_sungetc_r+0x34>

08006996 <__ssrefill_r>:
 8006996:	b510      	push	{r4, lr}
 8006998:	460c      	mov	r4, r1
 800699a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800699c:	b169      	cbz	r1, 80069ba <__ssrefill_r+0x24>
 800699e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80069a2:	4299      	cmp	r1, r3
 80069a4:	d001      	beq.n	80069aa <__ssrefill_r+0x14>
 80069a6:	f7ff fd69 	bl	800647c <_free_r>
 80069aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80069ac:	6063      	str	r3, [r4, #4]
 80069ae:	2000      	movs	r0, #0
 80069b0:	6360      	str	r0, [r4, #52]	; 0x34
 80069b2:	b113      	cbz	r3, 80069ba <__ssrefill_r+0x24>
 80069b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80069b6:	6023      	str	r3, [r4, #0]
 80069b8:	bd10      	pop	{r4, pc}
 80069ba:	6923      	ldr	r3, [r4, #16]
 80069bc:	6023      	str	r3, [r4, #0]
 80069be:	2300      	movs	r3, #0
 80069c0:	6063      	str	r3, [r4, #4]
 80069c2:	89a3      	ldrh	r3, [r4, #12]
 80069c4:	f043 0320 	orr.w	r3, r3, #32
 80069c8:	81a3      	strh	r3, [r4, #12]
 80069ca:	f04f 30ff 	mov.w	r0, #4294967295
 80069ce:	e7f3      	b.n	80069b8 <__ssrefill_r+0x22>

080069d0 <__ssvfiscanf_r>:
 80069d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069d4:	460c      	mov	r4, r1
 80069d6:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80069da:	2100      	movs	r1, #0
 80069dc:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80069e0:	49a6      	ldr	r1, [pc, #664]	; (8006c7c <__ssvfiscanf_r+0x2ac>)
 80069e2:	91a0      	str	r1, [sp, #640]	; 0x280
 80069e4:	f10d 0804 	add.w	r8, sp, #4
 80069e8:	49a5      	ldr	r1, [pc, #660]	; (8006c80 <__ssvfiscanf_r+0x2b0>)
 80069ea:	4fa6      	ldr	r7, [pc, #664]	; (8006c84 <__ssvfiscanf_r+0x2b4>)
 80069ec:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8006c88 <__ssvfiscanf_r+0x2b8>
 80069f0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80069f4:	4606      	mov	r6, r0
 80069f6:	91a1      	str	r1, [sp, #644]	; 0x284
 80069f8:	9300      	str	r3, [sp, #0]
 80069fa:	7813      	ldrb	r3, [r2, #0]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	f000 815a 	beq.w	8006cb6 <__ssvfiscanf_r+0x2e6>
 8006a02:	5cf9      	ldrb	r1, [r7, r3]
 8006a04:	f011 0108 	ands.w	r1, r1, #8
 8006a08:	f102 0501 	add.w	r5, r2, #1
 8006a0c:	d019      	beq.n	8006a42 <__ssvfiscanf_r+0x72>
 8006a0e:	6863      	ldr	r3, [r4, #4]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	dd0f      	ble.n	8006a34 <__ssvfiscanf_r+0x64>
 8006a14:	6823      	ldr	r3, [r4, #0]
 8006a16:	781a      	ldrb	r2, [r3, #0]
 8006a18:	5cba      	ldrb	r2, [r7, r2]
 8006a1a:	0712      	lsls	r2, r2, #28
 8006a1c:	d401      	bmi.n	8006a22 <__ssvfiscanf_r+0x52>
 8006a1e:	462a      	mov	r2, r5
 8006a20:	e7eb      	b.n	80069fa <__ssvfiscanf_r+0x2a>
 8006a22:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006a24:	3201      	adds	r2, #1
 8006a26:	9245      	str	r2, [sp, #276]	; 0x114
 8006a28:	6862      	ldr	r2, [r4, #4]
 8006a2a:	3301      	adds	r3, #1
 8006a2c:	3a01      	subs	r2, #1
 8006a2e:	6062      	str	r2, [r4, #4]
 8006a30:	6023      	str	r3, [r4, #0]
 8006a32:	e7ec      	b.n	8006a0e <__ssvfiscanf_r+0x3e>
 8006a34:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006a36:	4621      	mov	r1, r4
 8006a38:	4630      	mov	r0, r6
 8006a3a:	4798      	blx	r3
 8006a3c:	2800      	cmp	r0, #0
 8006a3e:	d0e9      	beq.n	8006a14 <__ssvfiscanf_r+0x44>
 8006a40:	e7ed      	b.n	8006a1e <__ssvfiscanf_r+0x4e>
 8006a42:	2b25      	cmp	r3, #37	; 0x25
 8006a44:	d012      	beq.n	8006a6c <__ssvfiscanf_r+0x9c>
 8006a46:	469a      	mov	sl, r3
 8006a48:	6863      	ldr	r3, [r4, #4]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	f340 8091 	ble.w	8006b72 <__ssvfiscanf_r+0x1a2>
 8006a50:	6822      	ldr	r2, [r4, #0]
 8006a52:	7813      	ldrb	r3, [r2, #0]
 8006a54:	4553      	cmp	r3, sl
 8006a56:	f040 812e 	bne.w	8006cb6 <__ssvfiscanf_r+0x2e6>
 8006a5a:	6863      	ldr	r3, [r4, #4]
 8006a5c:	3b01      	subs	r3, #1
 8006a5e:	6063      	str	r3, [r4, #4]
 8006a60:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8006a62:	3201      	adds	r2, #1
 8006a64:	3301      	adds	r3, #1
 8006a66:	6022      	str	r2, [r4, #0]
 8006a68:	9345      	str	r3, [sp, #276]	; 0x114
 8006a6a:	e7d8      	b.n	8006a1e <__ssvfiscanf_r+0x4e>
 8006a6c:	9141      	str	r1, [sp, #260]	; 0x104
 8006a6e:	9143      	str	r1, [sp, #268]	; 0x10c
 8006a70:	7853      	ldrb	r3, [r2, #1]
 8006a72:	2b2a      	cmp	r3, #42	; 0x2a
 8006a74:	bf02      	ittt	eq
 8006a76:	2310      	moveq	r3, #16
 8006a78:	1c95      	addeq	r5, r2, #2
 8006a7a:	9341      	streq	r3, [sp, #260]	; 0x104
 8006a7c:	220a      	movs	r2, #10
 8006a7e:	46aa      	mov	sl, r5
 8006a80:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8006a84:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8006a88:	2b09      	cmp	r3, #9
 8006a8a:	d91c      	bls.n	8006ac6 <__ssvfiscanf_r+0xf6>
 8006a8c:	487e      	ldr	r0, [pc, #504]	; (8006c88 <__ssvfiscanf_r+0x2b8>)
 8006a8e:	2203      	movs	r2, #3
 8006a90:	f7f9 fbae 	bl	80001f0 <memchr>
 8006a94:	b138      	cbz	r0, 8006aa6 <__ssvfiscanf_r+0xd6>
 8006a96:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006a98:	eba0 0009 	sub.w	r0, r0, r9
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	4083      	lsls	r3, r0
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	9341      	str	r3, [sp, #260]	; 0x104
 8006aa4:	4655      	mov	r5, sl
 8006aa6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006aaa:	2b78      	cmp	r3, #120	; 0x78
 8006aac:	d806      	bhi.n	8006abc <__ssvfiscanf_r+0xec>
 8006aae:	2b57      	cmp	r3, #87	; 0x57
 8006ab0:	d810      	bhi.n	8006ad4 <__ssvfiscanf_r+0x104>
 8006ab2:	2b25      	cmp	r3, #37	; 0x25
 8006ab4:	d0c7      	beq.n	8006a46 <__ssvfiscanf_r+0x76>
 8006ab6:	d857      	bhi.n	8006b68 <__ssvfiscanf_r+0x198>
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d065      	beq.n	8006b88 <__ssvfiscanf_r+0x1b8>
 8006abc:	2303      	movs	r3, #3
 8006abe:	9347      	str	r3, [sp, #284]	; 0x11c
 8006ac0:	230a      	movs	r3, #10
 8006ac2:	9342      	str	r3, [sp, #264]	; 0x108
 8006ac4:	e076      	b.n	8006bb4 <__ssvfiscanf_r+0x1e4>
 8006ac6:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8006ac8:	fb02 1103 	mla	r1, r2, r3, r1
 8006acc:	3930      	subs	r1, #48	; 0x30
 8006ace:	9143      	str	r1, [sp, #268]	; 0x10c
 8006ad0:	4655      	mov	r5, sl
 8006ad2:	e7d4      	b.n	8006a7e <__ssvfiscanf_r+0xae>
 8006ad4:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8006ad8:	2a20      	cmp	r2, #32
 8006ada:	d8ef      	bhi.n	8006abc <__ssvfiscanf_r+0xec>
 8006adc:	a101      	add	r1, pc, #4	; (adr r1, 8006ae4 <__ssvfiscanf_r+0x114>)
 8006ade:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006ae2:	bf00      	nop
 8006ae4:	08006b97 	.word	0x08006b97
 8006ae8:	08006abd 	.word	0x08006abd
 8006aec:	08006abd 	.word	0x08006abd
 8006af0:	08006bf5 	.word	0x08006bf5
 8006af4:	08006abd 	.word	0x08006abd
 8006af8:	08006abd 	.word	0x08006abd
 8006afc:	08006abd 	.word	0x08006abd
 8006b00:	08006abd 	.word	0x08006abd
 8006b04:	08006abd 	.word	0x08006abd
 8006b08:	08006abd 	.word	0x08006abd
 8006b0c:	08006abd 	.word	0x08006abd
 8006b10:	08006c0b 	.word	0x08006c0b
 8006b14:	08006bf1 	.word	0x08006bf1
 8006b18:	08006b6f 	.word	0x08006b6f
 8006b1c:	08006b6f 	.word	0x08006b6f
 8006b20:	08006b6f 	.word	0x08006b6f
 8006b24:	08006abd 	.word	0x08006abd
 8006b28:	08006bad 	.word	0x08006bad
 8006b2c:	08006abd 	.word	0x08006abd
 8006b30:	08006abd 	.word	0x08006abd
 8006b34:	08006abd 	.word	0x08006abd
 8006b38:	08006abd 	.word	0x08006abd
 8006b3c:	08006c1b 	.word	0x08006c1b
 8006b40:	08006be9 	.word	0x08006be9
 8006b44:	08006b8f 	.word	0x08006b8f
 8006b48:	08006abd 	.word	0x08006abd
 8006b4c:	08006abd 	.word	0x08006abd
 8006b50:	08006c17 	.word	0x08006c17
 8006b54:	08006abd 	.word	0x08006abd
 8006b58:	08006bf1 	.word	0x08006bf1
 8006b5c:	08006abd 	.word	0x08006abd
 8006b60:	08006abd 	.word	0x08006abd
 8006b64:	08006b97 	.word	0x08006b97
 8006b68:	3b45      	subs	r3, #69	; 0x45
 8006b6a:	2b02      	cmp	r3, #2
 8006b6c:	d8a6      	bhi.n	8006abc <__ssvfiscanf_r+0xec>
 8006b6e:	2305      	movs	r3, #5
 8006b70:	e01f      	b.n	8006bb2 <__ssvfiscanf_r+0x1e2>
 8006b72:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006b74:	4621      	mov	r1, r4
 8006b76:	4630      	mov	r0, r6
 8006b78:	4798      	blx	r3
 8006b7a:	2800      	cmp	r0, #0
 8006b7c:	f43f af68 	beq.w	8006a50 <__ssvfiscanf_r+0x80>
 8006b80:	9844      	ldr	r0, [sp, #272]	; 0x110
 8006b82:	2800      	cmp	r0, #0
 8006b84:	f040 808d 	bne.w	8006ca2 <__ssvfiscanf_r+0x2d2>
 8006b88:	f04f 30ff 	mov.w	r0, #4294967295
 8006b8c:	e08f      	b.n	8006cae <__ssvfiscanf_r+0x2de>
 8006b8e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006b90:	f042 0220 	orr.w	r2, r2, #32
 8006b94:	9241      	str	r2, [sp, #260]	; 0x104
 8006b96:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006b98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b9c:	9241      	str	r2, [sp, #260]	; 0x104
 8006b9e:	2210      	movs	r2, #16
 8006ba0:	2b6f      	cmp	r3, #111	; 0x6f
 8006ba2:	9242      	str	r2, [sp, #264]	; 0x108
 8006ba4:	bf34      	ite	cc
 8006ba6:	2303      	movcc	r3, #3
 8006ba8:	2304      	movcs	r3, #4
 8006baa:	e002      	b.n	8006bb2 <__ssvfiscanf_r+0x1e2>
 8006bac:	2300      	movs	r3, #0
 8006bae:	9342      	str	r3, [sp, #264]	; 0x108
 8006bb0:	2303      	movs	r3, #3
 8006bb2:	9347      	str	r3, [sp, #284]	; 0x11c
 8006bb4:	6863      	ldr	r3, [r4, #4]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	dd3d      	ble.n	8006c36 <__ssvfiscanf_r+0x266>
 8006bba:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006bbc:	0659      	lsls	r1, r3, #25
 8006bbe:	d404      	bmi.n	8006bca <__ssvfiscanf_r+0x1fa>
 8006bc0:	6823      	ldr	r3, [r4, #0]
 8006bc2:	781a      	ldrb	r2, [r3, #0]
 8006bc4:	5cba      	ldrb	r2, [r7, r2]
 8006bc6:	0712      	lsls	r2, r2, #28
 8006bc8:	d43c      	bmi.n	8006c44 <__ssvfiscanf_r+0x274>
 8006bca:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8006bcc:	2b02      	cmp	r3, #2
 8006bce:	dc4b      	bgt.n	8006c68 <__ssvfiscanf_r+0x298>
 8006bd0:	466b      	mov	r3, sp
 8006bd2:	4622      	mov	r2, r4
 8006bd4:	a941      	add	r1, sp, #260	; 0x104
 8006bd6:	4630      	mov	r0, r6
 8006bd8:	f000 fa02 	bl	8006fe0 <_scanf_chars>
 8006bdc:	2801      	cmp	r0, #1
 8006bde:	d06a      	beq.n	8006cb6 <__ssvfiscanf_r+0x2e6>
 8006be0:	2802      	cmp	r0, #2
 8006be2:	f47f af1c 	bne.w	8006a1e <__ssvfiscanf_r+0x4e>
 8006be6:	e7cb      	b.n	8006b80 <__ssvfiscanf_r+0x1b0>
 8006be8:	2308      	movs	r3, #8
 8006bea:	9342      	str	r3, [sp, #264]	; 0x108
 8006bec:	2304      	movs	r3, #4
 8006bee:	e7e0      	b.n	8006bb2 <__ssvfiscanf_r+0x1e2>
 8006bf0:	220a      	movs	r2, #10
 8006bf2:	e7d5      	b.n	8006ba0 <__ssvfiscanf_r+0x1d0>
 8006bf4:	4629      	mov	r1, r5
 8006bf6:	4640      	mov	r0, r8
 8006bf8:	f000 fb40 	bl	800727c <__sccl>
 8006bfc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006bfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c02:	9341      	str	r3, [sp, #260]	; 0x104
 8006c04:	4605      	mov	r5, r0
 8006c06:	2301      	movs	r3, #1
 8006c08:	e7d3      	b.n	8006bb2 <__ssvfiscanf_r+0x1e2>
 8006c0a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006c0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c10:	9341      	str	r3, [sp, #260]	; 0x104
 8006c12:	2300      	movs	r3, #0
 8006c14:	e7cd      	b.n	8006bb2 <__ssvfiscanf_r+0x1e2>
 8006c16:	2302      	movs	r3, #2
 8006c18:	e7cb      	b.n	8006bb2 <__ssvfiscanf_r+0x1e2>
 8006c1a:	9841      	ldr	r0, [sp, #260]	; 0x104
 8006c1c:	06c3      	lsls	r3, r0, #27
 8006c1e:	f53f aefe 	bmi.w	8006a1e <__ssvfiscanf_r+0x4e>
 8006c22:	9b00      	ldr	r3, [sp, #0]
 8006c24:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006c26:	1d19      	adds	r1, r3, #4
 8006c28:	9100      	str	r1, [sp, #0]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	07c0      	lsls	r0, r0, #31
 8006c2e:	bf4c      	ite	mi
 8006c30:	801a      	strhmi	r2, [r3, #0]
 8006c32:	601a      	strpl	r2, [r3, #0]
 8006c34:	e6f3      	b.n	8006a1e <__ssvfiscanf_r+0x4e>
 8006c36:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006c38:	4621      	mov	r1, r4
 8006c3a:	4630      	mov	r0, r6
 8006c3c:	4798      	blx	r3
 8006c3e:	2800      	cmp	r0, #0
 8006c40:	d0bb      	beq.n	8006bba <__ssvfiscanf_r+0x1ea>
 8006c42:	e79d      	b.n	8006b80 <__ssvfiscanf_r+0x1b0>
 8006c44:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006c46:	3201      	adds	r2, #1
 8006c48:	9245      	str	r2, [sp, #276]	; 0x114
 8006c4a:	6862      	ldr	r2, [r4, #4]
 8006c4c:	3a01      	subs	r2, #1
 8006c4e:	2a00      	cmp	r2, #0
 8006c50:	6062      	str	r2, [r4, #4]
 8006c52:	dd02      	ble.n	8006c5a <__ssvfiscanf_r+0x28a>
 8006c54:	3301      	adds	r3, #1
 8006c56:	6023      	str	r3, [r4, #0]
 8006c58:	e7b2      	b.n	8006bc0 <__ssvfiscanf_r+0x1f0>
 8006c5a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006c5c:	4621      	mov	r1, r4
 8006c5e:	4630      	mov	r0, r6
 8006c60:	4798      	blx	r3
 8006c62:	2800      	cmp	r0, #0
 8006c64:	d0ac      	beq.n	8006bc0 <__ssvfiscanf_r+0x1f0>
 8006c66:	e78b      	b.n	8006b80 <__ssvfiscanf_r+0x1b0>
 8006c68:	2b04      	cmp	r3, #4
 8006c6a:	dc0f      	bgt.n	8006c8c <__ssvfiscanf_r+0x2bc>
 8006c6c:	466b      	mov	r3, sp
 8006c6e:	4622      	mov	r2, r4
 8006c70:	a941      	add	r1, sp, #260	; 0x104
 8006c72:	4630      	mov	r0, r6
 8006c74:	f000 fa0e 	bl	8007094 <_scanf_i>
 8006c78:	e7b0      	b.n	8006bdc <__ssvfiscanf_r+0x20c>
 8006c7a:	bf00      	nop
 8006c7c:	0800691d 	.word	0x0800691d
 8006c80:	08006997 	.word	0x08006997
 8006c84:	080079f3 	.word	0x080079f3
 8006c88:	080079aa 	.word	0x080079aa
 8006c8c:	4b0b      	ldr	r3, [pc, #44]	; (8006cbc <__ssvfiscanf_r+0x2ec>)
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	f43f aec5 	beq.w	8006a1e <__ssvfiscanf_r+0x4e>
 8006c94:	466b      	mov	r3, sp
 8006c96:	4622      	mov	r2, r4
 8006c98:	a941      	add	r1, sp, #260	; 0x104
 8006c9a:	4630      	mov	r0, r6
 8006c9c:	f3af 8000 	nop.w
 8006ca0:	e79c      	b.n	8006bdc <__ssvfiscanf_r+0x20c>
 8006ca2:	89a3      	ldrh	r3, [r4, #12]
 8006ca4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006ca8:	bf18      	it	ne
 8006caa:	f04f 30ff 	movne.w	r0, #4294967295
 8006cae:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8006cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cb6:	9844      	ldr	r0, [sp, #272]	; 0x110
 8006cb8:	e7f9      	b.n	8006cae <__ssvfiscanf_r+0x2de>
 8006cba:	bf00      	nop
 8006cbc:	00000000 	.word	0x00000000

08006cc0 <_printf_common>:
 8006cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cc4:	4616      	mov	r6, r2
 8006cc6:	4699      	mov	r9, r3
 8006cc8:	688a      	ldr	r2, [r1, #8]
 8006cca:	690b      	ldr	r3, [r1, #16]
 8006ccc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	bfb8      	it	lt
 8006cd4:	4613      	movlt	r3, r2
 8006cd6:	6033      	str	r3, [r6, #0]
 8006cd8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006cdc:	4607      	mov	r7, r0
 8006cde:	460c      	mov	r4, r1
 8006ce0:	b10a      	cbz	r2, 8006ce6 <_printf_common+0x26>
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	6033      	str	r3, [r6, #0]
 8006ce6:	6823      	ldr	r3, [r4, #0]
 8006ce8:	0699      	lsls	r1, r3, #26
 8006cea:	bf42      	ittt	mi
 8006cec:	6833      	ldrmi	r3, [r6, #0]
 8006cee:	3302      	addmi	r3, #2
 8006cf0:	6033      	strmi	r3, [r6, #0]
 8006cf2:	6825      	ldr	r5, [r4, #0]
 8006cf4:	f015 0506 	ands.w	r5, r5, #6
 8006cf8:	d106      	bne.n	8006d08 <_printf_common+0x48>
 8006cfa:	f104 0a19 	add.w	sl, r4, #25
 8006cfe:	68e3      	ldr	r3, [r4, #12]
 8006d00:	6832      	ldr	r2, [r6, #0]
 8006d02:	1a9b      	subs	r3, r3, r2
 8006d04:	42ab      	cmp	r3, r5
 8006d06:	dc26      	bgt.n	8006d56 <_printf_common+0x96>
 8006d08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006d0c:	1e13      	subs	r3, r2, #0
 8006d0e:	6822      	ldr	r2, [r4, #0]
 8006d10:	bf18      	it	ne
 8006d12:	2301      	movne	r3, #1
 8006d14:	0692      	lsls	r2, r2, #26
 8006d16:	d42b      	bmi.n	8006d70 <_printf_common+0xb0>
 8006d18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d1c:	4649      	mov	r1, r9
 8006d1e:	4638      	mov	r0, r7
 8006d20:	47c0      	blx	r8
 8006d22:	3001      	adds	r0, #1
 8006d24:	d01e      	beq.n	8006d64 <_printf_common+0xa4>
 8006d26:	6823      	ldr	r3, [r4, #0]
 8006d28:	6922      	ldr	r2, [r4, #16]
 8006d2a:	f003 0306 	and.w	r3, r3, #6
 8006d2e:	2b04      	cmp	r3, #4
 8006d30:	bf02      	ittt	eq
 8006d32:	68e5      	ldreq	r5, [r4, #12]
 8006d34:	6833      	ldreq	r3, [r6, #0]
 8006d36:	1aed      	subeq	r5, r5, r3
 8006d38:	68a3      	ldr	r3, [r4, #8]
 8006d3a:	bf0c      	ite	eq
 8006d3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d40:	2500      	movne	r5, #0
 8006d42:	4293      	cmp	r3, r2
 8006d44:	bfc4      	itt	gt
 8006d46:	1a9b      	subgt	r3, r3, r2
 8006d48:	18ed      	addgt	r5, r5, r3
 8006d4a:	2600      	movs	r6, #0
 8006d4c:	341a      	adds	r4, #26
 8006d4e:	42b5      	cmp	r5, r6
 8006d50:	d11a      	bne.n	8006d88 <_printf_common+0xc8>
 8006d52:	2000      	movs	r0, #0
 8006d54:	e008      	b.n	8006d68 <_printf_common+0xa8>
 8006d56:	2301      	movs	r3, #1
 8006d58:	4652      	mov	r2, sl
 8006d5a:	4649      	mov	r1, r9
 8006d5c:	4638      	mov	r0, r7
 8006d5e:	47c0      	blx	r8
 8006d60:	3001      	adds	r0, #1
 8006d62:	d103      	bne.n	8006d6c <_printf_common+0xac>
 8006d64:	f04f 30ff 	mov.w	r0, #4294967295
 8006d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d6c:	3501      	adds	r5, #1
 8006d6e:	e7c6      	b.n	8006cfe <_printf_common+0x3e>
 8006d70:	18e1      	adds	r1, r4, r3
 8006d72:	1c5a      	adds	r2, r3, #1
 8006d74:	2030      	movs	r0, #48	; 0x30
 8006d76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006d7a:	4422      	add	r2, r4
 8006d7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006d80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d84:	3302      	adds	r3, #2
 8006d86:	e7c7      	b.n	8006d18 <_printf_common+0x58>
 8006d88:	2301      	movs	r3, #1
 8006d8a:	4622      	mov	r2, r4
 8006d8c:	4649      	mov	r1, r9
 8006d8e:	4638      	mov	r0, r7
 8006d90:	47c0      	blx	r8
 8006d92:	3001      	adds	r0, #1
 8006d94:	d0e6      	beq.n	8006d64 <_printf_common+0xa4>
 8006d96:	3601      	adds	r6, #1
 8006d98:	e7d9      	b.n	8006d4e <_printf_common+0x8e>
	...

08006d9c <_printf_i>:
 8006d9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006da0:	7e0f      	ldrb	r7, [r1, #24]
 8006da2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006da4:	2f78      	cmp	r7, #120	; 0x78
 8006da6:	4691      	mov	r9, r2
 8006da8:	4680      	mov	r8, r0
 8006daa:	460c      	mov	r4, r1
 8006dac:	469a      	mov	sl, r3
 8006dae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006db2:	d807      	bhi.n	8006dc4 <_printf_i+0x28>
 8006db4:	2f62      	cmp	r7, #98	; 0x62
 8006db6:	d80a      	bhi.n	8006dce <_printf_i+0x32>
 8006db8:	2f00      	cmp	r7, #0
 8006dba:	f000 80d4 	beq.w	8006f66 <_printf_i+0x1ca>
 8006dbe:	2f58      	cmp	r7, #88	; 0x58
 8006dc0:	f000 80c0 	beq.w	8006f44 <_printf_i+0x1a8>
 8006dc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006dc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006dcc:	e03a      	b.n	8006e44 <_printf_i+0xa8>
 8006dce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006dd2:	2b15      	cmp	r3, #21
 8006dd4:	d8f6      	bhi.n	8006dc4 <_printf_i+0x28>
 8006dd6:	a101      	add	r1, pc, #4	; (adr r1, 8006ddc <_printf_i+0x40>)
 8006dd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ddc:	08006e35 	.word	0x08006e35
 8006de0:	08006e49 	.word	0x08006e49
 8006de4:	08006dc5 	.word	0x08006dc5
 8006de8:	08006dc5 	.word	0x08006dc5
 8006dec:	08006dc5 	.word	0x08006dc5
 8006df0:	08006dc5 	.word	0x08006dc5
 8006df4:	08006e49 	.word	0x08006e49
 8006df8:	08006dc5 	.word	0x08006dc5
 8006dfc:	08006dc5 	.word	0x08006dc5
 8006e00:	08006dc5 	.word	0x08006dc5
 8006e04:	08006dc5 	.word	0x08006dc5
 8006e08:	08006f4d 	.word	0x08006f4d
 8006e0c:	08006e75 	.word	0x08006e75
 8006e10:	08006f07 	.word	0x08006f07
 8006e14:	08006dc5 	.word	0x08006dc5
 8006e18:	08006dc5 	.word	0x08006dc5
 8006e1c:	08006f6f 	.word	0x08006f6f
 8006e20:	08006dc5 	.word	0x08006dc5
 8006e24:	08006e75 	.word	0x08006e75
 8006e28:	08006dc5 	.word	0x08006dc5
 8006e2c:	08006dc5 	.word	0x08006dc5
 8006e30:	08006f0f 	.word	0x08006f0f
 8006e34:	682b      	ldr	r3, [r5, #0]
 8006e36:	1d1a      	adds	r2, r3, #4
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	602a      	str	r2, [r5, #0]
 8006e3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e44:	2301      	movs	r3, #1
 8006e46:	e09f      	b.n	8006f88 <_printf_i+0x1ec>
 8006e48:	6820      	ldr	r0, [r4, #0]
 8006e4a:	682b      	ldr	r3, [r5, #0]
 8006e4c:	0607      	lsls	r7, r0, #24
 8006e4e:	f103 0104 	add.w	r1, r3, #4
 8006e52:	6029      	str	r1, [r5, #0]
 8006e54:	d501      	bpl.n	8006e5a <_printf_i+0xbe>
 8006e56:	681e      	ldr	r6, [r3, #0]
 8006e58:	e003      	b.n	8006e62 <_printf_i+0xc6>
 8006e5a:	0646      	lsls	r6, r0, #25
 8006e5c:	d5fb      	bpl.n	8006e56 <_printf_i+0xba>
 8006e5e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006e62:	2e00      	cmp	r6, #0
 8006e64:	da03      	bge.n	8006e6e <_printf_i+0xd2>
 8006e66:	232d      	movs	r3, #45	; 0x2d
 8006e68:	4276      	negs	r6, r6
 8006e6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e6e:	485a      	ldr	r0, [pc, #360]	; (8006fd8 <_printf_i+0x23c>)
 8006e70:	230a      	movs	r3, #10
 8006e72:	e012      	b.n	8006e9a <_printf_i+0xfe>
 8006e74:	682b      	ldr	r3, [r5, #0]
 8006e76:	6820      	ldr	r0, [r4, #0]
 8006e78:	1d19      	adds	r1, r3, #4
 8006e7a:	6029      	str	r1, [r5, #0]
 8006e7c:	0605      	lsls	r5, r0, #24
 8006e7e:	d501      	bpl.n	8006e84 <_printf_i+0xe8>
 8006e80:	681e      	ldr	r6, [r3, #0]
 8006e82:	e002      	b.n	8006e8a <_printf_i+0xee>
 8006e84:	0641      	lsls	r1, r0, #25
 8006e86:	d5fb      	bpl.n	8006e80 <_printf_i+0xe4>
 8006e88:	881e      	ldrh	r6, [r3, #0]
 8006e8a:	4853      	ldr	r0, [pc, #332]	; (8006fd8 <_printf_i+0x23c>)
 8006e8c:	2f6f      	cmp	r7, #111	; 0x6f
 8006e8e:	bf0c      	ite	eq
 8006e90:	2308      	moveq	r3, #8
 8006e92:	230a      	movne	r3, #10
 8006e94:	2100      	movs	r1, #0
 8006e96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006e9a:	6865      	ldr	r5, [r4, #4]
 8006e9c:	60a5      	str	r5, [r4, #8]
 8006e9e:	2d00      	cmp	r5, #0
 8006ea0:	bfa2      	ittt	ge
 8006ea2:	6821      	ldrge	r1, [r4, #0]
 8006ea4:	f021 0104 	bicge.w	r1, r1, #4
 8006ea8:	6021      	strge	r1, [r4, #0]
 8006eaa:	b90e      	cbnz	r6, 8006eb0 <_printf_i+0x114>
 8006eac:	2d00      	cmp	r5, #0
 8006eae:	d04b      	beq.n	8006f48 <_printf_i+0x1ac>
 8006eb0:	4615      	mov	r5, r2
 8006eb2:	fbb6 f1f3 	udiv	r1, r6, r3
 8006eb6:	fb03 6711 	mls	r7, r3, r1, r6
 8006eba:	5dc7      	ldrb	r7, [r0, r7]
 8006ebc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006ec0:	4637      	mov	r7, r6
 8006ec2:	42bb      	cmp	r3, r7
 8006ec4:	460e      	mov	r6, r1
 8006ec6:	d9f4      	bls.n	8006eb2 <_printf_i+0x116>
 8006ec8:	2b08      	cmp	r3, #8
 8006eca:	d10b      	bne.n	8006ee4 <_printf_i+0x148>
 8006ecc:	6823      	ldr	r3, [r4, #0]
 8006ece:	07de      	lsls	r6, r3, #31
 8006ed0:	d508      	bpl.n	8006ee4 <_printf_i+0x148>
 8006ed2:	6923      	ldr	r3, [r4, #16]
 8006ed4:	6861      	ldr	r1, [r4, #4]
 8006ed6:	4299      	cmp	r1, r3
 8006ed8:	bfde      	ittt	le
 8006eda:	2330      	movle	r3, #48	; 0x30
 8006edc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006ee0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006ee4:	1b52      	subs	r2, r2, r5
 8006ee6:	6122      	str	r2, [r4, #16]
 8006ee8:	f8cd a000 	str.w	sl, [sp]
 8006eec:	464b      	mov	r3, r9
 8006eee:	aa03      	add	r2, sp, #12
 8006ef0:	4621      	mov	r1, r4
 8006ef2:	4640      	mov	r0, r8
 8006ef4:	f7ff fee4 	bl	8006cc0 <_printf_common>
 8006ef8:	3001      	adds	r0, #1
 8006efa:	d14a      	bne.n	8006f92 <_printf_i+0x1f6>
 8006efc:	f04f 30ff 	mov.w	r0, #4294967295
 8006f00:	b004      	add	sp, #16
 8006f02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f06:	6823      	ldr	r3, [r4, #0]
 8006f08:	f043 0320 	orr.w	r3, r3, #32
 8006f0c:	6023      	str	r3, [r4, #0]
 8006f0e:	4833      	ldr	r0, [pc, #204]	; (8006fdc <_printf_i+0x240>)
 8006f10:	2778      	movs	r7, #120	; 0x78
 8006f12:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006f16:	6823      	ldr	r3, [r4, #0]
 8006f18:	6829      	ldr	r1, [r5, #0]
 8006f1a:	061f      	lsls	r7, r3, #24
 8006f1c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006f20:	d402      	bmi.n	8006f28 <_printf_i+0x18c>
 8006f22:	065f      	lsls	r7, r3, #25
 8006f24:	bf48      	it	mi
 8006f26:	b2b6      	uxthmi	r6, r6
 8006f28:	07df      	lsls	r7, r3, #31
 8006f2a:	bf48      	it	mi
 8006f2c:	f043 0320 	orrmi.w	r3, r3, #32
 8006f30:	6029      	str	r1, [r5, #0]
 8006f32:	bf48      	it	mi
 8006f34:	6023      	strmi	r3, [r4, #0]
 8006f36:	b91e      	cbnz	r6, 8006f40 <_printf_i+0x1a4>
 8006f38:	6823      	ldr	r3, [r4, #0]
 8006f3a:	f023 0320 	bic.w	r3, r3, #32
 8006f3e:	6023      	str	r3, [r4, #0]
 8006f40:	2310      	movs	r3, #16
 8006f42:	e7a7      	b.n	8006e94 <_printf_i+0xf8>
 8006f44:	4824      	ldr	r0, [pc, #144]	; (8006fd8 <_printf_i+0x23c>)
 8006f46:	e7e4      	b.n	8006f12 <_printf_i+0x176>
 8006f48:	4615      	mov	r5, r2
 8006f4a:	e7bd      	b.n	8006ec8 <_printf_i+0x12c>
 8006f4c:	682b      	ldr	r3, [r5, #0]
 8006f4e:	6826      	ldr	r6, [r4, #0]
 8006f50:	6961      	ldr	r1, [r4, #20]
 8006f52:	1d18      	adds	r0, r3, #4
 8006f54:	6028      	str	r0, [r5, #0]
 8006f56:	0635      	lsls	r5, r6, #24
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	d501      	bpl.n	8006f60 <_printf_i+0x1c4>
 8006f5c:	6019      	str	r1, [r3, #0]
 8006f5e:	e002      	b.n	8006f66 <_printf_i+0x1ca>
 8006f60:	0670      	lsls	r0, r6, #25
 8006f62:	d5fb      	bpl.n	8006f5c <_printf_i+0x1c0>
 8006f64:	8019      	strh	r1, [r3, #0]
 8006f66:	2300      	movs	r3, #0
 8006f68:	6123      	str	r3, [r4, #16]
 8006f6a:	4615      	mov	r5, r2
 8006f6c:	e7bc      	b.n	8006ee8 <_printf_i+0x14c>
 8006f6e:	682b      	ldr	r3, [r5, #0]
 8006f70:	1d1a      	adds	r2, r3, #4
 8006f72:	602a      	str	r2, [r5, #0]
 8006f74:	681d      	ldr	r5, [r3, #0]
 8006f76:	6862      	ldr	r2, [r4, #4]
 8006f78:	2100      	movs	r1, #0
 8006f7a:	4628      	mov	r0, r5
 8006f7c:	f7f9 f938 	bl	80001f0 <memchr>
 8006f80:	b108      	cbz	r0, 8006f86 <_printf_i+0x1ea>
 8006f82:	1b40      	subs	r0, r0, r5
 8006f84:	6060      	str	r0, [r4, #4]
 8006f86:	6863      	ldr	r3, [r4, #4]
 8006f88:	6123      	str	r3, [r4, #16]
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f90:	e7aa      	b.n	8006ee8 <_printf_i+0x14c>
 8006f92:	6923      	ldr	r3, [r4, #16]
 8006f94:	462a      	mov	r2, r5
 8006f96:	4649      	mov	r1, r9
 8006f98:	4640      	mov	r0, r8
 8006f9a:	47d0      	blx	sl
 8006f9c:	3001      	adds	r0, #1
 8006f9e:	d0ad      	beq.n	8006efc <_printf_i+0x160>
 8006fa0:	6823      	ldr	r3, [r4, #0]
 8006fa2:	079b      	lsls	r3, r3, #30
 8006fa4:	d413      	bmi.n	8006fce <_printf_i+0x232>
 8006fa6:	68e0      	ldr	r0, [r4, #12]
 8006fa8:	9b03      	ldr	r3, [sp, #12]
 8006faa:	4298      	cmp	r0, r3
 8006fac:	bfb8      	it	lt
 8006fae:	4618      	movlt	r0, r3
 8006fb0:	e7a6      	b.n	8006f00 <_printf_i+0x164>
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	4632      	mov	r2, r6
 8006fb6:	4649      	mov	r1, r9
 8006fb8:	4640      	mov	r0, r8
 8006fba:	47d0      	blx	sl
 8006fbc:	3001      	adds	r0, #1
 8006fbe:	d09d      	beq.n	8006efc <_printf_i+0x160>
 8006fc0:	3501      	adds	r5, #1
 8006fc2:	68e3      	ldr	r3, [r4, #12]
 8006fc4:	9903      	ldr	r1, [sp, #12]
 8006fc6:	1a5b      	subs	r3, r3, r1
 8006fc8:	42ab      	cmp	r3, r5
 8006fca:	dcf2      	bgt.n	8006fb2 <_printf_i+0x216>
 8006fcc:	e7eb      	b.n	8006fa6 <_printf_i+0x20a>
 8006fce:	2500      	movs	r5, #0
 8006fd0:	f104 0619 	add.w	r6, r4, #25
 8006fd4:	e7f5      	b.n	8006fc2 <_printf_i+0x226>
 8006fd6:	bf00      	nop
 8006fd8:	080079b5 	.word	0x080079b5
 8006fdc:	080079c6 	.word	0x080079c6

08006fe0 <_scanf_chars>:
 8006fe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fe4:	4615      	mov	r5, r2
 8006fe6:	688a      	ldr	r2, [r1, #8]
 8006fe8:	4680      	mov	r8, r0
 8006fea:	460c      	mov	r4, r1
 8006fec:	b932      	cbnz	r2, 8006ffc <_scanf_chars+0x1c>
 8006fee:	698a      	ldr	r2, [r1, #24]
 8006ff0:	2a00      	cmp	r2, #0
 8006ff2:	bf0c      	ite	eq
 8006ff4:	2201      	moveq	r2, #1
 8006ff6:	f04f 32ff 	movne.w	r2, #4294967295
 8006ffa:	608a      	str	r2, [r1, #8]
 8006ffc:	6822      	ldr	r2, [r4, #0]
 8006ffe:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8007090 <_scanf_chars+0xb0>
 8007002:	06d1      	lsls	r1, r2, #27
 8007004:	bf5f      	itttt	pl
 8007006:	681a      	ldrpl	r2, [r3, #0]
 8007008:	1d11      	addpl	r1, r2, #4
 800700a:	6019      	strpl	r1, [r3, #0]
 800700c:	6816      	ldrpl	r6, [r2, #0]
 800700e:	2700      	movs	r7, #0
 8007010:	69a0      	ldr	r0, [r4, #24]
 8007012:	b188      	cbz	r0, 8007038 <_scanf_chars+0x58>
 8007014:	2801      	cmp	r0, #1
 8007016:	d107      	bne.n	8007028 <_scanf_chars+0x48>
 8007018:	682a      	ldr	r2, [r5, #0]
 800701a:	7811      	ldrb	r1, [r2, #0]
 800701c:	6962      	ldr	r2, [r4, #20]
 800701e:	5c52      	ldrb	r2, [r2, r1]
 8007020:	b952      	cbnz	r2, 8007038 <_scanf_chars+0x58>
 8007022:	2f00      	cmp	r7, #0
 8007024:	d031      	beq.n	800708a <_scanf_chars+0xaa>
 8007026:	e022      	b.n	800706e <_scanf_chars+0x8e>
 8007028:	2802      	cmp	r0, #2
 800702a:	d120      	bne.n	800706e <_scanf_chars+0x8e>
 800702c:	682b      	ldr	r3, [r5, #0]
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	f819 3003 	ldrb.w	r3, [r9, r3]
 8007034:	071b      	lsls	r3, r3, #28
 8007036:	d41a      	bmi.n	800706e <_scanf_chars+0x8e>
 8007038:	6823      	ldr	r3, [r4, #0]
 800703a:	06da      	lsls	r2, r3, #27
 800703c:	bf5e      	ittt	pl
 800703e:	682b      	ldrpl	r3, [r5, #0]
 8007040:	781b      	ldrbpl	r3, [r3, #0]
 8007042:	f806 3b01 	strbpl.w	r3, [r6], #1
 8007046:	682a      	ldr	r2, [r5, #0]
 8007048:	686b      	ldr	r3, [r5, #4]
 800704a:	3201      	adds	r2, #1
 800704c:	602a      	str	r2, [r5, #0]
 800704e:	68a2      	ldr	r2, [r4, #8]
 8007050:	3b01      	subs	r3, #1
 8007052:	3a01      	subs	r2, #1
 8007054:	606b      	str	r3, [r5, #4]
 8007056:	3701      	adds	r7, #1
 8007058:	60a2      	str	r2, [r4, #8]
 800705a:	b142      	cbz	r2, 800706e <_scanf_chars+0x8e>
 800705c:	2b00      	cmp	r3, #0
 800705e:	dcd7      	bgt.n	8007010 <_scanf_chars+0x30>
 8007060:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007064:	4629      	mov	r1, r5
 8007066:	4640      	mov	r0, r8
 8007068:	4798      	blx	r3
 800706a:	2800      	cmp	r0, #0
 800706c:	d0d0      	beq.n	8007010 <_scanf_chars+0x30>
 800706e:	6823      	ldr	r3, [r4, #0]
 8007070:	f013 0310 	ands.w	r3, r3, #16
 8007074:	d105      	bne.n	8007082 <_scanf_chars+0xa2>
 8007076:	68e2      	ldr	r2, [r4, #12]
 8007078:	3201      	adds	r2, #1
 800707a:	60e2      	str	r2, [r4, #12]
 800707c:	69a2      	ldr	r2, [r4, #24]
 800707e:	b102      	cbz	r2, 8007082 <_scanf_chars+0xa2>
 8007080:	7033      	strb	r3, [r6, #0]
 8007082:	6923      	ldr	r3, [r4, #16]
 8007084:	443b      	add	r3, r7
 8007086:	6123      	str	r3, [r4, #16]
 8007088:	2000      	movs	r0, #0
 800708a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800708e:	bf00      	nop
 8007090:	080079f3 	.word	0x080079f3

08007094 <_scanf_i>:
 8007094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007098:	4698      	mov	r8, r3
 800709a:	4b74      	ldr	r3, [pc, #464]	; (800726c <_scanf_i+0x1d8>)
 800709c:	460c      	mov	r4, r1
 800709e:	4682      	mov	sl, r0
 80070a0:	4616      	mov	r6, r2
 80070a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80070a6:	b087      	sub	sp, #28
 80070a8:	ab03      	add	r3, sp, #12
 80070aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80070ae:	4b70      	ldr	r3, [pc, #448]	; (8007270 <_scanf_i+0x1dc>)
 80070b0:	69a1      	ldr	r1, [r4, #24]
 80070b2:	4a70      	ldr	r2, [pc, #448]	; (8007274 <_scanf_i+0x1e0>)
 80070b4:	2903      	cmp	r1, #3
 80070b6:	bf18      	it	ne
 80070b8:	461a      	movne	r2, r3
 80070ba:	68a3      	ldr	r3, [r4, #8]
 80070bc:	9201      	str	r2, [sp, #4]
 80070be:	1e5a      	subs	r2, r3, #1
 80070c0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80070c4:	bf88      	it	hi
 80070c6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80070ca:	4627      	mov	r7, r4
 80070cc:	bf82      	ittt	hi
 80070ce:	eb03 0905 	addhi.w	r9, r3, r5
 80070d2:	f240 135d 	movwhi	r3, #349	; 0x15d
 80070d6:	60a3      	strhi	r3, [r4, #8]
 80070d8:	f857 3b1c 	ldr.w	r3, [r7], #28
 80070dc:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80070e0:	bf98      	it	ls
 80070e2:	f04f 0900 	movls.w	r9, #0
 80070e6:	6023      	str	r3, [r4, #0]
 80070e8:	463d      	mov	r5, r7
 80070ea:	f04f 0b00 	mov.w	fp, #0
 80070ee:	6831      	ldr	r1, [r6, #0]
 80070f0:	ab03      	add	r3, sp, #12
 80070f2:	7809      	ldrb	r1, [r1, #0]
 80070f4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80070f8:	2202      	movs	r2, #2
 80070fa:	f7f9 f879 	bl	80001f0 <memchr>
 80070fe:	b328      	cbz	r0, 800714c <_scanf_i+0xb8>
 8007100:	f1bb 0f01 	cmp.w	fp, #1
 8007104:	d159      	bne.n	80071ba <_scanf_i+0x126>
 8007106:	6862      	ldr	r2, [r4, #4]
 8007108:	b92a      	cbnz	r2, 8007116 <_scanf_i+0x82>
 800710a:	6822      	ldr	r2, [r4, #0]
 800710c:	2308      	movs	r3, #8
 800710e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007112:	6063      	str	r3, [r4, #4]
 8007114:	6022      	str	r2, [r4, #0]
 8007116:	6822      	ldr	r2, [r4, #0]
 8007118:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800711c:	6022      	str	r2, [r4, #0]
 800711e:	68a2      	ldr	r2, [r4, #8]
 8007120:	1e51      	subs	r1, r2, #1
 8007122:	60a1      	str	r1, [r4, #8]
 8007124:	b192      	cbz	r2, 800714c <_scanf_i+0xb8>
 8007126:	6832      	ldr	r2, [r6, #0]
 8007128:	1c51      	adds	r1, r2, #1
 800712a:	6031      	str	r1, [r6, #0]
 800712c:	7812      	ldrb	r2, [r2, #0]
 800712e:	f805 2b01 	strb.w	r2, [r5], #1
 8007132:	6872      	ldr	r2, [r6, #4]
 8007134:	3a01      	subs	r2, #1
 8007136:	2a00      	cmp	r2, #0
 8007138:	6072      	str	r2, [r6, #4]
 800713a:	dc07      	bgt.n	800714c <_scanf_i+0xb8>
 800713c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8007140:	4631      	mov	r1, r6
 8007142:	4650      	mov	r0, sl
 8007144:	4790      	blx	r2
 8007146:	2800      	cmp	r0, #0
 8007148:	f040 8085 	bne.w	8007256 <_scanf_i+0x1c2>
 800714c:	f10b 0b01 	add.w	fp, fp, #1
 8007150:	f1bb 0f03 	cmp.w	fp, #3
 8007154:	d1cb      	bne.n	80070ee <_scanf_i+0x5a>
 8007156:	6863      	ldr	r3, [r4, #4]
 8007158:	b90b      	cbnz	r3, 800715e <_scanf_i+0xca>
 800715a:	230a      	movs	r3, #10
 800715c:	6063      	str	r3, [r4, #4]
 800715e:	6863      	ldr	r3, [r4, #4]
 8007160:	4945      	ldr	r1, [pc, #276]	; (8007278 <_scanf_i+0x1e4>)
 8007162:	6960      	ldr	r0, [r4, #20]
 8007164:	1ac9      	subs	r1, r1, r3
 8007166:	f000 f889 	bl	800727c <__sccl>
 800716a:	f04f 0b00 	mov.w	fp, #0
 800716e:	68a3      	ldr	r3, [r4, #8]
 8007170:	6822      	ldr	r2, [r4, #0]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d03d      	beq.n	80071f2 <_scanf_i+0x15e>
 8007176:	6831      	ldr	r1, [r6, #0]
 8007178:	6960      	ldr	r0, [r4, #20]
 800717a:	f891 c000 	ldrb.w	ip, [r1]
 800717e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8007182:	2800      	cmp	r0, #0
 8007184:	d035      	beq.n	80071f2 <_scanf_i+0x15e>
 8007186:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800718a:	d124      	bne.n	80071d6 <_scanf_i+0x142>
 800718c:	0510      	lsls	r0, r2, #20
 800718e:	d522      	bpl.n	80071d6 <_scanf_i+0x142>
 8007190:	f10b 0b01 	add.w	fp, fp, #1
 8007194:	f1b9 0f00 	cmp.w	r9, #0
 8007198:	d003      	beq.n	80071a2 <_scanf_i+0x10e>
 800719a:	3301      	adds	r3, #1
 800719c:	f109 39ff 	add.w	r9, r9, #4294967295
 80071a0:	60a3      	str	r3, [r4, #8]
 80071a2:	6873      	ldr	r3, [r6, #4]
 80071a4:	3b01      	subs	r3, #1
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	6073      	str	r3, [r6, #4]
 80071aa:	dd1b      	ble.n	80071e4 <_scanf_i+0x150>
 80071ac:	6833      	ldr	r3, [r6, #0]
 80071ae:	3301      	adds	r3, #1
 80071b0:	6033      	str	r3, [r6, #0]
 80071b2:	68a3      	ldr	r3, [r4, #8]
 80071b4:	3b01      	subs	r3, #1
 80071b6:	60a3      	str	r3, [r4, #8]
 80071b8:	e7d9      	b.n	800716e <_scanf_i+0xda>
 80071ba:	f1bb 0f02 	cmp.w	fp, #2
 80071be:	d1ae      	bne.n	800711e <_scanf_i+0x8a>
 80071c0:	6822      	ldr	r2, [r4, #0]
 80071c2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80071c6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80071ca:	d1bf      	bne.n	800714c <_scanf_i+0xb8>
 80071cc:	2310      	movs	r3, #16
 80071ce:	6063      	str	r3, [r4, #4]
 80071d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80071d4:	e7a2      	b.n	800711c <_scanf_i+0x88>
 80071d6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80071da:	6022      	str	r2, [r4, #0]
 80071dc:	780b      	ldrb	r3, [r1, #0]
 80071de:	f805 3b01 	strb.w	r3, [r5], #1
 80071e2:	e7de      	b.n	80071a2 <_scanf_i+0x10e>
 80071e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80071e8:	4631      	mov	r1, r6
 80071ea:	4650      	mov	r0, sl
 80071ec:	4798      	blx	r3
 80071ee:	2800      	cmp	r0, #0
 80071f0:	d0df      	beq.n	80071b2 <_scanf_i+0x11e>
 80071f2:	6823      	ldr	r3, [r4, #0]
 80071f4:	05d9      	lsls	r1, r3, #23
 80071f6:	d50d      	bpl.n	8007214 <_scanf_i+0x180>
 80071f8:	42bd      	cmp	r5, r7
 80071fa:	d909      	bls.n	8007210 <_scanf_i+0x17c>
 80071fc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007200:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007204:	4632      	mov	r2, r6
 8007206:	4650      	mov	r0, sl
 8007208:	4798      	blx	r3
 800720a:	f105 39ff 	add.w	r9, r5, #4294967295
 800720e:	464d      	mov	r5, r9
 8007210:	42bd      	cmp	r5, r7
 8007212:	d028      	beq.n	8007266 <_scanf_i+0x1d2>
 8007214:	6822      	ldr	r2, [r4, #0]
 8007216:	f012 0210 	ands.w	r2, r2, #16
 800721a:	d113      	bne.n	8007244 <_scanf_i+0x1b0>
 800721c:	702a      	strb	r2, [r5, #0]
 800721e:	6863      	ldr	r3, [r4, #4]
 8007220:	9e01      	ldr	r6, [sp, #4]
 8007222:	4639      	mov	r1, r7
 8007224:	4650      	mov	r0, sl
 8007226:	47b0      	blx	r6
 8007228:	f8d8 3000 	ldr.w	r3, [r8]
 800722c:	6821      	ldr	r1, [r4, #0]
 800722e:	1d1a      	adds	r2, r3, #4
 8007230:	f8c8 2000 	str.w	r2, [r8]
 8007234:	f011 0f20 	tst.w	r1, #32
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	d00f      	beq.n	800725c <_scanf_i+0x1c8>
 800723c:	6018      	str	r0, [r3, #0]
 800723e:	68e3      	ldr	r3, [r4, #12]
 8007240:	3301      	adds	r3, #1
 8007242:	60e3      	str	r3, [r4, #12]
 8007244:	6923      	ldr	r3, [r4, #16]
 8007246:	1bed      	subs	r5, r5, r7
 8007248:	445d      	add	r5, fp
 800724a:	442b      	add	r3, r5
 800724c:	6123      	str	r3, [r4, #16]
 800724e:	2000      	movs	r0, #0
 8007250:	b007      	add	sp, #28
 8007252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007256:	f04f 0b00 	mov.w	fp, #0
 800725a:	e7ca      	b.n	80071f2 <_scanf_i+0x15e>
 800725c:	07ca      	lsls	r2, r1, #31
 800725e:	bf4c      	ite	mi
 8007260:	8018      	strhmi	r0, [r3, #0]
 8007262:	6018      	strpl	r0, [r3, #0]
 8007264:	e7eb      	b.n	800723e <_scanf_i+0x1aa>
 8007266:	2001      	movs	r0, #1
 8007268:	e7f2      	b.n	8007250 <_scanf_i+0x1bc>
 800726a:	bf00      	nop
 800726c:	08007980 	.word	0x08007980
 8007270:	08007621 	.word	0x08007621
 8007274:	08007539 	.word	0x08007539
 8007278:	080079e7 	.word	0x080079e7

0800727c <__sccl>:
 800727c:	b570      	push	{r4, r5, r6, lr}
 800727e:	780b      	ldrb	r3, [r1, #0]
 8007280:	4604      	mov	r4, r0
 8007282:	2b5e      	cmp	r3, #94	; 0x5e
 8007284:	bf0b      	itete	eq
 8007286:	784b      	ldrbeq	r3, [r1, #1]
 8007288:	1c4a      	addne	r2, r1, #1
 800728a:	1c8a      	addeq	r2, r1, #2
 800728c:	2100      	movne	r1, #0
 800728e:	bf08      	it	eq
 8007290:	2101      	moveq	r1, #1
 8007292:	3801      	subs	r0, #1
 8007294:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8007298:	f800 1f01 	strb.w	r1, [r0, #1]!
 800729c:	42a8      	cmp	r0, r5
 800729e:	d1fb      	bne.n	8007298 <__sccl+0x1c>
 80072a0:	b90b      	cbnz	r3, 80072a6 <__sccl+0x2a>
 80072a2:	1e50      	subs	r0, r2, #1
 80072a4:	bd70      	pop	{r4, r5, r6, pc}
 80072a6:	f081 0101 	eor.w	r1, r1, #1
 80072aa:	54e1      	strb	r1, [r4, r3]
 80072ac:	4610      	mov	r0, r2
 80072ae:	4602      	mov	r2, r0
 80072b0:	f812 5b01 	ldrb.w	r5, [r2], #1
 80072b4:	2d2d      	cmp	r5, #45	; 0x2d
 80072b6:	d005      	beq.n	80072c4 <__sccl+0x48>
 80072b8:	2d5d      	cmp	r5, #93	; 0x5d
 80072ba:	d016      	beq.n	80072ea <__sccl+0x6e>
 80072bc:	2d00      	cmp	r5, #0
 80072be:	d0f1      	beq.n	80072a4 <__sccl+0x28>
 80072c0:	462b      	mov	r3, r5
 80072c2:	e7f2      	b.n	80072aa <__sccl+0x2e>
 80072c4:	7846      	ldrb	r6, [r0, #1]
 80072c6:	2e5d      	cmp	r6, #93	; 0x5d
 80072c8:	d0fa      	beq.n	80072c0 <__sccl+0x44>
 80072ca:	42b3      	cmp	r3, r6
 80072cc:	dcf8      	bgt.n	80072c0 <__sccl+0x44>
 80072ce:	3002      	adds	r0, #2
 80072d0:	461a      	mov	r2, r3
 80072d2:	3201      	adds	r2, #1
 80072d4:	4296      	cmp	r6, r2
 80072d6:	54a1      	strb	r1, [r4, r2]
 80072d8:	dcfb      	bgt.n	80072d2 <__sccl+0x56>
 80072da:	1af2      	subs	r2, r6, r3
 80072dc:	3a01      	subs	r2, #1
 80072de:	1c5d      	adds	r5, r3, #1
 80072e0:	42b3      	cmp	r3, r6
 80072e2:	bfa8      	it	ge
 80072e4:	2200      	movge	r2, #0
 80072e6:	18ab      	adds	r3, r5, r2
 80072e8:	e7e1      	b.n	80072ae <__sccl+0x32>
 80072ea:	4610      	mov	r0, r2
 80072ec:	e7da      	b.n	80072a4 <__sccl+0x28>

080072ee <__submore>:
 80072ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072f2:	460c      	mov	r4, r1
 80072f4:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80072f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80072fa:	4299      	cmp	r1, r3
 80072fc:	d11d      	bne.n	800733a <__submore+0x4c>
 80072fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007302:	f7ff f927 	bl	8006554 <_malloc_r>
 8007306:	b918      	cbnz	r0, 8007310 <__submore+0x22>
 8007308:	f04f 30ff 	mov.w	r0, #4294967295
 800730c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007310:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007314:	63a3      	str	r3, [r4, #56]	; 0x38
 8007316:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800731a:	6360      	str	r0, [r4, #52]	; 0x34
 800731c:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8007320:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007324:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8007328:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800732c:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8007330:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8007334:	6020      	str	r0, [r4, #0]
 8007336:	2000      	movs	r0, #0
 8007338:	e7e8      	b.n	800730c <__submore+0x1e>
 800733a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800733c:	0077      	lsls	r7, r6, #1
 800733e:	463a      	mov	r2, r7
 8007340:	f000 f848 	bl	80073d4 <_realloc_r>
 8007344:	4605      	mov	r5, r0
 8007346:	2800      	cmp	r0, #0
 8007348:	d0de      	beq.n	8007308 <__submore+0x1a>
 800734a:	eb00 0806 	add.w	r8, r0, r6
 800734e:	4601      	mov	r1, r0
 8007350:	4632      	mov	r2, r6
 8007352:	4640      	mov	r0, r8
 8007354:	f000 f830 	bl	80073b8 <memcpy>
 8007358:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800735c:	f8c4 8000 	str.w	r8, [r4]
 8007360:	e7e9      	b.n	8007336 <__submore+0x48>

08007362 <memmove>:
 8007362:	4288      	cmp	r0, r1
 8007364:	b510      	push	{r4, lr}
 8007366:	eb01 0402 	add.w	r4, r1, r2
 800736a:	d902      	bls.n	8007372 <memmove+0x10>
 800736c:	4284      	cmp	r4, r0
 800736e:	4623      	mov	r3, r4
 8007370:	d807      	bhi.n	8007382 <memmove+0x20>
 8007372:	1e43      	subs	r3, r0, #1
 8007374:	42a1      	cmp	r1, r4
 8007376:	d008      	beq.n	800738a <memmove+0x28>
 8007378:	f811 2b01 	ldrb.w	r2, [r1], #1
 800737c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007380:	e7f8      	b.n	8007374 <memmove+0x12>
 8007382:	4402      	add	r2, r0
 8007384:	4601      	mov	r1, r0
 8007386:	428a      	cmp	r2, r1
 8007388:	d100      	bne.n	800738c <memmove+0x2a>
 800738a:	bd10      	pop	{r4, pc}
 800738c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007390:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007394:	e7f7      	b.n	8007386 <memmove+0x24>
	...

08007398 <_sbrk_r>:
 8007398:	b538      	push	{r3, r4, r5, lr}
 800739a:	4d06      	ldr	r5, [pc, #24]	; (80073b4 <_sbrk_r+0x1c>)
 800739c:	2300      	movs	r3, #0
 800739e:	4604      	mov	r4, r0
 80073a0:	4608      	mov	r0, r1
 80073a2:	602b      	str	r3, [r5, #0]
 80073a4:	f7fa ffd6 	bl	8002354 <_sbrk>
 80073a8:	1c43      	adds	r3, r0, #1
 80073aa:	d102      	bne.n	80073b2 <_sbrk_r+0x1a>
 80073ac:	682b      	ldr	r3, [r5, #0]
 80073ae:	b103      	cbz	r3, 80073b2 <_sbrk_r+0x1a>
 80073b0:	6023      	str	r3, [r4, #0]
 80073b2:	bd38      	pop	{r3, r4, r5, pc}
 80073b4:	200006e4 	.word	0x200006e4

080073b8 <memcpy>:
 80073b8:	440a      	add	r2, r1
 80073ba:	4291      	cmp	r1, r2
 80073bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80073c0:	d100      	bne.n	80073c4 <memcpy+0xc>
 80073c2:	4770      	bx	lr
 80073c4:	b510      	push	{r4, lr}
 80073c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073ce:	4291      	cmp	r1, r2
 80073d0:	d1f9      	bne.n	80073c6 <memcpy+0xe>
 80073d2:	bd10      	pop	{r4, pc}

080073d4 <_realloc_r>:
 80073d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073d8:	4680      	mov	r8, r0
 80073da:	4614      	mov	r4, r2
 80073dc:	460e      	mov	r6, r1
 80073de:	b921      	cbnz	r1, 80073ea <_realloc_r+0x16>
 80073e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073e4:	4611      	mov	r1, r2
 80073e6:	f7ff b8b5 	b.w	8006554 <_malloc_r>
 80073ea:	b92a      	cbnz	r2, 80073f8 <_realloc_r+0x24>
 80073ec:	f7ff f846 	bl	800647c <_free_r>
 80073f0:	4625      	mov	r5, r4
 80073f2:	4628      	mov	r0, r5
 80073f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073f8:	f000 f914 	bl	8007624 <_malloc_usable_size_r>
 80073fc:	4284      	cmp	r4, r0
 80073fe:	4607      	mov	r7, r0
 8007400:	d802      	bhi.n	8007408 <_realloc_r+0x34>
 8007402:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007406:	d812      	bhi.n	800742e <_realloc_r+0x5a>
 8007408:	4621      	mov	r1, r4
 800740a:	4640      	mov	r0, r8
 800740c:	f7ff f8a2 	bl	8006554 <_malloc_r>
 8007410:	4605      	mov	r5, r0
 8007412:	2800      	cmp	r0, #0
 8007414:	d0ed      	beq.n	80073f2 <_realloc_r+0x1e>
 8007416:	42bc      	cmp	r4, r7
 8007418:	4622      	mov	r2, r4
 800741a:	4631      	mov	r1, r6
 800741c:	bf28      	it	cs
 800741e:	463a      	movcs	r2, r7
 8007420:	f7ff ffca 	bl	80073b8 <memcpy>
 8007424:	4631      	mov	r1, r6
 8007426:	4640      	mov	r0, r8
 8007428:	f7ff f828 	bl	800647c <_free_r>
 800742c:	e7e1      	b.n	80073f2 <_realloc_r+0x1e>
 800742e:	4635      	mov	r5, r6
 8007430:	e7df      	b.n	80073f2 <_realloc_r+0x1e>
	...

08007434 <_strtol_l.constprop.0>:
 8007434:	2b01      	cmp	r3, #1
 8007436:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800743a:	d001      	beq.n	8007440 <_strtol_l.constprop.0+0xc>
 800743c:	2b24      	cmp	r3, #36	; 0x24
 800743e:	d906      	bls.n	800744e <_strtol_l.constprop.0+0x1a>
 8007440:	f7fe fff0 	bl	8006424 <__errno>
 8007444:	2316      	movs	r3, #22
 8007446:	6003      	str	r3, [r0, #0]
 8007448:	2000      	movs	r0, #0
 800744a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800744e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007534 <_strtol_l.constprop.0+0x100>
 8007452:	460d      	mov	r5, r1
 8007454:	462e      	mov	r6, r5
 8007456:	f815 4b01 	ldrb.w	r4, [r5], #1
 800745a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800745e:	f017 0708 	ands.w	r7, r7, #8
 8007462:	d1f7      	bne.n	8007454 <_strtol_l.constprop.0+0x20>
 8007464:	2c2d      	cmp	r4, #45	; 0x2d
 8007466:	d132      	bne.n	80074ce <_strtol_l.constprop.0+0x9a>
 8007468:	782c      	ldrb	r4, [r5, #0]
 800746a:	2701      	movs	r7, #1
 800746c:	1cb5      	adds	r5, r6, #2
 800746e:	2b00      	cmp	r3, #0
 8007470:	d05b      	beq.n	800752a <_strtol_l.constprop.0+0xf6>
 8007472:	2b10      	cmp	r3, #16
 8007474:	d109      	bne.n	800748a <_strtol_l.constprop.0+0x56>
 8007476:	2c30      	cmp	r4, #48	; 0x30
 8007478:	d107      	bne.n	800748a <_strtol_l.constprop.0+0x56>
 800747a:	782c      	ldrb	r4, [r5, #0]
 800747c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007480:	2c58      	cmp	r4, #88	; 0x58
 8007482:	d14d      	bne.n	8007520 <_strtol_l.constprop.0+0xec>
 8007484:	786c      	ldrb	r4, [r5, #1]
 8007486:	2310      	movs	r3, #16
 8007488:	3502      	adds	r5, #2
 800748a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800748e:	f108 38ff 	add.w	r8, r8, #4294967295
 8007492:	f04f 0e00 	mov.w	lr, #0
 8007496:	fbb8 f9f3 	udiv	r9, r8, r3
 800749a:	4676      	mov	r6, lr
 800749c:	fb03 8a19 	mls	sl, r3, r9, r8
 80074a0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80074a4:	f1bc 0f09 	cmp.w	ip, #9
 80074a8:	d816      	bhi.n	80074d8 <_strtol_l.constprop.0+0xa4>
 80074aa:	4664      	mov	r4, ip
 80074ac:	42a3      	cmp	r3, r4
 80074ae:	dd24      	ble.n	80074fa <_strtol_l.constprop.0+0xc6>
 80074b0:	f1be 3fff 	cmp.w	lr, #4294967295
 80074b4:	d008      	beq.n	80074c8 <_strtol_l.constprop.0+0x94>
 80074b6:	45b1      	cmp	r9, r6
 80074b8:	d31c      	bcc.n	80074f4 <_strtol_l.constprop.0+0xc0>
 80074ba:	d101      	bne.n	80074c0 <_strtol_l.constprop.0+0x8c>
 80074bc:	45a2      	cmp	sl, r4
 80074be:	db19      	blt.n	80074f4 <_strtol_l.constprop.0+0xc0>
 80074c0:	fb06 4603 	mla	r6, r6, r3, r4
 80074c4:	f04f 0e01 	mov.w	lr, #1
 80074c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80074cc:	e7e8      	b.n	80074a0 <_strtol_l.constprop.0+0x6c>
 80074ce:	2c2b      	cmp	r4, #43	; 0x2b
 80074d0:	bf04      	itt	eq
 80074d2:	782c      	ldrbeq	r4, [r5, #0]
 80074d4:	1cb5      	addeq	r5, r6, #2
 80074d6:	e7ca      	b.n	800746e <_strtol_l.constprop.0+0x3a>
 80074d8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80074dc:	f1bc 0f19 	cmp.w	ip, #25
 80074e0:	d801      	bhi.n	80074e6 <_strtol_l.constprop.0+0xb2>
 80074e2:	3c37      	subs	r4, #55	; 0x37
 80074e4:	e7e2      	b.n	80074ac <_strtol_l.constprop.0+0x78>
 80074e6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80074ea:	f1bc 0f19 	cmp.w	ip, #25
 80074ee:	d804      	bhi.n	80074fa <_strtol_l.constprop.0+0xc6>
 80074f0:	3c57      	subs	r4, #87	; 0x57
 80074f2:	e7db      	b.n	80074ac <_strtol_l.constprop.0+0x78>
 80074f4:	f04f 3eff 	mov.w	lr, #4294967295
 80074f8:	e7e6      	b.n	80074c8 <_strtol_l.constprop.0+0x94>
 80074fa:	f1be 3fff 	cmp.w	lr, #4294967295
 80074fe:	d105      	bne.n	800750c <_strtol_l.constprop.0+0xd8>
 8007500:	2322      	movs	r3, #34	; 0x22
 8007502:	6003      	str	r3, [r0, #0]
 8007504:	4646      	mov	r6, r8
 8007506:	b942      	cbnz	r2, 800751a <_strtol_l.constprop.0+0xe6>
 8007508:	4630      	mov	r0, r6
 800750a:	e79e      	b.n	800744a <_strtol_l.constprop.0+0x16>
 800750c:	b107      	cbz	r7, 8007510 <_strtol_l.constprop.0+0xdc>
 800750e:	4276      	negs	r6, r6
 8007510:	2a00      	cmp	r2, #0
 8007512:	d0f9      	beq.n	8007508 <_strtol_l.constprop.0+0xd4>
 8007514:	f1be 0f00 	cmp.w	lr, #0
 8007518:	d000      	beq.n	800751c <_strtol_l.constprop.0+0xe8>
 800751a:	1e69      	subs	r1, r5, #1
 800751c:	6011      	str	r1, [r2, #0]
 800751e:	e7f3      	b.n	8007508 <_strtol_l.constprop.0+0xd4>
 8007520:	2430      	movs	r4, #48	; 0x30
 8007522:	2b00      	cmp	r3, #0
 8007524:	d1b1      	bne.n	800748a <_strtol_l.constprop.0+0x56>
 8007526:	2308      	movs	r3, #8
 8007528:	e7af      	b.n	800748a <_strtol_l.constprop.0+0x56>
 800752a:	2c30      	cmp	r4, #48	; 0x30
 800752c:	d0a5      	beq.n	800747a <_strtol_l.constprop.0+0x46>
 800752e:	230a      	movs	r3, #10
 8007530:	e7ab      	b.n	800748a <_strtol_l.constprop.0+0x56>
 8007532:	bf00      	nop
 8007534:	080079f3 	.word	0x080079f3

08007538 <_strtol_r>:
 8007538:	f7ff bf7c 	b.w	8007434 <_strtol_l.constprop.0>

0800753c <_strtoul_l.constprop.0>:
 800753c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007540:	4f36      	ldr	r7, [pc, #216]	; (800761c <_strtoul_l.constprop.0+0xe0>)
 8007542:	4686      	mov	lr, r0
 8007544:	460d      	mov	r5, r1
 8007546:	4628      	mov	r0, r5
 8007548:	f815 4b01 	ldrb.w	r4, [r5], #1
 800754c:	5d3e      	ldrb	r6, [r7, r4]
 800754e:	f016 0608 	ands.w	r6, r6, #8
 8007552:	d1f8      	bne.n	8007546 <_strtoul_l.constprop.0+0xa>
 8007554:	2c2d      	cmp	r4, #45	; 0x2d
 8007556:	d130      	bne.n	80075ba <_strtoul_l.constprop.0+0x7e>
 8007558:	782c      	ldrb	r4, [r5, #0]
 800755a:	2601      	movs	r6, #1
 800755c:	1c85      	adds	r5, r0, #2
 800755e:	2b00      	cmp	r3, #0
 8007560:	d057      	beq.n	8007612 <_strtoul_l.constprop.0+0xd6>
 8007562:	2b10      	cmp	r3, #16
 8007564:	d109      	bne.n	800757a <_strtoul_l.constprop.0+0x3e>
 8007566:	2c30      	cmp	r4, #48	; 0x30
 8007568:	d107      	bne.n	800757a <_strtoul_l.constprop.0+0x3e>
 800756a:	7828      	ldrb	r0, [r5, #0]
 800756c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8007570:	2858      	cmp	r0, #88	; 0x58
 8007572:	d149      	bne.n	8007608 <_strtoul_l.constprop.0+0xcc>
 8007574:	786c      	ldrb	r4, [r5, #1]
 8007576:	2310      	movs	r3, #16
 8007578:	3502      	adds	r5, #2
 800757a:	f04f 38ff 	mov.w	r8, #4294967295
 800757e:	2700      	movs	r7, #0
 8007580:	fbb8 f8f3 	udiv	r8, r8, r3
 8007584:	fb03 f908 	mul.w	r9, r3, r8
 8007588:	ea6f 0909 	mvn.w	r9, r9
 800758c:	4638      	mov	r0, r7
 800758e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007592:	f1bc 0f09 	cmp.w	ip, #9
 8007596:	d815      	bhi.n	80075c4 <_strtoul_l.constprop.0+0x88>
 8007598:	4664      	mov	r4, ip
 800759a:	42a3      	cmp	r3, r4
 800759c:	dd23      	ble.n	80075e6 <_strtoul_l.constprop.0+0xaa>
 800759e:	f1b7 3fff 	cmp.w	r7, #4294967295
 80075a2:	d007      	beq.n	80075b4 <_strtoul_l.constprop.0+0x78>
 80075a4:	4580      	cmp	r8, r0
 80075a6:	d31b      	bcc.n	80075e0 <_strtoul_l.constprop.0+0xa4>
 80075a8:	d101      	bne.n	80075ae <_strtoul_l.constprop.0+0x72>
 80075aa:	45a1      	cmp	r9, r4
 80075ac:	db18      	blt.n	80075e0 <_strtoul_l.constprop.0+0xa4>
 80075ae:	fb00 4003 	mla	r0, r0, r3, r4
 80075b2:	2701      	movs	r7, #1
 80075b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80075b8:	e7e9      	b.n	800758e <_strtoul_l.constprop.0+0x52>
 80075ba:	2c2b      	cmp	r4, #43	; 0x2b
 80075bc:	bf04      	itt	eq
 80075be:	782c      	ldrbeq	r4, [r5, #0]
 80075c0:	1c85      	addeq	r5, r0, #2
 80075c2:	e7cc      	b.n	800755e <_strtoul_l.constprop.0+0x22>
 80075c4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80075c8:	f1bc 0f19 	cmp.w	ip, #25
 80075cc:	d801      	bhi.n	80075d2 <_strtoul_l.constprop.0+0x96>
 80075ce:	3c37      	subs	r4, #55	; 0x37
 80075d0:	e7e3      	b.n	800759a <_strtoul_l.constprop.0+0x5e>
 80075d2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80075d6:	f1bc 0f19 	cmp.w	ip, #25
 80075da:	d804      	bhi.n	80075e6 <_strtoul_l.constprop.0+0xaa>
 80075dc:	3c57      	subs	r4, #87	; 0x57
 80075de:	e7dc      	b.n	800759a <_strtoul_l.constprop.0+0x5e>
 80075e0:	f04f 37ff 	mov.w	r7, #4294967295
 80075e4:	e7e6      	b.n	80075b4 <_strtoul_l.constprop.0+0x78>
 80075e6:	1c7b      	adds	r3, r7, #1
 80075e8:	d106      	bne.n	80075f8 <_strtoul_l.constprop.0+0xbc>
 80075ea:	2322      	movs	r3, #34	; 0x22
 80075ec:	f8ce 3000 	str.w	r3, [lr]
 80075f0:	4638      	mov	r0, r7
 80075f2:	b932      	cbnz	r2, 8007602 <_strtoul_l.constprop.0+0xc6>
 80075f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80075f8:	b106      	cbz	r6, 80075fc <_strtoul_l.constprop.0+0xc0>
 80075fa:	4240      	negs	r0, r0
 80075fc:	2a00      	cmp	r2, #0
 80075fe:	d0f9      	beq.n	80075f4 <_strtoul_l.constprop.0+0xb8>
 8007600:	b107      	cbz	r7, 8007604 <_strtoul_l.constprop.0+0xc8>
 8007602:	1e69      	subs	r1, r5, #1
 8007604:	6011      	str	r1, [r2, #0]
 8007606:	e7f5      	b.n	80075f4 <_strtoul_l.constprop.0+0xb8>
 8007608:	2430      	movs	r4, #48	; 0x30
 800760a:	2b00      	cmp	r3, #0
 800760c:	d1b5      	bne.n	800757a <_strtoul_l.constprop.0+0x3e>
 800760e:	2308      	movs	r3, #8
 8007610:	e7b3      	b.n	800757a <_strtoul_l.constprop.0+0x3e>
 8007612:	2c30      	cmp	r4, #48	; 0x30
 8007614:	d0a9      	beq.n	800756a <_strtoul_l.constprop.0+0x2e>
 8007616:	230a      	movs	r3, #10
 8007618:	e7af      	b.n	800757a <_strtoul_l.constprop.0+0x3e>
 800761a:	bf00      	nop
 800761c:	080079f3 	.word	0x080079f3

08007620 <_strtoul_r>:
 8007620:	f7ff bf8c 	b.w	800753c <_strtoul_l.constprop.0>

08007624 <_malloc_usable_size_r>:
 8007624:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007628:	1f18      	subs	r0, r3, #4
 800762a:	2b00      	cmp	r3, #0
 800762c:	bfbc      	itt	lt
 800762e:	580b      	ldrlt	r3, [r1, r0]
 8007630:	18c0      	addlt	r0, r0, r3
 8007632:	4770      	bx	lr

08007634 <_init>:
 8007634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007636:	bf00      	nop
 8007638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800763a:	bc08      	pop	{r3}
 800763c:	469e      	mov	lr, r3
 800763e:	4770      	bx	lr

08007640 <_fini>:
 8007640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007642:	bf00      	nop
 8007644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007646:	bc08      	pop	{r3}
 8007648:	469e      	mov	lr, r3
 800764a:	4770      	bx	lr
