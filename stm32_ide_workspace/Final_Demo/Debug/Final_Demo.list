
Final_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e30  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d0  08007fd0  08007fd0  00017fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084a0  080084a0  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080084a0  080084a0  000184a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080084a8  080084a8  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084a8  080084a8  000184a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080084ac  080084ac  000184ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080084b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006e0  20000068  08008518  00020068  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000748  08008518  00020748  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ec9a  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000201a  00000000  00000000  0002ed75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000de8  00000000  00000000  00030d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000af6  00000000  00000000  00031b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016df5  00000000  00000000  0003266e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010a2e  00000000  00000000  00049463  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000979c2  00000000  00000000  00059e91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000045b0  00000000  00000000  000f1854  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000f5e04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007fb8 	.word	0x08007fb8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08007fb8 	.word	0x08007fb8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2uiz>:
 8000b8c:	004a      	lsls	r2, r1, #1
 8000b8e:	d211      	bcs.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b94:	d211      	bcs.n	8000bba <__aeabi_d2uiz+0x2e>
 8000b96:	d50d      	bpl.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d40e      	bmi.n	8000bc0 <__aeabi_d2uiz+0x34>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bbe:	d102      	bne.n	8000bc6 <__aeabi_d2uiz+0x3a>
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc4:	4770      	bx	lr
 8000bc6:	f04f 0000 	mov.w	r0, #0
 8000bca:	4770      	bx	lr

08000bcc <__aeabi_uldivmod>:
 8000bcc:	b953      	cbnz	r3, 8000be4 <__aeabi_uldivmod+0x18>
 8000bce:	b94a      	cbnz	r2, 8000be4 <__aeabi_uldivmod+0x18>
 8000bd0:	2900      	cmp	r1, #0
 8000bd2:	bf08      	it	eq
 8000bd4:	2800      	cmpeq	r0, #0
 8000bd6:	bf1c      	itt	ne
 8000bd8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bdc:	f04f 30ff 	movne.w	r0, #4294967295
 8000be0:	f000 b970 	b.w	8000ec4 <__aeabi_idiv0>
 8000be4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bec:	f000 f806 	bl	8000bfc <__udivmoddi4>
 8000bf0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf8:	b004      	add	sp, #16
 8000bfa:	4770      	bx	lr

08000bfc <__udivmoddi4>:
 8000bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c00:	9e08      	ldr	r6, [sp, #32]
 8000c02:	460d      	mov	r5, r1
 8000c04:	4604      	mov	r4, r0
 8000c06:	460f      	mov	r7, r1
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d14a      	bne.n	8000ca2 <__udivmoddi4+0xa6>
 8000c0c:	428a      	cmp	r2, r1
 8000c0e:	4694      	mov	ip, r2
 8000c10:	d965      	bls.n	8000cde <__udivmoddi4+0xe2>
 8000c12:	fab2 f382 	clz	r3, r2
 8000c16:	b143      	cbz	r3, 8000c2a <__udivmoddi4+0x2e>
 8000c18:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c1c:	f1c3 0220 	rsb	r2, r3, #32
 8000c20:	409f      	lsls	r7, r3
 8000c22:	fa20 f202 	lsr.w	r2, r0, r2
 8000c26:	4317      	orrs	r7, r2
 8000c28:	409c      	lsls	r4, r3
 8000c2a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c2e:	fa1f f58c 	uxth.w	r5, ip
 8000c32:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c36:	0c22      	lsrs	r2, r4, #16
 8000c38:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c3c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c40:	fb01 f005 	mul.w	r0, r1, r5
 8000c44:	4290      	cmp	r0, r2
 8000c46:	d90a      	bls.n	8000c5e <__udivmoddi4+0x62>
 8000c48:	eb1c 0202 	adds.w	r2, ip, r2
 8000c4c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c50:	f080 811c 	bcs.w	8000e8c <__udivmoddi4+0x290>
 8000c54:	4290      	cmp	r0, r2
 8000c56:	f240 8119 	bls.w	8000e8c <__udivmoddi4+0x290>
 8000c5a:	3902      	subs	r1, #2
 8000c5c:	4462      	add	r2, ip
 8000c5e:	1a12      	subs	r2, r2, r0
 8000c60:	b2a4      	uxth	r4, r4
 8000c62:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c66:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c6a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c6e:	fb00 f505 	mul.w	r5, r0, r5
 8000c72:	42a5      	cmp	r5, r4
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x90>
 8000c76:	eb1c 0404 	adds.w	r4, ip, r4
 8000c7a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c7e:	f080 8107 	bcs.w	8000e90 <__udivmoddi4+0x294>
 8000c82:	42a5      	cmp	r5, r4
 8000c84:	f240 8104 	bls.w	8000e90 <__udivmoddi4+0x294>
 8000c88:	4464      	add	r4, ip
 8000c8a:	3802      	subs	r0, #2
 8000c8c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c90:	1b64      	subs	r4, r4, r5
 8000c92:	2100      	movs	r1, #0
 8000c94:	b11e      	cbz	r6, 8000c9e <__udivmoddi4+0xa2>
 8000c96:	40dc      	lsrs	r4, r3
 8000c98:	2300      	movs	r3, #0
 8000c9a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d908      	bls.n	8000cb8 <__udivmoddi4+0xbc>
 8000ca6:	2e00      	cmp	r6, #0
 8000ca8:	f000 80ed 	beq.w	8000e86 <__udivmoddi4+0x28a>
 8000cac:	2100      	movs	r1, #0
 8000cae:	e9c6 0500 	strd	r0, r5, [r6]
 8000cb2:	4608      	mov	r0, r1
 8000cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb8:	fab3 f183 	clz	r1, r3
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	d149      	bne.n	8000d54 <__udivmoddi4+0x158>
 8000cc0:	42ab      	cmp	r3, r5
 8000cc2:	d302      	bcc.n	8000cca <__udivmoddi4+0xce>
 8000cc4:	4282      	cmp	r2, r0
 8000cc6:	f200 80f8 	bhi.w	8000eba <__udivmoddi4+0x2be>
 8000cca:	1a84      	subs	r4, r0, r2
 8000ccc:	eb65 0203 	sbc.w	r2, r5, r3
 8000cd0:	2001      	movs	r0, #1
 8000cd2:	4617      	mov	r7, r2
 8000cd4:	2e00      	cmp	r6, #0
 8000cd6:	d0e2      	beq.n	8000c9e <__udivmoddi4+0xa2>
 8000cd8:	e9c6 4700 	strd	r4, r7, [r6]
 8000cdc:	e7df      	b.n	8000c9e <__udivmoddi4+0xa2>
 8000cde:	b902      	cbnz	r2, 8000ce2 <__udivmoddi4+0xe6>
 8000ce0:	deff      	udf	#255	; 0xff
 8000ce2:	fab2 f382 	clz	r3, r2
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	f040 8090 	bne.w	8000e0c <__udivmoddi4+0x210>
 8000cec:	1a8a      	subs	r2, r1, r2
 8000cee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cf2:	fa1f fe8c 	uxth.w	lr, ip
 8000cf6:	2101      	movs	r1, #1
 8000cf8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cfc:	fb07 2015 	mls	r0, r7, r5, r2
 8000d00:	0c22      	lsrs	r2, r4, #16
 8000d02:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d06:	fb0e f005 	mul.w	r0, lr, r5
 8000d0a:	4290      	cmp	r0, r2
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x124>
 8000d0e:	eb1c 0202 	adds.w	r2, ip, r2
 8000d12:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x122>
 8000d18:	4290      	cmp	r0, r2
 8000d1a:	f200 80cb 	bhi.w	8000eb4 <__udivmoddi4+0x2b8>
 8000d1e:	4645      	mov	r5, r8
 8000d20:	1a12      	subs	r2, r2, r0
 8000d22:	b2a4      	uxth	r4, r4
 8000d24:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d28:	fb07 2210 	mls	r2, r7, r0, r2
 8000d2c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d30:	fb0e fe00 	mul.w	lr, lr, r0
 8000d34:	45a6      	cmp	lr, r4
 8000d36:	d908      	bls.n	8000d4a <__udivmoddi4+0x14e>
 8000d38:	eb1c 0404 	adds.w	r4, ip, r4
 8000d3c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d40:	d202      	bcs.n	8000d48 <__udivmoddi4+0x14c>
 8000d42:	45a6      	cmp	lr, r4
 8000d44:	f200 80bb 	bhi.w	8000ebe <__udivmoddi4+0x2c2>
 8000d48:	4610      	mov	r0, r2
 8000d4a:	eba4 040e 	sub.w	r4, r4, lr
 8000d4e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d52:	e79f      	b.n	8000c94 <__udivmoddi4+0x98>
 8000d54:	f1c1 0720 	rsb	r7, r1, #32
 8000d58:	408b      	lsls	r3, r1
 8000d5a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d5e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d62:	fa05 f401 	lsl.w	r4, r5, r1
 8000d66:	fa20 f307 	lsr.w	r3, r0, r7
 8000d6a:	40fd      	lsrs	r5, r7
 8000d6c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d70:	4323      	orrs	r3, r4
 8000d72:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d7e:	0c1c      	lsrs	r4, r3, #16
 8000d80:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d84:	fb08 f50e 	mul.w	r5, r8, lr
 8000d88:	42a5      	cmp	r5, r4
 8000d8a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d8e:	fa00 f001 	lsl.w	r0, r0, r1
 8000d92:	d90b      	bls.n	8000dac <__udivmoddi4+0x1b0>
 8000d94:	eb1c 0404 	adds.w	r4, ip, r4
 8000d98:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d9c:	f080 8088 	bcs.w	8000eb0 <__udivmoddi4+0x2b4>
 8000da0:	42a5      	cmp	r5, r4
 8000da2:	f240 8085 	bls.w	8000eb0 <__udivmoddi4+0x2b4>
 8000da6:	f1a8 0802 	sub.w	r8, r8, #2
 8000daa:	4464      	add	r4, ip
 8000dac:	1b64      	subs	r4, r4, r5
 8000dae:	b29d      	uxth	r5, r3
 8000db0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000db4:	fb09 4413 	mls	r4, r9, r3, r4
 8000db8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dbc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dc0:	45a6      	cmp	lr, r4
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x1da>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000dcc:	d26c      	bcs.n	8000ea8 <__udivmoddi4+0x2ac>
 8000dce:	45a6      	cmp	lr, r4
 8000dd0:	d96a      	bls.n	8000ea8 <__udivmoddi4+0x2ac>
 8000dd2:	3b02      	subs	r3, #2
 8000dd4:	4464      	add	r4, ip
 8000dd6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dda:	fba3 9502 	umull	r9, r5, r3, r2
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	42ac      	cmp	r4, r5
 8000de4:	46c8      	mov	r8, r9
 8000de6:	46ae      	mov	lr, r5
 8000de8:	d356      	bcc.n	8000e98 <__udivmoddi4+0x29c>
 8000dea:	d053      	beq.n	8000e94 <__udivmoddi4+0x298>
 8000dec:	b156      	cbz	r6, 8000e04 <__udivmoddi4+0x208>
 8000dee:	ebb0 0208 	subs.w	r2, r0, r8
 8000df2:	eb64 040e 	sbc.w	r4, r4, lr
 8000df6:	fa04 f707 	lsl.w	r7, r4, r7
 8000dfa:	40ca      	lsrs	r2, r1
 8000dfc:	40cc      	lsrs	r4, r1
 8000dfe:	4317      	orrs	r7, r2
 8000e00:	e9c6 7400 	strd	r7, r4, [r6]
 8000e04:	4618      	mov	r0, r3
 8000e06:	2100      	movs	r1, #0
 8000e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0c:	f1c3 0120 	rsb	r1, r3, #32
 8000e10:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e14:	fa20 f201 	lsr.w	r2, r0, r1
 8000e18:	fa25 f101 	lsr.w	r1, r5, r1
 8000e1c:	409d      	lsls	r5, r3
 8000e1e:	432a      	orrs	r2, r5
 8000e20:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e24:	fa1f fe8c 	uxth.w	lr, ip
 8000e28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e2c:	fb07 1510 	mls	r5, r7, r0, r1
 8000e30:	0c11      	lsrs	r1, r2, #16
 8000e32:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e36:	fb00 f50e 	mul.w	r5, r0, lr
 8000e3a:	428d      	cmp	r5, r1
 8000e3c:	fa04 f403 	lsl.w	r4, r4, r3
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x258>
 8000e42:	eb1c 0101 	adds.w	r1, ip, r1
 8000e46:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e4a:	d22f      	bcs.n	8000eac <__udivmoddi4+0x2b0>
 8000e4c:	428d      	cmp	r5, r1
 8000e4e:	d92d      	bls.n	8000eac <__udivmoddi4+0x2b0>
 8000e50:	3802      	subs	r0, #2
 8000e52:	4461      	add	r1, ip
 8000e54:	1b49      	subs	r1, r1, r5
 8000e56:	b292      	uxth	r2, r2
 8000e58:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e5c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	fb05 f10e 	mul.w	r1, r5, lr
 8000e68:	4291      	cmp	r1, r2
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x282>
 8000e6c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e70:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e74:	d216      	bcs.n	8000ea4 <__udivmoddi4+0x2a8>
 8000e76:	4291      	cmp	r1, r2
 8000e78:	d914      	bls.n	8000ea4 <__udivmoddi4+0x2a8>
 8000e7a:	3d02      	subs	r5, #2
 8000e7c:	4462      	add	r2, ip
 8000e7e:	1a52      	subs	r2, r2, r1
 8000e80:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e84:	e738      	b.n	8000cf8 <__udivmoddi4+0xfc>
 8000e86:	4631      	mov	r1, r6
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e708      	b.n	8000c9e <__udivmoddi4+0xa2>
 8000e8c:	4639      	mov	r1, r7
 8000e8e:	e6e6      	b.n	8000c5e <__udivmoddi4+0x62>
 8000e90:	4610      	mov	r0, r2
 8000e92:	e6fb      	b.n	8000c8c <__udivmoddi4+0x90>
 8000e94:	4548      	cmp	r0, r9
 8000e96:	d2a9      	bcs.n	8000dec <__udivmoddi4+0x1f0>
 8000e98:	ebb9 0802 	subs.w	r8, r9, r2
 8000e9c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ea0:	3b01      	subs	r3, #1
 8000ea2:	e7a3      	b.n	8000dec <__udivmoddi4+0x1f0>
 8000ea4:	4645      	mov	r5, r8
 8000ea6:	e7ea      	b.n	8000e7e <__udivmoddi4+0x282>
 8000ea8:	462b      	mov	r3, r5
 8000eaa:	e794      	b.n	8000dd6 <__udivmoddi4+0x1da>
 8000eac:	4640      	mov	r0, r8
 8000eae:	e7d1      	b.n	8000e54 <__udivmoddi4+0x258>
 8000eb0:	46d0      	mov	r8, sl
 8000eb2:	e77b      	b.n	8000dac <__udivmoddi4+0x1b0>
 8000eb4:	3d02      	subs	r5, #2
 8000eb6:	4462      	add	r2, ip
 8000eb8:	e732      	b.n	8000d20 <__udivmoddi4+0x124>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e70a      	b.n	8000cd4 <__udivmoddi4+0xd8>
 8000ebe:	4464      	add	r4, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e742      	b.n	8000d4a <__udivmoddi4+0x14e>

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == B1_Pin) {
 8000ed2:	88fb      	ldrh	r3, [r7, #6]
 8000ed4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ed8:	d105      	bne.n	8000ee6 <HAL_GPIO_EXTI_Callback+0x1e>
    exit_while_loop++;
 8000eda:	4b0a      	ldr	r3, [pc, #40]	; (8000f04 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	4a08      	ldr	r2, [pc, #32]	; (8000f04 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000ee2:	6013      	str	r3, [r2, #0]
  }
  else if (GPIO_Pin == RPM_TICK_Pin) {
    // increment the rpm value
    g_rpm_tick_count++;
  }
}
 8000ee4:	e007      	b.n	8000ef6 <HAL_GPIO_EXTI_Callback+0x2e>
  else if (GPIO_Pin == RPM_TICK_Pin) {
 8000ee6:	88fb      	ldrh	r3, [r7, #6]
 8000ee8:	2b04      	cmp	r3, #4
 8000eea:	d104      	bne.n	8000ef6 <HAL_GPIO_EXTI_Callback+0x2e>
    g_rpm_tick_count++;
 8000eec:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <HAL_GPIO_EXTI_Callback+0x40>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	4a05      	ldr	r2, [pc, #20]	; (8000f08 <HAL_GPIO_EXTI_Callback+0x40>)
 8000ef4:	6013      	str	r3, [r2, #0]
}
 8000ef6:	bf00      	nop
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	20000480 	.word	0x20000480
 8000f08:	200004b4 	.word	0x200004b4

08000f0c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a19      	ldr	r2, [pc, #100]	; (8000f80 <HAL_UART_RxCpltCallback+0x74>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d12b      	bne.n	8000f76 <HAL_UART_RxCpltCallback+0x6a>
  {
    if (rx_data == '\r')
 8000f1e:	4b19      	ldr	r3, [pc, #100]	; (8000f84 <HAL_UART_RxCpltCallback+0x78>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	2b0d      	cmp	r3, #13
 8000f24:	d112      	bne.n	8000f4c <HAL_UART_RxCpltCallback+0x40>
    {
      buffer[buffer_index] = '\0';
 8000f26:	4b18      	ldr	r3, [pc, #96]	; (8000f88 <HAL_UART_RxCpltCallback+0x7c>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a18      	ldr	r2, [pc, #96]	; (8000f8c <HAL_UART_RxCpltCallback+0x80>)
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	54d1      	strb	r1, [r2, r3]
      rcv_intpt_flag = 1;
 8000f30:	4b17      	ldr	r3, [pc, #92]	; (8000f90 <HAL_UART_RxCpltCallback+0x84>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	701a      	strb	r2, [r3, #0]
      buffer_index = 0; // Reset buffer index for next input
 8000f36:	4b14      	ldr	r3, [pc, #80]	; (8000f88 <HAL_UART_RxCpltCallback+0x7c>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
      HAL_UART_Transmit(&huart6, (uint8_t *)"\r\n", 2, HAL_MAX_DELAY); // Echo newline
 8000f3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f40:	2202      	movs	r2, #2
 8000f42:	4914      	ldr	r1, [pc, #80]	; (8000f94 <HAL_UART_RxCpltCallback+0x88>)
 8000f44:	4814      	ldr	r0, [pc, #80]	; (8000f98 <HAL_UART_RxCpltCallback+0x8c>)
 8000f46:	f004 fe7a 	bl	8005c3e <HAL_UART_Transmit>
 8000f4a:	e00f      	b.n	8000f6c <HAL_UART_RxCpltCallback+0x60>
    }
    else
    {
      buffer[buffer_index++] = rx_data;
 8000f4c:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <HAL_UART_RxCpltCallback+0x7c>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	1c5a      	adds	r2, r3, #1
 8000f52:	490d      	ldr	r1, [pc, #52]	; (8000f88 <HAL_UART_RxCpltCallback+0x7c>)
 8000f54:	600a      	str	r2, [r1, #0]
 8000f56:	4a0b      	ldr	r2, [pc, #44]	; (8000f84 <HAL_UART_RxCpltCallback+0x78>)
 8000f58:	7811      	ldrb	r1, [r2, #0]
 8000f5a:	4a0c      	ldr	r2, [pc, #48]	; (8000f8c <HAL_UART_RxCpltCallback+0x80>)
 8000f5c:	54d1      	strb	r1, [r2, r3]
      HAL_UART_Transmit(&huart6, &rx_data, 1, HAL_MAX_DELAY); // Echo the received character
 8000f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f62:	2201      	movs	r2, #1
 8000f64:	4907      	ldr	r1, [pc, #28]	; (8000f84 <HAL_UART_RxCpltCallback+0x78>)
 8000f66:	480c      	ldr	r0, [pc, #48]	; (8000f98 <HAL_UART_RxCpltCallback+0x8c>)
 8000f68:	f004 fe69 	bl	8005c3e <HAL_UART_Transmit>
    }
    HAL_UART_Receive_IT(&huart6, &rx_data, 1);
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	4905      	ldr	r1, [pc, #20]	; (8000f84 <HAL_UART_RxCpltCallback+0x78>)
 8000f70:	4809      	ldr	r0, [pc, #36]	; (8000f98 <HAL_UART_RxCpltCallback+0x8c>)
 8000f72:	f004 fef6 	bl	8005d62 <HAL_UART_Receive_IT>
  }
}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40011400 	.word	0x40011400
 8000f84:	2000047c 	.word	0x2000047c
 8000f88:	20000478 	.word	0x20000478
 8000f8c:	20000278 	.word	0x20000278
 8000f90:	2000047d 	.word	0x2000047d
 8000f94:	08007fd0 	.word	0x08007fd0
 8000f98:	20000234 	.word	0x20000234

08000f9c <set_pwm_motor>:

void set_pwm_motor(PIPE p) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	71fb      	strb	r3, [r7, #7]
	switch (p) {
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	2b03      	cmp	r3, #3
 8000faa:	d82f      	bhi.n	800100c <set_pwm_motor+0x70>
 8000fac:	a201      	add	r2, pc, #4	; (adr r2, 8000fb4 <set_pwm_motor+0x18>)
 8000fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fb2:	bf00      	nop
 8000fb4:	08000fc5 	.word	0x08000fc5
 8000fb8:	08000fd7 	.word	0x08000fd7
 8000fbc:	08000fe9 	.word	0x08000fe9
 8000fc0:	08000ffb 	.word	0x08000ffb
	        case INLET:
	        	// -90, 1ms pulse
	            __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, 650);
 8000fc4:	4b14      	ldr	r3, [pc, #80]	; (8001018 <set_pwm_motor+0x7c>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f240 228a 	movw	r2, #650	; 0x28a
 8000fcc:	635a      	str	r2, [r3, #52]	; 0x34
	            setLEDState(LED_PURPLE);
 8000fce:	2004      	movs	r0, #4
 8000fd0:	f000 f890 	bl	80010f4 <setLEDState>
	            break;
 8000fd4:	e01b      	b.n	800100e <set_pwm_motor+0x72>
	        case OUTLET1:
	        	// -30, 1.33ms pulse
	            __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, 500+800);
 8000fd6:	4b10      	ldr	r3, [pc, #64]	; (8001018 <set_pwm_motor+0x7c>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f240 5214 	movw	r2, #1300	; 0x514
 8000fde:	635a      	str	r2, [r3, #52]	; 0x34
	            setLEDState(LED_RED);
 8000fe0:	2001      	movs	r0, #1
 8000fe2:	f000 f887 	bl	80010f4 <setLEDState>
	            break;
 8000fe6:	e012      	b.n	800100e <set_pwm_motor+0x72>
	        case OUTLET2:
	        	// 30, 1.66ms pulse
				__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, 2500-567);
 8000fe8:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <set_pwm_motor+0x7c>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f240 728d 	movw	r2, #1933	; 0x78d
 8000ff0:	635a      	str	r2, [r3, #52]	; 0x34
				setLEDState(LED_GREEN);
 8000ff2:	2002      	movs	r0, #2
 8000ff4:	f000 f87e 	bl	80010f4 <setLEDState>
				break;
 8000ff8:	e009      	b.n	800100e <set_pwm_motor+0x72>
	        case OUTLET3:
	        	// 90, 2ms pulse
				__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, 2500);
 8000ffa:	4b07      	ldr	r3, [pc, #28]	; (8001018 <set_pwm_motor+0x7c>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001002:	635a      	str	r2, [r3, #52]	; 0x34
				setLEDState(LED_BLUE);
 8001004:	2003      	movs	r0, #3
 8001006:	f000 f875 	bl	80010f4 <setLEDState>
				break;
 800100a:	e000      	b.n	800100e <set_pwm_motor+0x72>
	        default:
	            // Invalid direction, stop the motor
	            break;
 800100c:	bf00      	nop
	    }
}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	200001a4 	.word	0x200001a4

0800101c <set_dc_motor>:

void set_dc_motor(PIPE p, double pwm) {
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	ed87 0b00 	vstr	d0, [r7]
 8001028:	73fb      	strb	r3, [r7, #15]
    // Ensure the PWM value is within the valid range (0-100)
    if (pwm < 0) pwm = 0;
 800102a:	f04f 0200 	mov.w	r2, #0
 800102e:	f04f 0300 	mov.w	r3, #0
 8001032:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001036:	f7ff fd59 	bl	8000aec <__aeabi_dcmplt>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d005      	beq.n	800104c <set_dc_motor+0x30>
 8001040:	f04f 0200 	mov.w	r2, #0
 8001044:	f04f 0300 	mov.w	r3, #0
 8001048:	e9c7 2300 	strd	r2, r3, [r7]
    if (pwm > 100) pwm = 100;
 800104c:	f04f 0200 	mov.w	r2, #0
 8001050:	4b26      	ldr	r3, [pc, #152]	; (80010ec <set_dc_motor+0xd0>)
 8001052:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001056:	f7ff fd67 	bl	8000b28 <__aeabi_dcmpgt>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d004      	beq.n	800106a <set_dc_motor+0x4e>
 8001060:	f04f 0200 	mov.w	r2, #0
 8001064:	4b21      	ldr	r3, [pc, #132]	; (80010ec <set_dc_motor+0xd0>)
 8001066:	e9c7 2300 	strd	r2, r3, [r7]

    // Calculate the pulse width based on the percentage
    uint32_t pulse = (htim3.Init.Period + 1) * pwm / 100;
 800106a:	4b21      	ldr	r3, [pc, #132]	; (80010f0 <set_dc_motor+0xd4>)
 800106c:	68db      	ldr	r3, [r3, #12]
 800106e:	3301      	adds	r3, #1
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff fa4f 	bl	8000514 <__aeabi_ui2d>
 8001076:	e9d7 2300 	ldrd	r2, r3, [r7]
 800107a:	f7ff fac5 	bl	8000608 <__aeabi_dmul>
 800107e:	4602      	mov	r2, r0
 8001080:	460b      	mov	r3, r1
 8001082:	4610      	mov	r0, r2
 8001084:	4619      	mov	r1, r3
 8001086:	f04f 0200 	mov.w	r2, #0
 800108a:	4b18      	ldr	r3, [pc, #96]	; (80010ec <set_dc_motor+0xd0>)
 800108c:	f7ff fbe6 	bl	800085c <__aeabi_ddiv>
 8001090:	4602      	mov	r2, r0
 8001092:	460b      	mov	r3, r1
 8001094:	4610      	mov	r0, r2
 8001096:	4619      	mov	r1, r3
 8001098:	f7ff fd78 	bl	8000b8c <__aeabi_d2uiz>
 800109c:	4603      	mov	r3, r0
 800109e:	617b      	str	r3, [r7, #20]



    // Set the direction and apply the calculated pulse width
    // stop motor in other direction
    switch (p) {
 80010a0:	7bfb      	ldrb	r3, [r7, #15]
 80010a2:	2b04      	cmp	r3, #4
 80010a4:	d002      	beq.n	80010ac <set_dc_motor+0x90>
 80010a6:	2b05      	cmp	r3, #5
 80010a8:	d009      	beq.n	80010be <set_dc_motor+0xa2>
 80010aa:	e011      	b.n	80010d0 <set_dc_motor+0xb4>
        case IN:
        	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 80010ac:	4b10      	ldr	r3, [pc, #64]	; (80010f0 <set_dc_motor+0xd4>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2200      	movs	r2, #0
 80010b2:	639a      	str	r2, [r3, #56]	; 0x38
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulse);
 80010b4:	4b0e      	ldr	r3, [pc, #56]	; (80010f0 <set_dc_motor+0xd4>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	697a      	ldr	r2, [r7, #20]
 80010ba:	635a      	str	r2, [r3, #52]	; 0x34
            break;
 80010bc:	e011      	b.n	80010e2 <set_dc_motor+0xc6>
        case OUT:
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80010be:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <set_dc_motor+0xd4>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	2200      	movs	r2, #0
 80010c4:	635a      	str	r2, [r3, #52]	; 0x34
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pulse);
 80010c6:	4b0a      	ldr	r3, [pc, #40]	; (80010f0 <set_dc_motor+0xd4>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	697a      	ldr	r2, [r7, #20]
 80010cc:	639a      	str	r2, [r3, #56]	; 0x38
            break;
 80010ce:	e008      	b.n	80010e2 <set_dc_motor+0xc6>
        default:
            // Invalid direction, stop the motor
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80010d0:	4b07      	ldr	r3, [pc, #28]	; (80010f0 <set_dc_motor+0xd4>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2200      	movs	r2, #0
 80010d6:	635a      	str	r2, [r3, #52]	; 0x34
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 80010d8:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <set_dc_motor+0xd4>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2200      	movs	r2, #0
 80010de:	639a      	str	r2, [r3, #56]	; 0x38
            break;
 80010e0:	bf00      	nop
    }
}
 80010e2:	bf00      	nop
 80010e4:	3718      	adds	r7, #24
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40590000 	.word	0x40590000
 80010f0:	20000114 	.word	0x20000114

080010f4 <setLEDState>:


void setLEDState(LED_State state) {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	71fb      	strb	r3, [r7, #7]
    // Turn off all LEDs first
    HAL_GPIO_WritePin(GPIOA, RED_Pin, GPIO_PIN_RESET);  // RED
 80010fe:	2200      	movs	r2, #0
 8001100:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001104:	4823      	ldr	r0, [pc, #140]	; (8001194 <setLEDState+0xa0>)
 8001106:	f002 fd47 	bl	8003b98 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GRN_Pin, GPIO_PIN_RESET);  // GRN
 800110a:	2200      	movs	r2, #0
 800110c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001110:	4820      	ldr	r0, [pc, #128]	; (8001194 <setLEDState+0xa0>)
 8001112:	f002 fd41 	bl	8003b98 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, BLU_Pin, GPIO_PIN_RESET);  // BLU
 8001116:	2200      	movs	r2, #0
 8001118:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800111c:	481d      	ldr	r0, [pc, #116]	; (8001194 <setLEDState+0xa0>)
 800111e:	f002 fd3b 	bl	8003b98 <HAL_GPIO_WritePin>

    // Set the desired state
    switch (state) {
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	2b04      	cmp	r3, #4
 8001126:	d82f      	bhi.n	8001188 <setLEDState+0x94>
 8001128:	a201      	add	r2, pc, #4	; (adr r2, 8001130 <setLEDState+0x3c>)
 800112a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800112e:	bf00      	nop
 8001130:	08001189 	.word	0x08001189
 8001134:	08001145 	.word	0x08001145
 8001138:	08001153 	.word	0x08001153
 800113c:	08001161 	.word	0x08001161
 8001140:	0800116f 	.word	0x0800116f
        case LED_OFF:
            // All LEDs are already off
            break;
        case LED_RED:
            HAL_GPIO_WritePin(GPIOA, RED_Pin, GPIO_PIN_SET);  // RED on
 8001144:	2201      	movs	r2, #1
 8001146:	f44f 7180 	mov.w	r1, #256	; 0x100
 800114a:	4812      	ldr	r0, [pc, #72]	; (8001194 <setLEDState+0xa0>)
 800114c:	f002 fd24 	bl	8003b98 <HAL_GPIO_WritePin>
            break;
 8001150:	e01b      	b.n	800118a <setLEDState+0x96>
        case LED_GREEN:
            HAL_GPIO_WritePin(GPIOA, GRN_Pin, GPIO_PIN_SET);  // GREEN on
 8001152:	2201      	movs	r2, #1
 8001154:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001158:	480e      	ldr	r0, [pc, #56]	; (8001194 <setLEDState+0xa0>)
 800115a:	f002 fd1d 	bl	8003b98 <HAL_GPIO_WritePin>
            break;
 800115e:	e014      	b.n	800118a <setLEDState+0x96>
        case LED_BLUE:
            HAL_GPIO_WritePin(GPIOA, BLU_Pin, GPIO_PIN_SET);  // BLUE on
 8001160:	2201      	movs	r2, #1
 8001162:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001166:	480b      	ldr	r0, [pc, #44]	; (8001194 <setLEDState+0xa0>)
 8001168:	f002 fd16 	bl	8003b98 <HAL_GPIO_WritePin>
            break;
 800116c:	e00d      	b.n	800118a <setLEDState+0x96>
        case LED_PURPLE:
            HAL_GPIO_WritePin(GPIOA, RED_Pin, GPIO_PIN_SET);  // RED on
 800116e:	2201      	movs	r2, #1
 8001170:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001174:	4807      	ldr	r0, [pc, #28]	; (8001194 <setLEDState+0xa0>)
 8001176:	f002 fd0f 	bl	8003b98 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, BLU_Pin, GPIO_PIN_SET);  // BLUE on
 800117a:	2201      	movs	r2, #1
 800117c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001180:	4804      	ldr	r0, [pc, #16]	; (8001194 <setLEDState+0xa0>)
 8001182:	f002 fd09 	bl	8003b98 <HAL_GPIO_WritePin>
            break;
 8001186:	e000      	b.n	800118a <setLEDState+0x96>
        default:
            // Invalid state
            break;
 8001188:	bf00      	nop
    }
}
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40020000 	.word	0x40020000

08001198 <handle_setup_mode>:

void handle_setup_mode(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800119e:	af00      	add	r7, sp, #0
  char response[BUFFER_SIZE];

  snprintf(response, BUFFER_SIZE, "SETUP MODE\r\n");
 80011a0:	463b      	mov	r3, r7
 80011a2:	4a3c      	ldr	r2, [pc, #240]	; (8001294 <handle_setup_mode+0xfc>)
 80011a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011a8:	4618      	mov	r0, r3
 80011aa:	f005 fd73 	bl	8006c94 <sniprintf>
  HAL_UART_Transmit(&huart6, (uint8_t *)response, strlen(response), HAL_MAX_DELAY);
 80011ae:	463b      	mov	r3, r7
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff f815 	bl	80001e0 <strlen>
 80011b6:	4603      	mov	r3, r0
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	4639      	mov	r1, r7
 80011bc:	f04f 33ff 	mov.w	r3, #4294967295
 80011c0:	4835      	ldr	r0, [pc, #212]	; (8001298 <handle_setup_mode+0x100>)
 80011c2:	f004 fd3c 	bl	8005c3e <HAL_UART_Transmit>
  snprintf(response, BUFFER_SIZE, "0 - MANUAL, 1 - 60% PWM, 2 - 80% PWM, 3 - 99% PWM\r\n");
 80011c6:	463b      	mov	r3, r7
 80011c8:	4a34      	ldr	r2, [pc, #208]	; (800129c <handle_setup_mode+0x104>)
 80011ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011ce:	4618      	mov	r0, r3
 80011d0:	f005 fd60 	bl	8006c94 <sniprintf>
  HAL_UART_Transmit(&huart6, (uint8_t *)response, strlen(response), HAL_MAX_DELAY);
 80011d4:	463b      	mov	r3, r7
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff f802 	bl	80001e0 <strlen>
 80011dc:	4603      	mov	r3, r0
 80011de:	b29a      	uxth	r2, r3
 80011e0:	4639      	mov	r1, r7
 80011e2:	f04f 33ff 	mov.w	r3, #4294967295
 80011e6:	482c      	ldr	r0, [pc, #176]	; (8001298 <handle_setup_mode+0x100>)
 80011e8:	f004 fd29 	bl	8005c3e <HAL_UART_Transmit>


  prompt_and_receive("Enter Inlet Motor Speed PWM (0-3): ", &inlet_pwm);
 80011ec:	492c      	ldr	r1, [pc, #176]	; (80012a0 <handle_setup_mode+0x108>)
 80011ee:	482d      	ldr	r0, [pc, #180]	; (80012a4 <handle_setup_mode+0x10c>)
 80011f0:	f000 f88e 	bl	8001310 <prompt_and_receive>
  prompt_and_receive("Enter Zone 1 Motor Speed PWM (0-3): ", &zone1_pwm);
 80011f4:	492c      	ldr	r1, [pc, #176]	; (80012a8 <handle_setup_mode+0x110>)
 80011f6:	482d      	ldr	r0, [pc, #180]	; (80012ac <handle_setup_mode+0x114>)
 80011f8:	f000 f88a 	bl	8001310 <prompt_and_receive>
  prompt_and_receive("Enter Zone 2 Motor Speed PWM (0-3): ", &zone2_pwm);
 80011fc:	492c      	ldr	r1, [pc, #176]	; (80012b0 <handle_setup_mode+0x118>)
 80011fe:	482d      	ldr	r0, [pc, #180]	; (80012b4 <handle_setup_mode+0x11c>)
 8001200:	f000 f886 	bl	8001310 <prompt_and_receive>
  prompt_and_receive("Enter Zone 3 Motor Speed PWM (0-3): ", &zone3_pwm);
 8001204:	492c      	ldr	r1, [pc, #176]	; (80012b8 <handle_setup_mode+0x120>)
 8001206:	482d      	ldr	r0, [pc, #180]	; (80012bc <handle_setup_mode+0x124>)
 8001208:	f000 f882 	bl	8001310 <prompt_and_receive>
  snprintf(response, BUFFER_SIZE, "\n0 - 12AM, 1 - 1AM, ... , 22 - 10PM, 23 - 11PM\r\n");
 800120c:	463b      	mov	r3, r7
 800120e:	4a2c      	ldr	r2, [pc, #176]	; (80012c0 <handle_setup_mode+0x128>)
 8001210:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001214:	4618      	mov	r0, r3
 8001216:	f005 fd3d 	bl	8006c94 <sniprintf>
  HAL_UART_Transmit(&huart6, (uint8_t *)response, strlen(response), HAL_MAX_DELAY);
 800121a:	463b      	mov	r3, r7
 800121c:	4618      	mov	r0, r3
 800121e:	f7fe ffdf 	bl	80001e0 <strlen>
 8001222:	4603      	mov	r3, r0
 8001224:	b29a      	uxth	r2, r3
 8001226:	4639      	mov	r1, r7
 8001228:	f04f 33ff 	mov.w	r3, #4294967295
 800122c:	481a      	ldr	r0, [pc, #104]	; (8001298 <handle_setup_mode+0x100>)
 800122e:	f004 fd06 	bl	8005c3e <HAL_UART_Transmit>

  prompt_and_receive("Enter Current Wall Clock Time (00-23): ", &hours);
 8001232:	4924      	ldr	r1, [pc, #144]	; (80012c4 <handle_setup_mode+0x12c>)
 8001234:	4824      	ldr	r0, [pc, #144]	; (80012c8 <handle_setup_mode+0x130>)
 8001236:	f000 f86b 	bl	8001310 <prompt_and_receive>
  prompt_and_receive("Enter Inlet Wall Clock Start Time (00-23): ", &inlet_start);
 800123a:	4924      	ldr	r1, [pc, #144]	; (80012cc <handle_setup_mode+0x134>)
 800123c:	4824      	ldr	r0, [pc, #144]	; (80012d0 <handle_setup_mode+0x138>)
 800123e:	f000 f867 	bl	8001310 <prompt_and_receive>
  prompt_and_receive("Enter Inlet Wall Clock Stop Time (00-23): ", &inlet_stop);
 8001242:	4924      	ldr	r1, [pc, #144]	; (80012d4 <handle_setup_mode+0x13c>)
 8001244:	4824      	ldr	r0, [pc, #144]	; (80012d8 <handle_setup_mode+0x140>)
 8001246:	f000 f863 	bl	8001310 <prompt_and_receive>
  prompt_and_receive("Enter Zone 1 Wall Clock Start Time (00-23): ", &zone1_start);
 800124a:	4924      	ldr	r1, [pc, #144]	; (80012dc <handle_setup_mode+0x144>)
 800124c:	4824      	ldr	r0, [pc, #144]	; (80012e0 <handle_setup_mode+0x148>)
 800124e:	f000 f85f 	bl	8001310 <prompt_and_receive>
  prompt_and_receive("Enter Zone 1 Wall Clock Stop Time (00-23): ", &zone1_stop);
 8001252:	4924      	ldr	r1, [pc, #144]	; (80012e4 <handle_setup_mode+0x14c>)
 8001254:	4824      	ldr	r0, [pc, #144]	; (80012e8 <handle_setup_mode+0x150>)
 8001256:	f000 f85b 	bl	8001310 <prompt_and_receive>
  prompt_and_receive("Enter Zone 2 Wall Clock Start Time (00-23): ", &zone2_start);
 800125a:	4924      	ldr	r1, [pc, #144]	; (80012ec <handle_setup_mode+0x154>)
 800125c:	4824      	ldr	r0, [pc, #144]	; (80012f0 <handle_setup_mode+0x158>)
 800125e:	f000 f857 	bl	8001310 <prompt_and_receive>
  prompt_and_receive("Enter Zone 2 Wall Clock Stop Time (00-23): ", &zone2_stop);
 8001262:	4924      	ldr	r1, [pc, #144]	; (80012f4 <handle_setup_mode+0x15c>)
 8001264:	4824      	ldr	r0, [pc, #144]	; (80012f8 <handle_setup_mode+0x160>)
 8001266:	f000 f853 	bl	8001310 <prompt_and_receive>
  prompt_and_receive("Enter Zone 3 Wall Clock Start Time (00-23): ", &zone3_start);
 800126a:	4924      	ldr	r1, [pc, #144]	; (80012fc <handle_setup_mode+0x164>)
 800126c:	4824      	ldr	r0, [pc, #144]	; (8001300 <handle_setup_mode+0x168>)
 800126e:	f000 f84f 	bl	8001310 <prompt_and_receive>
  prompt_and_receive("Enter Zone 3 Wall Clock Stop Time (00-23): ", &zone3_stop);
 8001272:	4924      	ldr	r1, [pc, #144]	; (8001304 <handle_setup_mode+0x16c>)
 8001274:	4824      	ldr	r0, [pc, #144]	; (8001308 <handle_setup_mode+0x170>)
 8001276:	f000 f84b 	bl	8001310 <prompt_and_receive>
//
//  snprintf(response, BUFFER_SIZE, "Configuration Completed:\r\nInlet PWM: %d\r\nZone 1 PWM: %d\r\nZone 2 PWM: %d\r\nZone 3 PWM: %d\r\nCurrent Time: %d\r\nInlet Start: %d\r\nInlet Stop: %d\r\nZone 1 Start: %d\r\nZone 1 Stop: %d\r\nZone 2 Start: %d\r\nZone 2 Stop: %d\r\nZone 3 Start: %d\r\nZone 3 Stop: %d\r\n",
//           inlet_pwm, zone1_pwm, zone2_pwm, zone3_pwm, current_time, inlet_start, inlet_stop, zone1_start, zone1_stop, zone2_start, zone2_stop, zone3_start, zone3_stop);
  HAL_UART_Transmit(&huart6, "\r\n", 2, HAL_MAX_DELAY);
 800127a:	f04f 33ff 	mov.w	r3, #4294967295
 800127e:	2202      	movs	r2, #2
 8001280:	4922      	ldr	r1, [pc, #136]	; (800130c <handle_setup_mode+0x174>)
 8001282:	4805      	ldr	r0, [pc, #20]	; (8001298 <handle_setup_mode+0x100>)
 8001284:	f004 fcdb 	bl	8005c3e <HAL_UART_Transmit>
}
 8001288:	bf00      	nop
 800128a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	08007fd4 	.word	0x08007fd4
 8001298:	20000234 	.word	0x20000234
 800129c:	08007fe4 	.word	0x08007fe4
 80012a0:	20000484 	.word	0x20000484
 80012a4:	08008018 	.word	0x08008018
 80012a8:	20000488 	.word	0x20000488
 80012ac:	0800803c 	.word	0x0800803c
 80012b0:	2000048c 	.word	0x2000048c
 80012b4:	08008064 	.word	0x08008064
 80012b8:	20000490 	.word	0x20000490
 80012bc:	0800808c 	.word	0x0800808c
 80012c0:	080080b4 	.word	0x080080b4
 80012c4:	200004cc 	.word	0x200004cc
 80012c8:	080080e8 	.word	0x080080e8
 80012cc:	20000494 	.word	0x20000494
 80012d0:	08008110 	.word	0x08008110
 80012d4:	20000498 	.word	0x20000498
 80012d8:	0800813c 	.word	0x0800813c
 80012dc:	2000049c 	.word	0x2000049c
 80012e0:	08008168 	.word	0x08008168
 80012e4:	200004a0 	.word	0x200004a0
 80012e8:	08008198 	.word	0x08008198
 80012ec:	200004a4 	.word	0x200004a4
 80012f0:	080081c4 	.word	0x080081c4
 80012f4:	200004a8 	.word	0x200004a8
 80012f8:	080081f4 	.word	0x080081f4
 80012fc:	200004ac 	.word	0x200004ac
 8001300:	08008220 	.word	0x08008220
 8001304:	200004b0 	.word	0x200004b0
 8001308:	08008250 	.word	0x08008250
 800130c:	08007fd0 	.word	0x08007fd0

08001310 <prompt_and_receive>:

void prompt_and_receive(const char *prompt, int *value)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001316:	af00      	add	r7, sp, #0
 8001318:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800131c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001320:	6018      	str	r0, [r3, #0]
 8001322:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001326:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800132a:	6019      	str	r1, [r3, #0]
  char response[BUFFER_SIZE];

  HAL_UART_Transmit(&huart6, (uint8_t *)prompt, strlen(prompt), HAL_MAX_DELAY);
 800132c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001330:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001334:	6818      	ldr	r0, [r3, #0]
 8001336:	f7fe ff53 	bl	80001e0 <strlen>
 800133a:	4603      	mov	r3, r0
 800133c:	b29a      	uxth	r2, r3
 800133e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001342:	f5a3 7101 	sub.w	r1, r3, #516	; 0x204
 8001346:	f04f 33ff 	mov.w	r3, #4294967295
 800134a:	6809      	ldr	r1, [r1, #0]
 800134c:	480c      	ldr	r0, [pc, #48]	; (8001380 <prompt_and_receive+0x70>)
 800134e:	f004 fc76 	bl	8005c3e <HAL_UART_Transmit>
  rcv_intpt_flag = 0;
 8001352:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <prompt_and_receive+0x74>)
 8001354:	2200      	movs	r2, #0
 8001356:	701a      	strb	r2, [r3, #0]
  while (!rcv_intpt_flag); // Wait for input
 8001358:	bf00      	nop
 800135a:	4b0a      	ldr	r3, [pc, #40]	; (8001384 <prompt_and_receive+0x74>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	b2db      	uxtb	r3, r3
 8001360:	2b00      	cmp	r3, #0
 8001362:	d0fa      	beq.n	800135a <prompt_and_receive+0x4a>
  sscanf(buffer, "%d", value); // load value with the inputted characters
 8001364:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001368:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	4906      	ldr	r1, [pc, #24]	; (8001388 <prompt_and_receive+0x78>)
 8001370:	4806      	ldr	r0, [pc, #24]	; (800138c <prompt_and_receive+0x7c>)
 8001372:	f005 fce3 	bl	8006d3c <siscanf>
}
 8001376:	bf00      	nop
 8001378:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	20000234 	.word	0x20000234
 8001384:	2000047d 	.word	0x2000047d
 8001388:	0800827c 	.word	0x0800827c
 800138c:	20000278 	.word	0x20000278

08001390 <HAL_TIM_PeriodElapsedCallback>:

volatile uint32_t g_last_rpm_calc_time = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM4) {
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a54      	ldr	r2, [pc, #336]	; (80014f0 <HAL_TIM_PeriodElapsedCallback+0x160>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d165      	bne.n	800146e <HAL_TIM_PeriodElapsedCallback+0xde>
    real_seconds++;
 80013a2:	4b54      	ldr	r3, [pc, #336]	; (80014f4 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	3301      	adds	r3, #1
 80013a8:	4a52      	ldr	r2, [pc, #328]	; (80014f4 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80013aa:	6013      	str	r3, [r2, #0]


    seconds += 600;
 80013ac:	4b52      	ldr	r3, [pc, #328]	; (80014f8 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80013b4:	4a50      	ldr	r2, [pc, #320]	; (80014f8 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80013b6:	6013      	str	r3, [r2, #0]
    if (seconds >= 60) {
 80013b8:	4b4f      	ldr	r3, [pc, #316]	; (80014f8 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2b3b      	cmp	r3, #59	; 0x3b
 80013be:	f340 808d 	ble.w	80014dc <HAL_TIM_PeriodElapsedCallback+0x14c>
      minutes += seconds / 60;
 80013c2:	4b4d      	ldr	r3, [pc, #308]	; (80014f8 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a4d      	ldr	r2, [pc, #308]	; (80014fc <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80013c8:	fb82 1203 	smull	r1, r2, r2, r3
 80013cc:	441a      	add	r2, r3
 80013ce:	1152      	asrs	r2, r2, #5
 80013d0:	17db      	asrs	r3, r3, #31
 80013d2:	1ad2      	subs	r2, r2, r3
 80013d4:	4b4a      	ldr	r3, [pc, #296]	; (8001500 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4413      	add	r3, r2
 80013da:	4a49      	ldr	r2, [pc, #292]	; (8001500 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80013dc:	6013      	str	r3, [r2, #0]
      seconds %= 60;
 80013de:	4b46      	ldr	r3, [pc, #280]	; (80014f8 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	4b46      	ldr	r3, [pc, #280]	; (80014fc <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80013e4:	fb83 1302 	smull	r1, r3, r3, r2
 80013e8:	4413      	add	r3, r2
 80013ea:	1159      	asrs	r1, r3, #5
 80013ec:	17d3      	asrs	r3, r2, #31
 80013ee:	1ac9      	subs	r1, r1, r3
 80013f0:	460b      	mov	r3, r1
 80013f2:	011b      	lsls	r3, r3, #4
 80013f4:	1a5b      	subs	r3, r3, r1
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	1ad1      	subs	r1, r2, r3
 80013fa:	4b3f      	ldr	r3, [pc, #252]	; (80014f8 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80013fc:	6019      	str	r1, [r3, #0]
      if (minutes >= 60) {
 80013fe:	4b40      	ldr	r3, [pc, #256]	; (8001500 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2b3b      	cmp	r3, #59	; 0x3b
 8001404:	dd6a      	ble.n	80014dc <HAL_TIM_PeriodElapsedCallback+0x14c>
        hours += minutes / 60;
 8001406:	4b3e      	ldr	r3, [pc, #248]	; (8001500 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a3c      	ldr	r2, [pc, #240]	; (80014fc <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800140c:	fb82 1203 	smull	r1, r2, r2, r3
 8001410:	441a      	add	r2, r3
 8001412:	1152      	asrs	r2, r2, #5
 8001414:	17db      	asrs	r3, r3, #31
 8001416:	1ad2      	subs	r2, r2, r3
 8001418:	4b3a      	ldr	r3, [pc, #232]	; (8001504 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4413      	add	r3, r2
 800141e:	4a39      	ldr	r2, [pc, #228]	; (8001504 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001420:	6013      	str	r3, [r2, #0]
        minutes %= 60;
 8001422:	4b37      	ldr	r3, [pc, #220]	; (8001500 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	4b35      	ldr	r3, [pc, #212]	; (80014fc <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001428:	fb83 1302 	smull	r1, r3, r3, r2
 800142c:	4413      	add	r3, r2
 800142e:	1159      	asrs	r1, r3, #5
 8001430:	17d3      	asrs	r3, r2, #31
 8001432:	1ac9      	subs	r1, r1, r3
 8001434:	460b      	mov	r3, r1
 8001436:	011b      	lsls	r3, r3, #4
 8001438:	1a5b      	subs	r3, r3, r1
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	1ad1      	subs	r1, r2, r3
 800143e:	4b30      	ldr	r3, [pc, #192]	; (8001500 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001440:	6019      	str	r1, [r3, #0]
        if (hours >= 24) {
 8001442:	4b30      	ldr	r3, [pc, #192]	; (8001504 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2b17      	cmp	r3, #23
 8001448:	dd0e      	ble.n	8001468 <HAL_TIM_PeriodElapsedCallback+0xd8>
          hours %= 24;
 800144a:	4b2e      	ldr	r3, [pc, #184]	; (8001504 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800144c:	6819      	ldr	r1, [r3, #0]
 800144e:	4b2e      	ldr	r3, [pc, #184]	; (8001508 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001450:	fb83 2301 	smull	r2, r3, r3, r1
 8001454:	109a      	asrs	r2, r3, #2
 8001456:	17cb      	asrs	r3, r1, #31
 8001458:	1ad2      	subs	r2, r2, r3
 800145a:	4613      	mov	r3, r2
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	4413      	add	r3, r2
 8001460:	00db      	lsls	r3, r3, #3
 8001462:	1aca      	subs	r2, r1, r3
 8001464:	4b27      	ldr	r3, [pc, #156]	; (8001504 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001466:	601a      	str	r2, [r3, #0]
        }
        // Update display every hour
        update_display();
 8001468:	f000 f9a8 	bl	80017bc <update_display>
	  uint32_t temp_tick = g_rpm_tick_count;
	  	g_current_rpm = (((temp_tick/3.0) * 60.0) / (SLOTS_PER_REVOLUTION))*0.69;
	  	g_rpm_tick_count = 0;  // Reset the count for the next sample period

  }
}
 800146c:	e036      	b.n	80014dc <HAL_TIM_PeriodElapsedCallback+0x14c>
  else if (htim->Instance == TIM9) {
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a26      	ldr	r2, [pc, #152]	; (800150c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d131      	bne.n	80014dc <HAL_TIM_PeriodElapsedCallback+0x14c>
	  uint32_t temp_tick = g_rpm_tick_count;
 8001478:	4b25      	ldr	r3, [pc, #148]	; (8001510 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	60fb      	str	r3, [r7, #12]
	  	g_current_rpm = (((temp_tick/3.0) * 60.0) / (SLOTS_PER_REVOLUTION))*0.69;
 800147e:	68f8      	ldr	r0, [r7, #12]
 8001480:	f7ff f848 	bl	8000514 <__aeabi_ui2d>
 8001484:	f04f 0200 	mov.w	r2, #0
 8001488:	4b22      	ldr	r3, [pc, #136]	; (8001514 <HAL_TIM_PeriodElapsedCallback+0x184>)
 800148a:	f7ff f9e7 	bl	800085c <__aeabi_ddiv>
 800148e:	4602      	mov	r2, r0
 8001490:	460b      	mov	r3, r1
 8001492:	4610      	mov	r0, r2
 8001494:	4619      	mov	r1, r3
 8001496:	f04f 0200 	mov.w	r2, #0
 800149a:	4b1f      	ldr	r3, [pc, #124]	; (8001518 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800149c:	f7ff f8b4 	bl	8000608 <__aeabi_dmul>
 80014a0:	4602      	mov	r2, r0
 80014a2:	460b      	mov	r3, r1
 80014a4:	4610      	mov	r0, r2
 80014a6:	4619      	mov	r1, r3
 80014a8:	f04f 0200 	mov.w	r2, #0
 80014ac:	4b1b      	ldr	r3, [pc, #108]	; (800151c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80014ae:	f7ff f9d5 	bl	800085c <__aeabi_ddiv>
 80014b2:	4602      	mov	r2, r0
 80014b4:	460b      	mov	r3, r1
 80014b6:	4610      	mov	r0, r2
 80014b8:	4619      	mov	r1, r3
 80014ba:	a30b      	add	r3, pc, #44	; (adr r3, 80014e8 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80014bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c0:	f7ff f8a2 	bl	8000608 <__aeabi_dmul>
 80014c4:	4602      	mov	r2, r0
 80014c6:	460b      	mov	r3, r1
 80014c8:	4610      	mov	r0, r2
 80014ca:	4619      	mov	r1, r3
 80014cc:	f7ff fb5e 	bl	8000b8c <__aeabi_d2uiz>
 80014d0:	4603      	mov	r3, r0
 80014d2:	4a13      	ldr	r2, [pc, #76]	; (8001520 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80014d4:	6013      	str	r3, [r2, #0]
	  	g_rpm_tick_count = 0;  // Reset the count for the next sample period
 80014d6:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
}
 80014dc:	bf00      	nop
 80014de:	3710      	adds	r7, #16
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	f3af 8000 	nop.w
 80014e8:	e147ae14 	.word	0xe147ae14
 80014ec:	3fe6147a 	.word	0x3fe6147a
 80014f0:	40000800 	.word	0x40000800
 80014f4:	200004d8 	.word	0x200004d8
 80014f8:	200004d4 	.word	0x200004d4
 80014fc:	88888889 	.word	0x88888889
 8001500:	200004d0 	.word	0x200004d0
 8001504:	200004cc 	.word	0x200004cc
 8001508:	2aaaaaab 	.word	0x2aaaaaab
 800150c:	40014000 	.word	0x40014000
 8001510:	200004b4 	.word	0x200004b4
 8001514:	40080000 	.word	0x40080000
 8001518:	404e0000 	.word	0x404e0000
 800151c:	40340000 	.word	0x40340000
 8001520:	200004c8 	.word	0x200004c8

08001524 <HAL_TIM_IC_CaptureCallback>:
int g_time_edge1 = 0;
int g_time_edge2 = 0;
int g_time_diff = 0;
int g_hcsr04_Rx_flag = 0;
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
//	 HAL_UART_Transmit(&huart6, "AAA", 3, 1000);
    if (htim->Instance == TIM1)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a1f      	ldr	r2, [pc, #124]	; (80015b0 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d138      	bne.n	80015a8 <HAL_TIM_IC_CaptureCallback+0x84>
    {
        if (htim->Channel == 2)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	7f1b      	ldrb	r3, [r3, #28]
 800153a:	2b02      	cmp	r3, #2
 800153c:	d134      	bne.n	80015a8 <HAL_TIM_IC_CaptureCallback+0x84>
        {
             if (g_first_edge == 0)  // if the first value is not captured
 800153e:	4b1d      	ldr	r3, [pc, #116]	; (80015b4 <HAL_TIM_IC_CaptureCallback+0x90>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d10b      	bne.n	800155e <HAL_TIM_IC_CaptureCallback+0x3a>
             {
                 g_time_edge1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);  // read the first value
 8001546:	2104      	movs	r1, #4
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f003 fe5d 	bl	8005208 <HAL_TIM_ReadCapturedValue>
 800154e:	4603      	mov	r3, r0
 8001550:	461a      	mov	r2, r3
 8001552:	4b19      	ldr	r3, [pc, #100]	; (80015b8 <HAL_TIM_IC_CaptureCallback+0x94>)
 8001554:	601a      	str	r2, [r3, #0]
                 g_first_edge = 1;  // set the first captured as true
 8001556:	4b17      	ldr	r3, [pc, #92]	; (80015b4 <HAL_TIM_IC_CaptureCallback+0x90>)
 8001558:	2201      	movs	r2, #1
 800155a:	601a      	str	r2, [r3, #0]
             }


        }
    }
}
 800155c:	e024      	b.n	80015a8 <HAL_TIM_IC_CaptureCallback+0x84>
                 g_time_edge2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);  // read second value
 800155e:	2104      	movs	r1, #4
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f003 fe51 	bl	8005208 <HAL_TIM_ReadCapturedValue>
 8001566:	4603      	mov	r3, r0
 8001568:	461a      	mov	r2, r3
 800156a:	4b14      	ldr	r3, [pc, #80]	; (80015bc <HAL_TIM_IC_CaptureCallback+0x98>)
 800156c:	601a      	str	r2, [r3, #0]
                 __HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2200      	movs	r2, #0
 8001574:	625a      	str	r2, [r3, #36]	; 0x24
                 g_hcsr04_Rx_flag = 1;  // set the interrupt flag for result done
 8001576:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8001578:	2201      	movs	r2, #1
 800157a:	601a      	str	r2, [r3, #0]
                 g_time_diff = g_time_edge2 - g_time_edge1;
 800157c:	4b0f      	ldr	r3, [pc, #60]	; (80015bc <HAL_TIM_IC_CaptureCallback+0x98>)
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	4b0d      	ldr	r3, [pc, #52]	; (80015b8 <HAL_TIM_IC_CaptureCallback+0x94>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	4a0f      	ldr	r2, [pc, #60]	; (80015c4 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8001588:	6013      	str	r3, [r2, #0]
                 g_water_depth = g_time_diff/148.0;
 800158a:	4b0e      	ldr	r3, [pc, #56]	; (80015c4 <HAL_TIM_IC_CaptureCallback+0xa0>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4618      	mov	r0, r3
 8001590:	f7fe ffd0 	bl	8000534 <__aeabi_i2d>
 8001594:	f04f 0200 	mov.w	r2, #0
 8001598:	4b0b      	ldr	r3, [pc, #44]	; (80015c8 <HAL_TIM_IC_CaptureCallback+0xa4>)
 800159a:	f7ff f95f 	bl	800085c <__aeabi_ddiv>
 800159e:	4602      	mov	r2, r0
 80015a0:	460b      	mov	r3, r1
 80015a2:	490a      	ldr	r1, [pc, #40]	; (80015cc <HAL_TIM_IC_CaptureCallback+0xa8>)
 80015a4:	e9c1 2300 	strd	r2, r3, [r1]
}
 80015a8:	bf00      	nop
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40010000 	.word	0x40010000
 80015b4:	200005e0 	.word	0x200005e0
 80015b8:	200005e4 	.word	0x200005e4
 80015bc:	200005e8 	.word	0x200005e8
 80015c0:	200005f0 	.word	0x200005f0
 80015c4:	200005ec 	.word	0x200005ec
 80015c8:	40628000 	.word	0x40628000
 80015cc:	200004b8 	.word	0x200004b8

080015d0 <get_zone_pwm>:

int get_zone_pwm(PIPE p) {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	71fb      	strb	r3, [r7, #7]
    switch (p) {
 80015da:	79fb      	ldrb	r3, [r7, #7]
 80015dc:	2b03      	cmp	r3, #3
 80015de:	f200 80d0 	bhi.w	8001782 <get_zone_pwm+0x1b2>
 80015e2:	a201      	add	r2, pc, #4	; (adr r2, 80015e8 <get_zone_pwm+0x18>)
 80015e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015e8:	080015f9 	.word	0x080015f9
 80015ec:	0800165d 	.word	0x0800165d
 80015f0:	080016bf 	.word	0x080016bf
 80015f4:	08001721 	.word	0x08001721
        case INLET:
            if (!inlet_pwm) {
 80015f8:	4b69      	ldr	r3, [pc, #420]	; (80017a0 <get_zone_pwm+0x1d0>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d11a      	bne.n	8001636 <get_zone_pwm+0x66>
                return (g_adc_value / 256.0) * 100;
 8001600:	4b68      	ldr	r3, [pc, #416]	; (80017a4 <get_zone_pwm+0x1d4>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4618      	mov	r0, r3
 8001606:	f7fe ff95 	bl	8000534 <__aeabi_i2d>
 800160a:	f04f 0200 	mov.w	r2, #0
 800160e:	4b66      	ldr	r3, [pc, #408]	; (80017a8 <get_zone_pwm+0x1d8>)
 8001610:	f7ff f924 	bl	800085c <__aeabi_ddiv>
 8001614:	4602      	mov	r2, r0
 8001616:	460b      	mov	r3, r1
 8001618:	4610      	mov	r0, r2
 800161a:	4619      	mov	r1, r3
 800161c:	f04f 0200 	mov.w	r2, #0
 8001620:	4b62      	ldr	r3, [pc, #392]	; (80017ac <get_zone_pwm+0x1dc>)
 8001622:	f7fe fff1 	bl	8000608 <__aeabi_dmul>
 8001626:	4602      	mov	r2, r0
 8001628:	460b      	mov	r3, r1
 800162a:	4610      	mov	r0, r2
 800162c:	4619      	mov	r1, r3
 800162e:	f7ff fa85 	bl	8000b3c <__aeabi_d2iz>
 8001632:	4603      	mov	r3, r0
 8001634:	e0af      	b.n	8001796 <get_zone_pwm+0x1c6>
            } else if (inlet_pwm == 1) {
 8001636:	4b5a      	ldr	r3, [pc, #360]	; (80017a0 <get_zone_pwm+0x1d0>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d101      	bne.n	8001642 <get_zone_pwm+0x72>
                return 60;
 800163e:	233c      	movs	r3, #60	; 0x3c
 8001640:	e0a9      	b.n	8001796 <get_zone_pwm+0x1c6>
            } else if (inlet_pwm == 2) {
 8001642:	4b57      	ldr	r3, [pc, #348]	; (80017a0 <get_zone_pwm+0x1d0>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2b02      	cmp	r3, #2
 8001648:	d101      	bne.n	800164e <get_zone_pwm+0x7e>
                return 80;
 800164a:	2350      	movs	r3, #80	; 0x50
 800164c:	e0a3      	b.n	8001796 <get_zone_pwm+0x1c6>
            } else if (inlet_pwm == 3) {
 800164e:	4b54      	ldr	r3, [pc, #336]	; (80017a0 <get_zone_pwm+0x1d0>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2b03      	cmp	r3, #3
 8001654:	f040 8097 	bne.w	8001786 <get_zone_pwm+0x1b6>
                return 99;
 8001658:	2363      	movs	r3, #99	; 0x63
 800165a:	e09c      	b.n	8001796 <get_zone_pwm+0x1c6>
            }
            break;
        case OUTLET1:
            if (!zone1_pwm) {
 800165c:	4b54      	ldr	r3, [pc, #336]	; (80017b0 <get_zone_pwm+0x1e0>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d11a      	bne.n	800169a <get_zone_pwm+0xca>
                return (g_adc_value / 256.0) * 100;
 8001664:	4b4f      	ldr	r3, [pc, #316]	; (80017a4 <get_zone_pwm+0x1d4>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4618      	mov	r0, r3
 800166a:	f7fe ff63 	bl	8000534 <__aeabi_i2d>
 800166e:	f04f 0200 	mov.w	r2, #0
 8001672:	4b4d      	ldr	r3, [pc, #308]	; (80017a8 <get_zone_pwm+0x1d8>)
 8001674:	f7ff f8f2 	bl	800085c <__aeabi_ddiv>
 8001678:	4602      	mov	r2, r0
 800167a:	460b      	mov	r3, r1
 800167c:	4610      	mov	r0, r2
 800167e:	4619      	mov	r1, r3
 8001680:	f04f 0200 	mov.w	r2, #0
 8001684:	4b49      	ldr	r3, [pc, #292]	; (80017ac <get_zone_pwm+0x1dc>)
 8001686:	f7fe ffbf 	bl	8000608 <__aeabi_dmul>
 800168a:	4602      	mov	r2, r0
 800168c:	460b      	mov	r3, r1
 800168e:	4610      	mov	r0, r2
 8001690:	4619      	mov	r1, r3
 8001692:	f7ff fa53 	bl	8000b3c <__aeabi_d2iz>
 8001696:	4603      	mov	r3, r0
 8001698:	e07d      	b.n	8001796 <get_zone_pwm+0x1c6>
            } else if (zone1_pwm == 1) {
 800169a:	4b45      	ldr	r3, [pc, #276]	; (80017b0 <get_zone_pwm+0x1e0>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d101      	bne.n	80016a6 <get_zone_pwm+0xd6>
                return 60;
 80016a2:	233c      	movs	r3, #60	; 0x3c
 80016a4:	e077      	b.n	8001796 <get_zone_pwm+0x1c6>
            } else if (zone1_pwm == 2) {
 80016a6:	4b42      	ldr	r3, [pc, #264]	; (80017b0 <get_zone_pwm+0x1e0>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d101      	bne.n	80016b2 <get_zone_pwm+0xe2>
                return 80;
 80016ae:	2350      	movs	r3, #80	; 0x50
 80016b0:	e071      	b.n	8001796 <get_zone_pwm+0x1c6>
            } else if (zone1_pwm == 3) {
 80016b2:	4b3f      	ldr	r3, [pc, #252]	; (80017b0 <get_zone_pwm+0x1e0>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2b03      	cmp	r3, #3
 80016b8:	d167      	bne.n	800178a <get_zone_pwm+0x1ba>
                return 99;
 80016ba:	2363      	movs	r3, #99	; 0x63
 80016bc:	e06b      	b.n	8001796 <get_zone_pwm+0x1c6>
            }
            break;
        case OUTLET2:
            if (!zone2_pwm) {
 80016be:	4b3d      	ldr	r3, [pc, #244]	; (80017b4 <get_zone_pwm+0x1e4>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d11a      	bne.n	80016fc <get_zone_pwm+0x12c>
                return (g_adc_value / 256.0) * 100;
 80016c6:	4b37      	ldr	r3, [pc, #220]	; (80017a4 <get_zone_pwm+0x1d4>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7fe ff32 	bl	8000534 <__aeabi_i2d>
 80016d0:	f04f 0200 	mov.w	r2, #0
 80016d4:	4b34      	ldr	r3, [pc, #208]	; (80017a8 <get_zone_pwm+0x1d8>)
 80016d6:	f7ff f8c1 	bl	800085c <__aeabi_ddiv>
 80016da:	4602      	mov	r2, r0
 80016dc:	460b      	mov	r3, r1
 80016de:	4610      	mov	r0, r2
 80016e0:	4619      	mov	r1, r3
 80016e2:	f04f 0200 	mov.w	r2, #0
 80016e6:	4b31      	ldr	r3, [pc, #196]	; (80017ac <get_zone_pwm+0x1dc>)
 80016e8:	f7fe ff8e 	bl	8000608 <__aeabi_dmul>
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	4610      	mov	r0, r2
 80016f2:	4619      	mov	r1, r3
 80016f4:	f7ff fa22 	bl	8000b3c <__aeabi_d2iz>
 80016f8:	4603      	mov	r3, r0
 80016fa:	e04c      	b.n	8001796 <get_zone_pwm+0x1c6>
            } else if (zone2_pwm == 1) {
 80016fc:	4b2d      	ldr	r3, [pc, #180]	; (80017b4 <get_zone_pwm+0x1e4>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d101      	bne.n	8001708 <get_zone_pwm+0x138>
                return 60;
 8001704:	233c      	movs	r3, #60	; 0x3c
 8001706:	e046      	b.n	8001796 <get_zone_pwm+0x1c6>
            } else if (zone2_pwm == 2) {
 8001708:	4b2a      	ldr	r3, [pc, #168]	; (80017b4 <get_zone_pwm+0x1e4>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2b02      	cmp	r3, #2
 800170e:	d101      	bne.n	8001714 <get_zone_pwm+0x144>
                return 80;
 8001710:	2350      	movs	r3, #80	; 0x50
 8001712:	e040      	b.n	8001796 <get_zone_pwm+0x1c6>
            } else if (zone2_pwm == 3) {
 8001714:	4b27      	ldr	r3, [pc, #156]	; (80017b4 <get_zone_pwm+0x1e4>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2b03      	cmp	r3, #3
 800171a:	d138      	bne.n	800178e <get_zone_pwm+0x1be>
                return 99;
 800171c:	2363      	movs	r3, #99	; 0x63
 800171e:	e03a      	b.n	8001796 <get_zone_pwm+0x1c6>
            }
            break;
        case OUTLET3:
            if (!zone3_pwm) {
 8001720:	4b25      	ldr	r3, [pc, #148]	; (80017b8 <get_zone_pwm+0x1e8>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d11a      	bne.n	800175e <get_zone_pwm+0x18e>
                return (g_adc_value / 256.0) * 100;
 8001728:	4b1e      	ldr	r3, [pc, #120]	; (80017a4 <get_zone_pwm+0x1d4>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4618      	mov	r0, r3
 800172e:	f7fe ff01 	bl	8000534 <__aeabi_i2d>
 8001732:	f04f 0200 	mov.w	r2, #0
 8001736:	4b1c      	ldr	r3, [pc, #112]	; (80017a8 <get_zone_pwm+0x1d8>)
 8001738:	f7ff f890 	bl	800085c <__aeabi_ddiv>
 800173c:	4602      	mov	r2, r0
 800173e:	460b      	mov	r3, r1
 8001740:	4610      	mov	r0, r2
 8001742:	4619      	mov	r1, r3
 8001744:	f04f 0200 	mov.w	r2, #0
 8001748:	4b18      	ldr	r3, [pc, #96]	; (80017ac <get_zone_pwm+0x1dc>)
 800174a:	f7fe ff5d 	bl	8000608 <__aeabi_dmul>
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	4610      	mov	r0, r2
 8001754:	4619      	mov	r1, r3
 8001756:	f7ff f9f1 	bl	8000b3c <__aeabi_d2iz>
 800175a:	4603      	mov	r3, r0
 800175c:	e01b      	b.n	8001796 <get_zone_pwm+0x1c6>
            } else if (zone3_pwm == 1) {
 800175e:	4b16      	ldr	r3, [pc, #88]	; (80017b8 <get_zone_pwm+0x1e8>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d101      	bne.n	800176a <get_zone_pwm+0x19a>
                return 60;
 8001766:	233c      	movs	r3, #60	; 0x3c
 8001768:	e015      	b.n	8001796 <get_zone_pwm+0x1c6>
            } else if (zone3_pwm == 2) {
 800176a:	4b13      	ldr	r3, [pc, #76]	; (80017b8 <get_zone_pwm+0x1e8>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2b02      	cmp	r3, #2
 8001770:	d101      	bne.n	8001776 <get_zone_pwm+0x1a6>
                return 80;
 8001772:	2350      	movs	r3, #80	; 0x50
 8001774:	e00f      	b.n	8001796 <get_zone_pwm+0x1c6>
            } else if (zone3_pwm == 3) {
 8001776:	4b10      	ldr	r3, [pc, #64]	; (80017b8 <get_zone_pwm+0x1e8>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2b03      	cmp	r3, #3
 800177c:	d109      	bne.n	8001792 <get_zone_pwm+0x1c2>
                return 99;
 800177e:	2363      	movs	r3, #99	; 0x63
 8001780:	e009      	b.n	8001796 <get_zone_pwm+0x1c6>
            }
            break;
        default:
            // Handle the default case if needed
            break;
 8001782:	bf00      	nop
 8001784:	e006      	b.n	8001794 <get_zone_pwm+0x1c4>
            break;
 8001786:	bf00      	nop
 8001788:	e004      	b.n	8001794 <get_zone_pwm+0x1c4>
            break;
 800178a:	bf00      	nop
 800178c:	e002      	b.n	8001794 <get_zone_pwm+0x1c4>
            break;
 800178e:	bf00      	nop
 8001790:	e000      	b.n	8001794 <get_zone_pwm+0x1c4>
            break;
 8001792:	bf00      	nop
    }
    // Return a default value if the PIPE is not recognized
    return 0;
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20000484 	.word	0x20000484
 80017a4:	200004c4 	.word	0x200004c4
 80017a8:	40700000 	.word	0x40700000
 80017ac:	40590000 	.word	0x40590000
 80017b0:	20000488 	.word	0x20000488
 80017b4:	2000048c 	.word	0x2000048c
 80017b8:	20000490 	.word	0x20000490

080017bc <update_display>:

// Add this new function
volatile int inlet = 1;
volatile int lastlast = 0;
void update_display(void)
{
 80017bc:	b590      	push	{r4, r7, lr}
 80017be:	b089      	sub	sp, #36	; 0x24
 80017c0:	af04      	add	r7, sp, #16
  char string_zone[10] = "INLET";
 80017c2:	4a67      	ldr	r2, [pc, #412]	; (8001960 <update_display+0x1a4>)
 80017c4:	1d3b      	adds	r3, r7, #4
 80017c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017ca:	6018      	str	r0, [r3, #0]
 80017cc:	3304      	adds	r3, #4
 80017ce:	8019      	strh	r1, [r3, #0]
 80017d0:	f107 030a 	add.w	r3, r7, #10
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
//  int active_pwm = 0;
//  int motor_rpm = 0;

	  // try inlet phase XOR outlet phase
  	  // only set the active zones here
	  if (inlet) {
 80017d8:	4b62      	ldr	r3, [pc, #392]	; (8001964 <update_display+0x1a8>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d012      	beq.n	8001806 <update_display+0x4a>
		  active_zone = INLET;
 80017e0:	4b61      	ldr	r3, [pc, #388]	; (8001968 <update_display+0x1ac>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
		  set_pwm_motor(INLET);
 80017e6:	2000      	movs	r0, #0
 80017e8:	f7ff fbd8 	bl	8000f9c <set_pwm_motor>
		  if (hours==inlet_stop && g_water_depth_final>=99) {
 80017ec:	4b5f      	ldr	r3, [pc, #380]	; (800196c <update_display+0x1b0>)
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	4b5f      	ldr	r3, [pc, #380]	; (8001970 <update_display+0x1b4>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d106      	bne.n	8001806 <update_display+0x4a>
 80017f8:	4b5e      	ldr	r3, [pc, #376]	; (8001974 <update_display+0x1b8>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2b62      	cmp	r3, #98	; 0x62
 80017fe:	dd02      	ble.n	8001806 <update_display+0x4a>
			  inlet = 0;
 8001800:	4b58      	ldr	r3, [pc, #352]	; (8001964 <update_display+0x1a8>)
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]
		  }
	  }
	  // when we are done with inlet, we choose any outlet based on current operation availability
	  if (!inlet){
 8001806:	4b57      	ldr	r3, [pc, #348]	; (8001964 <update_display+0x1a8>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d15b      	bne.n	80018c6 <update_display+0x10a>
		  // we check check that the outlet doesn't get repeated if others are available (fair distribution)
		  if (within_time_interval(hours, zone1_start, zone1_stop) && active_zone != OUTLET1 && lastlast != OUTLET1) {
 800180e:	4b57      	ldr	r3, [pc, #348]	; (800196c <update_display+0x1b0>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a59      	ldr	r2, [pc, #356]	; (8001978 <update_display+0x1bc>)
 8001814:	6811      	ldr	r1, [r2, #0]
 8001816:	4a59      	ldr	r2, [pc, #356]	; (800197c <update_display+0x1c0>)
 8001818:	6812      	ldr	r2, [r2, #0]
 800181a:	4618      	mov	r0, r3
 800181c:	f000 f9fc 	bl	8001c18 <within_time_interval>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d012      	beq.n	800184c <update_display+0x90>
 8001826:	4b50      	ldr	r3, [pc, #320]	; (8001968 <update_display+0x1ac>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d00e      	beq.n	800184c <update_display+0x90>
 800182e:	4b54      	ldr	r3, [pc, #336]	; (8001980 <update_display+0x1c4>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d00a      	beq.n	800184c <update_display+0x90>
			  lastlast = active_zone;
 8001836:	4b4c      	ldr	r3, [pc, #304]	; (8001968 <update_display+0x1ac>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a51      	ldr	r2, [pc, #324]	; (8001980 <update_display+0x1c4>)
 800183c:	6013      	str	r3, [r2, #0]
			  active_zone = OUTLET1;
 800183e:	4b4a      	ldr	r3, [pc, #296]	; (8001968 <update_display+0x1ac>)
 8001840:	2201      	movs	r2, #1
 8001842:	601a      	str	r2, [r3, #0]
			  set_pwm_motor(OUTLET1);
 8001844:	2001      	movs	r0, #1
 8001846:	f7ff fba9 	bl	8000f9c <set_pwm_motor>
 800184a:	e03c      	b.n	80018c6 <update_display+0x10a>
		  }
		  else if (within_time_interval(hours, zone2_start, zone2_stop) && active_zone != OUTLET2  && lastlast != OUTLET2) {
 800184c:	4b47      	ldr	r3, [pc, #284]	; (800196c <update_display+0x1b0>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a4c      	ldr	r2, [pc, #304]	; (8001984 <update_display+0x1c8>)
 8001852:	6811      	ldr	r1, [r2, #0]
 8001854:	4a4c      	ldr	r2, [pc, #304]	; (8001988 <update_display+0x1cc>)
 8001856:	6812      	ldr	r2, [r2, #0]
 8001858:	4618      	mov	r0, r3
 800185a:	f000 f9dd 	bl	8001c18 <within_time_interval>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d012      	beq.n	800188a <update_display+0xce>
 8001864:	4b40      	ldr	r3, [pc, #256]	; (8001968 <update_display+0x1ac>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2b02      	cmp	r3, #2
 800186a:	d00e      	beq.n	800188a <update_display+0xce>
 800186c:	4b44      	ldr	r3, [pc, #272]	; (8001980 <update_display+0x1c4>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2b02      	cmp	r3, #2
 8001872:	d00a      	beq.n	800188a <update_display+0xce>
			  lastlast = active_zone;
 8001874:	4b3c      	ldr	r3, [pc, #240]	; (8001968 <update_display+0x1ac>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a41      	ldr	r2, [pc, #260]	; (8001980 <update_display+0x1c4>)
 800187a:	6013      	str	r3, [r2, #0]
			  active_zone = OUTLET2;
 800187c:	4b3a      	ldr	r3, [pc, #232]	; (8001968 <update_display+0x1ac>)
 800187e:	2202      	movs	r2, #2
 8001880:	601a      	str	r2, [r3, #0]
			  set_pwm_motor(OUTLET2);
 8001882:	2002      	movs	r0, #2
 8001884:	f7ff fb8a 	bl	8000f9c <set_pwm_motor>
 8001888:	e01d      	b.n	80018c6 <update_display+0x10a>
		  }
		  else if (within_time_interval(hours, zone3_start, zone3_stop) && active_zone != OUTLET3  && lastlast != OUTLET3) {
 800188a:	4b38      	ldr	r3, [pc, #224]	; (800196c <update_display+0x1b0>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a3f      	ldr	r2, [pc, #252]	; (800198c <update_display+0x1d0>)
 8001890:	6811      	ldr	r1, [r2, #0]
 8001892:	4a3f      	ldr	r2, [pc, #252]	; (8001990 <update_display+0x1d4>)
 8001894:	6812      	ldr	r2, [r2, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f000 f9be 	bl	8001c18 <within_time_interval>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d011      	beq.n	80018c6 <update_display+0x10a>
 80018a2:	4b31      	ldr	r3, [pc, #196]	; (8001968 <update_display+0x1ac>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2b03      	cmp	r3, #3
 80018a8:	d00d      	beq.n	80018c6 <update_display+0x10a>
 80018aa:	4b35      	ldr	r3, [pc, #212]	; (8001980 <update_display+0x1c4>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2b03      	cmp	r3, #3
 80018b0:	d009      	beq.n	80018c6 <update_display+0x10a>
			  lastlast = active_zone;
 80018b2:	4b2d      	ldr	r3, [pc, #180]	; (8001968 <update_display+0x1ac>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a32      	ldr	r2, [pc, #200]	; (8001980 <update_display+0x1c4>)
 80018b8:	6013      	str	r3, [r2, #0]
			  active_zone = OUTLET3;
 80018ba:	4b2b      	ldr	r3, [pc, #172]	; (8001968 <update_display+0x1ac>)
 80018bc:	2203      	movs	r2, #3
 80018be:	601a      	str	r2, [r3, #0]
			  set_pwm_motor(OUTLET3);
 80018c0:	2003      	movs	r0, #3
 80018c2:	f7ff fb6b 	bl	8000f9c <set_pwm_motor>
		  }
	  }

  // Determine active zone string
  switch(active_zone) {
 80018c6:	4b28      	ldr	r3, [pc, #160]	; (8001968 <update_display+0x1ac>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2b03      	cmp	r3, #3
 80018cc:	d822      	bhi.n	8001914 <update_display+0x158>
 80018ce:	a201      	add	r2, pc, #4	; (adr r2, 80018d4 <update_display+0x118>)
 80018d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018d4:	080018e5 	.word	0x080018e5
 80018d8:	080018f1 	.word	0x080018f1
 80018dc:	080018fd 	.word	0x080018fd
 80018e0:	08001909 	.word	0x08001909
    case INLET:  sprintf(string_zone, "INLET"); break;
 80018e4:	1d3b      	adds	r3, r7, #4
 80018e6:	492b      	ldr	r1, [pc, #172]	; (8001994 <update_display+0x1d8>)
 80018e8:	4618      	mov	r0, r3
 80018ea:	f005 fa07 	bl	8006cfc <siprintf>
 80018ee:	e011      	b.n	8001914 <update_display+0x158>
    case OUTLET1: sprintf(string_zone, "ZONE 1"); break;
 80018f0:	1d3b      	adds	r3, r7, #4
 80018f2:	4929      	ldr	r1, [pc, #164]	; (8001998 <update_display+0x1dc>)
 80018f4:	4618      	mov	r0, r3
 80018f6:	f005 fa01 	bl	8006cfc <siprintf>
 80018fa:	e00b      	b.n	8001914 <update_display+0x158>
    case OUTLET2: sprintf(string_zone, "ZONE 2"); break;
 80018fc:	1d3b      	adds	r3, r7, #4
 80018fe:	4927      	ldr	r1, [pc, #156]	; (800199c <update_display+0x1e0>)
 8001900:	4618      	mov	r0, r3
 8001902:	f005 f9fb 	bl	8006cfc <siprintf>
 8001906:	e005      	b.n	8001914 <update_display+0x158>
    case OUTLET3: sprintf(string_zone, "ZONE 3"); break;
 8001908:	1d3b      	adds	r3, r7, #4
 800190a:	4925      	ldr	r1, [pc, #148]	; (80019a0 <update_display+0x1e4>)
 800190c:	4618      	mov	r0, r3
 800190e:	f005 f9f5 	bl	8006cfc <siprintf>
 8001912:	bf00      	nop
  // depth assumed to be updated
//  update_current_water_reservoir_depth();

  // Format and send the display update
//  __disable_irq();
  sprintf(txd_msg_buffer, "WALL CLOCK: %d:00 | ZONE/INLET: %s | MOTOR %%PWM: %d | MOTOR RPM: %d | WATER DEPTH(%%): %d\r\n",
 8001914:	4b15      	ldr	r3, [pc, #84]	; (800196c <update_display+0x1b0>)
 8001916:	681c      	ldr	r4, [r3, #0]
 8001918:	4b13      	ldr	r3, [pc, #76]	; (8001968 <update_display+0x1ac>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	b2db      	uxtb	r3, r3
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff fe56 	bl	80015d0 <get_zone_pwm>
 8001924:	4b1f      	ldr	r3, [pc, #124]	; (80019a4 <update_display+0x1e8>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a12      	ldr	r2, [pc, #72]	; (8001974 <update_display+0x1b8>)
 800192a:	6812      	ldr	r2, [r2, #0]
 800192c:	1d39      	adds	r1, r7, #4
 800192e:	9202      	str	r2, [sp, #8]
 8001930:	9301      	str	r3, [sp, #4]
 8001932:	9000      	str	r0, [sp, #0]
 8001934:	460b      	mov	r3, r1
 8001936:	4622      	mov	r2, r4
 8001938:	491b      	ldr	r1, [pc, #108]	; (80019a8 <update_display+0x1ec>)
 800193a:	481c      	ldr	r0, [pc, #112]	; (80019ac <update_display+0x1f0>)
 800193c:	f005 f9de 	bl	8006cfc <siprintf>
          hours, string_zone, get_zone_pwm(active_zone), g_current_rpm, g_water_depth_final);
//  __enable_irq();
  HAL_UART_Transmit(&huart6, (uint8_t*)txd_msg_buffer, strlen(txd_msg_buffer), 1000);
 8001940:	481a      	ldr	r0, [pc, #104]	; (80019ac <update_display+0x1f0>)
 8001942:	f7fe fc4d 	bl	80001e0 <strlen>
 8001946:	4603      	mov	r3, r0
 8001948:	b29a      	uxth	r2, r3
 800194a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800194e:	4917      	ldr	r1, [pc, #92]	; (80019ac <update_display+0x1f0>)
 8001950:	4817      	ldr	r0, [pc, #92]	; (80019b0 <update_display+0x1f4>)
 8001952:	f004 f974 	bl	8005c3e <HAL_UART_Transmit>
}
 8001956:	bf00      	nop
 8001958:	3714      	adds	r7, #20
 800195a:	46bd      	mov	sp, r7
 800195c:	bd90      	pop	{r4, r7, pc}
 800195e:	bf00      	nop
 8001960:	08008300 	.word	0x08008300
 8001964:	20000004 	.word	0x20000004
 8001968:	200005dc 	.word	0x200005dc
 800196c:	200004cc 	.word	0x200004cc
 8001970:	20000498 	.word	0x20000498
 8001974:	20000000 	.word	0x20000000
 8001978:	2000049c 	.word	0x2000049c
 800197c:	200004a0 	.word	0x200004a0
 8001980:	200005f4 	.word	0x200005f4
 8001984:	200004a4 	.word	0x200004a4
 8001988:	200004a8 	.word	0x200004a8
 800198c:	200004ac 	.word	0x200004ac
 8001990:	200004b0 	.word	0x200004b0
 8001994:	08008280 	.word	0x08008280
 8001998:	08008288 	.word	0x08008288
 800199c:	08008290 	.word	0x08008290
 80019a0:	08008298 	.word	0x08008298
 80019a4:	200004c8 	.word	0x200004c8
 80019a8:	080082a0 	.word	0x080082a0
 80019ac:	200004dc 	.word	0x200004dc
 80019b0:	20000234 	.word	0x20000234

080019b4 <get_adc_value>:

uint8_t get_adc_value() {
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc1);
 80019ba:	480a      	ldr	r0, [pc, #40]	; (80019e4 <get_adc_value+0x30>)
 80019bc:	f001 fa26 	bl	8002e0c <HAL_ADC_Start>
    // Poll for the end of the conversion
    HAL_ADC_PollForConversion(&hadc1, 1000);
 80019c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80019c4:	4807      	ldr	r0, [pc, #28]	; (80019e4 <get_adc_value+0x30>)
 80019c6:	f001 fb08 	bl	8002fda <HAL_ADC_PollForConversion>
    // Get the converted value
    uint8_t ADC_CH9 = HAL_ADC_GetValue(&hadc1);
 80019ca:	4806      	ldr	r0, [pc, #24]	; (80019e4 <get_adc_value+0x30>)
 80019cc:	f001 fb90 	bl	80030f0 <HAL_ADC_GetValue>
 80019d0:	4603      	mov	r3, r0
 80019d2:	71fb      	strb	r3, [r7, #7]
    // Stop the ADC
    HAL_ADC_Stop(&hadc1);
 80019d4:	4803      	ldr	r0, [pc, #12]	; (80019e4 <get_adc_value+0x30>)
 80019d6:	f001 facd 	bl	8002f74 <HAL_ADC_Stop>
    // Return the ADC value
    return ADC_CH9;
 80019da:	79fb      	ldrb	r3, [r7, #7]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	20000084 	.word	0x20000084

080019e8 <update_current_water_reservoir_depth>:

volatile int previous_depth = 1;
int update_current_water_reservoir_depth(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
  // Simulate the water reservoir depth value; replace this with actual sensor reading if available

  // Trigger the sensor by sending a 10us pulse
  HAL_GPIO_WritePin(HCSR04_TRIG_GPIO_Port, HCSR04_TRIG_Pin, GPIO_PIN_SET);
 80019ee:	2201      	movs	r2, #1
 80019f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019f4:	483e      	ldr	r0, [pc, #248]	; (8001af0 <update_current_water_reservoir_depth+0x108>)
 80019f6:	f002 f8cf 	bl	8003b98 <HAL_GPIO_WritePin>
  for (int j = 0; j < 20; j++) {};
 80019fa:	2300      	movs	r3, #0
 80019fc:	607b      	str	r3, [r7, #4]
 80019fe:	e002      	b.n	8001a06 <update_current_water_reservoir_depth+0x1e>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	3301      	adds	r3, #1
 8001a04:	607b      	str	r3, [r7, #4]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2b13      	cmp	r3, #19
 8001a0a:	ddf9      	ble.n	8001a00 <update_current_water_reservoir_depth+0x18>
  HAL_GPIO_WritePin(HCSR04_TRIG_GPIO_Port, HCSR04_TRIG_Pin, GPIO_PIN_RESET);
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a12:	4837      	ldr	r0, [pc, #220]	; (8001af0 <update_current_water_reservoir_depth+0x108>)
 8001a14:	f002 f8c0 	bl	8003b98 <HAL_GPIO_WritePin>

  // Wait for the sensor to finish reading
  while (!g_hcsr04_Rx_flag) {
 8001a18:	bf00      	nop
 8001a1a:	4b36      	ldr	r3, [pc, #216]	; (8001af4 <update_current_water_reservoir_depth+0x10c>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d0fb      	beq.n	8001a1a <update_current_water_reservoir_depth+0x32>
  };

  // at this point distance in inches in the var: g_water_depth

  // set max of 10 inches, reverse the result (since closer distance means greater depth of water) and convert the depth to percent
  g_water_depth = (g_water_depth<=10) ? g_water_depth : 10.0;
 8001a22:	4b35      	ldr	r3, [pc, #212]	; (8001af8 <update_current_water_reservoir_depth+0x110>)
 8001a24:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a28:	f04f 0200 	mov.w	r2, #0
 8001a2c:	4b33      	ldr	r3, [pc, #204]	; (8001afc <update_current_water_reservoir_depth+0x114>)
 8001a2e:	f7ff f867 	bl	8000b00 <__aeabi_dcmple>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d003      	beq.n	8001a40 <update_current_water_reservoir_depth+0x58>
 8001a38:	4b2f      	ldr	r3, [pc, #188]	; (8001af8 <update_current_water_reservoir_depth+0x110>)
 8001a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a3e:	e002      	b.n	8001a46 <update_current_water_reservoir_depth+0x5e>
 8001a40:	f04f 0200 	mov.w	r2, #0
 8001a44:	4b2d      	ldr	r3, [pc, #180]	; (8001afc <update_current_water_reservoir_depth+0x114>)
 8001a46:	492c      	ldr	r1, [pc, #176]	; (8001af8 <update_current_water_reservoir_depth+0x110>)
 8001a48:	e9c1 2300 	strd	r2, r3, [r1]
  g_water_depth = 10.0 - g_water_depth;
 8001a4c:	4b2a      	ldr	r3, [pc, #168]	; (8001af8 <update_current_water_reservoir_depth+0x110>)
 8001a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a52:	f04f 0000 	mov.w	r0, #0
 8001a56:	4929      	ldr	r1, [pc, #164]	; (8001afc <update_current_water_reservoir_depth+0x114>)
 8001a58:	f7fe fc1e 	bl	8000298 <__aeabi_dsub>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	4925      	ldr	r1, [pc, #148]	; (8001af8 <update_current_water_reservoir_depth+0x110>)
 8001a62:	e9c1 2300 	strd	r2, r3, [r1]

  previous_depth = g_water_depth_final;
 8001a66:	4b26      	ldr	r3, [pc, #152]	; (8001b00 <update_current_water_reservoir_depth+0x118>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a26      	ldr	r2, [pc, #152]	; (8001b04 <update_current_water_reservoir_depth+0x11c>)
 8001a6c:	6013      	str	r3, [r2, #0]
  g_water_depth_final = ((g_water_depth / 10.0) < 1) ? (g_water_depth / 10.0)*100 : 99;
 8001a6e:	4b22      	ldr	r3, [pc, #136]	; (8001af8 <update_current_water_reservoir_depth+0x110>)
 8001a70:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a74:	f04f 0200 	mov.w	r2, #0
 8001a78:	4b20      	ldr	r3, [pc, #128]	; (8001afc <update_current_water_reservoir_depth+0x114>)
 8001a7a:	f7fe feef 	bl	800085c <__aeabi_ddiv>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	460b      	mov	r3, r1
 8001a82:	4610      	mov	r0, r2
 8001a84:	4619      	mov	r1, r3
 8001a86:	f04f 0200 	mov.w	r2, #0
 8001a8a:	4b1f      	ldr	r3, [pc, #124]	; (8001b08 <update_current_water_reservoir_depth+0x120>)
 8001a8c:	f7ff f82e 	bl	8000aec <__aeabi_dcmplt>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d018      	beq.n	8001ac8 <update_current_water_reservoir_depth+0xe0>
 8001a96:	4b18      	ldr	r3, [pc, #96]	; (8001af8 <update_current_water_reservoir_depth+0x110>)
 8001a98:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a9c:	f04f 0200 	mov.w	r2, #0
 8001aa0:	4b16      	ldr	r3, [pc, #88]	; (8001afc <update_current_water_reservoir_depth+0x114>)
 8001aa2:	f7fe fedb 	bl	800085c <__aeabi_ddiv>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	4610      	mov	r0, r2
 8001aac:	4619      	mov	r1, r3
 8001aae:	f04f 0200 	mov.w	r2, #0
 8001ab2:	4b16      	ldr	r3, [pc, #88]	; (8001b0c <update_current_water_reservoir_depth+0x124>)
 8001ab4:	f7fe fda8 	bl	8000608 <__aeabi_dmul>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	460b      	mov	r3, r1
 8001abc:	4610      	mov	r0, r2
 8001abe:	4619      	mov	r1, r3
 8001ac0:	f7ff f83c 	bl	8000b3c <__aeabi_d2iz>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	e000      	b.n	8001aca <update_current_water_reservoir_depth+0xe2>
 8001ac8:	2363      	movs	r3, #99	; 0x63
 8001aca:	4a0d      	ldr	r2, [pc, #52]	; (8001b00 <update_current_water_reservoir_depth+0x118>)
 8001acc:	6013      	str	r3, [r2, #0]

  // update condition for special event, require 2 readings to be 0 to prevent outliers
    if (g_water_depth_final==0 && previous_depth==0) {
 8001ace:	4b0c      	ldr	r3, [pc, #48]	; (8001b00 <update_current_water_reservoir_depth+0x118>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d106      	bne.n	8001ae4 <update_current_water_reservoir_depth+0xfc>
 8001ad6:	4b0b      	ldr	r3, [pc, #44]	; (8001b04 <update_current_water_reservoir_depth+0x11c>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d102      	bne.n	8001ae4 <update_current_water_reservoir_depth+0xfc>
      res_empty = 1;
 8001ade:	4b0c      	ldr	r3, [pc, #48]	; (8001b10 <update_current_water_reservoir_depth+0x128>)
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	601a      	str	r2, [r3, #0]

//    sprintf(txd_msg_buffer, "Water Depth: %d\r\n", g_water_depth);
//    HAL_UART_Transmit(&huart6, (uint8_t*)txd_msg_buffer, strlen(txd_msg_buffer), 1000);


  return g_water_depth_final;
 8001ae4:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <update_current_water_reservoir_depth+0x118>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40020000 	.word	0x40020000
 8001af4:	200005f0 	.word	0x200005f0
 8001af8:	200004b8 	.word	0x200004b8
 8001afc:	40240000 	.word	0x40240000
 8001b00:	20000000 	.word	0x20000000
 8001b04:	20000008 	.word	0x20000008
 8001b08:	3ff00000 	.word	0x3ff00000
 8001b0c:	40590000 	.word	0x40590000
 8001b10:	200004c0 	.word	0x200004c0

08001b14 <display_value_on_timer_board>:

void display_value_on_timer_board(int value)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
    B is ones digit

    B3 is MSb, ie writing 8 = 1000[B3,B2,B1,B0]
    A3 is MSb, ie writing 8 = 1000[A3,A2,A1,A0]
    */
    if (value < 0 || value > 99) {
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	db71      	blt.n	8001c06 <display_value_on_timer_board+0xf2>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2b63      	cmp	r3, #99	; 0x63
 8001b26:	dc6e      	bgt.n	8001c06 <display_value_on_timer_board+0xf2>
        // Invalid value, do nothing
        return;
    }

    int tens = value / 10;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	4a39      	ldr	r2, [pc, #228]	; (8001c10 <display_value_on_timer_board+0xfc>)
 8001b2c:	fb82 1203 	smull	r1, r2, r2, r3
 8001b30:	1092      	asrs	r2, r2, #2
 8001b32:	17db      	asrs	r3, r3, #31
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	60fb      	str	r3, [r7, #12]
    int ones = value % 10;
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	4b35      	ldr	r3, [pc, #212]	; (8001c10 <display_value_on_timer_board+0xfc>)
 8001b3c:	fb83 1302 	smull	r1, r3, r3, r2
 8001b40:	1099      	asrs	r1, r3, #2
 8001b42:	17d3      	asrs	r3, r2, #31
 8001b44:	1ac9      	subs	r1, r1, r3
 8001b46:	460b      	mov	r3, r1
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	440b      	add	r3, r1
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	60bb      	str	r3, [r7, #8]

    // Write the tens digit to the first set of digit pins (DIGIT_A)
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, (tens & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);  // DIGIT_A0 -> PB3
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	2108      	movs	r1, #8
 8001b60:	482c      	ldr	r0, [pc, #176]	; (8001c14 <display_value_on_timer_board+0x100>)
 8001b62:	f002 f819 	bl	8003b98 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, (tens & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);  // DIGIT_A1 -> PB4
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	105b      	asrs	r3, r3, #1
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	f003 0301 	and.w	r3, r3, #1
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	461a      	mov	r2, r3
 8001b74:	2110      	movs	r1, #16
 8001b76:	4827      	ldr	r0, [pc, #156]	; (8001c14 <display_value_on_timer_board+0x100>)
 8001b78:	f002 f80e 	bl	8003b98 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, (tens & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);  // DIGIT_A2 -> PB5
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	109b      	asrs	r3, r3, #2
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	461a      	mov	r2, r3
 8001b8a:	2120      	movs	r1, #32
 8001b8c:	4821      	ldr	r0, [pc, #132]	; (8001c14 <display_value_on_timer_board+0x100>)
 8001b8e:	f002 f803 	bl	8003b98 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, (tens & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);  // DIGIT_A3 -> PB6
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	10db      	asrs	r3, r3, #3
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	f003 0301 	and.w	r3, r3, #1
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	2140      	movs	r1, #64	; 0x40
 8001ba2:	481c      	ldr	r0, [pc, #112]	; (8001c14 <display_value_on_timer_board+0x100>)
 8001ba4:	f001 fff8 	bl	8003b98 <HAL_GPIO_WritePin>

    // Write the ones digit to the second set of digit pins (DIGIT_B)
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, (ones & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);  // DIGIT_B0 -> PB7
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	f003 0301 	and.w	r3, r3, #1
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	2180      	movs	r1, #128	; 0x80
 8001bb6:	4817      	ldr	r0, [pc, #92]	; (8001c14 <display_value_on_timer_board+0x100>)
 8001bb8:	f001 ffee 	bl	8003b98 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, (ones & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);  // DIGIT_B1 -> PB8
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	105b      	asrs	r3, r3, #1
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	461a      	mov	r2, r3
 8001bca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bce:	4811      	ldr	r0, [pc, #68]	; (8001c14 <display_value_on_timer_board+0x100>)
 8001bd0:	f001 ffe2 	bl	8003b98 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, (ones & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);  // DIGIT_B2 -> PB9
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	109b      	asrs	r3, r3, #2
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	461a      	mov	r2, r3
 8001be2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001be6:	480b      	ldr	r0, [pc, #44]	; (8001c14 <display_value_on_timer_board+0x100>)
 8001be8:	f001 ffd6 	bl	8003b98 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, (ones & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET); // DIGIT_B3 -> PB10
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	10db      	asrs	r3, r3, #3
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bfe:	4805      	ldr	r0, [pc, #20]	; (8001c14 <display_value_on_timer_board+0x100>)
 8001c00:	f001 ffca 	bl	8003b98 <HAL_GPIO_WritePin>
 8001c04:	e000      	b.n	8001c08 <display_value_on_timer_board+0xf4>
        return;
 8001c06:	bf00      	nop
}
 8001c08:	3710      	adds	r7, #16
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	66666667 	.word	0x66666667
 8001c14:	40020400 	.word	0x40020400

08001c18 <within_time_interval>:

int within_time_interval(int current_time, int time_start, int time_stop) {
 8001c18:	b480      	push	{r7}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
    // Ensure the input times are within the valid range
    if (current_time < 0 || current_time > 23 || time_start < 0 || time_start > 23 || time_stop < 0 || time_stop > 23) {
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	db0e      	blt.n	8001c48 <within_time_interval+0x30>
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2b17      	cmp	r3, #23
 8001c2e:	dc0b      	bgt.n	8001c48 <within_time_interval+0x30>
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	db08      	blt.n	8001c48 <within_time_interval+0x30>
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	2b17      	cmp	r3, #23
 8001c3a:	dc05      	bgt.n	8001c48 <within_time_interval+0x30>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	db02      	blt.n	8001c48 <within_time_interval+0x30>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2b17      	cmp	r3, #23
 8001c46:	dd01      	ble.n	8001c4c <within_time_interval+0x34>
        return 0;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	e020      	b.n	8001c8e <within_time_interval+0x76>
    }
    // Case 1: Interval covers the full 24-hour period
	if (time_start == time_stop) {
 8001c4c:	68ba      	ldr	r2, [r7, #8]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d101      	bne.n	8001c58 <within_time_interval+0x40>
		return 1;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e01a      	b.n	8001c8e <within_time_interval+0x76>
	}

    // Case 2: Interval does not cross midnight
    if (time_start < time_stop) {
 8001c58:	68ba      	ldr	r2, [r7, #8]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	da0b      	bge.n	8001c78 <within_time_interval+0x60>
        return (current_time >= time_start && current_time < time_stop);
 8001c60:	68fa      	ldr	r2, [r7, #12]
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	db05      	blt.n	8001c74 <within_time_interval+0x5c>
 8001c68:	68fa      	ldr	r2, [r7, #12]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	da01      	bge.n	8001c74 <within_time_interval+0x5c>
 8001c70:	2301      	movs	r3, #1
 8001c72:	e00c      	b.n	8001c8e <within_time_interval+0x76>
 8001c74:	2300      	movs	r3, #0
 8001c76:	e00a      	b.n	8001c8e <within_time_interval+0x76>
    }
    // Case 3: Interval crosses midnight
    else {
        return (current_time >= time_start || current_time < time_stop);
 8001c78:	68fa      	ldr	r2, [r7, #12]
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	da03      	bge.n	8001c88 <within_time_interval+0x70>
 8001c80:	68fa      	ldr	r2, [r7, #12]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	da01      	bge.n	8001c8c <within_time_interval+0x74>
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e000      	b.n	8001c8e <within_time_interval+0x76>
 8001c8c:	2300      	movs	r3, #0
    }
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3714      	adds	r7, #20
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	0000      	movs	r0, r0
 8001c9c:	0000      	movs	r0, r0
	...

08001ca0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ca6:	f000 ffd7 	bl	8002c58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001caa:	f000 f9a7 	bl	8001ffc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cae:	f000 fc59 	bl	8002564 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8001cb2:	f000 fc2d 	bl	8002510 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8001cb6:	f000 fa01 	bl	80020bc <MX_ADC1_Init>
  MX_TIM3_Init();
 8001cba:	f000 fac5 	bl	8002248 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001cbe:	f000 fb75 	bl	80023ac <MX_TIM5_Init>
  MX_TIM1_Init();
 8001cc2:	f000 fa4d 	bl	8002160 <MX_TIM1_Init>
  MX_TIM4_Init();
 8001cc6:	f000 fb23 	bl	8002310 <MX_TIM4_Init>
  MX_TIM9_Init();
 8001cca:	f000 fbe7 	bl	800249c <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */
  // Turn off the green LED (PA5), rgb, dc motor
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001cce:	2200      	movs	r2, #0
 8001cd0:	2120      	movs	r1, #32
 8001cd2:	48b1      	ldr	r0, [pc, #708]	; (8001f98 <main+0x2f8>)
 8001cd4:	f001 ff60 	bl	8003b98 <HAL_GPIO_WritePin>
  setLEDState(LED_OFF);
 8001cd8:	2000      	movs	r0, #0
 8001cda:	f7ff fa0b 	bl	80010f4 <setLEDState>
  set_dc_motor(IN,0);
 8001cde:	ed9f 0bac 	vldr	d0, [pc, #688]	; 8001f90 <main+0x2f0>
 8001ce2:	2004      	movs	r0, #4
 8001ce4:	f7ff f99a 	bl	800101c <set_dc_motor>

  // clear the uart terminal
  const char clearScreen[] = "\033[2J\033[H";
 8001ce8:	4aac      	ldr	r2, [pc, #688]	; (8001f9c <main+0x2fc>)
 8001cea:	1d3b      	adds	r3, r7, #4
 8001cec:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001cf0:	e883 0003 	stmia.w	r3, {r0, r1}
  HAL_UART_Transmit(&huart6, (uint8_t*)clearScreen, strlen(clearScreen), HAL_MAX_DELAY);
 8001cf4:	1d39      	adds	r1, r7, #4
 8001cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cfa:	2207      	movs	r2, #7
 8001cfc:	48a8      	ldr	r0, [pc, #672]	; (8001fa0 <main+0x300>)
 8001cfe:	f003 ff9e 	bl	8005c3e <HAL_UART_Transmit>

  // Start receiving data via interrupt
  HAL_UART_Receive_IT(&huart6, &rx_data, 1);
 8001d02:	2201      	movs	r2, #1
 8001d04:	49a7      	ldr	r1, [pc, #668]	; (8001fa4 <main+0x304>)
 8001d06:	48a6      	ldr	r0, [pc, #664]	; (8001fa0 <main+0x300>)
 8001d08:	f004 f82b 	bl	8005d62 <HAL_UART_Receive_IT>

  // Indicate entering setup mode
  handle_setup_mode();
 8001d0c:	f7ff fa44 	bl	8001198 <handle_setup_mode>


  // Turn on the green LED after setup mode
  exit_while_loop = 0;
 8001d10:	4ba5      	ldr	r3, [pc, #660]	; (8001fa8 <main+0x308>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]
  while (1)
  {
    // Toggle the green LED
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001d16:	2120      	movs	r1, #32
 8001d18:	489f      	ldr	r0, [pc, #636]	; (8001f98 <main+0x2f8>)
 8001d1a:	f001 ff56 	bl	8003bca <HAL_GPIO_TogglePin>

    // Wait for 200ms
    HAL_Delay(200);
 8001d1e:	20c8      	movs	r0, #200	; 0xc8
 8001d20:	f001 f80c 	bl	8002d3c <HAL_Delay>
    // Check if the external interrupt from pin C13 (the blue Nucleo push button) is triggered
    if (exit_while_loop>1)
 8001d24:	4ba0      	ldr	r3, [pc, #640]	; (8001fa8 <main+0x308>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	dc00      	bgt.n	8001d2e <main+0x8e>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001d2c:	e7f3      	b.n	8001d16 <main+0x76>
    {

      // Break out of the while loop
      break;
 8001d2e:	bf00      	nop
    }
  }

  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001d30:	2201      	movs	r2, #1
 8001d32:	2120      	movs	r1, #32
 8001d34:	4898      	ldr	r0, [pc, #608]	; (8001f98 <main+0x2f8>)
 8001d36:	f001 ff2f 	bl	8003b98 <HAL_GPIO_WritePin>

  // Start the timer for the clock counter, depth sensor
  HAL_TIM_Base_Init(&htim4);
 8001d3a:	489c      	ldr	r0, [pc, #624]	; (8001fac <main+0x30c>)
 8001d3c:	f002 fc10 	bl	8004560 <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start_IT(&htim4);
 8001d40:	489a      	ldr	r0, [pc, #616]	; (8001fac <main+0x30c>)
 8001d42:	f002 fc5d 	bl	8004600 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Init(&htim1);
 8001d46:	489a      	ldr	r0, [pc, #616]	; (8001fb0 <main+0x310>)
 8001d48:	f002 fc0a 	bl	8004560 <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start_IT(&htim1);
 8001d4c:	4898      	ldr	r0, [pc, #608]	; (8001fb0 <main+0x310>)
 8001d4e:	f002 fc57 	bl	8004600 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2);
 8001d52:	2104      	movs	r1, #4
 8001d54:	4896      	ldr	r0, [pc, #600]	; (8001fb0 <main+0x310>)
 8001d56:	f002 fe0f 	bl	8004978 <HAL_TIM_IC_Start_IT>
  // start timer for rpm sensor
  HAL_TIM_Base_Init(&htim9);
 8001d5a:	4896      	ldr	r0, [pc, #600]	; (8001fb4 <main+0x314>)
 8001d5c:	f002 fc00 	bl	8004560 <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start_IT(&htim9);
 8001d60:	4894      	ldr	r0, [pc, #592]	; (8001fb4 <main+0x314>)
 8001d62:	f002 fc4d 	bl	8004600 <HAL_TIM_Base_Start_IT>
  // timers for DC motor and SERVO motor
  HAL_TIM_Base_Init(&htim3);
 8001d66:	4894      	ldr	r0, [pc, #592]	; (8001fb8 <main+0x318>)
 8001d68:	f002 fbfa 	bl	8004560 <HAL_TIM_Base_Init>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	4892      	ldr	r0, [pc, #584]	; (8001fb8 <main+0x318>)
 8001d70:	f002 fcf8 	bl	8004764 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001d74:	2104      	movs	r1, #4
 8001d76:	4890      	ldr	r0, [pc, #576]	; (8001fb8 <main+0x318>)
 8001d78:	f002 fcf4 	bl	8004764 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Init(&htim5);
 8001d7c:	488f      	ldr	r0, [pc, #572]	; (8001fbc <main+0x31c>)
 8001d7e:	f002 fbef 	bl	8004560 <HAL_TIM_Base_Init>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8001d82:	2100      	movs	r1, #0
 8001d84:	488d      	ldr	r0, [pc, #564]	; (8001fbc <main+0x31c>)
 8001d86:	f002 fced 	bl	8004764 <HAL_TIM_PWM_Start>
  set_pwm_motor(INLET);
 8001d8a:	2000      	movs	r0, #0
 8001d8c:	f7ff f906 	bl	8000f9c <set_pwm_motor>

  update_current_water_reservoir_depth();
 8001d90:	f7ff fe2a 	bl	80019e8 <update_current_water_reservoir_depth>
  g_adc_value = get_adc_value();
 8001d94:	f7ff fe0e 	bl	80019b4 <get_adc_value>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	4b88      	ldr	r3, [pc, #544]	; (8001fc0 <main+0x320>)
 8001d9e:	601a      	str	r2, [r3, #0]
  update_display();
 8001da0:	f7ff fd0c 	bl	80017bc <update_display>


  HAL_TIM_Base_Init(&htim9);
 8001da4:	4883      	ldr	r0, [pc, #524]	; (8001fb4 <main+0x314>)
 8001da6:	f002 fbdb 	bl	8004560 <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start_IT(&htim9);
 8001daa:	4882      	ldr	r0, [pc, #520]	; (8001fb4 <main+0x314>)
 8001dac:	f002 fc28 	bl	8004600 <HAL_TIM_Base_Start_IT>
	  	  // __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, val+=50);
	  	  // if (val>2500) {val=500	;}
	  	  // set_pwm_motor((val++)%4);

	  	  // update res depth/7seg, and adc
	  	  update_current_water_reservoir_depth();
 8001db0:	f7ff fe1a 	bl	80019e8 <update_current_water_reservoir_depth>
	  	  display_value_on_timer_board(g_water_depth_final);
 8001db4:	4b83      	ldr	r3, [pc, #524]	; (8001fc4 <main+0x324>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff feab 	bl	8001b14 <display_value_on_timer_board>
	  	  g_adc_value = get_adc_value();
 8001dbe:	f7ff fdf9 	bl	80019b4 <get_adc_value>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	4b7e      	ldr	r3, [pc, #504]	; (8001fc0 <main+0x320>)
 8001dc8:	601a      	str	r2, [r3, #0]




		  // Determine pump speed/dir based on active zone
		    switch(active_zone) {
 8001dca:	4b7f      	ldr	r3, [pc, #508]	; (8001fc8 <main+0x328>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2b03      	cmp	r3, #3
 8001dd0:	f200 809a 	bhi.w	8001f08 <main+0x268>
 8001dd4:	a201      	add	r2, pc, #4	; (adr r2, 8001ddc <main+0x13c>)
 8001dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dda:	bf00      	nop
 8001ddc:	08001ded 	.word	0x08001ded
 8001de0:	08001e43 	.word	0x08001e43
 8001de4:	08001e85 	.word	0x08001e85
 8001de8:	08001ec7 	.word	0x08001ec7
		      case INLET:
		    	  // if reservoir full stop the pump, check completion
				  // otherwise pump during active time
				  if (g_water_depth_final<99) {
 8001dec:	4b75      	ldr	r3, [pc, #468]	; (8001fc4 <main+0x324>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2b62      	cmp	r3, #98	; 0x62
 8001df2:	dc20      	bgt.n	8001e36 <main+0x196>
					  if (within_time_interval(hours, inlet_start, inlet_stop)) {
 8001df4:	4b75      	ldr	r3, [pc, #468]	; (8001fcc <main+0x32c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a75      	ldr	r2, [pc, #468]	; (8001fd0 <main+0x330>)
 8001dfa:	6811      	ldr	r1, [r2, #0]
 8001dfc:	4a75      	ldr	r2, [pc, #468]	; (8001fd4 <main+0x334>)
 8001dfe:	6812      	ldr	r2, [r2, #0]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff ff09 	bl	8001c18 <within_time_interval>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d00e      	beq.n	8001e2a <main+0x18a>
						  set_dc_motor(IN, get_zone_pwm(INLET));
 8001e0c:	2000      	movs	r0, #0
 8001e0e:	f7ff fbdf 	bl	80015d0 <get_zone_pwm>
 8001e12:	4603      	mov	r3, r0
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7fe fb8d 	bl	8000534 <__aeabi_i2d>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	ec43 2b10 	vmov	d0, r2, r3
 8001e22:	2004      	movs	r0, #4
 8001e24:	f7ff f8fa 	bl	800101c <set_dc_motor>
					  }

				  } else {
					  set_dc_motor(IN,0);
				  }
		    	  break;
 8001e28:	e06e      	b.n	8001f08 <main+0x268>
						  set_dc_motor(IN, 0);
 8001e2a:	ed9f 0b59 	vldr	d0, [pc, #356]	; 8001f90 <main+0x2f0>
 8001e2e:	2004      	movs	r0, #4
 8001e30:	f7ff f8f4 	bl	800101c <set_dc_motor>
		    	  break;
 8001e34:	e068      	b.n	8001f08 <main+0x268>
					  set_dc_motor(IN,0);
 8001e36:	ed9f 0b56 	vldr	d0, [pc, #344]	; 8001f90 <main+0x2f0>
 8001e3a:	2004      	movs	r0, #4
 8001e3c:	f7ff f8ee 	bl	800101c <set_dc_motor>
		    	  break;
 8001e40:	e062      	b.n	8001f08 <main+0x268>
		      case OUTLET1:
		    	  if (within_time_interval(hours, zone1_start, zone1_stop)) {
 8001e42:	4b62      	ldr	r3, [pc, #392]	; (8001fcc <main+0x32c>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a64      	ldr	r2, [pc, #400]	; (8001fd8 <main+0x338>)
 8001e48:	6811      	ldr	r1, [r2, #0]
 8001e4a:	4a64      	ldr	r2, [pc, #400]	; (8001fdc <main+0x33c>)
 8001e4c:	6812      	ldr	r2, [r2, #0]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7ff fee2 	bl	8001c18 <within_time_interval>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d00e      	beq.n	8001e78 <main+0x1d8>
					  set_dc_motor(OUT, get_zone_pwm(OUTLET1));
 8001e5a:	2001      	movs	r0, #1
 8001e5c:	f7ff fbb8 	bl	80015d0 <get_zone_pwm>
 8001e60:	4603      	mov	r3, r0
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7fe fb66 	bl	8000534 <__aeabi_i2d>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	ec43 2b10 	vmov	d0, r2, r3
 8001e70:	2005      	movs	r0, #5
 8001e72:	f7ff f8d3 	bl	800101c <set_dc_motor>
				  } else {
					  set_dc_motor(OUT, 0);
				  }
		    	  break;
 8001e76:	e047      	b.n	8001f08 <main+0x268>
					  set_dc_motor(OUT, 0);
 8001e78:	ed9f 0b45 	vldr	d0, [pc, #276]	; 8001f90 <main+0x2f0>
 8001e7c:	2005      	movs	r0, #5
 8001e7e:	f7ff f8cd 	bl	800101c <set_dc_motor>
		    	  break;
 8001e82:	e041      	b.n	8001f08 <main+0x268>
		      case OUTLET2:
		    	  if (within_time_interval(hours, zone2_start, zone2_stop)) {
 8001e84:	4b51      	ldr	r3, [pc, #324]	; (8001fcc <main+0x32c>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a55      	ldr	r2, [pc, #340]	; (8001fe0 <main+0x340>)
 8001e8a:	6811      	ldr	r1, [r2, #0]
 8001e8c:	4a55      	ldr	r2, [pc, #340]	; (8001fe4 <main+0x344>)
 8001e8e:	6812      	ldr	r2, [r2, #0]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff fec1 	bl	8001c18 <within_time_interval>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d00e      	beq.n	8001eba <main+0x21a>
					  set_dc_motor(OUT, get_zone_pwm(OUTLET2));
 8001e9c:	2002      	movs	r0, #2
 8001e9e:	f7ff fb97 	bl	80015d0 <get_zone_pwm>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7fe fb45 	bl	8000534 <__aeabi_i2d>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	460b      	mov	r3, r1
 8001eae:	ec43 2b10 	vmov	d0, r2, r3
 8001eb2:	2005      	movs	r0, #5
 8001eb4:	f7ff f8b2 	bl	800101c <set_dc_motor>
				  } else {
					  set_dc_motor(OUT, 0);
				  }
		      	  break;
 8001eb8:	e026      	b.n	8001f08 <main+0x268>
					  set_dc_motor(OUT, 0);
 8001eba:	ed9f 0b35 	vldr	d0, [pc, #212]	; 8001f90 <main+0x2f0>
 8001ebe:	2005      	movs	r0, #5
 8001ec0:	f7ff f8ac 	bl	800101c <set_dc_motor>
		      	  break;
 8001ec4:	e020      	b.n	8001f08 <main+0x268>
		      case OUTLET3:
		    	  if (within_time_interval(hours, zone3_start, zone3_stop)) {
 8001ec6:	4b41      	ldr	r3, [pc, #260]	; (8001fcc <main+0x32c>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a47      	ldr	r2, [pc, #284]	; (8001fe8 <main+0x348>)
 8001ecc:	6811      	ldr	r1, [r2, #0]
 8001ece:	4a47      	ldr	r2, [pc, #284]	; (8001fec <main+0x34c>)
 8001ed0:	6812      	ldr	r2, [r2, #0]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7ff fea0 	bl	8001c18 <within_time_interval>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d00e      	beq.n	8001efc <main+0x25c>
					  set_dc_motor(OUT, get_zone_pwm(OUTLET3));
 8001ede:	2003      	movs	r0, #3
 8001ee0:	f7ff fb76 	bl	80015d0 <get_zone_pwm>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7fe fb24 	bl	8000534 <__aeabi_i2d>
 8001eec:	4602      	mov	r2, r0
 8001eee:	460b      	mov	r3, r1
 8001ef0:	ec43 2b10 	vmov	d0, r2, r3
 8001ef4:	2005      	movs	r0, #5
 8001ef6:	f7ff f891 	bl	800101c <set_dc_motor>
				  } else {
					  set_dc_motor(OUT, 0);
				  }
		      	  break;
 8001efa:	e004      	b.n	8001f06 <main+0x266>
					  set_dc_motor(OUT, 0);
 8001efc:	ed9f 0b24 	vldr	d0, [pc, #144]	; 8001f90 <main+0x2f0>
 8001f00:	2005      	movs	r0, #5
 8001f02:	f7ff f88b 	bl	800101c <set_dc_motor>
		      	  break;
 8001f06:	bf00      	nop
	  	//    strcpy(active_zone, "Zone 3");
	  	//    active_pwm = zone3_pwm;
	  	//  }

	  	  // check special event (res depth==0)
	  	  if (res_empty) {
 8001f08:	4b39      	ldr	r3, [pc, #228]	; (8001ff0 <main+0x350>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d03a      	beq.n	8001f86 <main+0x2e6>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f10:	b672      	cpsid	i
}
 8001f12:	bf00      	nop
	  		  // stop all irq to halt system
	  		  __disable_irq();
	  		  // turn off builtin led and transmit reservoir empty
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001f14:	2200      	movs	r2, #0
 8001f16:	2120      	movs	r1, #32
 8001f18:	481f      	ldr	r0, [pc, #124]	; (8001f98 <main+0x2f8>)
 8001f1a:	f001 fe3d 	bl	8003b98 <HAL_GPIO_WritePin>
	  		  HAL_UART_Transmit(&huart6, "\r\nRESERVOIR IS EMPTY\r\n", 22, 1000);
 8001f1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f22:	2216      	movs	r2, #22
 8001f24:	4933      	ldr	r1, [pc, #204]	; (8001ff4 <main+0x354>)
 8001f26:	481e      	ldr	r0, [pc, #120]	; (8001fa0 <main+0x300>)
 8001f28:	f003 fe89 	bl	8005c3e <HAL_UART_Transmit>

	  		// disable pump
	  		set_dc_motor(OUT,0);
 8001f2c:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8001f90 <main+0x2f0>
 8001f30:	2005      	movs	r0, #5
 8001f32:	f7ff f873 	bl	800101c <set_dc_motor>
	  		  // sequence the RGB led in RGB in intervals of 500ms roughly
	  		  while(1) {
	  			  setLEDState(LED_RED);
 8001f36:	2001      	movs	r0, #1
 8001f38:	f7ff f8dc 	bl	80010f4 <setLEDState>
	  			for (int j = 0; j < 500000; j++) {};
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	617b      	str	r3, [r7, #20]
 8001f40:	e002      	b.n	8001f48 <main+0x2a8>
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	3301      	adds	r3, #1
 8001f46:	617b      	str	r3, [r7, #20]
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	4a2b      	ldr	r2, [pc, #172]	; (8001ff8 <main+0x358>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	ddf8      	ble.n	8001f42 <main+0x2a2>
					setLEDState(LED_GREEN);
 8001f50:	2002      	movs	r0, #2
 8001f52:	f7ff f8cf 	bl	80010f4 <setLEDState>
					for (int j = 0; j < 500000; j++) {};
 8001f56:	2300      	movs	r3, #0
 8001f58:	613b      	str	r3, [r7, #16]
 8001f5a:	e002      	b.n	8001f62 <main+0x2c2>
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	3301      	adds	r3, #1
 8001f60:	613b      	str	r3, [r7, #16]
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	4a24      	ldr	r2, [pc, #144]	; (8001ff8 <main+0x358>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	ddf8      	ble.n	8001f5c <main+0x2bc>
					setLEDState(LED_BLUE);
 8001f6a:	2003      	movs	r0, #3
 8001f6c:	f7ff f8c2 	bl	80010f4 <setLEDState>
					for (int j = 0; j < 500000; j++) {};
 8001f70:	2300      	movs	r3, #0
 8001f72:	60fb      	str	r3, [r7, #12]
 8001f74:	e002      	b.n	8001f7c <main+0x2dc>
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	3301      	adds	r3, #1
 8001f7a:	60fb      	str	r3, [r7, #12]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	4a1e      	ldr	r2, [pc, #120]	; (8001ff8 <main+0x358>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	ddf8      	ble.n	8001f76 <main+0x2d6>
	  			  setLEDState(LED_RED);
 8001f84:	e7d7      	b.n	8001f36 <main+0x296>


	  	  }

	  // delay margin to accommodate for sensor polling break time
	  HAL_Delay(200);
 8001f86:	20c8      	movs	r0, #200	; 0xc8
 8001f88:	f000 fed8 	bl	8002d3c <HAL_Delay>
	  	  update_current_water_reservoir_depth();
 8001f8c:	e710      	b.n	8001db0 <main+0x110>
 8001f8e:	bf00      	nop
	...
 8001f98:	40020000 	.word	0x40020000
 8001f9c:	08008324 	.word	0x08008324
 8001fa0:	20000234 	.word	0x20000234
 8001fa4:	2000047c 	.word	0x2000047c
 8001fa8:	20000480 	.word	0x20000480
 8001fac:	2000015c 	.word	0x2000015c
 8001fb0:	200000cc 	.word	0x200000cc
 8001fb4:	200001ec 	.word	0x200001ec
 8001fb8:	20000114 	.word	0x20000114
 8001fbc:	200001a4 	.word	0x200001a4
 8001fc0:	200004c4 	.word	0x200004c4
 8001fc4:	20000000 	.word	0x20000000
 8001fc8:	200005dc 	.word	0x200005dc
 8001fcc:	200004cc 	.word	0x200004cc
 8001fd0:	20000494 	.word	0x20000494
 8001fd4:	20000498 	.word	0x20000498
 8001fd8:	2000049c 	.word	0x2000049c
 8001fdc:	200004a0 	.word	0x200004a0
 8001fe0:	200004a4 	.word	0x200004a4
 8001fe4:	200004a8 	.word	0x200004a8
 8001fe8:	200004ac 	.word	0x200004ac
 8001fec:	200004b0 	.word	0x200004b0
 8001ff0:	200004c0 	.word	0x200004c0
 8001ff4:	0800830c 	.word	0x0800830c
 8001ff8:	0007a11f 	.word	0x0007a11f

08001ffc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b094      	sub	sp, #80	; 0x50
 8002000:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002002:	f107 0320 	add.w	r3, r7, #32
 8002006:	2230      	movs	r2, #48	; 0x30
 8002008:	2100      	movs	r1, #0
 800200a:	4618      	mov	r0, r3
 800200c:	f004 fec4 	bl	8006d98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002010:	f107 030c 	add.w	r3, r7, #12
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	605a      	str	r2, [r3, #4]
 800201a:	609a      	str	r2, [r3, #8]
 800201c:	60da      	str	r2, [r3, #12]
 800201e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002020:	2300      	movs	r3, #0
 8002022:	60bb      	str	r3, [r7, #8]
 8002024:	4b23      	ldr	r3, [pc, #140]	; (80020b4 <SystemClock_Config+0xb8>)
 8002026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002028:	4a22      	ldr	r2, [pc, #136]	; (80020b4 <SystemClock_Config+0xb8>)
 800202a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800202e:	6413      	str	r3, [r2, #64]	; 0x40
 8002030:	4b20      	ldr	r3, [pc, #128]	; (80020b4 <SystemClock_Config+0xb8>)
 8002032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002034:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002038:	60bb      	str	r3, [r7, #8]
 800203a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800203c:	2300      	movs	r3, #0
 800203e:	607b      	str	r3, [r7, #4]
 8002040:	4b1d      	ldr	r3, [pc, #116]	; (80020b8 <SystemClock_Config+0xbc>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002048:	4a1b      	ldr	r2, [pc, #108]	; (80020b8 <SystemClock_Config+0xbc>)
 800204a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800204e:	6013      	str	r3, [r2, #0]
 8002050:	4b19      	ldr	r3, [pc, #100]	; (80020b8 <SystemClock_Config+0xbc>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002058:	607b      	str	r3, [r7, #4]
 800205a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800205c:	2302      	movs	r3, #2
 800205e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002060:	2301      	movs	r3, #1
 8002062:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002064:	2310      	movs	r3, #16
 8002066:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002068:	2300      	movs	r3, #0
 800206a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800206c:	f107 0320 	add.w	r3, r7, #32
 8002070:	4618      	mov	r0, r3
 8002072:	f001 fddd 	bl	8003c30 <HAL_RCC_OscConfig>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800207c:	f000 fb26 	bl	80026cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002080:	230f      	movs	r3, #15
 8002082:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002084:	2300      	movs	r3, #0
 8002086:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002088:	2300      	movs	r3, #0
 800208a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800208c:	2300      	movs	r3, #0
 800208e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002090:	2300      	movs	r3, #0
 8002092:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002094:	f107 030c 	add.w	r3, r7, #12
 8002098:	2100      	movs	r1, #0
 800209a:	4618      	mov	r0, r3
 800209c:	f002 f840 	bl	8004120 <HAL_RCC_ClockConfig>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <SystemClock_Config+0xae>
  {
    Error_Handler();
 80020a6:	f000 fb11 	bl	80026cc <Error_Handler>
  }
}
 80020aa:	bf00      	nop
 80020ac:	3750      	adds	r7, #80	; 0x50
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	40023800 	.word	0x40023800
 80020b8:	40007000 	.word	0x40007000

080020bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80020c2:	463b      	mov	r3, r7
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	605a      	str	r2, [r3, #4]
 80020ca:	609a      	str	r2, [r3, #8]
 80020cc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80020ce:	4b21      	ldr	r3, [pc, #132]	; (8002154 <MX_ADC1_Init+0x98>)
 80020d0:	4a21      	ldr	r2, [pc, #132]	; (8002158 <MX_ADC1_Init+0x9c>)
 80020d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80020d4:	4b1f      	ldr	r3, [pc, #124]	; (8002154 <MX_ADC1_Init+0x98>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80020da:	4b1e      	ldr	r3, [pc, #120]	; (8002154 <MX_ADC1_Init+0x98>)
 80020dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020e0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80020e2:	4b1c      	ldr	r3, [pc, #112]	; (8002154 <MX_ADC1_Init+0x98>)
 80020e4:	2201      	movs	r2, #1
 80020e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80020e8:	4b1a      	ldr	r3, [pc, #104]	; (8002154 <MX_ADC1_Init+0x98>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80020ee:	4b19      	ldr	r3, [pc, #100]	; (8002154 <MX_ADC1_Init+0x98>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80020f6:	4b17      	ldr	r3, [pc, #92]	; (8002154 <MX_ADC1_Init+0x98>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80020fc:	4b15      	ldr	r3, [pc, #84]	; (8002154 <MX_ADC1_Init+0x98>)
 80020fe:	4a17      	ldr	r2, [pc, #92]	; (800215c <MX_ADC1_Init+0xa0>)
 8002100:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002102:	4b14      	ldr	r3, [pc, #80]	; (8002154 <MX_ADC1_Init+0x98>)
 8002104:	2200      	movs	r2, #0
 8002106:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002108:	4b12      	ldr	r3, [pc, #72]	; (8002154 <MX_ADC1_Init+0x98>)
 800210a:	2201      	movs	r2, #1
 800210c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800210e:	4b11      	ldr	r3, [pc, #68]	; (8002154 <MX_ADC1_Init+0x98>)
 8002110:	2200      	movs	r2, #0
 8002112:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002116:	4b0f      	ldr	r3, [pc, #60]	; (8002154 <MX_ADC1_Init+0x98>)
 8002118:	2201      	movs	r2, #1
 800211a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800211c:	480d      	ldr	r0, [pc, #52]	; (8002154 <MX_ADC1_Init+0x98>)
 800211e:	f000 fe31 	bl	8002d84 <HAL_ADC_Init>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002128:	f000 fad0 	bl	80026cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800212c:	2301      	movs	r3, #1
 800212e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002130:	2301      	movs	r3, #1
 8002132:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8002134:	2301      	movs	r3, #1
 8002136:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002138:	463b      	mov	r3, r7
 800213a:	4619      	mov	r1, r3
 800213c:	4805      	ldr	r0, [pc, #20]	; (8002154 <MX_ADC1_Init+0x98>)
 800213e:	f000 ffe5 	bl	800310c <HAL_ADC_ConfigChannel>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d001      	beq.n	800214c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002148:	f000 fac0 	bl	80026cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800214c:	bf00      	nop
 800214e:	3710      	adds	r7, #16
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	20000084 	.word	0x20000084
 8002158:	40012000 	.word	0x40012000
 800215c:	0f000001 	.word	0x0f000001

08002160 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b08a      	sub	sp, #40	; 0x28
 8002164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002166:	f107 0318 	add.w	r3, r7, #24
 800216a:	2200      	movs	r2, #0
 800216c:	601a      	str	r2, [r3, #0]
 800216e:	605a      	str	r2, [r3, #4]
 8002170:	609a      	str	r2, [r3, #8]
 8002172:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002174:	f107 0310 	add.w	r3, r7, #16
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800217e:	463b      	mov	r3, r7
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	605a      	str	r2, [r3, #4]
 8002186:	609a      	str	r2, [r3, #8]
 8002188:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800218a:	4b2d      	ldr	r3, [pc, #180]	; (8002240 <MX_TIM1_Init+0xe0>)
 800218c:	4a2d      	ldr	r2, [pc, #180]	; (8002244 <MX_TIM1_Init+0xe4>)
 800218e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 8002190:	4b2b      	ldr	r3, [pc, #172]	; (8002240 <MX_TIM1_Init+0xe0>)
 8002192:	220f      	movs	r2, #15
 8002194:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002196:	4b2a      	ldr	r3, [pc, #168]	; (8002240 <MX_TIM1_Init+0xe0>)
 8002198:	2200      	movs	r2, #0
 800219a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 38000-1;
 800219c:	4b28      	ldr	r3, [pc, #160]	; (8002240 <MX_TIM1_Init+0xe0>)
 800219e:	f249 426f 	movw	r2, #37999	; 0x946f
 80021a2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021a4:	4b26      	ldr	r3, [pc, #152]	; (8002240 <MX_TIM1_Init+0xe0>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80021aa:	4b25      	ldr	r3, [pc, #148]	; (8002240 <MX_TIM1_Init+0xe0>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80021b0:	4b23      	ldr	r3, [pc, #140]	; (8002240 <MX_TIM1_Init+0xe0>)
 80021b2:	2280      	movs	r2, #128	; 0x80
 80021b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80021b6:	4822      	ldr	r0, [pc, #136]	; (8002240 <MX_TIM1_Init+0xe0>)
 80021b8:	f002 f9d2 	bl	8004560 <HAL_TIM_Base_Init>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 80021c2:	f000 fa83 	bl	80026cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021ca:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80021cc:	f107 0318 	add.w	r3, r7, #24
 80021d0:	4619      	mov	r1, r3
 80021d2:	481b      	ldr	r0, [pc, #108]	; (8002240 <MX_TIM1_Init+0xe0>)
 80021d4:	f002 ff50 	bl	8005078 <HAL_TIM_ConfigClockSource>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80021de:	f000 fa75 	bl	80026cc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80021e2:	4817      	ldr	r0, [pc, #92]	; (8002240 <MX_TIM1_Init+0xe0>)
 80021e4:	f002 fb6e 	bl	80048c4 <HAL_TIM_IC_Init>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80021ee:	f000 fa6d 	bl	80026cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021f2:	2300      	movs	r3, #0
 80021f4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021f6:	2300      	movs	r3, #0
 80021f8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80021fa:	f107 0310 	add.w	r3, r7, #16
 80021fe:	4619      	mov	r1, r3
 8002200:	480f      	ldr	r0, [pc, #60]	; (8002240 <MX_TIM1_Init+0xe0>)
 8002202:	f003 fc4d 	bl	8005aa0 <HAL_TIMEx_MasterConfigSynchronization>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 800220c:	f000 fa5e 	bl	80026cc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8002210:	230a      	movs	r3, #10
 8002212:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002214:	2301      	movs	r3, #1
 8002216:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002218:	2300      	movs	r3, #0
 800221a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800221c:	2300      	movs	r3, #0
 800221e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002220:	463b      	mov	r3, r7
 8002222:	2204      	movs	r2, #4
 8002224:	4619      	mov	r1, r3
 8002226:	4806      	ldr	r0, [pc, #24]	; (8002240 <MX_TIM1_Init+0xe0>)
 8002228:	f002 fdc8 	bl	8004dbc <HAL_TIM_IC_ConfigChannel>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8002232:	f000 fa4b 	bl	80026cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002236:	bf00      	nop
 8002238:	3728      	adds	r7, #40	; 0x28
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	200000cc 	.word	0x200000cc
 8002244:	40010000 	.word	0x40010000

08002248 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b08a      	sub	sp, #40	; 0x28
 800224c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800224e:	f107 0320 	add.w	r3, r7, #32
 8002252:	2200      	movs	r2, #0
 8002254:	601a      	str	r2, [r3, #0]
 8002256:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002258:	1d3b      	adds	r3, r7, #4
 800225a:	2200      	movs	r2, #0
 800225c:	601a      	str	r2, [r3, #0]
 800225e:	605a      	str	r2, [r3, #4]
 8002260:	609a      	str	r2, [r3, #8]
 8002262:	60da      	str	r2, [r3, #12]
 8002264:	611a      	str	r2, [r3, #16]
 8002266:	615a      	str	r2, [r3, #20]
 8002268:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800226a:	4b27      	ldr	r3, [pc, #156]	; (8002308 <MX_TIM3_Init+0xc0>)
 800226c:	4a27      	ldr	r2, [pc, #156]	; (800230c <MX_TIM3_Init+0xc4>)
 800226e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 8002270:	4b25      	ldr	r3, [pc, #148]	; (8002308 <MX_TIM3_Init+0xc0>)
 8002272:	220f      	movs	r2, #15
 8002274:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002276:	4b24      	ldr	r3, [pc, #144]	; (8002308 <MX_TIM3_Init+0xc0>)
 8002278:	2200      	movs	r2, #0
 800227a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 800227c:	4b22      	ldr	r3, [pc, #136]	; (8002308 <MX_TIM3_Init+0xc0>)
 800227e:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8002282:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002284:	4b20      	ldr	r3, [pc, #128]	; (8002308 <MX_TIM3_Init+0xc0>)
 8002286:	2200      	movs	r2, #0
 8002288:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800228a:	4b1f      	ldr	r3, [pc, #124]	; (8002308 <MX_TIM3_Init+0xc0>)
 800228c:	2280      	movs	r2, #128	; 0x80
 800228e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002290:	481d      	ldr	r0, [pc, #116]	; (8002308 <MX_TIM3_Init+0xc0>)
 8002292:	f002 fa17 	bl	80046c4 <HAL_TIM_PWM_Init>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800229c:	f000 fa16 	bl	80026cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022a0:	2300      	movs	r3, #0
 80022a2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022a4:	2300      	movs	r3, #0
 80022a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80022a8:	f107 0320 	add.w	r3, r7, #32
 80022ac:	4619      	mov	r1, r3
 80022ae:	4816      	ldr	r0, [pc, #88]	; (8002308 <MX_TIM3_Init+0xc0>)
 80022b0:	f003 fbf6 	bl	8005aa0 <HAL_TIMEx_MasterConfigSynchronization>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80022ba:	f000 fa07 	bl	80026cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022be:	2360      	movs	r3, #96	; 0x60
 80022c0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80022c2:	2300      	movs	r3, #0
 80022c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022c6:	2300      	movs	r3, #0
 80022c8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022ca:	2300      	movs	r3, #0
 80022cc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022ce:	1d3b      	adds	r3, r7, #4
 80022d0:	2200      	movs	r2, #0
 80022d2:	4619      	mov	r1, r3
 80022d4:	480c      	ldr	r0, [pc, #48]	; (8002308 <MX_TIM3_Init+0xc0>)
 80022d6:	f002 fe0d 	bl	8004ef4 <HAL_TIM_PWM_ConfigChannel>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80022e0:	f000 f9f4 	bl	80026cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80022e4:	1d3b      	adds	r3, r7, #4
 80022e6:	2204      	movs	r2, #4
 80022e8:	4619      	mov	r1, r3
 80022ea:	4807      	ldr	r0, [pc, #28]	; (8002308 <MX_TIM3_Init+0xc0>)
 80022ec:	f002 fe02 	bl	8004ef4 <HAL_TIM_PWM_ConfigChannel>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80022f6:	f000 f9e9 	bl	80026cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80022fa:	4803      	ldr	r0, [pc, #12]	; (8002308 <MX_TIM3_Init+0xc0>)
 80022fc:	f000 fb24 	bl	8002948 <HAL_TIM_MspPostInit>

}
 8002300:	bf00      	nop
 8002302:	3728      	adds	r7, #40	; 0x28
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	20000114 	.word	0x20000114
 800230c:	40000400 	.word	0x40000400

08002310 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002316:	f107 0308 	add.w	r3, r7, #8
 800231a:	2200      	movs	r2, #0
 800231c:	601a      	str	r2, [r3, #0]
 800231e:	605a      	str	r2, [r3, #4]
 8002320:	609a      	str	r2, [r3, #8]
 8002322:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002324:	463b      	mov	r3, r7
 8002326:	2200      	movs	r2, #0
 8002328:	601a      	str	r2, [r3, #0]
 800232a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800232c:	4b1d      	ldr	r3, [pc, #116]	; (80023a4 <MX_TIM4_Init+0x94>)
 800232e:	4a1e      	ldr	r2, [pc, #120]	; (80023a8 <MX_TIM4_Init+0x98>)
 8002330:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16000-1;
 8002332:	4b1c      	ldr	r3, [pc, #112]	; (80023a4 <MX_TIM4_Init+0x94>)
 8002334:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8002338:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800233a:	4b1a      	ldr	r3, [pc, #104]	; (80023a4 <MX_TIM4_Init+0x94>)
 800233c:	2200      	movs	r2, #0
 800233e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8002340:	4b18      	ldr	r3, [pc, #96]	; (80023a4 <MX_TIM4_Init+0x94>)
 8002342:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002346:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002348:	4b16      	ldr	r3, [pc, #88]	; (80023a4 <MX_TIM4_Init+0x94>)
 800234a:	2200      	movs	r2, #0
 800234c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800234e:	4b15      	ldr	r3, [pc, #84]	; (80023a4 <MX_TIM4_Init+0x94>)
 8002350:	2280      	movs	r2, #128	; 0x80
 8002352:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002354:	4813      	ldr	r0, [pc, #76]	; (80023a4 <MX_TIM4_Init+0x94>)
 8002356:	f002 f903 	bl	8004560 <HAL_TIM_Base_Init>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002360:	f000 f9b4 	bl	80026cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002364:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002368:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800236a:	f107 0308 	add.w	r3, r7, #8
 800236e:	4619      	mov	r1, r3
 8002370:	480c      	ldr	r0, [pc, #48]	; (80023a4 <MX_TIM4_Init+0x94>)
 8002372:	f002 fe81 	bl	8005078 <HAL_TIM_ConfigClockSource>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800237c:	f000 f9a6 	bl	80026cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002380:	2300      	movs	r3, #0
 8002382:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002384:	2300      	movs	r3, #0
 8002386:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002388:	463b      	mov	r3, r7
 800238a:	4619      	mov	r1, r3
 800238c:	4805      	ldr	r0, [pc, #20]	; (80023a4 <MX_TIM4_Init+0x94>)
 800238e:	f003 fb87 	bl	8005aa0 <HAL_TIMEx_MasterConfigSynchronization>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d001      	beq.n	800239c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002398:	f000 f998 	bl	80026cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800239c:	bf00      	nop
 800239e:	3718      	adds	r7, #24
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	2000015c 	.word	0x2000015c
 80023a8:	40000800 	.word	0x40000800

080023ac <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b08e      	sub	sp, #56	; 0x38
 80023b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023b6:	2200      	movs	r2, #0
 80023b8:	601a      	str	r2, [r3, #0]
 80023ba:	605a      	str	r2, [r3, #4]
 80023bc:	609a      	str	r2, [r3, #8]
 80023be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023c0:	f107 0320 	add.w	r3, r7, #32
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023ca:	1d3b      	adds	r3, r7, #4
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	605a      	str	r2, [r3, #4]
 80023d2:	609a      	str	r2, [r3, #8]
 80023d4:	60da      	str	r2, [r3, #12]
 80023d6:	611a      	str	r2, [r3, #16]
 80023d8:	615a      	str	r2, [r3, #20]
 80023da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80023dc:	4b2d      	ldr	r3, [pc, #180]	; (8002494 <MX_TIM5_Init+0xe8>)
 80023de:	4a2e      	ldr	r2, [pc, #184]	; (8002498 <MX_TIM5_Init+0xec>)
 80023e0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 16-1;
 80023e2:	4b2c      	ldr	r3, [pc, #176]	; (8002494 <MX_TIM5_Init+0xe8>)
 80023e4:	220f      	movs	r2, #15
 80023e6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023e8:	4b2a      	ldr	r3, [pc, #168]	; (8002494 <MX_TIM5_Init+0xe8>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 20000-1;
 80023ee:	4b29      	ldr	r3, [pc, #164]	; (8002494 <MX_TIM5_Init+0xe8>)
 80023f0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80023f4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023f6:	4b27      	ldr	r3, [pc, #156]	; (8002494 <MX_TIM5_Init+0xe8>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80023fc:	4b25      	ldr	r3, [pc, #148]	; (8002494 <MX_TIM5_Init+0xe8>)
 80023fe:	2280      	movs	r2, #128	; 0x80
 8002400:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002402:	4824      	ldr	r0, [pc, #144]	; (8002494 <MX_TIM5_Init+0xe8>)
 8002404:	f002 f8ac 	bl	8004560 <HAL_TIM_Base_Init>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800240e:	f000 f95d 	bl	80026cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002412:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002416:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002418:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800241c:	4619      	mov	r1, r3
 800241e:	481d      	ldr	r0, [pc, #116]	; (8002494 <MX_TIM5_Init+0xe8>)
 8002420:	f002 fe2a 	bl	8005078 <HAL_TIM_ConfigClockSource>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800242a:	f000 f94f 	bl	80026cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800242e:	4819      	ldr	r0, [pc, #100]	; (8002494 <MX_TIM5_Init+0xe8>)
 8002430:	f002 f948 	bl	80046c4 <HAL_TIM_PWM_Init>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800243a:	f000 f947 	bl	80026cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800243e:	2300      	movs	r3, #0
 8002440:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002442:	2300      	movs	r3, #0
 8002444:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002446:	f107 0320 	add.w	r3, r7, #32
 800244a:	4619      	mov	r1, r3
 800244c:	4811      	ldr	r0, [pc, #68]	; (8002494 <MX_TIM5_Init+0xe8>)
 800244e:	f003 fb27 	bl	8005aa0 <HAL_TIMEx_MasterConfigSynchronization>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8002458:	f000 f938 	bl	80026cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800245c:	2360      	movs	r3, #96	; 0x60
 800245e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8002460:	f240 13f3 	movw	r3, #499	; 0x1f3
 8002464:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002466:	2300      	movs	r3, #0
 8002468:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800246a:	2300      	movs	r3, #0
 800246c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800246e:	1d3b      	adds	r3, r7, #4
 8002470:	2200      	movs	r2, #0
 8002472:	4619      	mov	r1, r3
 8002474:	4807      	ldr	r0, [pc, #28]	; (8002494 <MX_TIM5_Init+0xe8>)
 8002476:	f002 fd3d 	bl	8004ef4 <HAL_TIM_PWM_ConfigChannel>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8002480:	f000 f924 	bl	80026cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002484:	4803      	ldr	r0, [pc, #12]	; (8002494 <MX_TIM5_Init+0xe8>)
 8002486:	f000 fa5f 	bl	8002948 <HAL_TIM_MspPostInit>

}
 800248a:	bf00      	nop
 800248c:	3738      	adds	r7, #56	; 0x38
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	200001a4 	.word	0x200001a4
 8002498:	40000c00 	.word	0x40000c00

0800249c <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024a2:	463b      	mov	r3, r7
 80024a4:	2200      	movs	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]
 80024a8:	605a      	str	r2, [r3, #4]
 80024aa:	609a      	str	r2, [r3, #8]
 80024ac:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80024ae:	4b16      	ldr	r3, [pc, #88]	; (8002508 <MX_TIM9_Init+0x6c>)
 80024b0:	4a16      	ldr	r2, [pc, #88]	; (800250c <MX_TIM9_Init+0x70>)
 80024b2:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 16000-1;
 80024b4:	4b14      	ldr	r3, [pc, #80]	; (8002508 <MX_TIM9_Init+0x6c>)
 80024b6:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80024ba:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024bc:	4b12      	ldr	r3, [pc, #72]	; (8002508 <MX_TIM9_Init+0x6c>)
 80024be:	2200      	movs	r2, #0
 80024c0:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 3000-1;
 80024c2:	4b11      	ldr	r3, [pc, #68]	; (8002508 <MX_TIM9_Init+0x6c>)
 80024c4:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80024c8:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024ca:	4b0f      	ldr	r3, [pc, #60]	; (8002508 <MX_TIM9_Init+0x6c>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80024d0:	4b0d      	ldr	r3, [pc, #52]	; (8002508 <MX_TIM9_Init+0x6c>)
 80024d2:	2280      	movs	r2, #128	; 0x80
 80024d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80024d6:	480c      	ldr	r0, [pc, #48]	; (8002508 <MX_TIM9_Init+0x6c>)
 80024d8:	f002 f842 	bl	8004560 <HAL_TIM_Base_Init>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 80024e2:	f000 f8f3 	bl	80026cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024ea:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80024ec:	463b      	mov	r3, r7
 80024ee:	4619      	mov	r1, r3
 80024f0:	4805      	ldr	r0, [pc, #20]	; (8002508 <MX_TIM9_Init+0x6c>)
 80024f2:	f002 fdc1 	bl	8005078 <HAL_TIM_ConfigClockSource>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 80024fc:	f000 f8e6 	bl	80026cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8002500:	bf00      	nop
 8002502:	3710      	adds	r7, #16
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	200001ec 	.word	0x200001ec
 800250c:	40014000 	.word	0x40014000

08002510 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002514:	4b11      	ldr	r3, [pc, #68]	; (800255c <MX_USART6_UART_Init+0x4c>)
 8002516:	4a12      	ldr	r2, [pc, #72]	; (8002560 <MX_USART6_UART_Init+0x50>)
 8002518:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800251a:	4b10      	ldr	r3, [pc, #64]	; (800255c <MX_USART6_UART_Init+0x4c>)
 800251c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002520:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002522:	4b0e      	ldr	r3, [pc, #56]	; (800255c <MX_USART6_UART_Init+0x4c>)
 8002524:	2200      	movs	r2, #0
 8002526:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002528:	4b0c      	ldr	r3, [pc, #48]	; (800255c <MX_USART6_UART_Init+0x4c>)
 800252a:	2200      	movs	r2, #0
 800252c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800252e:	4b0b      	ldr	r3, [pc, #44]	; (800255c <MX_USART6_UART_Init+0x4c>)
 8002530:	2200      	movs	r2, #0
 8002532:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002534:	4b09      	ldr	r3, [pc, #36]	; (800255c <MX_USART6_UART_Init+0x4c>)
 8002536:	220c      	movs	r2, #12
 8002538:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800253a:	4b08      	ldr	r3, [pc, #32]	; (800255c <MX_USART6_UART_Init+0x4c>)
 800253c:	2200      	movs	r2, #0
 800253e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002540:	4b06      	ldr	r3, [pc, #24]	; (800255c <MX_USART6_UART_Init+0x4c>)
 8002542:	2200      	movs	r2, #0
 8002544:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002546:	4805      	ldr	r0, [pc, #20]	; (800255c <MX_USART6_UART_Init+0x4c>)
 8002548:	f003 fb2c 	bl	8005ba4 <HAL_UART_Init>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002552:	f000 f8bb 	bl	80026cc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002556:	bf00      	nop
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	20000234 	.word	0x20000234
 8002560:	40011400 	.word	0x40011400

08002564 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b08a      	sub	sp, #40	; 0x28
 8002568:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800256a:	f107 0314 	add.w	r3, r7, #20
 800256e:	2200      	movs	r2, #0
 8002570:	601a      	str	r2, [r3, #0]
 8002572:	605a      	str	r2, [r3, #4]
 8002574:	609a      	str	r2, [r3, #8]
 8002576:	60da      	str	r2, [r3, #12]
 8002578:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800257a:	2300      	movs	r3, #0
 800257c:	613b      	str	r3, [r7, #16]
 800257e:	4b4f      	ldr	r3, [pc, #316]	; (80026bc <MX_GPIO_Init+0x158>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002582:	4a4e      	ldr	r2, [pc, #312]	; (80026bc <MX_GPIO_Init+0x158>)
 8002584:	f043 0304 	orr.w	r3, r3, #4
 8002588:	6313      	str	r3, [r2, #48]	; 0x30
 800258a:	4b4c      	ldr	r3, [pc, #304]	; (80026bc <MX_GPIO_Init+0x158>)
 800258c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258e:	f003 0304 	and.w	r3, r3, #4
 8002592:	613b      	str	r3, [r7, #16]
 8002594:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002596:	2300      	movs	r3, #0
 8002598:	60fb      	str	r3, [r7, #12]
 800259a:	4b48      	ldr	r3, [pc, #288]	; (80026bc <MX_GPIO_Init+0x158>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	4a47      	ldr	r2, [pc, #284]	; (80026bc <MX_GPIO_Init+0x158>)
 80025a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025a4:	6313      	str	r3, [r2, #48]	; 0x30
 80025a6:	4b45      	ldr	r3, [pc, #276]	; (80026bc <MX_GPIO_Init+0x158>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ae:	60fb      	str	r3, [r7, #12]
 80025b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025b2:	2300      	movs	r3, #0
 80025b4:	60bb      	str	r3, [r7, #8]
 80025b6:	4b41      	ldr	r3, [pc, #260]	; (80026bc <MX_GPIO_Init+0x158>)
 80025b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ba:	4a40      	ldr	r2, [pc, #256]	; (80026bc <MX_GPIO_Init+0x158>)
 80025bc:	f043 0301 	orr.w	r3, r3, #1
 80025c0:	6313      	str	r3, [r2, #48]	; 0x30
 80025c2:	4b3e      	ldr	r3, [pc, #248]	; (80026bc <MX_GPIO_Init+0x158>)
 80025c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	60bb      	str	r3, [r7, #8]
 80025cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025ce:	2300      	movs	r3, #0
 80025d0:	607b      	str	r3, [r7, #4]
 80025d2:	4b3a      	ldr	r3, [pc, #232]	; (80026bc <MX_GPIO_Init+0x158>)
 80025d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d6:	4a39      	ldr	r2, [pc, #228]	; (80026bc <MX_GPIO_Init+0x158>)
 80025d8:	f043 0302 	orr.w	r3, r3, #2
 80025dc:	6313      	str	r3, [r2, #48]	; 0x30
 80025de:	4b37      	ldr	r3, [pc, #220]	; (80026bc <MX_GPIO_Init+0x158>)
 80025e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	607b      	str	r3, [r7, #4]
 80025e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_BUILTIN_Pin|RED_Pin|HCSR04_TRIG_Pin|GRN_Pin
 80025ea:	2200      	movs	r2, #0
 80025ec:	f44f 51e9 	mov.w	r1, #7456	; 0x1d20
 80025f0:	4833      	ldr	r0, [pc, #204]	; (80026c0 <MX_GPIO_Init+0x15c>)
 80025f2:	f001 fad1 	bl	8003b98 <HAL_GPIO_WritePin>
                          |BLU_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIGIT_B3_Pin|DIGIT_A0_Pin|DIGIT_A1_Pin|DIGIT_A2_Pin
 80025f6:	2200      	movs	r2, #0
 80025f8:	f44f 61ff 	mov.w	r1, #2040	; 0x7f8
 80025fc:	4831      	ldr	r0, [pc, #196]	; (80026c4 <MX_GPIO_Init+0x160>)
 80025fe:	f001 facb 	bl	8003b98 <HAL_GPIO_WritePin>
                          |DIGIT_A3_Pin|DIGIT_B0_Pin|DIGIT_B1_Pin|DIGIT_B2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002602:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002606:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002608:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800260c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260e:	2300      	movs	r3, #0
 8002610:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002612:	f107 0314 	add.w	r3, r7, #20
 8002616:	4619      	mov	r1, r3
 8002618:	482b      	ldr	r0, [pc, #172]	; (80026c8 <MX_GPIO_Init+0x164>)
 800261a:	f001 f939 	bl	8003890 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_BUILTIN_Pin RED_Pin GRN_Pin BLU_Pin */
  GPIO_InitStruct.Pin = LED_BUILTIN_Pin|RED_Pin|GRN_Pin|BLU_Pin;
 800261e:	f44f 53c9 	mov.w	r3, #6432	; 0x1920
 8002622:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002624:	2301      	movs	r3, #1
 8002626:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002628:	2300      	movs	r3, #0
 800262a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800262c:	2300      	movs	r3, #0
 800262e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002630:	f107 0314 	add.w	r3, r7, #20
 8002634:	4619      	mov	r1, r3
 8002636:	4822      	ldr	r0, [pc, #136]	; (80026c0 <MX_GPIO_Init+0x15c>)
 8002638:	f001 f92a 	bl	8003890 <HAL_GPIO_Init>

  /*Configure GPIO pin : RPM_TICK_Pin */
  GPIO_InitStruct.Pin = RPM_TICK_Pin;
 800263c:	2304      	movs	r3, #4
 800263e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002640:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002644:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002646:	2300      	movs	r3, #0
 8002648:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RPM_TICK_GPIO_Port, &GPIO_InitStruct);
 800264a:	f107 0314 	add.w	r3, r7, #20
 800264e:	4619      	mov	r1, r3
 8002650:	481c      	ldr	r0, [pc, #112]	; (80026c4 <MX_GPIO_Init+0x160>)
 8002652:	f001 f91d 	bl	8003890 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIGIT_B3_Pin DIGIT_A0_Pin DIGIT_A1_Pin DIGIT_A2_Pin
                           DIGIT_A3_Pin DIGIT_B0_Pin DIGIT_B1_Pin DIGIT_B2_Pin */
  GPIO_InitStruct.Pin = DIGIT_B3_Pin|DIGIT_A0_Pin|DIGIT_A1_Pin|DIGIT_A2_Pin
 8002656:	f44f 63ff 	mov.w	r3, #2040	; 0x7f8
 800265a:	617b      	str	r3, [r7, #20]
                          |DIGIT_A3_Pin|DIGIT_B0_Pin|DIGIT_B1_Pin|DIGIT_B2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800265c:	2301      	movs	r3, #1
 800265e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002660:	2300      	movs	r3, #0
 8002662:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002664:	2300      	movs	r3, #0
 8002666:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002668:	f107 0314 	add.w	r3, r7, #20
 800266c:	4619      	mov	r1, r3
 800266e:	4815      	ldr	r0, [pc, #84]	; (80026c4 <MX_GPIO_Init+0x160>)
 8002670:	f001 f90e 	bl	8003890 <HAL_GPIO_Init>

  /*Configure GPIO pin : HCSR04_TRIG_Pin */
  GPIO_InitStruct.Pin = HCSR04_TRIG_Pin;
 8002674:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002678:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800267a:	2301      	movs	r3, #1
 800267c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267e:	2300      	movs	r3, #0
 8002680:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002682:	2303      	movs	r3, #3
 8002684:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(HCSR04_TRIG_GPIO_Port, &GPIO_InitStruct);
 8002686:	f107 0314 	add.w	r3, r7, #20
 800268a:	4619      	mov	r1, r3
 800268c:	480c      	ldr	r0, [pc, #48]	; (80026c0 <MX_GPIO_Init+0x15c>)
 800268e:	f001 f8ff 	bl	8003890 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8002692:	2200      	movs	r2, #0
 8002694:	2100      	movs	r1, #0
 8002696:	2008      	movs	r0, #8
 8002698:	f001 f831 	bl	80036fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800269c:	2008      	movs	r0, #8
 800269e:	f001 f84a 	bl	8003736 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80026a2:	2200      	movs	r2, #0
 80026a4:	2100      	movs	r1, #0
 80026a6:	2028      	movs	r0, #40	; 0x28
 80026a8:	f001 f829 	bl	80036fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80026ac:	2028      	movs	r0, #40	; 0x28
 80026ae:	f001 f842 	bl	8003736 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80026b2:	bf00      	nop
 80026b4:	3728      	adds	r7, #40	; 0x28
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	40023800 	.word	0x40023800
 80026c0:	40020000 	.word	0x40020000
 80026c4:	40020400 	.word	0x40020400
 80026c8:	40020800 	.word	0x40020800

080026cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80026d0:	b672      	cpsid	i
}
 80026d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026d4:	e7fe      	b.n	80026d4 <Error_Handler+0x8>
	...

080026d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026de:	2300      	movs	r3, #0
 80026e0:	607b      	str	r3, [r7, #4]
 80026e2:	4b10      	ldr	r3, [pc, #64]	; (8002724 <HAL_MspInit+0x4c>)
 80026e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e6:	4a0f      	ldr	r2, [pc, #60]	; (8002724 <HAL_MspInit+0x4c>)
 80026e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026ec:	6453      	str	r3, [r2, #68]	; 0x44
 80026ee:	4b0d      	ldr	r3, [pc, #52]	; (8002724 <HAL_MspInit+0x4c>)
 80026f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026f6:	607b      	str	r3, [r7, #4]
 80026f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026fa:	2300      	movs	r3, #0
 80026fc:	603b      	str	r3, [r7, #0]
 80026fe:	4b09      	ldr	r3, [pc, #36]	; (8002724 <HAL_MspInit+0x4c>)
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	4a08      	ldr	r2, [pc, #32]	; (8002724 <HAL_MspInit+0x4c>)
 8002704:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002708:	6413      	str	r3, [r2, #64]	; 0x40
 800270a:	4b06      	ldr	r3, [pc, #24]	; (8002724 <HAL_MspInit+0x4c>)
 800270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002712:	603b      	str	r3, [r7, #0]
 8002714:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002716:	2007      	movs	r0, #7
 8002718:	f000 ffe6 	bl	80036e8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800271c:	bf00      	nop
 800271e:	3708      	adds	r7, #8
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	40023800 	.word	0x40023800

08002728 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b08a      	sub	sp, #40	; 0x28
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002730:	f107 0314 	add.w	r3, r7, #20
 8002734:	2200      	movs	r2, #0
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	605a      	str	r2, [r3, #4]
 800273a:	609a      	str	r2, [r3, #8]
 800273c:	60da      	str	r2, [r3, #12]
 800273e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a17      	ldr	r2, [pc, #92]	; (80027a4 <HAL_ADC_MspInit+0x7c>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d127      	bne.n	800279a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800274a:	2300      	movs	r3, #0
 800274c:	613b      	str	r3, [r7, #16]
 800274e:	4b16      	ldr	r3, [pc, #88]	; (80027a8 <HAL_ADC_MspInit+0x80>)
 8002750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002752:	4a15      	ldr	r2, [pc, #84]	; (80027a8 <HAL_ADC_MspInit+0x80>)
 8002754:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002758:	6453      	str	r3, [r2, #68]	; 0x44
 800275a:	4b13      	ldr	r3, [pc, #76]	; (80027a8 <HAL_ADC_MspInit+0x80>)
 800275c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002762:	613b      	str	r3, [r7, #16]
 8002764:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002766:	2300      	movs	r3, #0
 8002768:	60fb      	str	r3, [r7, #12]
 800276a:	4b0f      	ldr	r3, [pc, #60]	; (80027a8 <HAL_ADC_MspInit+0x80>)
 800276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276e:	4a0e      	ldr	r2, [pc, #56]	; (80027a8 <HAL_ADC_MspInit+0x80>)
 8002770:	f043 0301 	orr.w	r3, r3, #1
 8002774:	6313      	str	r3, [r2, #48]	; 0x30
 8002776:	4b0c      	ldr	r3, [pc, #48]	; (80027a8 <HAL_ADC_MspInit+0x80>)
 8002778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002782:	2302      	movs	r3, #2
 8002784:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002786:	2303      	movs	r3, #3
 8002788:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278a:	2300      	movs	r3, #0
 800278c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800278e:	f107 0314 	add.w	r3, r7, #20
 8002792:	4619      	mov	r1, r3
 8002794:	4805      	ldr	r0, [pc, #20]	; (80027ac <HAL_ADC_MspInit+0x84>)
 8002796:	f001 f87b 	bl	8003890 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800279a:	bf00      	nop
 800279c:	3728      	adds	r7, #40	; 0x28
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	40012000 	.word	0x40012000
 80027a8:	40023800 	.word	0x40023800
 80027ac:	40020000 	.word	0x40020000

080027b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b08c      	sub	sp, #48	; 0x30
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b8:	f107 031c 	add.w	r3, r7, #28
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	605a      	str	r2, [r3, #4]
 80027c2:	609a      	str	r2, [r3, #8]
 80027c4:	60da      	str	r2, [r3, #12]
 80027c6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a47      	ldr	r2, [pc, #284]	; (80028ec <HAL_TIM_Base_MspInit+0x13c>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d13d      	bne.n	800284e <HAL_TIM_Base_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027d2:	2300      	movs	r3, #0
 80027d4:	61bb      	str	r3, [r7, #24]
 80027d6:	4b46      	ldr	r3, [pc, #280]	; (80028f0 <HAL_TIM_Base_MspInit+0x140>)
 80027d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027da:	4a45      	ldr	r2, [pc, #276]	; (80028f0 <HAL_TIM_Base_MspInit+0x140>)
 80027dc:	f043 0301 	orr.w	r3, r3, #1
 80027e0:	6453      	str	r3, [r2, #68]	; 0x44
 80027e2:	4b43      	ldr	r3, [pc, #268]	; (80028f0 <HAL_TIM_Base_MspInit+0x140>)
 80027e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	61bb      	str	r3, [r7, #24]
 80027ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ee:	2300      	movs	r3, #0
 80027f0:	617b      	str	r3, [r7, #20]
 80027f2:	4b3f      	ldr	r3, [pc, #252]	; (80028f0 <HAL_TIM_Base_MspInit+0x140>)
 80027f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f6:	4a3e      	ldr	r2, [pc, #248]	; (80028f0 <HAL_TIM_Base_MspInit+0x140>)
 80027f8:	f043 0301 	orr.w	r3, r3, #1
 80027fc:	6313      	str	r3, [r2, #48]	; 0x30
 80027fe:	4b3c      	ldr	r3, [pc, #240]	; (80028f0 <HAL_TIM_Base_MspInit+0x140>)
 8002800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	617b      	str	r3, [r7, #20]
 8002808:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800280a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800280e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002810:	2302      	movs	r3, #2
 8002812:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002814:	2300      	movs	r3, #0
 8002816:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002818:	2300      	movs	r3, #0
 800281a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800281c:	2301      	movs	r3, #1
 800281e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002820:	f107 031c 	add.w	r3, r7, #28
 8002824:	4619      	mov	r1, r3
 8002826:	4833      	ldr	r0, [pc, #204]	; (80028f4 <HAL_TIM_Base_MspInit+0x144>)
 8002828:	f001 f832 	bl	8003890 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800282c:	2200      	movs	r2, #0
 800282e:	2100      	movs	r1, #0
 8002830:	2018      	movs	r0, #24
 8002832:	f000 ff64 	bl	80036fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002836:	2018      	movs	r0, #24
 8002838:	f000 ff7d 	bl	8003736 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800283c:	2200      	movs	r2, #0
 800283e:	2100      	movs	r1, #0
 8002840:	201b      	movs	r0, #27
 8002842:	f000 ff5c 	bl	80036fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002846:	201b      	movs	r0, #27
 8002848:	f000 ff75 	bl	8003736 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 800284c:	e04a      	b.n	80028e4 <HAL_TIM_Base_MspInit+0x134>
  else if(htim_base->Instance==TIM4)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a29      	ldr	r2, [pc, #164]	; (80028f8 <HAL_TIM_Base_MspInit+0x148>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d116      	bne.n	8002886 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002858:	2300      	movs	r3, #0
 800285a:	613b      	str	r3, [r7, #16]
 800285c:	4b24      	ldr	r3, [pc, #144]	; (80028f0 <HAL_TIM_Base_MspInit+0x140>)
 800285e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002860:	4a23      	ldr	r2, [pc, #140]	; (80028f0 <HAL_TIM_Base_MspInit+0x140>)
 8002862:	f043 0304 	orr.w	r3, r3, #4
 8002866:	6413      	str	r3, [r2, #64]	; 0x40
 8002868:	4b21      	ldr	r3, [pc, #132]	; (80028f0 <HAL_TIM_Base_MspInit+0x140>)
 800286a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286c:	f003 0304 	and.w	r3, r3, #4
 8002870:	613b      	str	r3, [r7, #16]
 8002872:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002874:	2200      	movs	r2, #0
 8002876:	2100      	movs	r1, #0
 8002878:	201e      	movs	r0, #30
 800287a:	f000 ff40 	bl	80036fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800287e:	201e      	movs	r0, #30
 8002880:	f000 ff59 	bl	8003736 <HAL_NVIC_EnableIRQ>
}
 8002884:	e02e      	b.n	80028e4 <HAL_TIM_Base_MspInit+0x134>
  else if(htim_base->Instance==TIM5)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a1c      	ldr	r2, [pc, #112]	; (80028fc <HAL_TIM_Base_MspInit+0x14c>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d10e      	bne.n	80028ae <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002890:	2300      	movs	r3, #0
 8002892:	60fb      	str	r3, [r7, #12]
 8002894:	4b16      	ldr	r3, [pc, #88]	; (80028f0 <HAL_TIM_Base_MspInit+0x140>)
 8002896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002898:	4a15      	ldr	r2, [pc, #84]	; (80028f0 <HAL_TIM_Base_MspInit+0x140>)
 800289a:	f043 0308 	orr.w	r3, r3, #8
 800289e:	6413      	str	r3, [r2, #64]	; 0x40
 80028a0:	4b13      	ldr	r3, [pc, #76]	; (80028f0 <HAL_TIM_Base_MspInit+0x140>)
 80028a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a4:	f003 0308 	and.w	r3, r3, #8
 80028a8:	60fb      	str	r3, [r7, #12]
 80028aa:	68fb      	ldr	r3, [r7, #12]
}
 80028ac:	e01a      	b.n	80028e4 <HAL_TIM_Base_MspInit+0x134>
  else if(htim_base->Instance==TIM9)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a13      	ldr	r2, [pc, #76]	; (8002900 <HAL_TIM_Base_MspInit+0x150>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d115      	bne.n	80028e4 <HAL_TIM_Base_MspInit+0x134>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80028b8:	2300      	movs	r3, #0
 80028ba:	60bb      	str	r3, [r7, #8]
 80028bc:	4b0c      	ldr	r3, [pc, #48]	; (80028f0 <HAL_TIM_Base_MspInit+0x140>)
 80028be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c0:	4a0b      	ldr	r2, [pc, #44]	; (80028f0 <HAL_TIM_Base_MspInit+0x140>)
 80028c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028c6:	6453      	str	r3, [r2, #68]	; 0x44
 80028c8:	4b09      	ldr	r3, [pc, #36]	; (80028f0 <HAL_TIM_Base_MspInit+0x140>)
 80028ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028d0:	60bb      	str	r3, [r7, #8]
 80028d2:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80028d4:	2200      	movs	r2, #0
 80028d6:	2100      	movs	r1, #0
 80028d8:	2018      	movs	r0, #24
 80028da:	f000 ff10 	bl	80036fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80028de:	2018      	movs	r0, #24
 80028e0:	f000 ff29 	bl	8003736 <HAL_NVIC_EnableIRQ>
}
 80028e4:	bf00      	nop
 80028e6:	3730      	adds	r7, #48	; 0x30
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	40010000 	.word	0x40010000
 80028f0:	40023800 	.word	0x40023800
 80028f4:	40020000 	.word	0x40020000
 80028f8:	40000800 	.word	0x40000800
 80028fc:	40000c00 	.word	0x40000c00
 8002900:	40014000 	.word	0x40014000

08002904 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002904:	b480      	push	{r7}
 8002906:	b085      	sub	sp, #20
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a0b      	ldr	r2, [pc, #44]	; (8002940 <HAL_TIM_PWM_MspInit+0x3c>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d10d      	bne.n	8002932 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002916:	2300      	movs	r3, #0
 8002918:	60fb      	str	r3, [r7, #12]
 800291a:	4b0a      	ldr	r3, [pc, #40]	; (8002944 <HAL_TIM_PWM_MspInit+0x40>)
 800291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291e:	4a09      	ldr	r2, [pc, #36]	; (8002944 <HAL_TIM_PWM_MspInit+0x40>)
 8002920:	f043 0302 	orr.w	r3, r3, #2
 8002924:	6413      	str	r3, [r2, #64]	; 0x40
 8002926:	4b07      	ldr	r3, [pc, #28]	; (8002944 <HAL_TIM_PWM_MspInit+0x40>)
 8002928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	60fb      	str	r3, [r7, #12]
 8002930:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002932:	bf00      	nop
 8002934:	3714      	adds	r7, #20
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	40000400 	.word	0x40000400
 8002944:	40023800 	.word	0x40023800

08002948 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b08a      	sub	sp, #40	; 0x28
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002950:	f107 0314 	add.w	r3, r7, #20
 8002954:	2200      	movs	r2, #0
 8002956:	601a      	str	r2, [r3, #0]
 8002958:	605a      	str	r2, [r3, #4]
 800295a:	609a      	str	r2, [r3, #8]
 800295c:	60da      	str	r2, [r3, #12]
 800295e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a24      	ldr	r2, [pc, #144]	; (80029f8 <HAL_TIM_MspPostInit+0xb0>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d11e      	bne.n	80029a8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800296a:	2300      	movs	r3, #0
 800296c:	613b      	str	r3, [r7, #16]
 800296e:	4b23      	ldr	r3, [pc, #140]	; (80029fc <HAL_TIM_MspPostInit+0xb4>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002972:	4a22      	ldr	r2, [pc, #136]	; (80029fc <HAL_TIM_MspPostInit+0xb4>)
 8002974:	f043 0301 	orr.w	r3, r3, #1
 8002978:	6313      	str	r3, [r2, #48]	; 0x30
 800297a:	4b20      	ldr	r3, [pc, #128]	; (80029fc <HAL_TIM_MspPostInit+0xb4>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	613b      	str	r3, [r7, #16]
 8002984:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = TIM3_DC_MOTOR_Pin|TIM3_DC_MOTOR_REV_Pin;
 8002986:	23c0      	movs	r3, #192	; 0xc0
 8002988:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800298a:	2302      	movs	r3, #2
 800298c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298e:	2300      	movs	r3, #0
 8002990:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002992:	2300      	movs	r3, #0
 8002994:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002996:	2302      	movs	r3, #2
 8002998:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800299a:	f107 0314 	add.w	r3, r7, #20
 800299e:	4619      	mov	r1, r3
 80029a0:	4817      	ldr	r0, [pc, #92]	; (8002a00 <HAL_TIM_MspPostInit+0xb8>)
 80029a2:	f000 ff75 	bl	8003890 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80029a6:	e022      	b.n	80029ee <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM5)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a15      	ldr	r2, [pc, #84]	; (8002a04 <HAL_TIM_MspPostInit+0xbc>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d11d      	bne.n	80029ee <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029b2:	2300      	movs	r3, #0
 80029b4:	60fb      	str	r3, [r7, #12]
 80029b6:	4b11      	ldr	r3, [pc, #68]	; (80029fc <HAL_TIM_MspPostInit+0xb4>)
 80029b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ba:	4a10      	ldr	r2, [pc, #64]	; (80029fc <HAL_TIM_MspPostInit+0xb4>)
 80029bc:	f043 0301 	orr.w	r3, r3, #1
 80029c0:	6313      	str	r3, [r2, #48]	; 0x30
 80029c2:	4b0e      	ldr	r3, [pc, #56]	; (80029fc <HAL_TIM_MspPostInit+0xb4>)
 80029c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	60fb      	str	r3, [r7, #12]
 80029cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERV_PWM_OUT_Pin;
 80029ce:	2301      	movs	r3, #1
 80029d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d2:	2302      	movs	r3, #2
 80029d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d6:	2300      	movs	r3, #0
 80029d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029da:	2300      	movs	r3, #0
 80029dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80029de:	2302      	movs	r3, #2
 80029e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERV_PWM_OUT_GPIO_Port, &GPIO_InitStruct);
 80029e2:	f107 0314 	add.w	r3, r7, #20
 80029e6:	4619      	mov	r1, r3
 80029e8:	4805      	ldr	r0, [pc, #20]	; (8002a00 <HAL_TIM_MspPostInit+0xb8>)
 80029ea:	f000 ff51 	bl	8003890 <HAL_GPIO_Init>
}
 80029ee:	bf00      	nop
 80029f0:	3728      	adds	r7, #40	; 0x28
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	40000400 	.word	0x40000400
 80029fc:	40023800 	.word	0x40023800
 8002a00:	40020000 	.word	0x40020000
 8002a04:	40000c00 	.word	0x40000c00

08002a08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b08a      	sub	sp, #40	; 0x28
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a10:	f107 0314 	add.w	r3, r7, #20
 8002a14:	2200      	movs	r2, #0
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	605a      	str	r2, [r3, #4]
 8002a1a:	609a      	str	r2, [r3, #8]
 8002a1c:	60da      	str	r2, [r3, #12]
 8002a1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a1d      	ldr	r2, [pc, #116]	; (8002a9c <HAL_UART_MspInit+0x94>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d133      	bne.n	8002a92 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	613b      	str	r3, [r7, #16]
 8002a2e:	4b1c      	ldr	r3, [pc, #112]	; (8002aa0 <HAL_UART_MspInit+0x98>)
 8002a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a32:	4a1b      	ldr	r2, [pc, #108]	; (8002aa0 <HAL_UART_MspInit+0x98>)
 8002a34:	f043 0320 	orr.w	r3, r3, #32
 8002a38:	6453      	str	r3, [r2, #68]	; 0x44
 8002a3a:	4b19      	ldr	r3, [pc, #100]	; (8002aa0 <HAL_UART_MspInit+0x98>)
 8002a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3e:	f003 0320 	and.w	r3, r3, #32
 8002a42:	613b      	str	r3, [r7, #16]
 8002a44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a46:	2300      	movs	r3, #0
 8002a48:	60fb      	str	r3, [r7, #12]
 8002a4a:	4b15      	ldr	r3, [pc, #84]	; (8002aa0 <HAL_UART_MspInit+0x98>)
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4e:	4a14      	ldr	r2, [pc, #80]	; (8002aa0 <HAL_UART_MspInit+0x98>)
 8002a50:	f043 0304 	orr.w	r3, r3, #4
 8002a54:	6313      	str	r3, [r2, #48]	; 0x30
 8002a56:	4b12      	ldr	r3, [pc, #72]	; (8002aa0 <HAL_UART_MspInit+0x98>)
 8002a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5a:	f003 0304 	and.w	r3, r3, #4
 8002a5e:	60fb      	str	r3, [r7, #12]
 8002a60:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a62:	23c0      	movs	r3, #192	; 0xc0
 8002a64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a66:	2302      	movs	r3, #2
 8002a68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002a72:	2308      	movs	r3, #8
 8002a74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a76:	f107 0314 	add.w	r3, r7, #20
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	4809      	ldr	r0, [pc, #36]	; (8002aa4 <HAL_UART_MspInit+0x9c>)
 8002a7e:	f000 ff07 	bl	8003890 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002a82:	2200      	movs	r2, #0
 8002a84:	2100      	movs	r1, #0
 8002a86:	2047      	movs	r0, #71	; 0x47
 8002a88:	f000 fe39 	bl	80036fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002a8c:	2047      	movs	r0, #71	; 0x47
 8002a8e:	f000 fe52 	bl	8003736 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002a92:	bf00      	nop
 8002a94:	3728      	adds	r7, #40	; 0x28
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	40011400 	.word	0x40011400
 8002aa0:	40023800 	.word	0x40023800
 8002aa4:	40020800 	.word	0x40020800

08002aa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002aac:	e7fe      	b.n	8002aac <NMI_Handler+0x4>

08002aae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ab2:	e7fe      	b.n	8002ab2 <HardFault_Handler+0x4>

08002ab4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ab8:	e7fe      	b.n	8002ab8 <MemManage_Handler+0x4>

08002aba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002aba:	b480      	push	{r7}
 8002abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002abe:	e7fe      	b.n	8002abe <BusFault_Handler+0x4>

08002ac0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ac4:	e7fe      	b.n	8002ac4 <UsageFault_Handler+0x4>

08002ac6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002aca:	bf00      	nop
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ad8:	bf00      	nop
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr

08002ae2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ae6:	bf00      	nop
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002af4:	f000 f902 	bl	8002cfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002af8:	bf00      	nop
 8002afa:	bd80      	pop	{r7, pc}

08002afc <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RPM_TICK_Pin);
 8002b00:	2004      	movs	r0, #4
 8002b02:	f001 f87d 	bl	8003c00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002b06:	bf00      	nop
 8002b08:	bd80      	pop	{r7, pc}
	...

08002b0c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002b10:	4803      	ldr	r0, [pc, #12]	; (8002b20 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8002b12:	f002 f84b 	bl	8004bac <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8002b16:	4803      	ldr	r0, [pc, #12]	; (8002b24 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8002b18:	f002 f848 	bl	8004bac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002b1c:	bf00      	nop
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	200000cc 	.word	0x200000cc
 8002b24:	200001ec 	.word	0x200001ec

08002b28 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002b2c:	4802      	ldr	r0, [pc, #8]	; (8002b38 <TIM1_CC_IRQHandler+0x10>)
 8002b2e:	f002 f83d 	bl	8004bac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002b32:	bf00      	nop
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	200000cc 	.word	0x200000cc

08002b3c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002b40:	4802      	ldr	r0, [pc, #8]	; (8002b4c <TIM4_IRQHandler+0x10>)
 8002b42:	f002 f833 	bl	8004bac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002b46:	bf00      	nop
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	2000015c 	.word	0x2000015c

08002b50 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002b54:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002b58:	f001 f852 	bl	8003c00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002b5c:	bf00      	nop
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002b64:	4802      	ldr	r0, [pc, #8]	; (8002b70 <USART6_IRQHandler+0x10>)
 8002b66:	f003 f92d 	bl	8005dc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002b6a:	bf00      	nop
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	20000234 	.word	0x20000234

08002b74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b086      	sub	sp, #24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b7c:	4a14      	ldr	r2, [pc, #80]	; (8002bd0 <_sbrk+0x5c>)
 8002b7e:	4b15      	ldr	r3, [pc, #84]	; (8002bd4 <_sbrk+0x60>)
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b88:	4b13      	ldr	r3, [pc, #76]	; (8002bd8 <_sbrk+0x64>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d102      	bne.n	8002b96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b90:	4b11      	ldr	r3, [pc, #68]	; (8002bd8 <_sbrk+0x64>)
 8002b92:	4a12      	ldr	r2, [pc, #72]	; (8002bdc <_sbrk+0x68>)
 8002b94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b96:	4b10      	ldr	r3, [pc, #64]	; (8002bd8 <_sbrk+0x64>)
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	693a      	ldr	r2, [r7, #16]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d207      	bcs.n	8002bb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ba4:	f004 f900 	bl	8006da8 <__errno>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	220c      	movs	r2, #12
 8002bac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bae:	f04f 33ff 	mov.w	r3, #4294967295
 8002bb2:	e009      	b.n	8002bc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bb4:	4b08      	ldr	r3, [pc, #32]	; (8002bd8 <_sbrk+0x64>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bba:	4b07      	ldr	r3, [pc, #28]	; (8002bd8 <_sbrk+0x64>)
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	4a05      	ldr	r2, [pc, #20]	; (8002bd8 <_sbrk+0x64>)
 8002bc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3718      	adds	r7, #24
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	20018000 	.word	0x20018000
 8002bd4:	00000400 	.word	0x00000400
 8002bd8:	200005f8 	.word	0x200005f8
 8002bdc:	20000748 	.word	0x20000748

08002be0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002be4:	4b06      	ldr	r3, [pc, #24]	; (8002c00 <SystemInit+0x20>)
 8002be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bea:	4a05      	ldr	r2, [pc, #20]	; (8002c00 <SystemInit+0x20>)
 8002bec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bf4:	bf00      	nop
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	e000ed00 	.word	0xe000ed00

08002c04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002c04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c08:	480d      	ldr	r0, [pc, #52]	; (8002c40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002c0a:	490e      	ldr	r1, [pc, #56]	; (8002c44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002c0c:	4a0e      	ldr	r2, [pc, #56]	; (8002c48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c10:	e002      	b.n	8002c18 <LoopCopyDataInit>

08002c12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c16:	3304      	adds	r3, #4

08002c18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c1c:	d3f9      	bcc.n	8002c12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c1e:	4a0b      	ldr	r2, [pc, #44]	; (8002c4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002c20:	4c0b      	ldr	r4, [pc, #44]	; (8002c50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002c22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c24:	e001      	b.n	8002c2a <LoopFillZerobss>

08002c26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c28:	3204      	adds	r2, #4

08002c2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c2c:	d3fb      	bcc.n	8002c26 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002c2e:	f7ff ffd7 	bl	8002be0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c32:	f004 f8bf 	bl	8006db4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c36:	f7ff f833 	bl	8001ca0 <main>
  bx  lr    
 8002c3a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002c3c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002c40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c44:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002c48:	080084b0 	.word	0x080084b0
  ldr r2, =_sbss
 8002c4c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002c50:	20000748 	.word	0x20000748

08002c54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c54:	e7fe      	b.n	8002c54 <ADC_IRQHandler>
	...

08002c58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c5c:	4b0e      	ldr	r3, [pc, #56]	; (8002c98 <HAL_Init+0x40>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a0d      	ldr	r2, [pc, #52]	; (8002c98 <HAL_Init+0x40>)
 8002c62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c68:	4b0b      	ldr	r3, [pc, #44]	; (8002c98 <HAL_Init+0x40>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a0a      	ldr	r2, [pc, #40]	; (8002c98 <HAL_Init+0x40>)
 8002c6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c74:	4b08      	ldr	r3, [pc, #32]	; (8002c98 <HAL_Init+0x40>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a07      	ldr	r2, [pc, #28]	; (8002c98 <HAL_Init+0x40>)
 8002c7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c80:	2003      	movs	r0, #3
 8002c82:	f000 fd31 	bl	80036e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c86:	2000      	movs	r0, #0
 8002c88:	f000 f808 	bl	8002c9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c8c:	f7ff fd24 	bl	80026d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	40023c00 	.word	0x40023c00

08002c9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ca4:	4b12      	ldr	r3, [pc, #72]	; (8002cf0 <HAL_InitTick+0x54>)
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	4b12      	ldr	r3, [pc, #72]	; (8002cf4 <HAL_InitTick+0x58>)
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	4619      	mov	r1, r3
 8002cae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f000 fd49 	bl	8003752 <HAL_SYSTICK_Config>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e00e      	b.n	8002ce8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2b0f      	cmp	r3, #15
 8002cce:	d80a      	bhi.n	8002ce6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8002cd8:	f000 fd11 	bl	80036fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002cdc:	4a06      	ldr	r2, [pc, #24]	; (8002cf8 <HAL_InitTick+0x5c>)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	e000      	b.n	8002ce8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3708      	adds	r7, #8
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	2000000c 	.word	0x2000000c
 8002cf4:	20000014 	.word	0x20000014
 8002cf8:	20000010 	.word	0x20000010

08002cfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d00:	4b06      	ldr	r3, [pc, #24]	; (8002d1c <HAL_IncTick+0x20>)
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	461a      	mov	r2, r3
 8002d06:	4b06      	ldr	r3, [pc, #24]	; (8002d20 <HAL_IncTick+0x24>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4413      	add	r3, r2
 8002d0c:	4a04      	ldr	r2, [pc, #16]	; (8002d20 <HAL_IncTick+0x24>)
 8002d0e:	6013      	str	r3, [r2, #0]
}
 8002d10:	bf00      	nop
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	20000014 	.word	0x20000014
 8002d20:	200005fc 	.word	0x200005fc

08002d24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  return uwTick;
 8002d28:	4b03      	ldr	r3, [pc, #12]	; (8002d38 <HAL_GetTick+0x14>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	200005fc 	.word	0x200005fc

08002d3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d44:	f7ff ffee 	bl	8002d24 <HAL_GetTick>
 8002d48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d54:	d005      	beq.n	8002d62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d56:	4b0a      	ldr	r3, [pc, #40]	; (8002d80 <HAL_Delay+0x44>)
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	4413      	add	r3, r2
 8002d60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d62:	bf00      	nop
 8002d64:	f7ff ffde 	bl	8002d24 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d8f7      	bhi.n	8002d64 <HAL_Delay+0x28>
  {
  }
}
 8002d74:	bf00      	nop
 8002d76:	bf00      	nop
 8002d78:	3710      	adds	r7, #16
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	20000014 	.word	0x20000014

08002d84 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e033      	b.n	8002e02 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d109      	bne.n	8002db6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f7ff fcc0 	bl	8002728 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dba:	f003 0310 	and.w	r3, r3, #16
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d118      	bne.n	8002df4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002dca:	f023 0302 	bic.w	r3, r3, #2
 8002dce:	f043 0202 	orr.w	r2, r3, #2
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 faba 	bl	8003350 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de6:	f023 0303 	bic.w	r3, r3, #3
 8002dea:	f043 0201 	orr.w	r2, r3, #1
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	641a      	str	r2, [r3, #64]	; 0x40
 8002df2:	e001      	b.n	8002df8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3710      	adds	r7, #16
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
	...

08002e0c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002e14:	2300      	movs	r3, #0
 8002e16:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d101      	bne.n	8002e26 <HAL_ADC_Start+0x1a>
 8002e22:	2302      	movs	r3, #2
 8002e24:	e097      	b.n	8002f56 <HAL_ADC_Start+0x14a>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d018      	beq.n	8002e6e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	689a      	ldr	r2, [r3, #8]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f042 0201 	orr.w	r2, r2, #1
 8002e4a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002e4c:	4b45      	ldr	r3, [pc, #276]	; (8002f64 <HAL_ADC_Start+0x158>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a45      	ldr	r2, [pc, #276]	; (8002f68 <HAL_ADC_Start+0x15c>)
 8002e52:	fba2 2303 	umull	r2, r3, r2, r3
 8002e56:	0c9a      	lsrs	r2, r3, #18
 8002e58:	4613      	mov	r3, r2
 8002e5a:	005b      	lsls	r3, r3, #1
 8002e5c:	4413      	add	r3, r2
 8002e5e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002e60:	e002      	b.n	8002e68 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	3b01      	subs	r3, #1
 8002e66:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1f9      	bne.n	8002e62 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d15f      	bne.n	8002f3c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e80:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002e84:	f023 0301 	bic.w	r3, r3, #1
 8002e88:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d007      	beq.n	8002eae <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ea6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002eb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eba:	d106      	bne.n	8002eca <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec0:	f023 0206 	bic.w	r2, r3, #6
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	645a      	str	r2, [r3, #68]	; 0x44
 8002ec8:	e002      	b.n	8002ed0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ed8:	4b24      	ldr	r3, [pc, #144]	; (8002f6c <HAL_ADC_Start+0x160>)
 8002eda:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002ee4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f003 031f 	and.w	r3, r3, #31
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d10f      	bne.n	8002f12 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d129      	bne.n	8002f54 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	689a      	ldr	r2, [r3, #8]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002f0e:	609a      	str	r2, [r3, #8]
 8002f10:	e020      	b.n	8002f54 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a16      	ldr	r2, [pc, #88]	; (8002f70 <HAL_ADC_Start+0x164>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d11b      	bne.n	8002f54 <HAL_ADC_Start+0x148>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d114      	bne.n	8002f54 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	689a      	ldr	r2, [r3, #8]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002f38:	609a      	str	r2, [r3, #8]
 8002f3a:	e00b      	b.n	8002f54 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f40:	f043 0210 	orr.w	r2, r3, #16
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f4c:	f043 0201 	orr.w	r2, r3, #1
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3714      	adds	r7, #20
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	2000000c 	.word	0x2000000c
 8002f68:	431bde83 	.word	0x431bde83
 8002f6c:	40012300 	.word	0x40012300
 8002f70:	40012000 	.word	0x40012000

08002f74 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d101      	bne.n	8002f8a <HAL_ADC_Stop+0x16>
 8002f86:	2302      	movs	r3, #2
 8002f88:	e021      	b.n	8002fce <HAL_ADC_Stop+0x5a>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	689a      	ldr	r2, [r3, #8]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f022 0201 	bic.w	r2, r2, #1
 8002fa0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f003 0301 	and.w	r3, r3, #1
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d109      	bne.n	8002fc4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002fb8:	f023 0301 	bic.w	r3, r3, #1
 8002fbc:	f043 0201 	orr.w	r2, r3, #1
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr

08002fda <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b084      	sub	sp, #16
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
 8002fe2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ff2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ff6:	d113      	bne.n	8003020 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003002:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003006:	d10b      	bne.n	8003020 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300c:	f043 0220 	orr.w	r2, r3, #32
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e063      	b.n	80030e8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003020:	f7ff fe80 	bl	8002d24 <HAL_GetTick>
 8003024:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003026:	e021      	b.n	800306c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800302e:	d01d      	beq.n	800306c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d007      	beq.n	8003046 <HAL_ADC_PollForConversion+0x6c>
 8003036:	f7ff fe75 	bl	8002d24 <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	683a      	ldr	r2, [r7, #0]
 8003042:	429a      	cmp	r2, r3
 8003044:	d212      	bcs.n	800306c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0302 	and.w	r3, r3, #2
 8003050:	2b02      	cmp	r3, #2
 8003052:	d00b      	beq.n	800306c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003058:	f043 0204 	orr.w	r2, r3, #4
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e03d      	b.n	80030e8 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b02      	cmp	r3, #2
 8003078:	d1d6      	bne.n	8003028 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f06f 0212 	mvn.w	r2, #18
 8003082:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003088:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d123      	bne.n	80030e6 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d11f      	bne.n	80030e6 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ac:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d006      	beq.n	80030c2 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d111      	bne.n	80030e6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d105      	bne.n	80030e6 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030de:	f043 0201 	orr.w	r2, r3, #1
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3710      	adds	r7, #16
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80030fe:	4618      	mov	r0, r3
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
	...

0800310c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800310c:	b480      	push	{r7}
 800310e:	b085      	sub	sp, #20
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003116:	2300      	movs	r3, #0
 8003118:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003120:	2b01      	cmp	r3, #1
 8003122:	d101      	bne.n	8003128 <HAL_ADC_ConfigChannel+0x1c>
 8003124:	2302      	movs	r3, #2
 8003126:	e105      	b.n	8003334 <HAL_ADC_ConfigChannel+0x228>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2b09      	cmp	r3, #9
 8003136:	d925      	bls.n	8003184 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	68d9      	ldr	r1, [r3, #12]
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	b29b      	uxth	r3, r3
 8003144:	461a      	mov	r2, r3
 8003146:	4613      	mov	r3, r2
 8003148:	005b      	lsls	r3, r3, #1
 800314a:	4413      	add	r3, r2
 800314c:	3b1e      	subs	r3, #30
 800314e:	2207      	movs	r2, #7
 8003150:	fa02 f303 	lsl.w	r3, r2, r3
 8003154:	43da      	mvns	r2, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	400a      	ands	r2, r1
 800315c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68d9      	ldr	r1, [r3, #12]
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	689a      	ldr	r2, [r3, #8]
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	b29b      	uxth	r3, r3
 800316e:	4618      	mov	r0, r3
 8003170:	4603      	mov	r3, r0
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	4403      	add	r3, r0
 8003176:	3b1e      	subs	r3, #30
 8003178:	409a      	lsls	r2, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	430a      	orrs	r2, r1
 8003180:	60da      	str	r2, [r3, #12]
 8003182:	e022      	b.n	80031ca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	6919      	ldr	r1, [r3, #16]
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	b29b      	uxth	r3, r3
 8003190:	461a      	mov	r2, r3
 8003192:	4613      	mov	r3, r2
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	4413      	add	r3, r2
 8003198:	2207      	movs	r2, #7
 800319a:	fa02 f303 	lsl.w	r3, r2, r3
 800319e:	43da      	mvns	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	400a      	ands	r2, r1
 80031a6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	6919      	ldr	r1, [r3, #16]
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	689a      	ldr	r2, [r3, #8]
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	4618      	mov	r0, r3
 80031ba:	4603      	mov	r3, r0
 80031bc:	005b      	lsls	r3, r3, #1
 80031be:	4403      	add	r3, r0
 80031c0:	409a      	lsls	r2, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	430a      	orrs	r2, r1
 80031c8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	2b06      	cmp	r3, #6
 80031d0:	d824      	bhi.n	800321c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	685a      	ldr	r2, [r3, #4]
 80031dc:	4613      	mov	r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	4413      	add	r3, r2
 80031e2:	3b05      	subs	r3, #5
 80031e4:	221f      	movs	r2, #31
 80031e6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ea:	43da      	mvns	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	400a      	ands	r2, r1
 80031f2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	b29b      	uxth	r3, r3
 8003200:	4618      	mov	r0, r3
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	685a      	ldr	r2, [r3, #4]
 8003206:	4613      	mov	r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	4413      	add	r3, r2
 800320c:	3b05      	subs	r3, #5
 800320e:	fa00 f203 	lsl.w	r2, r0, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	430a      	orrs	r2, r1
 8003218:	635a      	str	r2, [r3, #52]	; 0x34
 800321a:	e04c      	b.n	80032b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	2b0c      	cmp	r3, #12
 8003222:	d824      	bhi.n	800326e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685a      	ldr	r2, [r3, #4]
 800322e:	4613      	mov	r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	4413      	add	r3, r2
 8003234:	3b23      	subs	r3, #35	; 0x23
 8003236:	221f      	movs	r2, #31
 8003238:	fa02 f303 	lsl.w	r3, r2, r3
 800323c:	43da      	mvns	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	400a      	ands	r2, r1
 8003244:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	b29b      	uxth	r3, r3
 8003252:	4618      	mov	r0, r3
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685a      	ldr	r2, [r3, #4]
 8003258:	4613      	mov	r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	4413      	add	r3, r2
 800325e:	3b23      	subs	r3, #35	; 0x23
 8003260:	fa00 f203 	lsl.w	r2, r0, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	430a      	orrs	r2, r1
 800326a:	631a      	str	r2, [r3, #48]	; 0x30
 800326c:	e023      	b.n	80032b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685a      	ldr	r2, [r3, #4]
 8003278:	4613      	mov	r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	4413      	add	r3, r2
 800327e:	3b41      	subs	r3, #65	; 0x41
 8003280:	221f      	movs	r2, #31
 8003282:	fa02 f303 	lsl.w	r3, r2, r3
 8003286:	43da      	mvns	r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	400a      	ands	r2, r1
 800328e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	b29b      	uxth	r3, r3
 800329c:	4618      	mov	r0, r3
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	685a      	ldr	r2, [r3, #4]
 80032a2:	4613      	mov	r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	4413      	add	r3, r2
 80032a8:	3b41      	subs	r3, #65	; 0x41
 80032aa:	fa00 f203 	lsl.w	r2, r0, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	430a      	orrs	r2, r1
 80032b4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032b6:	4b22      	ldr	r3, [pc, #136]	; (8003340 <HAL_ADC_ConfigChannel+0x234>)
 80032b8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a21      	ldr	r2, [pc, #132]	; (8003344 <HAL_ADC_ConfigChannel+0x238>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d109      	bne.n	80032d8 <HAL_ADC_ConfigChannel+0x1cc>
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2b12      	cmp	r3, #18
 80032ca:	d105      	bne.n	80032d8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a19      	ldr	r2, [pc, #100]	; (8003344 <HAL_ADC_ConfigChannel+0x238>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d123      	bne.n	800332a <HAL_ADC_ConfigChannel+0x21e>
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2b10      	cmp	r3, #16
 80032e8:	d003      	beq.n	80032f2 <HAL_ADC_ConfigChannel+0x1e6>
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2b11      	cmp	r3, #17
 80032f0:	d11b      	bne.n	800332a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2b10      	cmp	r3, #16
 8003304:	d111      	bne.n	800332a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003306:	4b10      	ldr	r3, [pc, #64]	; (8003348 <HAL_ADC_ConfigChannel+0x23c>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a10      	ldr	r2, [pc, #64]	; (800334c <HAL_ADC_ConfigChannel+0x240>)
 800330c:	fba2 2303 	umull	r2, r3, r2, r3
 8003310:	0c9a      	lsrs	r2, r3, #18
 8003312:	4613      	mov	r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	4413      	add	r3, r2
 8003318:	005b      	lsls	r3, r3, #1
 800331a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800331c:	e002      	b.n	8003324 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	3b01      	subs	r3, #1
 8003322:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d1f9      	bne.n	800331e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003332:	2300      	movs	r3, #0
}
 8003334:	4618      	mov	r0, r3
 8003336:	3714      	adds	r7, #20
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr
 8003340:	40012300 	.word	0x40012300
 8003344:	40012000 	.word	0x40012000
 8003348:	2000000c 	.word	0x2000000c
 800334c:	431bde83 	.word	0x431bde83

08003350 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003350:	b480      	push	{r7}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003358:	4b79      	ldr	r3, [pc, #484]	; (8003540 <ADC_Init+0x1f0>)
 800335a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	685a      	ldr	r2, [r3, #4]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	431a      	orrs	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	685a      	ldr	r2, [r3, #4]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003384:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	6859      	ldr	r1, [r3, #4]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	691b      	ldr	r3, [r3, #16]
 8003390:	021a      	lsls	r2, r3, #8
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	430a      	orrs	r2, r1
 8003398:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	685a      	ldr	r2, [r3, #4]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80033a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	6859      	ldr	r1, [r3, #4]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	689a      	ldr	r2, [r3, #8]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	430a      	orrs	r2, r1
 80033ba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	689a      	ldr	r2, [r3, #8]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6899      	ldr	r1, [r3, #8]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	68da      	ldr	r2, [r3, #12]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	430a      	orrs	r2, r1
 80033dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e2:	4a58      	ldr	r2, [pc, #352]	; (8003544 <ADC_Init+0x1f4>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d022      	beq.n	800342e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	689a      	ldr	r2, [r3, #8]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80033f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6899      	ldr	r1, [r3, #8]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	430a      	orrs	r2, r1
 8003408:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	689a      	ldr	r2, [r3, #8]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003418:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	6899      	ldr	r1, [r3, #8]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	430a      	orrs	r2, r1
 800342a:	609a      	str	r2, [r3, #8]
 800342c:	e00f      	b.n	800344e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	689a      	ldr	r2, [r3, #8]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800343c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	689a      	ldr	r2, [r3, #8]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800344c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	689a      	ldr	r2, [r3, #8]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f022 0202 	bic.w	r2, r2, #2
 800345c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	6899      	ldr	r1, [r3, #8]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	7e1b      	ldrb	r3, [r3, #24]
 8003468:	005a      	lsls	r2, r3, #1
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	430a      	orrs	r2, r1
 8003470:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d01b      	beq.n	80034b4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	685a      	ldr	r2, [r3, #4]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800348a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	685a      	ldr	r2, [r3, #4]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800349a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	6859      	ldr	r1, [r3, #4]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a6:	3b01      	subs	r3, #1
 80034a8:	035a      	lsls	r2, r3, #13
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	430a      	orrs	r2, r1
 80034b0:	605a      	str	r2, [r3, #4]
 80034b2:	e007      	b.n	80034c4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	685a      	ldr	r2, [r3, #4]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034c2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80034d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	69db      	ldr	r3, [r3, #28]
 80034de:	3b01      	subs	r3, #1
 80034e0:	051a      	lsls	r2, r3, #20
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	430a      	orrs	r2, r1
 80034e8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	689a      	ldr	r2, [r3, #8]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80034f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	6899      	ldr	r1, [r3, #8]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003506:	025a      	lsls	r2, r3, #9
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	430a      	orrs	r2, r1
 800350e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	689a      	ldr	r2, [r3, #8]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800351e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	6899      	ldr	r1, [r3, #8]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	029a      	lsls	r2, r3, #10
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	430a      	orrs	r2, r1
 8003532:	609a      	str	r2, [r3, #8]
}
 8003534:	bf00      	nop
 8003536:	3714      	adds	r7, #20
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr
 8003540:	40012300 	.word	0x40012300
 8003544:	0f000001 	.word	0x0f000001

08003548 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003548:	b480      	push	{r7}
 800354a:	b085      	sub	sp, #20
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f003 0307 	and.w	r3, r3, #7
 8003556:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003558:	4b0c      	ldr	r3, [pc, #48]	; (800358c <__NVIC_SetPriorityGrouping+0x44>)
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800355e:	68ba      	ldr	r2, [r7, #8]
 8003560:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003564:	4013      	ands	r3, r2
 8003566:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003570:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003574:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003578:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800357a:	4a04      	ldr	r2, [pc, #16]	; (800358c <__NVIC_SetPriorityGrouping+0x44>)
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	60d3      	str	r3, [r2, #12]
}
 8003580:	bf00      	nop
 8003582:	3714      	adds	r7, #20
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr
 800358c:	e000ed00 	.word	0xe000ed00

08003590 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003590:	b480      	push	{r7}
 8003592:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003594:	4b04      	ldr	r3, [pc, #16]	; (80035a8 <__NVIC_GetPriorityGrouping+0x18>)
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	0a1b      	lsrs	r3, r3, #8
 800359a:	f003 0307 	and.w	r3, r3, #7
}
 800359e:	4618      	mov	r0, r3
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr
 80035a8:	e000ed00 	.word	0xe000ed00

080035ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	4603      	mov	r3, r0
 80035b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	db0b      	blt.n	80035d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035be:	79fb      	ldrb	r3, [r7, #7]
 80035c0:	f003 021f 	and.w	r2, r3, #31
 80035c4:	4907      	ldr	r1, [pc, #28]	; (80035e4 <__NVIC_EnableIRQ+0x38>)
 80035c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ca:	095b      	lsrs	r3, r3, #5
 80035cc:	2001      	movs	r0, #1
 80035ce:	fa00 f202 	lsl.w	r2, r0, r2
 80035d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80035d6:	bf00      	nop
 80035d8:	370c      	adds	r7, #12
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	e000e100 	.word	0xe000e100

080035e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	4603      	mov	r3, r0
 80035f0:	6039      	str	r1, [r7, #0]
 80035f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	db0a      	blt.n	8003612 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	b2da      	uxtb	r2, r3
 8003600:	490c      	ldr	r1, [pc, #48]	; (8003634 <__NVIC_SetPriority+0x4c>)
 8003602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003606:	0112      	lsls	r2, r2, #4
 8003608:	b2d2      	uxtb	r2, r2
 800360a:	440b      	add	r3, r1
 800360c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003610:	e00a      	b.n	8003628 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	b2da      	uxtb	r2, r3
 8003616:	4908      	ldr	r1, [pc, #32]	; (8003638 <__NVIC_SetPriority+0x50>)
 8003618:	79fb      	ldrb	r3, [r7, #7]
 800361a:	f003 030f 	and.w	r3, r3, #15
 800361e:	3b04      	subs	r3, #4
 8003620:	0112      	lsls	r2, r2, #4
 8003622:	b2d2      	uxtb	r2, r2
 8003624:	440b      	add	r3, r1
 8003626:	761a      	strb	r2, [r3, #24]
}
 8003628:	bf00      	nop
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr
 8003634:	e000e100 	.word	0xe000e100
 8003638:	e000ed00 	.word	0xe000ed00

0800363c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800363c:	b480      	push	{r7}
 800363e:	b089      	sub	sp, #36	; 0x24
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f003 0307 	and.w	r3, r3, #7
 800364e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	f1c3 0307 	rsb	r3, r3, #7
 8003656:	2b04      	cmp	r3, #4
 8003658:	bf28      	it	cs
 800365a:	2304      	movcs	r3, #4
 800365c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	3304      	adds	r3, #4
 8003662:	2b06      	cmp	r3, #6
 8003664:	d902      	bls.n	800366c <NVIC_EncodePriority+0x30>
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	3b03      	subs	r3, #3
 800366a:	e000      	b.n	800366e <NVIC_EncodePriority+0x32>
 800366c:	2300      	movs	r3, #0
 800366e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003670:	f04f 32ff 	mov.w	r2, #4294967295
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	fa02 f303 	lsl.w	r3, r2, r3
 800367a:	43da      	mvns	r2, r3
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	401a      	ands	r2, r3
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003684:	f04f 31ff 	mov.w	r1, #4294967295
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	fa01 f303 	lsl.w	r3, r1, r3
 800368e:	43d9      	mvns	r1, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003694:	4313      	orrs	r3, r2
         );
}
 8003696:	4618      	mov	r0, r3
 8003698:	3724      	adds	r7, #36	; 0x24
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
	...

080036a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	3b01      	subs	r3, #1
 80036b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036b4:	d301      	bcc.n	80036ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036b6:	2301      	movs	r3, #1
 80036b8:	e00f      	b.n	80036da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036ba:	4a0a      	ldr	r2, [pc, #40]	; (80036e4 <SysTick_Config+0x40>)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	3b01      	subs	r3, #1
 80036c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036c2:	210f      	movs	r1, #15
 80036c4:	f04f 30ff 	mov.w	r0, #4294967295
 80036c8:	f7ff ff8e 	bl	80035e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036cc:	4b05      	ldr	r3, [pc, #20]	; (80036e4 <SysTick_Config+0x40>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036d2:	4b04      	ldr	r3, [pc, #16]	; (80036e4 <SysTick_Config+0x40>)
 80036d4:	2207      	movs	r2, #7
 80036d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3708      	adds	r7, #8
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	e000e010 	.word	0xe000e010

080036e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f7ff ff29 	bl	8003548 <__NVIC_SetPriorityGrouping>
}
 80036f6:	bf00      	nop
 80036f8:	3708      	adds	r7, #8
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036fe:	b580      	push	{r7, lr}
 8003700:	b086      	sub	sp, #24
 8003702:	af00      	add	r7, sp, #0
 8003704:	4603      	mov	r3, r0
 8003706:	60b9      	str	r1, [r7, #8]
 8003708:	607a      	str	r2, [r7, #4]
 800370a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800370c:	2300      	movs	r3, #0
 800370e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003710:	f7ff ff3e 	bl	8003590 <__NVIC_GetPriorityGrouping>
 8003714:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	68b9      	ldr	r1, [r7, #8]
 800371a:	6978      	ldr	r0, [r7, #20]
 800371c:	f7ff ff8e 	bl	800363c <NVIC_EncodePriority>
 8003720:	4602      	mov	r2, r0
 8003722:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003726:	4611      	mov	r1, r2
 8003728:	4618      	mov	r0, r3
 800372a:	f7ff ff5d 	bl	80035e8 <__NVIC_SetPriority>
}
 800372e:	bf00      	nop
 8003730:	3718      	adds	r7, #24
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}

08003736 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003736:	b580      	push	{r7, lr}
 8003738:	b082      	sub	sp, #8
 800373a:	af00      	add	r7, sp, #0
 800373c:	4603      	mov	r3, r0
 800373e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003744:	4618      	mov	r0, r3
 8003746:	f7ff ff31 	bl	80035ac <__NVIC_EnableIRQ>
}
 800374a:	bf00      	nop
 800374c:	3708      	adds	r7, #8
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}

08003752 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003752:	b580      	push	{r7, lr}
 8003754:	b082      	sub	sp, #8
 8003756:	af00      	add	r7, sp, #0
 8003758:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f7ff ffa2 	bl	80036a4 <SysTick_Config>
 8003760:	4603      	mov	r3, r0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3708      	adds	r7, #8
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}

0800376a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800376a:	b580      	push	{r7, lr}
 800376c:	b084      	sub	sp, #16
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003776:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003778:	f7ff fad4 	bl	8002d24 <HAL_GetTick>
 800377c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d008      	beq.n	800379c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2280      	movs	r2, #128	; 0x80
 800378e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e052      	b.n	8003842 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f022 0216 	bic.w	r2, r2, #22
 80037aa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	695a      	ldr	r2, [r3, #20]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037ba:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d103      	bne.n	80037cc <HAL_DMA_Abort+0x62>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d007      	beq.n	80037dc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f022 0208 	bic.w	r2, r2, #8
 80037da:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f022 0201 	bic.w	r2, r2, #1
 80037ea:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037ec:	e013      	b.n	8003816 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037ee:	f7ff fa99 	bl	8002d24 <HAL_GetTick>
 80037f2:	4602      	mov	r2, r0
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	2b05      	cmp	r3, #5
 80037fa:	d90c      	bls.n	8003816 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2220      	movs	r2, #32
 8003800:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2203      	movs	r2, #3
 8003806:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e015      	b.n	8003842 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0301 	and.w	r3, r3, #1
 8003820:	2b00      	cmp	r3, #0
 8003822:	d1e4      	bne.n	80037ee <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003828:	223f      	movs	r2, #63	; 0x3f
 800382a:	409a      	lsls	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3710      	adds	r7, #16
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}

0800384a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800384a:	b480      	push	{r7}
 800384c:	b083      	sub	sp, #12
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b02      	cmp	r3, #2
 800385c:	d004      	beq.n	8003868 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2280      	movs	r2, #128	; 0x80
 8003862:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e00c      	b.n	8003882 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2205      	movs	r2, #5
 800386c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f022 0201 	bic.w	r2, r2, #1
 800387e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	370c      	adds	r7, #12
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
	...

08003890 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003890:	b480      	push	{r7}
 8003892:	b089      	sub	sp, #36	; 0x24
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800389a:	2300      	movs	r3, #0
 800389c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800389e:	2300      	movs	r3, #0
 80038a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80038a2:	2300      	movs	r3, #0
 80038a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038a6:	2300      	movs	r3, #0
 80038a8:	61fb      	str	r3, [r7, #28]
 80038aa:	e159      	b.n	8003b60 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80038ac:	2201      	movs	r2, #1
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	fa02 f303 	lsl.w	r3, r2, r3
 80038b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	697a      	ldr	r2, [r7, #20]
 80038bc:	4013      	ands	r3, r2
 80038be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038c0:	693a      	ldr	r2, [r7, #16]
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	f040 8148 	bne.w	8003b5a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f003 0303 	and.w	r3, r3, #3
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d005      	beq.n	80038e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d130      	bne.n	8003944 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	005b      	lsls	r3, r3, #1
 80038ec:	2203      	movs	r2, #3
 80038ee:	fa02 f303 	lsl.w	r3, r2, r3
 80038f2:	43db      	mvns	r3, r3
 80038f4:	69ba      	ldr	r2, [r7, #24]
 80038f6:	4013      	ands	r3, r2
 80038f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	68da      	ldr	r2, [r3, #12]
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	005b      	lsls	r3, r3, #1
 8003902:	fa02 f303 	lsl.w	r3, r2, r3
 8003906:	69ba      	ldr	r2, [r7, #24]
 8003908:	4313      	orrs	r3, r2
 800390a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	69ba      	ldr	r2, [r7, #24]
 8003910:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003918:	2201      	movs	r2, #1
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	fa02 f303 	lsl.w	r3, r2, r3
 8003920:	43db      	mvns	r3, r3
 8003922:	69ba      	ldr	r2, [r7, #24]
 8003924:	4013      	ands	r3, r2
 8003926:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	091b      	lsrs	r3, r3, #4
 800392e:	f003 0201 	and.w	r2, r3, #1
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	fa02 f303 	lsl.w	r3, r2, r3
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	4313      	orrs	r3, r2
 800393c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	69ba      	ldr	r2, [r7, #24]
 8003942:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f003 0303 	and.w	r3, r3, #3
 800394c:	2b03      	cmp	r3, #3
 800394e:	d017      	beq.n	8003980 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	005b      	lsls	r3, r3, #1
 800395a:	2203      	movs	r2, #3
 800395c:	fa02 f303 	lsl.w	r3, r2, r3
 8003960:	43db      	mvns	r3, r3
 8003962:	69ba      	ldr	r2, [r7, #24]
 8003964:	4013      	ands	r3, r2
 8003966:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	689a      	ldr	r2, [r3, #8]
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	005b      	lsls	r3, r3, #1
 8003970:	fa02 f303 	lsl.w	r3, r2, r3
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	4313      	orrs	r3, r2
 8003978:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f003 0303 	and.w	r3, r3, #3
 8003988:	2b02      	cmp	r3, #2
 800398a:	d123      	bne.n	80039d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	08da      	lsrs	r2, r3, #3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	3208      	adds	r2, #8
 8003994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003998:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	f003 0307 	and.w	r3, r3, #7
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	220f      	movs	r2, #15
 80039a4:	fa02 f303 	lsl.w	r3, r2, r3
 80039a8:	43db      	mvns	r3, r3
 80039aa:	69ba      	ldr	r2, [r7, #24]
 80039ac:	4013      	ands	r3, r2
 80039ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	691a      	ldr	r2, [r3, #16]
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	f003 0307 	and.w	r3, r3, #7
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	fa02 f303 	lsl.w	r3, r2, r3
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	08da      	lsrs	r2, r3, #3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	3208      	adds	r2, #8
 80039ce:	69b9      	ldr	r1, [r7, #24]
 80039d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	005b      	lsls	r3, r3, #1
 80039de:	2203      	movs	r2, #3
 80039e0:	fa02 f303 	lsl.w	r3, r2, r3
 80039e4:	43db      	mvns	r3, r3
 80039e6:	69ba      	ldr	r2, [r7, #24]
 80039e8:	4013      	ands	r3, r2
 80039ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f003 0203 	and.w	r2, r3, #3
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	005b      	lsls	r3, r3, #1
 80039f8:	fa02 f303 	lsl.w	r3, r2, r3
 80039fc:	69ba      	ldr	r2, [r7, #24]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	f000 80a2 	beq.w	8003b5a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a16:	2300      	movs	r3, #0
 8003a18:	60fb      	str	r3, [r7, #12]
 8003a1a:	4b57      	ldr	r3, [pc, #348]	; (8003b78 <HAL_GPIO_Init+0x2e8>)
 8003a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1e:	4a56      	ldr	r2, [pc, #344]	; (8003b78 <HAL_GPIO_Init+0x2e8>)
 8003a20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a24:	6453      	str	r3, [r2, #68]	; 0x44
 8003a26:	4b54      	ldr	r3, [pc, #336]	; (8003b78 <HAL_GPIO_Init+0x2e8>)
 8003a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a2e:	60fb      	str	r3, [r7, #12]
 8003a30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a32:	4a52      	ldr	r2, [pc, #328]	; (8003b7c <HAL_GPIO_Init+0x2ec>)
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	089b      	lsrs	r3, r3, #2
 8003a38:	3302      	adds	r3, #2
 8003a3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	f003 0303 	and.w	r3, r3, #3
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	220f      	movs	r2, #15
 8003a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4e:	43db      	mvns	r3, r3
 8003a50:	69ba      	ldr	r2, [r7, #24]
 8003a52:	4013      	ands	r3, r2
 8003a54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a49      	ldr	r2, [pc, #292]	; (8003b80 <HAL_GPIO_Init+0x2f0>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d019      	beq.n	8003a92 <HAL_GPIO_Init+0x202>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a48      	ldr	r2, [pc, #288]	; (8003b84 <HAL_GPIO_Init+0x2f4>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d013      	beq.n	8003a8e <HAL_GPIO_Init+0x1fe>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a47      	ldr	r2, [pc, #284]	; (8003b88 <HAL_GPIO_Init+0x2f8>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d00d      	beq.n	8003a8a <HAL_GPIO_Init+0x1fa>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a46      	ldr	r2, [pc, #280]	; (8003b8c <HAL_GPIO_Init+0x2fc>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d007      	beq.n	8003a86 <HAL_GPIO_Init+0x1f6>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a45      	ldr	r2, [pc, #276]	; (8003b90 <HAL_GPIO_Init+0x300>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d101      	bne.n	8003a82 <HAL_GPIO_Init+0x1f2>
 8003a7e:	2304      	movs	r3, #4
 8003a80:	e008      	b.n	8003a94 <HAL_GPIO_Init+0x204>
 8003a82:	2307      	movs	r3, #7
 8003a84:	e006      	b.n	8003a94 <HAL_GPIO_Init+0x204>
 8003a86:	2303      	movs	r3, #3
 8003a88:	e004      	b.n	8003a94 <HAL_GPIO_Init+0x204>
 8003a8a:	2302      	movs	r3, #2
 8003a8c:	e002      	b.n	8003a94 <HAL_GPIO_Init+0x204>
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e000      	b.n	8003a94 <HAL_GPIO_Init+0x204>
 8003a92:	2300      	movs	r3, #0
 8003a94:	69fa      	ldr	r2, [r7, #28]
 8003a96:	f002 0203 	and.w	r2, r2, #3
 8003a9a:	0092      	lsls	r2, r2, #2
 8003a9c:	4093      	lsls	r3, r2
 8003a9e:	69ba      	ldr	r2, [r7, #24]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003aa4:	4935      	ldr	r1, [pc, #212]	; (8003b7c <HAL_GPIO_Init+0x2ec>)
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	089b      	lsrs	r3, r3, #2
 8003aaa:	3302      	adds	r3, #2
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ab2:	4b38      	ldr	r3, [pc, #224]	; (8003b94 <HAL_GPIO_Init+0x304>)
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	43db      	mvns	r3, r3
 8003abc:	69ba      	ldr	r2, [r7, #24]
 8003abe:	4013      	ands	r3, r2
 8003ac0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d003      	beq.n	8003ad6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003ace:	69ba      	ldr	r2, [r7, #24]
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ad6:	4a2f      	ldr	r2, [pc, #188]	; (8003b94 <HAL_GPIO_Init+0x304>)
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003adc:	4b2d      	ldr	r3, [pc, #180]	; (8003b94 <HAL_GPIO_Init+0x304>)
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	43db      	mvns	r3, r3
 8003ae6:	69ba      	ldr	r2, [r7, #24]
 8003ae8:	4013      	ands	r3, r2
 8003aea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d003      	beq.n	8003b00 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003af8:	69ba      	ldr	r2, [r7, #24]
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b00:	4a24      	ldr	r2, [pc, #144]	; (8003b94 <HAL_GPIO_Init+0x304>)
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b06:	4b23      	ldr	r3, [pc, #140]	; (8003b94 <HAL_GPIO_Init+0x304>)
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	43db      	mvns	r3, r3
 8003b10:	69ba      	ldr	r2, [r7, #24]
 8003b12:	4013      	ands	r3, r2
 8003b14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d003      	beq.n	8003b2a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003b22:	69ba      	ldr	r2, [r7, #24]
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b2a:	4a1a      	ldr	r2, [pc, #104]	; (8003b94 <HAL_GPIO_Init+0x304>)
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b30:	4b18      	ldr	r3, [pc, #96]	; (8003b94 <HAL_GPIO_Init+0x304>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	43db      	mvns	r3, r3
 8003b3a:	69ba      	ldr	r2, [r7, #24]
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d003      	beq.n	8003b54 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003b4c:	69ba      	ldr	r2, [r7, #24]
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b54:	4a0f      	ldr	r2, [pc, #60]	; (8003b94 <HAL_GPIO_Init+0x304>)
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	61fb      	str	r3, [r7, #28]
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	2b0f      	cmp	r3, #15
 8003b64:	f67f aea2 	bls.w	80038ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b68:	bf00      	nop
 8003b6a:	bf00      	nop
 8003b6c:	3724      	adds	r7, #36	; 0x24
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	40023800 	.word	0x40023800
 8003b7c:	40013800 	.word	0x40013800
 8003b80:	40020000 	.word	0x40020000
 8003b84:	40020400 	.word	0x40020400
 8003b88:	40020800 	.word	0x40020800
 8003b8c:	40020c00 	.word	0x40020c00
 8003b90:	40021000 	.word	0x40021000
 8003b94:	40013c00 	.word	0x40013c00

08003b98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	807b      	strh	r3, [r7, #2]
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ba8:	787b      	ldrb	r3, [r7, #1]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d003      	beq.n	8003bb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bae:	887a      	ldrh	r2, [r7, #2]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003bb4:	e003      	b.n	8003bbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003bb6:	887b      	ldrh	r3, [r7, #2]
 8003bb8:	041a      	lsls	r2, r3, #16
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	619a      	str	r2, [r3, #24]
}
 8003bbe:	bf00      	nop
 8003bc0:	370c      	adds	r7, #12
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr

08003bca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003bca:	b480      	push	{r7}
 8003bcc:	b085      	sub	sp, #20
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	695b      	ldr	r3, [r3, #20]
 8003bda:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003bdc:	887a      	ldrh	r2, [r7, #2]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	4013      	ands	r3, r2
 8003be2:	041a      	lsls	r2, r3, #16
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	43d9      	mvns	r1, r3
 8003be8:	887b      	ldrh	r3, [r7, #2]
 8003bea:	400b      	ands	r3, r1
 8003bec:	431a      	orrs	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	619a      	str	r2, [r3, #24]
}
 8003bf2:	bf00      	nop
 8003bf4:	3714      	adds	r7, #20
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
	...

08003c00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	4603      	mov	r3, r0
 8003c08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003c0a:	4b08      	ldr	r3, [pc, #32]	; (8003c2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c0c:	695a      	ldr	r2, [r3, #20]
 8003c0e:	88fb      	ldrh	r3, [r7, #6]
 8003c10:	4013      	ands	r3, r2
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d006      	beq.n	8003c24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c16:	4a05      	ldr	r2, [pc, #20]	; (8003c2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c18:	88fb      	ldrh	r3, [r7, #6]
 8003c1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c1c:	88fb      	ldrh	r3, [r7, #6]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7fd f952 	bl	8000ec8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003c24:	bf00      	nop
 8003c26:	3708      	adds	r7, #8
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	40013c00 	.word	0x40013c00

08003c30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b086      	sub	sp, #24
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e267      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d075      	beq.n	8003d3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c4e:	4b88      	ldr	r3, [pc, #544]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f003 030c 	and.w	r3, r3, #12
 8003c56:	2b04      	cmp	r3, #4
 8003c58:	d00c      	beq.n	8003c74 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c5a:	4b85      	ldr	r3, [pc, #532]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c62:	2b08      	cmp	r3, #8
 8003c64:	d112      	bne.n	8003c8c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c66:	4b82      	ldr	r3, [pc, #520]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c72:	d10b      	bne.n	8003c8c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c74:	4b7e      	ldr	r3, [pc, #504]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d05b      	beq.n	8003d38 <HAL_RCC_OscConfig+0x108>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d157      	bne.n	8003d38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e242      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c94:	d106      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x74>
 8003c96:	4b76      	ldr	r3, [pc, #472]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a75      	ldr	r2, [pc, #468]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003c9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ca0:	6013      	str	r3, [r2, #0]
 8003ca2:	e01d      	b.n	8003ce0 <HAL_RCC_OscConfig+0xb0>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cac:	d10c      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x98>
 8003cae:	4b70      	ldr	r3, [pc, #448]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a6f      	ldr	r2, [pc, #444]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003cb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cb8:	6013      	str	r3, [r2, #0]
 8003cba:	4b6d      	ldr	r3, [pc, #436]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a6c      	ldr	r2, [pc, #432]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003cc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cc4:	6013      	str	r3, [r2, #0]
 8003cc6:	e00b      	b.n	8003ce0 <HAL_RCC_OscConfig+0xb0>
 8003cc8:	4b69      	ldr	r3, [pc, #420]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a68      	ldr	r2, [pc, #416]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003cce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cd2:	6013      	str	r3, [r2, #0]
 8003cd4:	4b66      	ldr	r3, [pc, #408]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a65      	ldr	r2, [pc, #404]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003cda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d013      	beq.n	8003d10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce8:	f7ff f81c 	bl	8002d24 <HAL_GetTick>
 8003cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cee:	e008      	b.n	8003d02 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cf0:	f7ff f818 	bl	8002d24 <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	2b64      	cmp	r3, #100	; 0x64
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e207      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d02:	4b5b      	ldr	r3, [pc, #364]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d0f0      	beq.n	8003cf0 <HAL_RCC_OscConfig+0xc0>
 8003d0e:	e014      	b.n	8003d3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d10:	f7ff f808 	bl	8002d24 <HAL_GetTick>
 8003d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d16:	e008      	b.n	8003d2a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d18:	f7ff f804 	bl	8002d24 <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	2b64      	cmp	r3, #100	; 0x64
 8003d24:	d901      	bls.n	8003d2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e1f3      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d2a:	4b51      	ldr	r3, [pc, #324]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1f0      	bne.n	8003d18 <HAL_RCC_OscConfig+0xe8>
 8003d36:	e000      	b.n	8003d3a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0302 	and.w	r3, r3, #2
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d063      	beq.n	8003e0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d46:	4b4a      	ldr	r3, [pc, #296]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f003 030c 	and.w	r3, r3, #12
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00b      	beq.n	8003d6a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d52:	4b47      	ldr	r3, [pc, #284]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d5a:	2b08      	cmp	r3, #8
 8003d5c:	d11c      	bne.n	8003d98 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d5e:	4b44      	ldr	r3, [pc, #272]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d116      	bne.n	8003d98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d6a:	4b41      	ldr	r3, [pc, #260]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d005      	beq.n	8003d82 <HAL_RCC_OscConfig+0x152>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d001      	beq.n	8003d82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e1c7      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d82:	4b3b      	ldr	r3, [pc, #236]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	00db      	lsls	r3, r3, #3
 8003d90:	4937      	ldr	r1, [pc, #220]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d96:	e03a      	b.n	8003e0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d020      	beq.n	8003de2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003da0:	4b34      	ldr	r3, [pc, #208]	; (8003e74 <HAL_RCC_OscConfig+0x244>)
 8003da2:	2201      	movs	r2, #1
 8003da4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da6:	f7fe ffbd 	bl	8002d24 <HAL_GetTick>
 8003daa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dac:	e008      	b.n	8003dc0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dae:	f7fe ffb9 	bl	8002d24 <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d901      	bls.n	8003dc0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e1a8      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dc0:	4b2b      	ldr	r3, [pc, #172]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0302 	and.w	r3, r3, #2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d0f0      	beq.n	8003dae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dcc:	4b28      	ldr	r3, [pc, #160]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	00db      	lsls	r3, r3, #3
 8003dda:	4925      	ldr	r1, [pc, #148]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	600b      	str	r3, [r1, #0]
 8003de0:	e015      	b.n	8003e0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003de2:	4b24      	ldr	r3, [pc, #144]	; (8003e74 <HAL_RCC_OscConfig+0x244>)
 8003de4:	2200      	movs	r2, #0
 8003de6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de8:	f7fe ff9c 	bl	8002d24 <HAL_GetTick>
 8003dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dee:	e008      	b.n	8003e02 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003df0:	f7fe ff98 	bl	8002d24 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d901      	bls.n	8003e02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e187      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e02:	4b1b      	ldr	r3, [pc, #108]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0302 	and.w	r3, r3, #2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1f0      	bne.n	8003df0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0308 	and.w	r3, r3, #8
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d036      	beq.n	8003e88 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d016      	beq.n	8003e50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e22:	4b15      	ldr	r3, [pc, #84]	; (8003e78 <HAL_RCC_OscConfig+0x248>)
 8003e24:	2201      	movs	r2, #1
 8003e26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e28:	f7fe ff7c 	bl	8002d24 <HAL_GetTick>
 8003e2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e2e:	e008      	b.n	8003e42 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e30:	f7fe ff78 	bl	8002d24 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e167      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e42:	4b0b      	ldr	r3, [pc, #44]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003e44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d0f0      	beq.n	8003e30 <HAL_RCC_OscConfig+0x200>
 8003e4e:	e01b      	b.n	8003e88 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e50:	4b09      	ldr	r3, [pc, #36]	; (8003e78 <HAL_RCC_OscConfig+0x248>)
 8003e52:	2200      	movs	r2, #0
 8003e54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e56:	f7fe ff65 	bl	8002d24 <HAL_GetTick>
 8003e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e5c:	e00e      	b.n	8003e7c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e5e:	f7fe ff61 	bl	8002d24 <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d907      	bls.n	8003e7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	e150      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
 8003e70:	40023800 	.word	0x40023800
 8003e74:	42470000 	.word	0x42470000
 8003e78:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e7c:	4b88      	ldr	r3, [pc, #544]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003e7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e80:	f003 0302 	and.w	r3, r3, #2
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d1ea      	bne.n	8003e5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0304 	and.w	r3, r3, #4
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	f000 8097 	beq.w	8003fc4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e96:	2300      	movs	r3, #0
 8003e98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e9a:	4b81      	ldr	r3, [pc, #516]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d10f      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	60bb      	str	r3, [r7, #8]
 8003eaa:	4b7d      	ldr	r3, [pc, #500]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eae:	4a7c      	ldr	r2, [pc, #496]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eb4:	6413      	str	r3, [r2, #64]	; 0x40
 8003eb6:	4b7a      	ldr	r3, [pc, #488]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ebe:	60bb      	str	r3, [r7, #8]
 8003ec0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ec6:	4b77      	ldr	r3, [pc, #476]	; (80040a4 <HAL_RCC_OscConfig+0x474>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d118      	bne.n	8003f04 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ed2:	4b74      	ldr	r3, [pc, #464]	; (80040a4 <HAL_RCC_OscConfig+0x474>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a73      	ldr	r2, [pc, #460]	; (80040a4 <HAL_RCC_OscConfig+0x474>)
 8003ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003edc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ede:	f7fe ff21 	bl	8002d24 <HAL_GetTick>
 8003ee2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ee4:	e008      	b.n	8003ef8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ee6:	f7fe ff1d 	bl	8002d24 <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d901      	bls.n	8003ef8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e10c      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ef8:	4b6a      	ldr	r3, [pc, #424]	; (80040a4 <HAL_RCC_OscConfig+0x474>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d0f0      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d106      	bne.n	8003f1a <HAL_RCC_OscConfig+0x2ea>
 8003f0c:	4b64      	ldr	r3, [pc, #400]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f10:	4a63      	ldr	r2, [pc, #396]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003f12:	f043 0301 	orr.w	r3, r3, #1
 8003f16:	6713      	str	r3, [r2, #112]	; 0x70
 8003f18:	e01c      	b.n	8003f54 <HAL_RCC_OscConfig+0x324>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	2b05      	cmp	r3, #5
 8003f20:	d10c      	bne.n	8003f3c <HAL_RCC_OscConfig+0x30c>
 8003f22:	4b5f      	ldr	r3, [pc, #380]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f26:	4a5e      	ldr	r2, [pc, #376]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003f28:	f043 0304 	orr.w	r3, r3, #4
 8003f2c:	6713      	str	r3, [r2, #112]	; 0x70
 8003f2e:	4b5c      	ldr	r3, [pc, #368]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f32:	4a5b      	ldr	r2, [pc, #364]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003f34:	f043 0301 	orr.w	r3, r3, #1
 8003f38:	6713      	str	r3, [r2, #112]	; 0x70
 8003f3a:	e00b      	b.n	8003f54 <HAL_RCC_OscConfig+0x324>
 8003f3c:	4b58      	ldr	r3, [pc, #352]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f40:	4a57      	ldr	r2, [pc, #348]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003f42:	f023 0301 	bic.w	r3, r3, #1
 8003f46:	6713      	str	r3, [r2, #112]	; 0x70
 8003f48:	4b55      	ldr	r3, [pc, #340]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f4c:	4a54      	ldr	r2, [pc, #336]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003f4e:	f023 0304 	bic.w	r3, r3, #4
 8003f52:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d015      	beq.n	8003f88 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f5c:	f7fe fee2 	bl	8002d24 <HAL_GetTick>
 8003f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f62:	e00a      	b.n	8003f7a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f64:	f7fe fede 	bl	8002d24 <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d901      	bls.n	8003f7a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e0cb      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f7a:	4b49      	ldr	r3, [pc, #292]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f7e:	f003 0302 	and.w	r3, r3, #2
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d0ee      	beq.n	8003f64 <HAL_RCC_OscConfig+0x334>
 8003f86:	e014      	b.n	8003fb2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f88:	f7fe fecc 	bl	8002d24 <HAL_GetTick>
 8003f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f8e:	e00a      	b.n	8003fa6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f90:	f7fe fec8 	bl	8002d24 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e0b5      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fa6:	4b3e      	ldr	r3, [pc, #248]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d1ee      	bne.n	8003f90 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fb2:	7dfb      	ldrb	r3, [r7, #23]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d105      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fb8:	4b39      	ldr	r3, [pc, #228]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbc:	4a38      	ldr	r2, [pc, #224]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003fbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fc2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f000 80a1 	beq.w	8004110 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003fce:	4b34      	ldr	r3, [pc, #208]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f003 030c 	and.w	r3, r3, #12
 8003fd6:	2b08      	cmp	r3, #8
 8003fd8:	d05c      	beq.n	8004094 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d141      	bne.n	8004066 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fe2:	4b31      	ldr	r3, [pc, #196]	; (80040a8 <HAL_RCC_OscConfig+0x478>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe8:	f7fe fe9c 	bl	8002d24 <HAL_GetTick>
 8003fec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fee:	e008      	b.n	8004002 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ff0:	f7fe fe98 	bl	8002d24 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e087      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004002:	4b27      	ldr	r3, [pc, #156]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d1f0      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	69da      	ldr	r2, [r3, #28]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a1b      	ldr	r3, [r3, #32]
 8004016:	431a      	orrs	r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401c:	019b      	lsls	r3, r3, #6
 800401e:	431a      	orrs	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004024:	085b      	lsrs	r3, r3, #1
 8004026:	3b01      	subs	r3, #1
 8004028:	041b      	lsls	r3, r3, #16
 800402a:	431a      	orrs	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004030:	061b      	lsls	r3, r3, #24
 8004032:	491b      	ldr	r1, [pc, #108]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8004034:	4313      	orrs	r3, r2
 8004036:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004038:	4b1b      	ldr	r3, [pc, #108]	; (80040a8 <HAL_RCC_OscConfig+0x478>)
 800403a:	2201      	movs	r2, #1
 800403c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800403e:	f7fe fe71 	bl	8002d24 <HAL_GetTick>
 8004042:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004044:	e008      	b.n	8004058 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004046:	f7fe fe6d 	bl	8002d24 <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	2b02      	cmp	r3, #2
 8004052:	d901      	bls.n	8004058 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e05c      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004058:	4b11      	ldr	r3, [pc, #68]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d0f0      	beq.n	8004046 <HAL_RCC_OscConfig+0x416>
 8004064:	e054      	b.n	8004110 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004066:	4b10      	ldr	r3, [pc, #64]	; (80040a8 <HAL_RCC_OscConfig+0x478>)
 8004068:	2200      	movs	r2, #0
 800406a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800406c:	f7fe fe5a 	bl	8002d24 <HAL_GetTick>
 8004070:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004072:	e008      	b.n	8004086 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004074:	f7fe fe56 	bl	8002d24 <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	2b02      	cmp	r3, #2
 8004080:	d901      	bls.n	8004086 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e045      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004086:	4b06      	ldr	r3, [pc, #24]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d1f0      	bne.n	8004074 <HAL_RCC_OscConfig+0x444>
 8004092:	e03d      	b.n	8004110 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	699b      	ldr	r3, [r3, #24]
 8004098:	2b01      	cmp	r3, #1
 800409a:	d107      	bne.n	80040ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e038      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
 80040a0:	40023800 	.word	0x40023800
 80040a4:	40007000 	.word	0x40007000
 80040a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80040ac:	4b1b      	ldr	r3, [pc, #108]	; (800411c <HAL_RCC_OscConfig+0x4ec>)
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d028      	beq.n	800410c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d121      	bne.n	800410c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d11a      	bne.n	800410c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80040dc:	4013      	ands	r3, r2
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80040e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d111      	bne.n	800410c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f2:	085b      	lsrs	r3, r3, #1
 80040f4:	3b01      	subs	r3, #1
 80040f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d107      	bne.n	800410c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004106:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004108:	429a      	cmp	r2, r3
 800410a:	d001      	beq.n	8004110 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e000      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3718      	adds	r7, #24
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	40023800 	.word	0x40023800

08004120 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d101      	bne.n	8004134 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e0cc      	b.n	80042ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004134:	4b68      	ldr	r3, [pc, #416]	; (80042d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0307 	and.w	r3, r3, #7
 800413c:	683a      	ldr	r2, [r7, #0]
 800413e:	429a      	cmp	r2, r3
 8004140:	d90c      	bls.n	800415c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004142:	4b65      	ldr	r3, [pc, #404]	; (80042d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004144:	683a      	ldr	r2, [r7, #0]
 8004146:	b2d2      	uxtb	r2, r2
 8004148:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800414a:	4b63      	ldr	r3, [pc, #396]	; (80042d8 <HAL_RCC_ClockConfig+0x1b8>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0307 	and.w	r3, r3, #7
 8004152:	683a      	ldr	r2, [r7, #0]
 8004154:	429a      	cmp	r2, r3
 8004156:	d001      	beq.n	800415c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e0b8      	b.n	80042ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0302 	and.w	r3, r3, #2
 8004164:	2b00      	cmp	r3, #0
 8004166:	d020      	beq.n	80041aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0304 	and.w	r3, r3, #4
 8004170:	2b00      	cmp	r3, #0
 8004172:	d005      	beq.n	8004180 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004174:	4b59      	ldr	r3, [pc, #356]	; (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	4a58      	ldr	r2, [pc, #352]	; (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 800417a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800417e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0308 	and.w	r3, r3, #8
 8004188:	2b00      	cmp	r3, #0
 800418a:	d005      	beq.n	8004198 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800418c:	4b53      	ldr	r3, [pc, #332]	; (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	4a52      	ldr	r2, [pc, #328]	; (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 8004192:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004196:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004198:	4b50      	ldr	r3, [pc, #320]	; (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	494d      	ldr	r1, [pc, #308]	; (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0301 	and.w	r3, r3, #1
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d044      	beq.n	8004240 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d107      	bne.n	80041ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041be:	4b47      	ldr	r3, [pc, #284]	; (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d119      	bne.n	80041fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e07f      	b.n	80042ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d003      	beq.n	80041de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041da:	2b03      	cmp	r3, #3
 80041dc:	d107      	bne.n	80041ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041de:	4b3f      	ldr	r3, [pc, #252]	; (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d109      	bne.n	80041fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e06f      	b.n	80042ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041ee:	4b3b      	ldr	r3, [pc, #236]	; (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0302 	and.w	r3, r3, #2
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d101      	bne.n	80041fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e067      	b.n	80042ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041fe:	4b37      	ldr	r3, [pc, #220]	; (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f023 0203 	bic.w	r2, r3, #3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	4934      	ldr	r1, [pc, #208]	; (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 800420c:	4313      	orrs	r3, r2
 800420e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004210:	f7fe fd88 	bl	8002d24 <HAL_GetTick>
 8004214:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004216:	e00a      	b.n	800422e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004218:	f7fe fd84 	bl	8002d24 <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	f241 3288 	movw	r2, #5000	; 0x1388
 8004226:	4293      	cmp	r3, r2
 8004228:	d901      	bls.n	800422e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e04f      	b.n	80042ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800422e:	4b2b      	ldr	r3, [pc, #172]	; (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f003 020c 	and.w	r2, r3, #12
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	429a      	cmp	r2, r3
 800423e:	d1eb      	bne.n	8004218 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004240:	4b25      	ldr	r3, [pc, #148]	; (80042d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0307 	and.w	r3, r3, #7
 8004248:	683a      	ldr	r2, [r7, #0]
 800424a:	429a      	cmp	r2, r3
 800424c:	d20c      	bcs.n	8004268 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800424e:	4b22      	ldr	r3, [pc, #136]	; (80042d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004250:	683a      	ldr	r2, [r7, #0]
 8004252:	b2d2      	uxtb	r2, r2
 8004254:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004256:	4b20      	ldr	r3, [pc, #128]	; (80042d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0307 	and.w	r3, r3, #7
 800425e:	683a      	ldr	r2, [r7, #0]
 8004260:	429a      	cmp	r2, r3
 8004262:	d001      	beq.n	8004268 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e032      	b.n	80042ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0304 	and.w	r3, r3, #4
 8004270:	2b00      	cmp	r3, #0
 8004272:	d008      	beq.n	8004286 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004274:	4b19      	ldr	r3, [pc, #100]	; (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	4916      	ldr	r1, [pc, #88]	; (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 8004282:	4313      	orrs	r3, r2
 8004284:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0308 	and.w	r3, r3, #8
 800428e:	2b00      	cmp	r3, #0
 8004290:	d009      	beq.n	80042a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004292:	4b12      	ldr	r3, [pc, #72]	; (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	00db      	lsls	r3, r3, #3
 80042a0:	490e      	ldr	r1, [pc, #56]	; (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80042a6:	f000 f821 	bl	80042ec <HAL_RCC_GetSysClockFreq>
 80042aa:	4602      	mov	r2, r0
 80042ac:	4b0b      	ldr	r3, [pc, #44]	; (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	091b      	lsrs	r3, r3, #4
 80042b2:	f003 030f 	and.w	r3, r3, #15
 80042b6:	490a      	ldr	r1, [pc, #40]	; (80042e0 <HAL_RCC_ClockConfig+0x1c0>)
 80042b8:	5ccb      	ldrb	r3, [r1, r3]
 80042ba:	fa22 f303 	lsr.w	r3, r2, r3
 80042be:	4a09      	ldr	r2, [pc, #36]	; (80042e4 <HAL_RCC_ClockConfig+0x1c4>)
 80042c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80042c2:	4b09      	ldr	r3, [pc, #36]	; (80042e8 <HAL_RCC_ClockConfig+0x1c8>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7fe fce8 	bl	8002c9c <HAL_InitTick>

  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3710      	adds	r7, #16
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	40023c00 	.word	0x40023c00
 80042dc:	40023800 	.word	0x40023800
 80042e0:	08008338 	.word	0x08008338
 80042e4:	2000000c 	.word	0x2000000c
 80042e8:	20000010 	.word	0x20000010

080042ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042f0:	b094      	sub	sp, #80	; 0x50
 80042f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80042f4:	2300      	movs	r3, #0
 80042f6:	647b      	str	r3, [r7, #68]	; 0x44
 80042f8:	2300      	movs	r3, #0
 80042fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042fc:	2300      	movs	r3, #0
 80042fe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004300:	2300      	movs	r3, #0
 8004302:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004304:	4b79      	ldr	r3, [pc, #484]	; (80044ec <HAL_RCC_GetSysClockFreq+0x200>)
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	f003 030c 	and.w	r3, r3, #12
 800430c:	2b08      	cmp	r3, #8
 800430e:	d00d      	beq.n	800432c <HAL_RCC_GetSysClockFreq+0x40>
 8004310:	2b08      	cmp	r3, #8
 8004312:	f200 80e1 	bhi.w	80044d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004316:	2b00      	cmp	r3, #0
 8004318:	d002      	beq.n	8004320 <HAL_RCC_GetSysClockFreq+0x34>
 800431a:	2b04      	cmp	r3, #4
 800431c:	d003      	beq.n	8004326 <HAL_RCC_GetSysClockFreq+0x3a>
 800431e:	e0db      	b.n	80044d8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004320:	4b73      	ldr	r3, [pc, #460]	; (80044f0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004322:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004324:	e0db      	b.n	80044de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004326:	4b73      	ldr	r3, [pc, #460]	; (80044f4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004328:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800432a:	e0d8      	b.n	80044de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800432c:	4b6f      	ldr	r3, [pc, #444]	; (80044ec <HAL_RCC_GetSysClockFreq+0x200>)
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004334:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004336:	4b6d      	ldr	r3, [pc, #436]	; (80044ec <HAL_RCC_GetSysClockFreq+0x200>)
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d063      	beq.n	800440a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004342:	4b6a      	ldr	r3, [pc, #424]	; (80044ec <HAL_RCC_GetSysClockFreq+0x200>)
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	099b      	lsrs	r3, r3, #6
 8004348:	2200      	movs	r2, #0
 800434a:	63bb      	str	r3, [r7, #56]	; 0x38
 800434c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800434e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004350:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004354:	633b      	str	r3, [r7, #48]	; 0x30
 8004356:	2300      	movs	r3, #0
 8004358:	637b      	str	r3, [r7, #52]	; 0x34
 800435a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800435e:	4622      	mov	r2, r4
 8004360:	462b      	mov	r3, r5
 8004362:	f04f 0000 	mov.w	r0, #0
 8004366:	f04f 0100 	mov.w	r1, #0
 800436a:	0159      	lsls	r1, r3, #5
 800436c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004370:	0150      	lsls	r0, r2, #5
 8004372:	4602      	mov	r2, r0
 8004374:	460b      	mov	r3, r1
 8004376:	4621      	mov	r1, r4
 8004378:	1a51      	subs	r1, r2, r1
 800437a:	6139      	str	r1, [r7, #16]
 800437c:	4629      	mov	r1, r5
 800437e:	eb63 0301 	sbc.w	r3, r3, r1
 8004382:	617b      	str	r3, [r7, #20]
 8004384:	f04f 0200 	mov.w	r2, #0
 8004388:	f04f 0300 	mov.w	r3, #0
 800438c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004390:	4659      	mov	r1, fp
 8004392:	018b      	lsls	r3, r1, #6
 8004394:	4651      	mov	r1, sl
 8004396:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800439a:	4651      	mov	r1, sl
 800439c:	018a      	lsls	r2, r1, #6
 800439e:	4651      	mov	r1, sl
 80043a0:	ebb2 0801 	subs.w	r8, r2, r1
 80043a4:	4659      	mov	r1, fp
 80043a6:	eb63 0901 	sbc.w	r9, r3, r1
 80043aa:	f04f 0200 	mov.w	r2, #0
 80043ae:	f04f 0300 	mov.w	r3, #0
 80043b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043be:	4690      	mov	r8, r2
 80043c0:	4699      	mov	r9, r3
 80043c2:	4623      	mov	r3, r4
 80043c4:	eb18 0303 	adds.w	r3, r8, r3
 80043c8:	60bb      	str	r3, [r7, #8]
 80043ca:	462b      	mov	r3, r5
 80043cc:	eb49 0303 	adc.w	r3, r9, r3
 80043d0:	60fb      	str	r3, [r7, #12]
 80043d2:	f04f 0200 	mov.w	r2, #0
 80043d6:	f04f 0300 	mov.w	r3, #0
 80043da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80043de:	4629      	mov	r1, r5
 80043e0:	024b      	lsls	r3, r1, #9
 80043e2:	4621      	mov	r1, r4
 80043e4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80043e8:	4621      	mov	r1, r4
 80043ea:	024a      	lsls	r2, r1, #9
 80043ec:	4610      	mov	r0, r2
 80043ee:	4619      	mov	r1, r3
 80043f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043f2:	2200      	movs	r2, #0
 80043f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80043f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80043fc:	f7fc fbe6 	bl	8000bcc <__aeabi_uldivmod>
 8004400:	4602      	mov	r2, r0
 8004402:	460b      	mov	r3, r1
 8004404:	4613      	mov	r3, r2
 8004406:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004408:	e058      	b.n	80044bc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800440a:	4b38      	ldr	r3, [pc, #224]	; (80044ec <HAL_RCC_GetSysClockFreq+0x200>)
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	099b      	lsrs	r3, r3, #6
 8004410:	2200      	movs	r2, #0
 8004412:	4618      	mov	r0, r3
 8004414:	4611      	mov	r1, r2
 8004416:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800441a:	623b      	str	r3, [r7, #32]
 800441c:	2300      	movs	r3, #0
 800441e:	627b      	str	r3, [r7, #36]	; 0x24
 8004420:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004424:	4642      	mov	r2, r8
 8004426:	464b      	mov	r3, r9
 8004428:	f04f 0000 	mov.w	r0, #0
 800442c:	f04f 0100 	mov.w	r1, #0
 8004430:	0159      	lsls	r1, r3, #5
 8004432:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004436:	0150      	lsls	r0, r2, #5
 8004438:	4602      	mov	r2, r0
 800443a:	460b      	mov	r3, r1
 800443c:	4641      	mov	r1, r8
 800443e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004442:	4649      	mov	r1, r9
 8004444:	eb63 0b01 	sbc.w	fp, r3, r1
 8004448:	f04f 0200 	mov.w	r2, #0
 800444c:	f04f 0300 	mov.w	r3, #0
 8004450:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004454:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004458:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800445c:	ebb2 040a 	subs.w	r4, r2, sl
 8004460:	eb63 050b 	sbc.w	r5, r3, fp
 8004464:	f04f 0200 	mov.w	r2, #0
 8004468:	f04f 0300 	mov.w	r3, #0
 800446c:	00eb      	lsls	r3, r5, #3
 800446e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004472:	00e2      	lsls	r2, r4, #3
 8004474:	4614      	mov	r4, r2
 8004476:	461d      	mov	r5, r3
 8004478:	4643      	mov	r3, r8
 800447a:	18e3      	adds	r3, r4, r3
 800447c:	603b      	str	r3, [r7, #0]
 800447e:	464b      	mov	r3, r9
 8004480:	eb45 0303 	adc.w	r3, r5, r3
 8004484:	607b      	str	r3, [r7, #4]
 8004486:	f04f 0200 	mov.w	r2, #0
 800448a:	f04f 0300 	mov.w	r3, #0
 800448e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004492:	4629      	mov	r1, r5
 8004494:	028b      	lsls	r3, r1, #10
 8004496:	4621      	mov	r1, r4
 8004498:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800449c:	4621      	mov	r1, r4
 800449e:	028a      	lsls	r2, r1, #10
 80044a0:	4610      	mov	r0, r2
 80044a2:	4619      	mov	r1, r3
 80044a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044a6:	2200      	movs	r2, #0
 80044a8:	61bb      	str	r3, [r7, #24]
 80044aa:	61fa      	str	r2, [r7, #28]
 80044ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044b0:	f7fc fb8c 	bl	8000bcc <__aeabi_uldivmod>
 80044b4:	4602      	mov	r2, r0
 80044b6:	460b      	mov	r3, r1
 80044b8:	4613      	mov	r3, r2
 80044ba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80044bc:	4b0b      	ldr	r3, [pc, #44]	; (80044ec <HAL_RCC_GetSysClockFreq+0x200>)
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	0c1b      	lsrs	r3, r3, #16
 80044c2:	f003 0303 	and.w	r3, r3, #3
 80044c6:	3301      	adds	r3, #1
 80044c8:	005b      	lsls	r3, r3, #1
 80044ca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80044cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80044d6:	e002      	b.n	80044de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044d8:	4b05      	ldr	r3, [pc, #20]	; (80044f0 <HAL_RCC_GetSysClockFreq+0x204>)
 80044da:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80044dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3750      	adds	r7, #80	; 0x50
 80044e4:	46bd      	mov	sp, r7
 80044e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044ea:	bf00      	nop
 80044ec:	40023800 	.word	0x40023800
 80044f0:	00f42400 	.word	0x00f42400
 80044f4:	007a1200 	.word	0x007a1200

080044f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044f8:	b480      	push	{r7}
 80044fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044fc:	4b03      	ldr	r3, [pc, #12]	; (800450c <HAL_RCC_GetHCLKFreq+0x14>)
 80044fe:	681b      	ldr	r3, [r3, #0]
}
 8004500:	4618      	mov	r0, r3
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	2000000c 	.word	0x2000000c

08004510 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004514:	f7ff fff0 	bl	80044f8 <HAL_RCC_GetHCLKFreq>
 8004518:	4602      	mov	r2, r0
 800451a:	4b05      	ldr	r3, [pc, #20]	; (8004530 <HAL_RCC_GetPCLK1Freq+0x20>)
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	0a9b      	lsrs	r3, r3, #10
 8004520:	f003 0307 	and.w	r3, r3, #7
 8004524:	4903      	ldr	r1, [pc, #12]	; (8004534 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004526:	5ccb      	ldrb	r3, [r1, r3]
 8004528:	fa22 f303 	lsr.w	r3, r2, r3
}
 800452c:	4618      	mov	r0, r3
 800452e:	bd80      	pop	{r7, pc}
 8004530:	40023800 	.word	0x40023800
 8004534:	08008348 	.word	0x08008348

08004538 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800453c:	f7ff ffdc 	bl	80044f8 <HAL_RCC_GetHCLKFreq>
 8004540:	4602      	mov	r2, r0
 8004542:	4b05      	ldr	r3, [pc, #20]	; (8004558 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	0b5b      	lsrs	r3, r3, #13
 8004548:	f003 0307 	and.w	r3, r3, #7
 800454c:	4903      	ldr	r1, [pc, #12]	; (800455c <HAL_RCC_GetPCLK2Freq+0x24>)
 800454e:	5ccb      	ldrb	r3, [r1, r3]
 8004550:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004554:	4618      	mov	r0, r3
 8004556:	bd80      	pop	{r7, pc}
 8004558:	40023800 	.word	0x40023800
 800455c:	08008348 	.word	0x08008348

08004560 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b082      	sub	sp, #8
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d101      	bne.n	8004572 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e041      	b.n	80045f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004578:	b2db      	uxtb	r3, r3
 800457a:	2b00      	cmp	r3, #0
 800457c:	d106      	bne.n	800458c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f7fe f912 	bl	80027b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2202      	movs	r2, #2
 8004590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	3304      	adds	r3, #4
 800459c:	4619      	mov	r1, r3
 800459e:	4610      	mov	r0, r2
 80045a0:	f000 fe94 	bl	80052cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3708      	adds	r7, #8
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
	...

08004600 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004600:	b480      	push	{r7}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800460e:	b2db      	uxtb	r3, r3
 8004610:	2b01      	cmp	r3, #1
 8004612:	d001      	beq.n	8004618 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e044      	b.n	80046a2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2202      	movs	r2, #2
 800461c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68da      	ldr	r2, [r3, #12]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f042 0201 	orr.w	r2, r2, #1
 800462e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a1e      	ldr	r2, [pc, #120]	; (80046b0 <HAL_TIM_Base_Start_IT+0xb0>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d018      	beq.n	800466c <HAL_TIM_Base_Start_IT+0x6c>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004642:	d013      	beq.n	800466c <HAL_TIM_Base_Start_IT+0x6c>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a1a      	ldr	r2, [pc, #104]	; (80046b4 <HAL_TIM_Base_Start_IT+0xb4>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d00e      	beq.n	800466c <HAL_TIM_Base_Start_IT+0x6c>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a19      	ldr	r2, [pc, #100]	; (80046b8 <HAL_TIM_Base_Start_IT+0xb8>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d009      	beq.n	800466c <HAL_TIM_Base_Start_IT+0x6c>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a17      	ldr	r2, [pc, #92]	; (80046bc <HAL_TIM_Base_Start_IT+0xbc>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d004      	beq.n	800466c <HAL_TIM_Base_Start_IT+0x6c>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a16      	ldr	r2, [pc, #88]	; (80046c0 <HAL_TIM_Base_Start_IT+0xc0>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d111      	bne.n	8004690 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f003 0307 	and.w	r3, r3, #7
 8004676:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2b06      	cmp	r3, #6
 800467c:	d010      	beq.n	80046a0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f042 0201 	orr.w	r2, r2, #1
 800468c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800468e:	e007      	b.n	80046a0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f042 0201 	orr.w	r2, r2, #1
 800469e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3714      	adds	r7, #20
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	40010000 	.word	0x40010000
 80046b4:	40000400 	.word	0x40000400
 80046b8:	40000800 	.word	0x40000800
 80046bc:	40000c00 	.word	0x40000c00
 80046c0:	40014000 	.word	0x40014000

080046c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b082      	sub	sp, #8
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d101      	bne.n	80046d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e041      	b.n	800475a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d106      	bne.n	80046f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f7fe f90a 	bl	8002904 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2202      	movs	r2, #2
 80046f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	3304      	adds	r3, #4
 8004700:	4619      	mov	r1, r3
 8004702:	4610      	mov	r0, r2
 8004704:	f000 fde2 	bl	80052cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3708      	adds	r7, #8
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
	...

08004764 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d109      	bne.n	8004788 <HAL_TIM_PWM_Start+0x24>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800477a:	b2db      	uxtb	r3, r3
 800477c:	2b01      	cmp	r3, #1
 800477e:	bf14      	ite	ne
 8004780:	2301      	movne	r3, #1
 8004782:	2300      	moveq	r3, #0
 8004784:	b2db      	uxtb	r3, r3
 8004786:	e022      	b.n	80047ce <HAL_TIM_PWM_Start+0x6a>
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	2b04      	cmp	r3, #4
 800478c:	d109      	bne.n	80047a2 <HAL_TIM_PWM_Start+0x3e>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004794:	b2db      	uxtb	r3, r3
 8004796:	2b01      	cmp	r3, #1
 8004798:	bf14      	ite	ne
 800479a:	2301      	movne	r3, #1
 800479c:	2300      	moveq	r3, #0
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	e015      	b.n	80047ce <HAL_TIM_PWM_Start+0x6a>
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	2b08      	cmp	r3, #8
 80047a6:	d109      	bne.n	80047bc <HAL_TIM_PWM_Start+0x58>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	bf14      	ite	ne
 80047b4:	2301      	movne	r3, #1
 80047b6:	2300      	moveq	r3, #0
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	e008      	b.n	80047ce <HAL_TIM_PWM_Start+0x6a>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	bf14      	ite	ne
 80047c8:	2301      	movne	r3, #1
 80047ca:	2300      	moveq	r3, #0
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d001      	beq.n	80047d6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e068      	b.n	80048a8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d104      	bne.n	80047e6 <HAL_TIM_PWM_Start+0x82>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2202      	movs	r2, #2
 80047e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047e4:	e013      	b.n	800480e <HAL_TIM_PWM_Start+0xaa>
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	2b04      	cmp	r3, #4
 80047ea:	d104      	bne.n	80047f6 <HAL_TIM_PWM_Start+0x92>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2202      	movs	r2, #2
 80047f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047f4:	e00b      	b.n	800480e <HAL_TIM_PWM_Start+0xaa>
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	2b08      	cmp	r3, #8
 80047fa:	d104      	bne.n	8004806 <HAL_TIM_PWM_Start+0xa2>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2202      	movs	r2, #2
 8004800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004804:	e003      	b.n	800480e <HAL_TIM_PWM_Start+0xaa>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2202      	movs	r2, #2
 800480a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2201      	movs	r2, #1
 8004814:	6839      	ldr	r1, [r7, #0]
 8004816:	4618      	mov	r0, r3
 8004818:	f001 f91c 	bl	8005a54 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a23      	ldr	r2, [pc, #140]	; (80048b0 <HAL_TIM_PWM_Start+0x14c>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d107      	bne.n	8004836 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004834:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a1d      	ldr	r2, [pc, #116]	; (80048b0 <HAL_TIM_PWM_Start+0x14c>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d018      	beq.n	8004872 <HAL_TIM_PWM_Start+0x10e>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004848:	d013      	beq.n	8004872 <HAL_TIM_PWM_Start+0x10e>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a19      	ldr	r2, [pc, #100]	; (80048b4 <HAL_TIM_PWM_Start+0x150>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d00e      	beq.n	8004872 <HAL_TIM_PWM_Start+0x10e>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a17      	ldr	r2, [pc, #92]	; (80048b8 <HAL_TIM_PWM_Start+0x154>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d009      	beq.n	8004872 <HAL_TIM_PWM_Start+0x10e>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a16      	ldr	r2, [pc, #88]	; (80048bc <HAL_TIM_PWM_Start+0x158>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d004      	beq.n	8004872 <HAL_TIM_PWM_Start+0x10e>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a14      	ldr	r2, [pc, #80]	; (80048c0 <HAL_TIM_PWM_Start+0x15c>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d111      	bne.n	8004896 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f003 0307 	and.w	r3, r3, #7
 800487c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2b06      	cmp	r3, #6
 8004882:	d010      	beq.n	80048a6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f042 0201 	orr.w	r2, r2, #1
 8004892:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004894:	e007      	b.n	80048a6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f042 0201 	orr.w	r2, r2, #1
 80048a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3710      	adds	r7, #16
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	40010000 	.word	0x40010000
 80048b4:	40000400 	.word	0x40000400
 80048b8:	40000800 	.word	0x40000800
 80048bc:	40000c00 	.word	0x40000c00
 80048c0:	40014000 	.word	0x40014000

080048c4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b082      	sub	sp, #8
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d101      	bne.n	80048d6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e041      	b.n	800495a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d106      	bne.n	80048f0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 f839 	bl	8004962 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2202      	movs	r2, #2
 80048f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	3304      	adds	r3, #4
 8004900:	4619      	mov	r1, r3
 8004902:	4610      	mov	r0, r2
 8004904:	f000 fce2 	bl	80052cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	3708      	adds	r7, #8
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}

08004962 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004962:	b480      	push	{r7}
 8004964:	b083      	sub	sp, #12
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800496a:	bf00      	nop
 800496c:	370c      	adds	r7, #12
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
	...

08004978 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004982:	2300      	movs	r3, #0
 8004984:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d104      	bne.n	8004996 <HAL_TIM_IC_Start_IT+0x1e>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004992:	b2db      	uxtb	r3, r3
 8004994:	e013      	b.n	80049be <HAL_TIM_IC_Start_IT+0x46>
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	2b04      	cmp	r3, #4
 800499a:	d104      	bne.n	80049a6 <HAL_TIM_IC_Start_IT+0x2e>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	e00b      	b.n	80049be <HAL_TIM_IC_Start_IT+0x46>
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	2b08      	cmp	r3, #8
 80049aa:	d104      	bne.n	80049b6 <HAL_TIM_IC_Start_IT+0x3e>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	e003      	b.n	80049be <HAL_TIM_IC_Start_IT+0x46>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d104      	bne.n	80049d0 <HAL_TIM_IC_Start_IT+0x58>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	e013      	b.n	80049f8 <HAL_TIM_IC_Start_IT+0x80>
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	2b04      	cmp	r3, #4
 80049d4:	d104      	bne.n	80049e0 <HAL_TIM_IC_Start_IT+0x68>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	e00b      	b.n	80049f8 <HAL_TIM_IC_Start_IT+0x80>
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	2b08      	cmp	r3, #8
 80049e4:	d104      	bne.n	80049f0 <HAL_TIM_IC_Start_IT+0x78>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	e003      	b.n	80049f8 <HAL_TIM_IC_Start_IT+0x80>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80049fa:	7bbb      	ldrb	r3, [r7, #14]
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d102      	bne.n	8004a06 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a00:	7b7b      	ldrb	r3, [r7, #13]
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d001      	beq.n	8004a0a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e0c2      	b.n	8004b90 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d104      	bne.n	8004a1a <HAL_TIM_IC_Start_IT+0xa2>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2202      	movs	r2, #2
 8004a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a18:	e013      	b.n	8004a42 <HAL_TIM_IC_Start_IT+0xca>
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	2b04      	cmp	r3, #4
 8004a1e:	d104      	bne.n	8004a2a <HAL_TIM_IC_Start_IT+0xb2>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2202      	movs	r2, #2
 8004a24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a28:	e00b      	b.n	8004a42 <HAL_TIM_IC_Start_IT+0xca>
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	2b08      	cmp	r3, #8
 8004a2e:	d104      	bne.n	8004a3a <HAL_TIM_IC_Start_IT+0xc2>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2202      	movs	r2, #2
 8004a34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a38:	e003      	b.n	8004a42 <HAL_TIM_IC_Start_IT+0xca>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2202      	movs	r2, #2
 8004a3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d104      	bne.n	8004a52 <HAL_TIM_IC_Start_IT+0xda>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2202      	movs	r2, #2
 8004a4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a50:	e013      	b.n	8004a7a <HAL_TIM_IC_Start_IT+0x102>
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	2b04      	cmp	r3, #4
 8004a56:	d104      	bne.n	8004a62 <HAL_TIM_IC_Start_IT+0xea>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2202      	movs	r2, #2
 8004a5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a60:	e00b      	b.n	8004a7a <HAL_TIM_IC_Start_IT+0x102>
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	2b08      	cmp	r3, #8
 8004a66:	d104      	bne.n	8004a72 <HAL_TIM_IC_Start_IT+0xfa>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2202      	movs	r2, #2
 8004a6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a70:	e003      	b.n	8004a7a <HAL_TIM_IC_Start_IT+0x102>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2202      	movs	r2, #2
 8004a76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	2b0c      	cmp	r3, #12
 8004a7e:	d841      	bhi.n	8004b04 <HAL_TIM_IC_Start_IT+0x18c>
 8004a80:	a201      	add	r2, pc, #4	; (adr r2, 8004a88 <HAL_TIM_IC_Start_IT+0x110>)
 8004a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a86:	bf00      	nop
 8004a88:	08004abd 	.word	0x08004abd
 8004a8c:	08004b05 	.word	0x08004b05
 8004a90:	08004b05 	.word	0x08004b05
 8004a94:	08004b05 	.word	0x08004b05
 8004a98:	08004acf 	.word	0x08004acf
 8004a9c:	08004b05 	.word	0x08004b05
 8004aa0:	08004b05 	.word	0x08004b05
 8004aa4:	08004b05 	.word	0x08004b05
 8004aa8:	08004ae1 	.word	0x08004ae1
 8004aac:	08004b05 	.word	0x08004b05
 8004ab0:	08004b05 	.word	0x08004b05
 8004ab4:	08004b05 	.word	0x08004b05
 8004ab8:	08004af3 	.word	0x08004af3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	68da      	ldr	r2, [r3, #12]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f042 0202 	orr.w	r2, r2, #2
 8004aca:	60da      	str	r2, [r3, #12]
      break;
 8004acc:	e01d      	b.n	8004b0a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68da      	ldr	r2, [r3, #12]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f042 0204 	orr.w	r2, r2, #4
 8004adc:	60da      	str	r2, [r3, #12]
      break;
 8004ade:	e014      	b.n	8004b0a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	68da      	ldr	r2, [r3, #12]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f042 0208 	orr.w	r2, r2, #8
 8004aee:	60da      	str	r2, [r3, #12]
      break;
 8004af0:	e00b      	b.n	8004b0a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68da      	ldr	r2, [r3, #12]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f042 0210 	orr.w	r2, r2, #16
 8004b00:	60da      	str	r2, [r3, #12]
      break;
 8004b02:	e002      	b.n	8004b0a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	73fb      	strb	r3, [r7, #15]
      break;
 8004b08:	bf00      	nop
  }

  if (status == HAL_OK)
 8004b0a:	7bfb      	ldrb	r3, [r7, #15]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d13e      	bne.n	8004b8e <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2201      	movs	r2, #1
 8004b16:	6839      	ldr	r1, [r7, #0]
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f000 ff9b 	bl	8005a54 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a1d      	ldr	r2, [pc, #116]	; (8004b98 <HAL_TIM_IC_Start_IT+0x220>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d018      	beq.n	8004b5a <HAL_TIM_IC_Start_IT+0x1e2>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b30:	d013      	beq.n	8004b5a <HAL_TIM_IC_Start_IT+0x1e2>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a19      	ldr	r2, [pc, #100]	; (8004b9c <HAL_TIM_IC_Start_IT+0x224>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d00e      	beq.n	8004b5a <HAL_TIM_IC_Start_IT+0x1e2>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a17      	ldr	r2, [pc, #92]	; (8004ba0 <HAL_TIM_IC_Start_IT+0x228>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d009      	beq.n	8004b5a <HAL_TIM_IC_Start_IT+0x1e2>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a16      	ldr	r2, [pc, #88]	; (8004ba4 <HAL_TIM_IC_Start_IT+0x22c>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d004      	beq.n	8004b5a <HAL_TIM_IC_Start_IT+0x1e2>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a14      	ldr	r2, [pc, #80]	; (8004ba8 <HAL_TIM_IC_Start_IT+0x230>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d111      	bne.n	8004b7e <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	f003 0307 	and.w	r3, r3, #7
 8004b64:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	2b06      	cmp	r3, #6
 8004b6a:	d010      	beq.n	8004b8e <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f042 0201 	orr.w	r2, r2, #1
 8004b7a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b7c:	e007      	b.n	8004b8e <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f042 0201 	orr.w	r2, r2, #1
 8004b8c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3710      	adds	r7, #16
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	40010000 	.word	0x40010000
 8004b9c:	40000400 	.word	0x40000400
 8004ba0:	40000800 	.word	0x40000800
 8004ba4:	40000c00 	.word	0x40000c00
 8004ba8:	40014000 	.word	0x40014000

08004bac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	691b      	ldr	r3, [r3, #16]
 8004bba:	f003 0302 	and.w	r3, r3, #2
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d122      	bne.n	8004c08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	f003 0302 	and.w	r3, r3, #2
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d11b      	bne.n	8004c08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f06f 0202 	mvn.w	r2, #2
 8004bd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	f003 0303 	and.w	r3, r3, #3
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d003      	beq.n	8004bf6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f7fc fc98 	bl	8001524 <HAL_TIM_IC_CaptureCallback>
 8004bf4:	e005      	b.n	8004c02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 fb4a 	bl	8005290 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f000 fb51 	bl	80052a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	f003 0304 	and.w	r3, r3, #4
 8004c12:	2b04      	cmp	r3, #4
 8004c14:	d122      	bne.n	8004c5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	f003 0304 	and.w	r3, r3, #4
 8004c20:	2b04      	cmp	r3, #4
 8004c22:	d11b      	bne.n	8004c5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f06f 0204 	mvn.w	r2, #4
 8004c2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2202      	movs	r2, #2
 8004c32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d003      	beq.n	8004c4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f7fc fc6e 	bl	8001524 <HAL_TIM_IC_CaptureCallback>
 8004c48:	e005      	b.n	8004c56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 fb20 	bl	8005290 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 fb27 	bl	80052a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	f003 0308 	and.w	r3, r3, #8
 8004c66:	2b08      	cmp	r3, #8
 8004c68:	d122      	bne.n	8004cb0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	f003 0308 	and.w	r3, r3, #8
 8004c74:	2b08      	cmp	r3, #8
 8004c76:	d11b      	bne.n	8004cb0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f06f 0208 	mvn.w	r2, #8
 8004c80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2204      	movs	r2, #4
 8004c86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	69db      	ldr	r3, [r3, #28]
 8004c8e:	f003 0303 	and.w	r3, r3, #3
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d003      	beq.n	8004c9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f7fc fc44 	bl	8001524 <HAL_TIM_IC_CaptureCallback>
 8004c9c:	e005      	b.n	8004caa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 faf6 	bl	8005290 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f000 fafd 	bl	80052a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	f003 0310 	and.w	r3, r3, #16
 8004cba:	2b10      	cmp	r3, #16
 8004cbc:	d122      	bne.n	8004d04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	f003 0310 	and.w	r3, r3, #16
 8004cc8:	2b10      	cmp	r3, #16
 8004cca:	d11b      	bne.n	8004d04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f06f 0210 	mvn.w	r2, #16
 8004cd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2208      	movs	r2, #8
 8004cda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	69db      	ldr	r3, [r3, #28]
 8004ce2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d003      	beq.n	8004cf2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f7fc fc1a 	bl	8001524 <HAL_TIM_IC_CaptureCallback>
 8004cf0:	e005      	b.n	8004cfe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 facc 	bl	8005290 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f000 fad3 	bl	80052a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	f003 0301 	and.w	r3, r3, #1
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d10e      	bne.n	8004d30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	f003 0301 	and.w	r3, r3, #1
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d107      	bne.n	8004d30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f06f 0201 	mvn.w	r2, #1
 8004d28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f7fc fb30 	bl	8001390 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d3a:	2b80      	cmp	r3, #128	; 0x80
 8004d3c:	d10e      	bne.n	8004d5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d48:	2b80      	cmp	r3, #128	; 0x80
 8004d4a:	d107      	bne.n	8004d5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f000 ff1a 	bl	8005b90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d66:	2b40      	cmp	r3, #64	; 0x40
 8004d68:	d10e      	bne.n	8004d88 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d74:	2b40      	cmp	r3, #64	; 0x40
 8004d76:	d107      	bne.n	8004d88 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 fa98 	bl	80052b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	691b      	ldr	r3, [r3, #16]
 8004d8e:	f003 0320 	and.w	r3, r3, #32
 8004d92:	2b20      	cmp	r3, #32
 8004d94:	d10e      	bne.n	8004db4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	f003 0320 	and.w	r3, r3, #32
 8004da0:	2b20      	cmp	r3, #32
 8004da2:	d107      	bne.n	8004db4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f06f 0220 	mvn.w	r2, #32
 8004dac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 fee4 	bl	8005b7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004db4:	bf00      	nop
 8004db6:	3708      	adds	r7, #8
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b086      	sub	sp, #24
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d101      	bne.n	8004dda <HAL_TIM_IC_ConfigChannel+0x1e>
 8004dd6:	2302      	movs	r3, #2
 8004dd8:	e088      	b.n	8004eec <HAL_TIM_IC_ConfigChannel+0x130>
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d11b      	bne.n	8004e20 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6818      	ldr	r0, [r3, #0]
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	6819      	ldr	r1, [r3, #0]
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	685a      	ldr	r2, [r3, #4]
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	f000 fc74 	bl	80056e4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	699a      	ldr	r2, [r3, #24]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f022 020c 	bic.w	r2, r2, #12
 8004e0a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	6999      	ldr	r1, [r3, #24]
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	689a      	ldr	r2, [r3, #8]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	619a      	str	r2, [r3, #24]
 8004e1e:	e060      	b.n	8004ee2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2b04      	cmp	r3, #4
 8004e24:	d11c      	bne.n	8004e60 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6818      	ldr	r0, [r3, #0]
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	6819      	ldr	r1, [r3, #0]
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	685a      	ldr	r2, [r3, #4]
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	f000 fcec 	bl	8005812 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	699a      	ldr	r2, [r3, #24]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004e48:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	6999      	ldr	r1, [r3, #24]
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	021a      	lsls	r2, r3, #8
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	430a      	orrs	r2, r1
 8004e5c:	619a      	str	r2, [r3, #24]
 8004e5e:	e040      	b.n	8004ee2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2b08      	cmp	r3, #8
 8004e64:	d11b      	bne.n	8004e9e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6818      	ldr	r0, [r3, #0]
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	6819      	ldr	r1, [r3, #0]
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	685a      	ldr	r2, [r3, #4]
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	f000 fd39 	bl	80058ec <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	69da      	ldr	r2, [r3, #28]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f022 020c 	bic.w	r2, r2, #12
 8004e88:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	69d9      	ldr	r1, [r3, #28]
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	689a      	ldr	r2, [r3, #8]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	430a      	orrs	r2, r1
 8004e9a:	61da      	str	r2, [r3, #28]
 8004e9c:	e021      	b.n	8004ee2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2b0c      	cmp	r3, #12
 8004ea2:	d11c      	bne.n	8004ede <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6818      	ldr	r0, [r3, #0]
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	6819      	ldr	r1, [r3, #0]
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	685a      	ldr	r2, [r3, #4]
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	f000 fd56 	bl	8005964 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	69da      	ldr	r2, [r3, #28]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004ec6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	69d9      	ldr	r1, [r3, #28]
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	021a      	lsls	r2, r3, #8
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	430a      	orrs	r2, r1
 8004eda:	61da      	str	r2, [r3, #28]
 8004edc:	e001      	b.n	8004ee2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004eea:	7dfb      	ldrb	r3, [r7, #23]
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3718      	adds	r7, #24
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b086      	sub	sp, #24
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f00:	2300      	movs	r3, #0
 8004f02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d101      	bne.n	8004f12 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f0e:	2302      	movs	r3, #2
 8004f10:	e0ae      	b.n	8005070 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2201      	movs	r2, #1
 8004f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2b0c      	cmp	r3, #12
 8004f1e:	f200 809f 	bhi.w	8005060 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004f22:	a201      	add	r2, pc, #4	; (adr r2, 8004f28 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f28:	08004f5d 	.word	0x08004f5d
 8004f2c:	08005061 	.word	0x08005061
 8004f30:	08005061 	.word	0x08005061
 8004f34:	08005061 	.word	0x08005061
 8004f38:	08004f9d 	.word	0x08004f9d
 8004f3c:	08005061 	.word	0x08005061
 8004f40:	08005061 	.word	0x08005061
 8004f44:	08005061 	.word	0x08005061
 8004f48:	08004fdf 	.word	0x08004fdf
 8004f4c:	08005061 	.word	0x08005061
 8004f50:	08005061 	.word	0x08005061
 8004f54:	08005061 	.word	0x08005061
 8004f58:	0800501f 	.word	0x0800501f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	68b9      	ldr	r1, [r7, #8]
 8004f62:	4618      	mov	r0, r3
 8004f64:	f000 fa32 	bl	80053cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	699a      	ldr	r2, [r3, #24]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f042 0208 	orr.w	r2, r2, #8
 8004f76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	699a      	ldr	r2, [r3, #24]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f022 0204 	bic.w	r2, r2, #4
 8004f86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	6999      	ldr	r1, [r3, #24]
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	691a      	ldr	r2, [r3, #16]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	430a      	orrs	r2, r1
 8004f98:	619a      	str	r2, [r3, #24]
      break;
 8004f9a:	e064      	b.n	8005066 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	68b9      	ldr	r1, [r7, #8]
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f000 fa78 	bl	8005498 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	699a      	ldr	r2, [r3, #24]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	699a      	ldr	r2, [r3, #24]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	6999      	ldr	r1, [r3, #24]
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	691b      	ldr	r3, [r3, #16]
 8004fd2:	021a      	lsls	r2, r3, #8
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	430a      	orrs	r2, r1
 8004fda:	619a      	str	r2, [r3, #24]
      break;
 8004fdc:	e043      	b.n	8005066 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	68b9      	ldr	r1, [r7, #8]
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f000 fac3 	bl	8005570 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	69da      	ldr	r2, [r3, #28]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f042 0208 	orr.w	r2, r2, #8
 8004ff8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	69da      	ldr	r2, [r3, #28]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f022 0204 	bic.w	r2, r2, #4
 8005008:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	69d9      	ldr	r1, [r3, #28]
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	691a      	ldr	r2, [r3, #16]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	430a      	orrs	r2, r1
 800501a:	61da      	str	r2, [r3, #28]
      break;
 800501c:	e023      	b.n	8005066 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	68b9      	ldr	r1, [r7, #8]
 8005024:	4618      	mov	r0, r3
 8005026:	f000 fb0d 	bl	8005644 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	69da      	ldr	r2, [r3, #28]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005038:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	69da      	ldr	r2, [r3, #28]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005048:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	69d9      	ldr	r1, [r3, #28]
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	691b      	ldr	r3, [r3, #16]
 8005054:	021a      	lsls	r2, r3, #8
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	430a      	orrs	r2, r1
 800505c:	61da      	str	r2, [r3, #28]
      break;
 800505e:	e002      	b.n	8005066 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	75fb      	strb	r3, [r7, #23]
      break;
 8005064:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2200      	movs	r2, #0
 800506a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800506e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005070:	4618      	mov	r0, r3
 8005072:	3718      	adds	r7, #24
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005082:	2300      	movs	r3, #0
 8005084:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800508c:	2b01      	cmp	r3, #1
 800508e:	d101      	bne.n	8005094 <HAL_TIM_ConfigClockSource+0x1c>
 8005090:	2302      	movs	r3, #2
 8005092:	e0b4      	b.n	80051fe <HAL_TIM_ConfigClockSource+0x186>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2202      	movs	r2, #2
 80050a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80050b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68ba      	ldr	r2, [r7, #8]
 80050c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050cc:	d03e      	beq.n	800514c <HAL_TIM_ConfigClockSource+0xd4>
 80050ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050d2:	f200 8087 	bhi.w	80051e4 <HAL_TIM_ConfigClockSource+0x16c>
 80050d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050da:	f000 8086 	beq.w	80051ea <HAL_TIM_ConfigClockSource+0x172>
 80050de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050e2:	d87f      	bhi.n	80051e4 <HAL_TIM_ConfigClockSource+0x16c>
 80050e4:	2b70      	cmp	r3, #112	; 0x70
 80050e6:	d01a      	beq.n	800511e <HAL_TIM_ConfigClockSource+0xa6>
 80050e8:	2b70      	cmp	r3, #112	; 0x70
 80050ea:	d87b      	bhi.n	80051e4 <HAL_TIM_ConfigClockSource+0x16c>
 80050ec:	2b60      	cmp	r3, #96	; 0x60
 80050ee:	d050      	beq.n	8005192 <HAL_TIM_ConfigClockSource+0x11a>
 80050f0:	2b60      	cmp	r3, #96	; 0x60
 80050f2:	d877      	bhi.n	80051e4 <HAL_TIM_ConfigClockSource+0x16c>
 80050f4:	2b50      	cmp	r3, #80	; 0x50
 80050f6:	d03c      	beq.n	8005172 <HAL_TIM_ConfigClockSource+0xfa>
 80050f8:	2b50      	cmp	r3, #80	; 0x50
 80050fa:	d873      	bhi.n	80051e4 <HAL_TIM_ConfigClockSource+0x16c>
 80050fc:	2b40      	cmp	r3, #64	; 0x40
 80050fe:	d058      	beq.n	80051b2 <HAL_TIM_ConfigClockSource+0x13a>
 8005100:	2b40      	cmp	r3, #64	; 0x40
 8005102:	d86f      	bhi.n	80051e4 <HAL_TIM_ConfigClockSource+0x16c>
 8005104:	2b30      	cmp	r3, #48	; 0x30
 8005106:	d064      	beq.n	80051d2 <HAL_TIM_ConfigClockSource+0x15a>
 8005108:	2b30      	cmp	r3, #48	; 0x30
 800510a:	d86b      	bhi.n	80051e4 <HAL_TIM_ConfigClockSource+0x16c>
 800510c:	2b20      	cmp	r3, #32
 800510e:	d060      	beq.n	80051d2 <HAL_TIM_ConfigClockSource+0x15a>
 8005110:	2b20      	cmp	r3, #32
 8005112:	d867      	bhi.n	80051e4 <HAL_TIM_ConfigClockSource+0x16c>
 8005114:	2b00      	cmp	r3, #0
 8005116:	d05c      	beq.n	80051d2 <HAL_TIM_ConfigClockSource+0x15a>
 8005118:	2b10      	cmp	r3, #16
 800511a:	d05a      	beq.n	80051d2 <HAL_TIM_ConfigClockSource+0x15a>
 800511c:	e062      	b.n	80051e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6818      	ldr	r0, [r3, #0]
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	6899      	ldr	r1, [r3, #8]
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	685a      	ldr	r2, [r3, #4]
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	f000 fc71 	bl	8005a14 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005140:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	68ba      	ldr	r2, [r7, #8]
 8005148:	609a      	str	r2, [r3, #8]
      break;
 800514a:	e04f      	b.n	80051ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6818      	ldr	r0, [r3, #0]
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	6899      	ldr	r1, [r3, #8]
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	685a      	ldr	r2, [r3, #4]
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	f000 fc5a 	bl	8005a14 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	689a      	ldr	r2, [r3, #8]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800516e:	609a      	str	r2, [r3, #8]
      break;
 8005170:	e03c      	b.n	80051ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6818      	ldr	r0, [r3, #0]
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	6859      	ldr	r1, [r3, #4]
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	461a      	mov	r2, r3
 8005180:	f000 fb18 	bl	80057b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2150      	movs	r1, #80	; 0x50
 800518a:	4618      	mov	r0, r3
 800518c:	f000 fc27 	bl	80059de <TIM_ITRx_SetConfig>
      break;
 8005190:	e02c      	b.n	80051ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6818      	ldr	r0, [r3, #0]
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	6859      	ldr	r1, [r3, #4]
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	461a      	mov	r2, r3
 80051a0:	f000 fb74 	bl	800588c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2160      	movs	r1, #96	; 0x60
 80051aa:	4618      	mov	r0, r3
 80051ac:	f000 fc17 	bl	80059de <TIM_ITRx_SetConfig>
      break;
 80051b0:	e01c      	b.n	80051ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6818      	ldr	r0, [r3, #0]
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	6859      	ldr	r1, [r3, #4]
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	461a      	mov	r2, r3
 80051c0:	f000 faf8 	bl	80057b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	2140      	movs	r1, #64	; 0x40
 80051ca:	4618      	mov	r0, r3
 80051cc:	f000 fc07 	bl	80059de <TIM_ITRx_SetConfig>
      break;
 80051d0:	e00c      	b.n	80051ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4619      	mov	r1, r3
 80051dc:	4610      	mov	r0, r2
 80051de:	f000 fbfe 	bl	80059de <TIM_ITRx_SetConfig>
      break;
 80051e2:	e003      	b.n	80051ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	73fb      	strb	r3, [r7, #15]
      break;
 80051e8:	e000      	b.n	80051ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80051ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80051fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3710      	adds	r7, #16
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
	...

08005208 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005208:	b480      	push	{r7}
 800520a:	b085      	sub	sp, #20
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005212:	2300      	movs	r3, #0
 8005214:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	2b0c      	cmp	r3, #12
 800521a:	d831      	bhi.n	8005280 <HAL_TIM_ReadCapturedValue+0x78>
 800521c:	a201      	add	r2, pc, #4	; (adr r2, 8005224 <HAL_TIM_ReadCapturedValue+0x1c>)
 800521e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005222:	bf00      	nop
 8005224:	08005259 	.word	0x08005259
 8005228:	08005281 	.word	0x08005281
 800522c:	08005281 	.word	0x08005281
 8005230:	08005281 	.word	0x08005281
 8005234:	08005263 	.word	0x08005263
 8005238:	08005281 	.word	0x08005281
 800523c:	08005281 	.word	0x08005281
 8005240:	08005281 	.word	0x08005281
 8005244:	0800526d 	.word	0x0800526d
 8005248:	08005281 	.word	0x08005281
 800524c:	08005281 	.word	0x08005281
 8005250:	08005281 	.word	0x08005281
 8005254:	08005277 	.word	0x08005277
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800525e:	60fb      	str	r3, [r7, #12]

      break;
 8005260:	e00f      	b.n	8005282 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005268:	60fb      	str	r3, [r7, #12]

      break;
 800526a:	e00a      	b.n	8005282 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005272:	60fb      	str	r3, [r7, #12]

      break;
 8005274:	e005      	b.n	8005282 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527c:	60fb      	str	r3, [r7, #12]

      break;
 800527e:	e000      	b.n	8005282 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005280:	bf00      	nop
  }

  return tmpreg;
 8005282:	68fb      	ldr	r3, [r7, #12]
}
 8005284:	4618      	mov	r0, r3
 8005286:	3714      	adds	r7, #20
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005298:	bf00      	nop
 800529a:	370c      	adds	r7, #12
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052ac:	bf00      	nop
 80052ae:	370c      	adds	r7, #12
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052c0:	bf00      	nop
 80052c2:	370c      	adds	r7, #12
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b085      	sub	sp, #20
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a34      	ldr	r2, [pc, #208]	; (80053b0 <TIM_Base_SetConfig+0xe4>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d00f      	beq.n	8005304 <TIM_Base_SetConfig+0x38>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052ea:	d00b      	beq.n	8005304 <TIM_Base_SetConfig+0x38>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a31      	ldr	r2, [pc, #196]	; (80053b4 <TIM_Base_SetConfig+0xe8>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d007      	beq.n	8005304 <TIM_Base_SetConfig+0x38>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a30      	ldr	r2, [pc, #192]	; (80053b8 <TIM_Base_SetConfig+0xec>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d003      	beq.n	8005304 <TIM_Base_SetConfig+0x38>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4a2f      	ldr	r2, [pc, #188]	; (80053bc <TIM_Base_SetConfig+0xf0>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d108      	bne.n	8005316 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800530a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	4313      	orrs	r3, r2
 8005314:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a25      	ldr	r2, [pc, #148]	; (80053b0 <TIM_Base_SetConfig+0xe4>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d01b      	beq.n	8005356 <TIM_Base_SetConfig+0x8a>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005324:	d017      	beq.n	8005356 <TIM_Base_SetConfig+0x8a>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a22      	ldr	r2, [pc, #136]	; (80053b4 <TIM_Base_SetConfig+0xe8>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d013      	beq.n	8005356 <TIM_Base_SetConfig+0x8a>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a21      	ldr	r2, [pc, #132]	; (80053b8 <TIM_Base_SetConfig+0xec>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d00f      	beq.n	8005356 <TIM_Base_SetConfig+0x8a>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a20      	ldr	r2, [pc, #128]	; (80053bc <TIM_Base_SetConfig+0xf0>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d00b      	beq.n	8005356 <TIM_Base_SetConfig+0x8a>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a1f      	ldr	r2, [pc, #124]	; (80053c0 <TIM_Base_SetConfig+0xf4>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d007      	beq.n	8005356 <TIM_Base_SetConfig+0x8a>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a1e      	ldr	r2, [pc, #120]	; (80053c4 <TIM_Base_SetConfig+0xf8>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d003      	beq.n	8005356 <TIM_Base_SetConfig+0x8a>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a1d      	ldr	r2, [pc, #116]	; (80053c8 <TIM_Base_SetConfig+0xfc>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d108      	bne.n	8005368 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800535c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	68fa      	ldr	r2, [r7, #12]
 8005364:	4313      	orrs	r3, r2
 8005366:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	695b      	ldr	r3, [r3, #20]
 8005372:	4313      	orrs	r3, r2
 8005374:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	689a      	ldr	r2, [r3, #8]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a08      	ldr	r2, [pc, #32]	; (80053b0 <TIM_Base_SetConfig+0xe4>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d103      	bne.n	800539c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	691a      	ldr	r2, [r3, #16]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	615a      	str	r2, [r3, #20]
}
 80053a2:	bf00      	nop
 80053a4:	3714      	adds	r7, #20
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr
 80053ae:	bf00      	nop
 80053b0:	40010000 	.word	0x40010000
 80053b4:	40000400 	.word	0x40000400
 80053b8:	40000800 	.word	0x40000800
 80053bc:	40000c00 	.word	0x40000c00
 80053c0:	40014000 	.word	0x40014000
 80053c4:	40014400 	.word	0x40014400
 80053c8:	40014800 	.word	0x40014800

080053cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b087      	sub	sp, #28
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a1b      	ldr	r3, [r3, #32]
 80053da:	f023 0201 	bic.w	r2, r3, #1
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a1b      	ldr	r3, [r3, #32]
 80053e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	699b      	ldr	r3, [r3, #24]
 80053f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f023 0303 	bic.w	r3, r3, #3
 8005402:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68fa      	ldr	r2, [r7, #12]
 800540a:	4313      	orrs	r3, r2
 800540c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	f023 0302 	bic.w	r3, r3, #2
 8005414:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	697a      	ldr	r2, [r7, #20]
 800541c:	4313      	orrs	r3, r2
 800541e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	4a1c      	ldr	r2, [pc, #112]	; (8005494 <TIM_OC1_SetConfig+0xc8>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d10c      	bne.n	8005442 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	f023 0308 	bic.w	r3, r3, #8
 800542e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	697a      	ldr	r2, [r7, #20]
 8005436:	4313      	orrs	r3, r2
 8005438:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	f023 0304 	bic.w	r3, r3, #4
 8005440:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a13      	ldr	r2, [pc, #76]	; (8005494 <TIM_OC1_SetConfig+0xc8>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d111      	bne.n	800546e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005450:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005458:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	695b      	ldr	r3, [r3, #20]
 800545e:	693a      	ldr	r2, [r7, #16]
 8005460:	4313      	orrs	r3, r2
 8005462:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	699b      	ldr	r3, [r3, #24]
 8005468:	693a      	ldr	r2, [r7, #16]
 800546a:	4313      	orrs	r3, r2
 800546c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	693a      	ldr	r2, [r7, #16]
 8005472:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	68fa      	ldr	r2, [r7, #12]
 8005478:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	685a      	ldr	r2, [r3, #4]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	697a      	ldr	r2, [r7, #20]
 8005486:	621a      	str	r2, [r3, #32]
}
 8005488:	bf00      	nop
 800548a:	371c      	adds	r7, #28
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr
 8005494:	40010000 	.word	0x40010000

08005498 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005498:	b480      	push	{r7}
 800549a:	b087      	sub	sp, #28
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a1b      	ldr	r3, [r3, #32]
 80054a6:	f023 0210 	bic.w	r2, r3, #16
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a1b      	ldr	r3, [r3, #32]
 80054b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	021b      	lsls	r3, r3, #8
 80054d6:	68fa      	ldr	r2, [r7, #12]
 80054d8:	4313      	orrs	r3, r2
 80054da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	f023 0320 	bic.w	r3, r3, #32
 80054e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	011b      	lsls	r3, r3, #4
 80054ea:	697a      	ldr	r2, [r7, #20]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a1e      	ldr	r2, [pc, #120]	; (800556c <TIM_OC2_SetConfig+0xd4>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d10d      	bne.n	8005514 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	011b      	lsls	r3, r3, #4
 8005506:	697a      	ldr	r2, [r7, #20]
 8005508:	4313      	orrs	r3, r2
 800550a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005512:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4a15      	ldr	r2, [pc, #84]	; (800556c <TIM_OC2_SetConfig+0xd4>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d113      	bne.n	8005544 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005522:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800552a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	695b      	ldr	r3, [r3, #20]
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	693a      	ldr	r2, [r7, #16]
 8005534:	4313      	orrs	r3, r2
 8005536:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	699b      	ldr	r3, [r3, #24]
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	693a      	ldr	r2, [r7, #16]
 8005540:	4313      	orrs	r3, r2
 8005542:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	693a      	ldr	r2, [r7, #16]
 8005548:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	685a      	ldr	r2, [r3, #4]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	697a      	ldr	r2, [r7, #20]
 800555c:	621a      	str	r2, [r3, #32]
}
 800555e:	bf00      	nop
 8005560:	371c      	adds	r7, #28
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	40010000 	.word	0x40010000

08005570 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005570:	b480      	push	{r7}
 8005572:	b087      	sub	sp, #28
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6a1b      	ldr	r3, [r3, #32]
 800557e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a1b      	ldr	r3, [r3, #32]
 800558a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	69db      	ldr	r3, [r3, #28]
 8005596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800559e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f023 0303 	bic.w	r3, r3, #3
 80055a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	021b      	lsls	r3, r3, #8
 80055c0:	697a      	ldr	r2, [r7, #20]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4a1d      	ldr	r2, [pc, #116]	; (8005640 <TIM_OC3_SetConfig+0xd0>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d10d      	bne.n	80055ea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	021b      	lsls	r3, r3, #8
 80055dc:	697a      	ldr	r2, [r7, #20]
 80055de:	4313      	orrs	r3, r2
 80055e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a14      	ldr	r2, [pc, #80]	; (8005640 <TIM_OC3_SetConfig+0xd0>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d113      	bne.n	800561a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005600:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	695b      	ldr	r3, [r3, #20]
 8005606:	011b      	lsls	r3, r3, #4
 8005608:	693a      	ldr	r2, [r7, #16]
 800560a:	4313      	orrs	r3, r2
 800560c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	699b      	ldr	r3, [r3, #24]
 8005612:	011b      	lsls	r3, r3, #4
 8005614:	693a      	ldr	r2, [r7, #16]
 8005616:	4313      	orrs	r3, r2
 8005618:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	693a      	ldr	r2, [r7, #16]
 800561e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	68fa      	ldr	r2, [r7, #12]
 8005624:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	685a      	ldr	r2, [r3, #4]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	697a      	ldr	r2, [r7, #20]
 8005632:	621a      	str	r2, [r3, #32]
}
 8005634:	bf00      	nop
 8005636:	371c      	adds	r7, #28
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr
 8005640:	40010000 	.word	0x40010000

08005644 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005644:	b480      	push	{r7}
 8005646:	b087      	sub	sp, #28
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a1b      	ldr	r3, [r3, #32]
 8005652:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a1b      	ldr	r3, [r3, #32]
 800565e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	69db      	ldr	r3, [r3, #28]
 800566a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005672:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800567a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	021b      	lsls	r3, r3, #8
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	4313      	orrs	r3, r2
 8005686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800568e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	031b      	lsls	r3, r3, #12
 8005696:	693a      	ldr	r2, [r7, #16]
 8005698:	4313      	orrs	r3, r2
 800569a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a10      	ldr	r2, [pc, #64]	; (80056e0 <TIM_OC4_SetConfig+0x9c>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d109      	bne.n	80056b8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	695b      	ldr	r3, [r3, #20]
 80056b0:	019b      	lsls	r3, r3, #6
 80056b2:	697a      	ldr	r2, [r7, #20]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	697a      	ldr	r2, [r7, #20]
 80056bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	68fa      	ldr	r2, [r7, #12]
 80056c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	685a      	ldr	r2, [r3, #4]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	693a      	ldr	r2, [r7, #16]
 80056d0:	621a      	str	r2, [r3, #32]
}
 80056d2:	bf00      	nop
 80056d4:	371c      	adds	r7, #28
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr
 80056de:	bf00      	nop
 80056e0:	40010000 	.word	0x40010000

080056e4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b087      	sub	sp, #28
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	60f8      	str	r0, [r7, #12]
 80056ec:	60b9      	str	r1, [r7, #8]
 80056ee:	607a      	str	r2, [r7, #4]
 80056f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6a1b      	ldr	r3, [r3, #32]
 80056f6:	f023 0201 	bic.w	r2, r3, #1
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	699b      	ldr	r3, [r3, #24]
 8005702:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6a1b      	ldr	r3, [r3, #32]
 8005708:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	4a24      	ldr	r2, [pc, #144]	; (80057a0 <TIM_TI1_SetConfig+0xbc>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d013      	beq.n	800573a <TIM_TI1_SetConfig+0x56>
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005718:	d00f      	beq.n	800573a <TIM_TI1_SetConfig+0x56>
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	4a21      	ldr	r2, [pc, #132]	; (80057a4 <TIM_TI1_SetConfig+0xc0>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d00b      	beq.n	800573a <TIM_TI1_SetConfig+0x56>
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	4a20      	ldr	r2, [pc, #128]	; (80057a8 <TIM_TI1_SetConfig+0xc4>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d007      	beq.n	800573a <TIM_TI1_SetConfig+0x56>
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	4a1f      	ldr	r2, [pc, #124]	; (80057ac <TIM_TI1_SetConfig+0xc8>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d003      	beq.n	800573a <TIM_TI1_SetConfig+0x56>
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	4a1e      	ldr	r2, [pc, #120]	; (80057b0 <TIM_TI1_SetConfig+0xcc>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d101      	bne.n	800573e <TIM_TI1_SetConfig+0x5a>
 800573a:	2301      	movs	r3, #1
 800573c:	e000      	b.n	8005740 <TIM_TI1_SetConfig+0x5c>
 800573e:	2300      	movs	r3, #0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d008      	beq.n	8005756 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	f023 0303 	bic.w	r3, r3, #3
 800574a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800574c:	697a      	ldr	r2, [r7, #20]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4313      	orrs	r3, r2
 8005752:	617b      	str	r3, [r7, #20]
 8005754:	e003      	b.n	800575e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	f043 0301 	orr.w	r3, r3, #1
 800575c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005764:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	011b      	lsls	r3, r3, #4
 800576a:	b2db      	uxtb	r3, r3
 800576c:	697a      	ldr	r2, [r7, #20]
 800576e:	4313      	orrs	r3, r2
 8005770:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	f023 030a 	bic.w	r3, r3, #10
 8005778:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	f003 030a 	and.w	r3, r3, #10
 8005780:	693a      	ldr	r2, [r7, #16]
 8005782:	4313      	orrs	r3, r2
 8005784:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	697a      	ldr	r2, [r7, #20]
 800578a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	693a      	ldr	r2, [r7, #16]
 8005790:	621a      	str	r2, [r3, #32]
}
 8005792:	bf00      	nop
 8005794:	371c      	adds	r7, #28
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr
 800579e:	bf00      	nop
 80057a0:	40010000 	.word	0x40010000
 80057a4:	40000400 	.word	0x40000400
 80057a8:	40000800 	.word	0x40000800
 80057ac:	40000c00 	.word	0x40000c00
 80057b0:	40014000 	.word	0x40014000

080057b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b087      	sub	sp, #28
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6a1b      	ldr	r3, [r3, #32]
 80057c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6a1b      	ldr	r3, [r3, #32]
 80057ca:	f023 0201 	bic.w	r2, r3, #1
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	699b      	ldr	r3, [r3, #24]
 80057d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	011b      	lsls	r3, r3, #4
 80057e4:	693a      	ldr	r2, [r7, #16]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	f023 030a 	bic.w	r3, r3, #10
 80057f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057f2:	697a      	ldr	r2, [r7, #20]
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	693a      	ldr	r2, [r7, #16]
 80057fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	697a      	ldr	r2, [r7, #20]
 8005804:	621a      	str	r2, [r3, #32]
}
 8005806:	bf00      	nop
 8005808:	371c      	adds	r7, #28
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr

08005812 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005812:	b480      	push	{r7}
 8005814:	b087      	sub	sp, #28
 8005816:	af00      	add	r7, sp, #0
 8005818:	60f8      	str	r0, [r7, #12]
 800581a:	60b9      	str	r1, [r7, #8]
 800581c:	607a      	str	r2, [r7, #4]
 800581e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6a1b      	ldr	r3, [r3, #32]
 8005824:	f023 0210 	bic.w	r2, r3, #16
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	699b      	ldr	r3, [r3, #24]
 8005830:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	6a1b      	ldr	r3, [r3, #32]
 8005836:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800583e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	021b      	lsls	r3, r3, #8
 8005844:	697a      	ldr	r2, [r7, #20]
 8005846:	4313      	orrs	r3, r2
 8005848:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005850:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	031b      	lsls	r3, r3, #12
 8005856:	b29b      	uxth	r3, r3
 8005858:	697a      	ldr	r2, [r7, #20]
 800585a:	4313      	orrs	r3, r2
 800585c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005864:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	011b      	lsls	r3, r3, #4
 800586a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800586e:	693a      	ldr	r2, [r7, #16]
 8005870:	4313      	orrs	r3, r2
 8005872:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	697a      	ldr	r2, [r7, #20]
 8005878:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	693a      	ldr	r2, [r7, #16]
 800587e:	621a      	str	r2, [r3, #32]
}
 8005880:	bf00      	nop
 8005882:	371c      	adds	r7, #28
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800588c:	b480      	push	{r7}
 800588e:	b087      	sub	sp, #28
 8005890:	af00      	add	r7, sp, #0
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	60b9      	str	r1, [r7, #8]
 8005896:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6a1b      	ldr	r3, [r3, #32]
 800589c:	f023 0210 	bic.w	r2, r3, #16
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	699b      	ldr	r3, [r3, #24]
 80058a8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	6a1b      	ldr	r3, [r3, #32]
 80058ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80058b6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	031b      	lsls	r3, r3, #12
 80058bc:	697a      	ldr	r2, [r7, #20]
 80058be:	4313      	orrs	r3, r2
 80058c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80058c8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	011b      	lsls	r3, r3, #4
 80058ce:	693a      	ldr	r2, [r7, #16]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	697a      	ldr	r2, [r7, #20]
 80058d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	693a      	ldr	r2, [r7, #16]
 80058de:	621a      	str	r2, [r3, #32]
}
 80058e0:	bf00      	nop
 80058e2:	371c      	adds	r7, #28
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b087      	sub	sp, #28
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	60b9      	str	r1, [r7, #8]
 80058f6:	607a      	str	r2, [r7, #4]
 80058f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6a1b      	ldr	r3, [r3, #32]
 80058fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	69db      	ldr	r3, [r3, #28]
 800590a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	6a1b      	ldr	r3, [r3, #32]
 8005910:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	f023 0303 	bic.w	r3, r3, #3
 8005918:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800591a:	697a      	ldr	r2, [r7, #20]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4313      	orrs	r3, r2
 8005920:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005928:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	011b      	lsls	r3, r3, #4
 800592e:	b2db      	uxtb	r3, r3
 8005930:	697a      	ldr	r2, [r7, #20]
 8005932:	4313      	orrs	r3, r2
 8005934:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800593c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	021b      	lsls	r3, r3, #8
 8005942:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005946:	693a      	ldr	r2, [r7, #16]
 8005948:	4313      	orrs	r3, r2
 800594a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	697a      	ldr	r2, [r7, #20]
 8005950:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	693a      	ldr	r2, [r7, #16]
 8005956:	621a      	str	r2, [r3, #32]
}
 8005958:	bf00      	nop
 800595a:	371c      	adds	r7, #28
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr

08005964 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005964:	b480      	push	{r7}
 8005966:	b087      	sub	sp, #28
 8005968:	af00      	add	r7, sp, #0
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	607a      	str	r2, [r7, #4]
 8005970:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	6a1b      	ldr	r3, [r3, #32]
 8005976:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	69db      	ldr	r3, [r3, #28]
 8005982:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	6a1b      	ldr	r3, [r3, #32]
 8005988:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005990:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	021b      	lsls	r3, r3, #8
 8005996:	697a      	ldr	r2, [r7, #20]
 8005998:	4313      	orrs	r3, r2
 800599a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80059a2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	031b      	lsls	r3, r3, #12
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	697a      	ldr	r2, [r7, #20]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80059b6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	031b      	lsls	r3, r3, #12
 80059bc:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80059c0:	693a      	ldr	r2, [r7, #16]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	697a      	ldr	r2, [r7, #20]
 80059ca:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	693a      	ldr	r2, [r7, #16]
 80059d0:	621a      	str	r2, [r3, #32]
}
 80059d2:	bf00      	nop
 80059d4:	371c      	adds	r7, #28
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr

080059de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80059de:	b480      	push	{r7}
 80059e0:	b085      	sub	sp, #20
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
 80059e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80059f6:	683a      	ldr	r2, [r7, #0]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	f043 0307 	orr.w	r3, r3, #7
 8005a00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	68fa      	ldr	r2, [r7, #12]
 8005a06:	609a      	str	r2, [r3, #8]
}
 8005a08:	bf00      	nop
 8005a0a:	3714      	adds	r7, #20
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr

08005a14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b087      	sub	sp, #28
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	60b9      	str	r1, [r7, #8]
 8005a1e:	607a      	str	r2, [r7, #4]
 8005a20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	021a      	lsls	r2, r3, #8
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	431a      	orrs	r2, r3
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	697a      	ldr	r2, [r7, #20]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	697a      	ldr	r2, [r7, #20]
 8005a46:	609a      	str	r2, [r3, #8]
}
 8005a48:	bf00      	nop
 8005a4a:	371c      	adds	r7, #28
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b087      	sub	sp, #28
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	f003 031f 	and.w	r3, r3, #31
 8005a66:	2201      	movs	r2, #1
 8005a68:	fa02 f303 	lsl.w	r3, r2, r3
 8005a6c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	6a1a      	ldr	r2, [r3, #32]
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	43db      	mvns	r3, r3
 8005a76:	401a      	ands	r2, r3
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	6a1a      	ldr	r2, [r3, #32]
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	f003 031f 	and.w	r3, r3, #31
 8005a86:	6879      	ldr	r1, [r7, #4]
 8005a88:	fa01 f303 	lsl.w	r3, r1, r3
 8005a8c:	431a      	orrs	r2, r3
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	621a      	str	r2, [r3, #32]
}
 8005a92:	bf00      	nop
 8005a94:	371c      	adds	r7, #28
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr
	...

08005aa0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b085      	sub	sp, #20
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d101      	bne.n	8005ab8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ab4:	2302      	movs	r3, #2
 8005ab6:	e050      	b.n	8005b5a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2202      	movs	r2, #2
 8005ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ade:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a1c      	ldr	r2, [pc, #112]	; (8005b68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d018      	beq.n	8005b2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b04:	d013      	beq.n	8005b2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a18      	ldr	r2, [pc, #96]	; (8005b6c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d00e      	beq.n	8005b2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a16      	ldr	r2, [pc, #88]	; (8005b70 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d009      	beq.n	8005b2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a15      	ldr	r2, [pc, #84]	; (8005b74 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d004      	beq.n	8005b2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a13      	ldr	r2, [pc, #76]	; (8005b78 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d10c      	bne.n	8005b48 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	68ba      	ldr	r2, [r7, #8]
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	68ba      	ldr	r2, [r7, #8]
 8005b46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b58:	2300      	movs	r3, #0
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3714      	adds	r7, #20
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr
 8005b66:	bf00      	nop
 8005b68:	40010000 	.word	0x40010000
 8005b6c:	40000400 	.word	0x40000400
 8005b70:	40000800 	.word	0x40000800
 8005b74:	40000c00 	.word	0x40000c00
 8005b78:	40014000 	.word	0x40014000

08005b7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b84:	bf00      	nop
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b083      	sub	sp, #12
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b98:	bf00      	nop
 8005b9a:	370c      	adds	r7, #12
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b082      	sub	sp, #8
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d101      	bne.n	8005bb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e03f      	b.n	8005c36 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d106      	bne.n	8005bd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f7fc ff1c 	bl	8002a08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2224      	movs	r2, #36	; 0x24
 8005bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	68da      	ldr	r2, [r3, #12]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005be6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f000 fddf 	bl	80067ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	691a      	ldr	r2, [r3, #16]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005bfc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	695a      	ldr	r2, [r3, #20]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	68da      	ldr	r2, [r3, #12]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2220      	movs	r2, #32
 8005c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2220      	movs	r2, #32
 8005c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005c34:	2300      	movs	r3, #0
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3708      	adds	r7, #8
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}

08005c3e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c3e:	b580      	push	{r7, lr}
 8005c40:	b08a      	sub	sp, #40	; 0x28
 8005c42:	af02      	add	r7, sp, #8
 8005c44:	60f8      	str	r0, [r7, #12]
 8005c46:	60b9      	str	r1, [r7, #8]
 8005c48:	603b      	str	r3, [r7, #0]
 8005c4a:	4613      	mov	r3, r2
 8005c4c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	2b20      	cmp	r3, #32
 8005c5c:	d17c      	bne.n	8005d58 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d002      	beq.n	8005c6a <HAL_UART_Transmit+0x2c>
 8005c64:	88fb      	ldrh	r3, [r7, #6]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d101      	bne.n	8005c6e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e075      	b.n	8005d5a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d101      	bne.n	8005c7c <HAL_UART_Transmit+0x3e>
 8005c78:	2302      	movs	r3, #2
 8005c7a:	e06e      	b.n	8005d5a <HAL_UART_Transmit+0x11c>
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2200      	movs	r2, #0
 8005c88:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2221      	movs	r2, #33	; 0x21
 8005c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c92:	f7fd f847 	bl	8002d24 <HAL_GetTick>
 8005c96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	88fa      	ldrh	r2, [r7, #6]
 8005c9c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	88fa      	ldrh	r2, [r7, #6]
 8005ca2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cac:	d108      	bne.n	8005cc0 <HAL_UART_Transmit+0x82>
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	691b      	ldr	r3, [r3, #16]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d104      	bne.n	8005cc0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	61bb      	str	r3, [r7, #24]
 8005cbe:	e003      	b.n	8005cc8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005cd0:	e02a      	b.n	8005d28 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	9300      	str	r3, [sp, #0]
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	2180      	movs	r1, #128	; 0x80
 8005cdc:	68f8      	ldr	r0, [r7, #12]
 8005cde:	f000 fb1f 	bl	8006320 <UART_WaitOnFlagUntilTimeout>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d001      	beq.n	8005cec <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005ce8:	2303      	movs	r3, #3
 8005cea:	e036      	b.n	8005d5a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d10b      	bne.n	8005d0a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005cf2:	69bb      	ldr	r3, [r7, #24]
 8005cf4:	881b      	ldrh	r3, [r3, #0]
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d00:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	3302      	adds	r3, #2
 8005d06:	61bb      	str	r3, [r7, #24]
 8005d08:	e007      	b.n	8005d1a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	781a      	ldrb	r2, [r3, #0]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005d14:	69fb      	ldr	r3, [r7, #28]
 8005d16:	3301      	adds	r3, #1
 8005d18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	3b01      	subs	r3, #1
 8005d22:	b29a      	uxth	r2, r3
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d1cf      	bne.n	8005cd2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	9300      	str	r3, [sp, #0]
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	2140      	movs	r1, #64	; 0x40
 8005d3c:	68f8      	ldr	r0, [r7, #12]
 8005d3e:	f000 faef 	bl	8006320 <UART_WaitOnFlagUntilTimeout>
 8005d42:	4603      	mov	r3, r0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d001      	beq.n	8005d4c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005d48:	2303      	movs	r3, #3
 8005d4a:	e006      	b.n	8005d5a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2220      	movs	r2, #32
 8005d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005d54:	2300      	movs	r3, #0
 8005d56:	e000      	b.n	8005d5a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005d58:	2302      	movs	r3, #2
  }
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3720      	adds	r7, #32
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}

08005d62 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d62:	b580      	push	{r7, lr}
 8005d64:	b084      	sub	sp, #16
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	60f8      	str	r0, [r7, #12]
 8005d6a:	60b9      	str	r1, [r7, #8]
 8005d6c:	4613      	mov	r3, r2
 8005d6e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	2b20      	cmp	r3, #32
 8005d7a:	d11d      	bne.n	8005db8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d002      	beq.n	8005d88 <HAL_UART_Receive_IT+0x26>
 8005d82:	88fb      	ldrh	r3, [r7, #6]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d101      	bne.n	8005d8c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e016      	b.n	8005dba <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d101      	bne.n	8005d9a <HAL_UART_Receive_IT+0x38>
 8005d96:	2302      	movs	r3, #2
 8005d98:	e00f      	b.n	8005dba <HAL_UART_Receive_IT+0x58>
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2200      	movs	r2, #0
 8005da6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005da8:	88fb      	ldrh	r3, [r7, #6]
 8005daa:	461a      	mov	r2, r3
 8005dac:	68b9      	ldr	r1, [r7, #8]
 8005dae:	68f8      	ldr	r0, [r7, #12]
 8005db0:	f000 fb24 	bl	80063fc <UART_Start_Receive_IT>
 8005db4:	4603      	mov	r3, r0
 8005db6:	e000      	b.n	8005dba <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005db8:	2302      	movs	r3, #2
  }
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3710      	adds	r7, #16
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
	...

08005dc4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b0ba      	sub	sp, #232	; 0xe8
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	695b      	ldr	r3, [r3, #20]
 8005de6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005dea:	2300      	movs	r3, #0
 8005dec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005df0:	2300      	movs	r3, #0
 8005df2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dfa:	f003 030f 	and.w	r3, r3, #15
 8005dfe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005e02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d10f      	bne.n	8005e2a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e0e:	f003 0320 	and.w	r3, r3, #32
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d009      	beq.n	8005e2a <HAL_UART_IRQHandler+0x66>
 8005e16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e1a:	f003 0320 	and.w	r3, r3, #32
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d003      	beq.n	8005e2a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 fc07 	bl	8006636 <UART_Receive_IT>
      return;
 8005e28:	e256      	b.n	80062d8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005e2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	f000 80de 	beq.w	8005ff0 <HAL_UART_IRQHandler+0x22c>
 8005e34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e38:	f003 0301 	and.w	r3, r3, #1
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d106      	bne.n	8005e4e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005e40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e44:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	f000 80d1 	beq.w	8005ff0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005e4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e52:	f003 0301 	and.w	r3, r3, #1
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d00b      	beq.n	8005e72 <HAL_UART_IRQHandler+0xae>
 8005e5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d005      	beq.n	8005e72 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e6a:	f043 0201 	orr.w	r2, r3, #1
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e76:	f003 0304 	and.w	r3, r3, #4
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d00b      	beq.n	8005e96 <HAL_UART_IRQHandler+0xd2>
 8005e7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e82:	f003 0301 	and.w	r3, r3, #1
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d005      	beq.n	8005e96 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8e:	f043 0202 	orr.w	r2, r3, #2
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e9a:	f003 0302 	and.w	r3, r3, #2
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d00b      	beq.n	8005eba <HAL_UART_IRQHandler+0xf6>
 8005ea2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ea6:	f003 0301 	and.w	r3, r3, #1
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d005      	beq.n	8005eba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb2:	f043 0204 	orr.w	r2, r3, #4
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ebe:	f003 0308 	and.w	r3, r3, #8
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d011      	beq.n	8005eea <HAL_UART_IRQHandler+0x126>
 8005ec6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005eca:	f003 0320 	and.w	r3, r3, #32
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d105      	bne.n	8005ede <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005ed2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ed6:	f003 0301 	and.w	r3, r3, #1
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d005      	beq.n	8005eea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee2:	f043 0208 	orr.w	r2, r3, #8
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	f000 81ed 	beq.w	80062ce <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ef4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ef8:	f003 0320 	and.w	r3, r3, #32
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d008      	beq.n	8005f12 <HAL_UART_IRQHandler+0x14e>
 8005f00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f04:	f003 0320 	and.w	r3, r3, #32
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d002      	beq.n	8005f12 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f000 fb92 	bl	8006636 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	695b      	ldr	r3, [r3, #20]
 8005f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f1c:	2b40      	cmp	r3, #64	; 0x40
 8005f1e:	bf0c      	ite	eq
 8005f20:	2301      	moveq	r3, #1
 8005f22:	2300      	movne	r3, #0
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2e:	f003 0308 	and.w	r3, r3, #8
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d103      	bne.n	8005f3e <HAL_UART_IRQHandler+0x17a>
 8005f36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d04f      	beq.n	8005fde <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 fa9a 	bl	8006478 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	695b      	ldr	r3, [r3, #20]
 8005f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f4e:	2b40      	cmp	r3, #64	; 0x40
 8005f50:	d141      	bne.n	8005fd6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	3314      	adds	r3, #20
 8005f58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f60:	e853 3f00 	ldrex	r3, [r3]
 8005f64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005f68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	3314      	adds	r3, #20
 8005f7a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005f7e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005f82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f86:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005f8a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005f8e:	e841 2300 	strex	r3, r2, [r1]
 8005f92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005f96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d1d9      	bne.n	8005f52 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d013      	beq.n	8005fce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005faa:	4a7d      	ldr	r2, [pc, #500]	; (80061a0 <HAL_UART_IRQHandler+0x3dc>)
 8005fac:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f7fd fc49 	bl	800384a <HAL_DMA_Abort_IT>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d016      	beq.n	8005fec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005fc8:	4610      	mov	r0, r2
 8005fca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fcc:	e00e      	b.n	8005fec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 f990 	bl	80062f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fd4:	e00a      	b.n	8005fec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 f98c 	bl	80062f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fdc:	e006      	b.n	8005fec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 f988 	bl	80062f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005fea:	e170      	b.n	80062ce <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fec:	bf00      	nop
    return;
 8005fee:	e16e      	b.n	80062ce <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	f040 814a 	bne.w	800628e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ffe:	f003 0310 	and.w	r3, r3, #16
 8006002:	2b00      	cmp	r3, #0
 8006004:	f000 8143 	beq.w	800628e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006008:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800600c:	f003 0310 	and.w	r3, r3, #16
 8006010:	2b00      	cmp	r3, #0
 8006012:	f000 813c 	beq.w	800628e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006016:	2300      	movs	r3, #0
 8006018:	60bb      	str	r3, [r7, #8]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	60bb      	str	r3, [r7, #8]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	60bb      	str	r3, [r7, #8]
 800602a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	695b      	ldr	r3, [r3, #20]
 8006032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006036:	2b40      	cmp	r3, #64	; 0x40
 8006038:	f040 80b4 	bne.w	80061a4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006048:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800604c:	2b00      	cmp	r3, #0
 800604e:	f000 8140 	beq.w	80062d2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006056:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800605a:	429a      	cmp	r2, r3
 800605c:	f080 8139 	bcs.w	80062d2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006066:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800606c:	69db      	ldr	r3, [r3, #28]
 800606e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006072:	f000 8088 	beq.w	8006186 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	330c      	adds	r3, #12
 800607c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006080:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006084:	e853 3f00 	ldrex	r3, [r3]
 8006088:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800608c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006090:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006094:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	330c      	adds	r3, #12
 800609e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80060a2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80060a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80060ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80060b2:	e841 2300 	strex	r3, r2, [r1]
 80060b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80060ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d1d9      	bne.n	8006076 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	3314      	adds	r3, #20
 80060c8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060cc:	e853 3f00 	ldrex	r3, [r3]
 80060d0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80060d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060d4:	f023 0301 	bic.w	r3, r3, #1
 80060d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	3314      	adds	r3, #20
 80060e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80060e6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80060ea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80060ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80060f2:	e841 2300 	strex	r3, r2, [r1]
 80060f6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80060f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d1e1      	bne.n	80060c2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	3314      	adds	r3, #20
 8006104:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006106:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006108:	e853 3f00 	ldrex	r3, [r3]
 800610c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800610e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006110:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006114:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	3314      	adds	r3, #20
 800611e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006122:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006124:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006126:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006128:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800612a:	e841 2300 	strex	r3, r2, [r1]
 800612e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006130:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006132:	2b00      	cmp	r3, #0
 8006134:	d1e3      	bne.n	80060fe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2220      	movs	r2, #32
 800613a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2200      	movs	r2, #0
 8006142:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	330c      	adds	r3, #12
 800614a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800614c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800614e:	e853 3f00 	ldrex	r3, [r3]
 8006152:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006154:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006156:	f023 0310 	bic.w	r3, r3, #16
 800615a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	330c      	adds	r3, #12
 8006164:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006168:	65ba      	str	r2, [r7, #88]	; 0x58
 800616a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800616c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800616e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006170:	e841 2300 	strex	r3, r2, [r1]
 8006174:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006176:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006178:	2b00      	cmp	r3, #0
 800617a:	d1e3      	bne.n	8006144 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006180:	4618      	mov	r0, r3
 8006182:	f7fd faf2 	bl	800376a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800618e:	b29b      	uxth	r3, r3
 8006190:	1ad3      	subs	r3, r2, r3
 8006192:	b29b      	uxth	r3, r3
 8006194:	4619      	mov	r1, r3
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 f8b6 	bl	8006308 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800619c:	e099      	b.n	80062d2 <HAL_UART_IRQHandler+0x50e>
 800619e:	bf00      	nop
 80061a0:	0800653f 	.word	0x0800653f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	1ad3      	subs	r3, r2, r3
 80061b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	f000 808b 	beq.w	80062d6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80061c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	f000 8086 	beq.w	80062d6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	330c      	adds	r3, #12
 80061d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061d4:	e853 3f00 	ldrex	r3, [r3]
 80061d8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80061da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80061e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	330c      	adds	r3, #12
 80061ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80061ee:	647a      	str	r2, [r7, #68]	; 0x44
 80061f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80061f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061f6:	e841 2300 	strex	r3, r2, [r1]
 80061fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80061fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d1e3      	bne.n	80061ca <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	3314      	adds	r3, #20
 8006208:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800620a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620c:	e853 3f00 	ldrex	r3, [r3]
 8006210:	623b      	str	r3, [r7, #32]
   return(result);
 8006212:	6a3b      	ldr	r3, [r7, #32]
 8006214:	f023 0301 	bic.w	r3, r3, #1
 8006218:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	3314      	adds	r3, #20
 8006222:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006226:	633a      	str	r2, [r7, #48]	; 0x30
 8006228:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800622a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800622c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800622e:	e841 2300 	strex	r3, r2, [r1]
 8006232:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006236:	2b00      	cmp	r3, #0
 8006238:	d1e3      	bne.n	8006202 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2220      	movs	r2, #32
 800623e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	330c      	adds	r3, #12
 800624e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	e853 3f00 	ldrex	r3, [r3]
 8006256:	60fb      	str	r3, [r7, #12]
   return(result);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f023 0310 	bic.w	r3, r3, #16
 800625e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	330c      	adds	r3, #12
 8006268:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800626c:	61fa      	str	r2, [r7, #28]
 800626e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006270:	69b9      	ldr	r1, [r7, #24]
 8006272:	69fa      	ldr	r2, [r7, #28]
 8006274:	e841 2300 	strex	r3, r2, [r1]
 8006278:	617b      	str	r3, [r7, #20]
   return(result);
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d1e3      	bne.n	8006248 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006280:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006284:	4619      	mov	r1, r3
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 f83e 	bl	8006308 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800628c:	e023      	b.n	80062d6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800628e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006296:	2b00      	cmp	r3, #0
 8006298:	d009      	beq.n	80062ae <HAL_UART_IRQHandler+0x4ea>
 800629a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800629e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d003      	beq.n	80062ae <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 f95d 	bl	8006566 <UART_Transmit_IT>
    return;
 80062ac:	e014      	b.n	80062d8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80062ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d00e      	beq.n	80062d8 <HAL_UART_IRQHandler+0x514>
 80062ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d008      	beq.n	80062d8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f000 f99d 	bl	8006606 <UART_EndTransmit_IT>
    return;
 80062cc:	e004      	b.n	80062d8 <HAL_UART_IRQHandler+0x514>
    return;
 80062ce:	bf00      	nop
 80062d0:	e002      	b.n	80062d8 <HAL_UART_IRQHandler+0x514>
      return;
 80062d2:	bf00      	nop
 80062d4:	e000      	b.n	80062d8 <HAL_UART_IRQHandler+0x514>
      return;
 80062d6:	bf00      	nop
  }
}
 80062d8:	37e8      	adds	r7, #232	; 0xe8
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop

080062e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b083      	sub	sp, #12
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80062e8:	bf00      	nop
 80062ea:	370c      	adds	r7, #12
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr

080062f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b083      	sub	sp, #12
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80062fc:	bf00      	nop
 80062fe:	370c      	adds	r7, #12
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr

08006308 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006308:	b480      	push	{r7}
 800630a:	b083      	sub	sp, #12
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	460b      	mov	r3, r1
 8006312:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006314:	bf00      	nop
 8006316:	370c      	adds	r7, #12
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr

08006320 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b090      	sub	sp, #64	; 0x40
 8006324:	af00      	add	r7, sp, #0
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	603b      	str	r3, [r7, #0]
 800632c:	4613      	mov	r3, r2
 800632e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006330:	e050      	b.n	80063d4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006332:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006338:	d04c      	beq.n	80063d4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800633a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800633c:	2b00      	cmp	r3, #0
 800633e:	d007      	beq.n	8006350 <UART_WaitOnFlagUntilTimeout+0x30>
 8006340:	f7fc fcf0 	bl	8002d24 <HAL_GetTick>
 8006344:	4602      	mov	r2, r0
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	1ad3      	subs	r3, r2, r3
 800634a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800634c:	429a      	cmp	r2, r3
 800634e:	d241      	bcs.n	80063d4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	330c      	adds	r3, #12
 8006356:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800635a:	e853 3f00 	ldrex	r3, [r3]
 800635e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006362:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006366:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	330c      	adds	r3, #12
 800636e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006370:	637a      	str	r2, [r7, #52]	; 0x34
 8006372:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006374:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006376:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006378:	e841 2300 	strex	r3, r2, [r1]
 800637c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800637e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006380:	2b00      	cmp	r3, #0
 8006382:	d1e5      	bne.n	8006350 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	3314      	adds	r3, #20
 800638a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	e853 3f00 	ldrex	r3, [r3]
 8006392:	613b      	str	r3, [r7, #16]
   return(result);
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	f023 0301 	bic.w	r3, r3, #1
 800639a:	63bb      	str	r3, [r7, #56]	; 0x38
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	3314      	adds	r3, #20
 80063a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063a4:	623a      	str	r2, [r7, #32]
 80063a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a8:	69f9      	ldr	r1, [r7, #28]
 80063aa:	6a3a      	ldr	r2, [r7, #32]
 80063ac:	e841 2300 	strex	r3, r2, [r1]
 80063b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80063b2:	69bb      	ldr	r3, [r7, #24]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d1e5      	bne.n	8006384 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2220      	movs	r2, #32
 80063bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2220      	movs	r2, #32
 80063c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80063d0:	2303      	movs	r3, #3
 80063d2:	e00f      	b.n	80063f4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	4013      	ands	r3, r2
 80063de:	68ba      	ldr	r2, [r7, #8]
 80063e0:	429a      	cmp	r2, r3
 80063e2:	bf0c      	ite	eq
 80063e4:	2301      	moveq	r3, #1
 80063e6:	2300      	movne	r3, #0
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	461a      	mov	r2, r3
 80063ec:	79fb      	ldrb	r3, [r7, #7]
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d09f      	beq.n	8006332 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80063f2:	2300      	movs	r3, #0
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3740      	adds	r7, #64	; 0x40
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}

080063fc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b085      	sub	sp, #20
 8006400:	af00      	add	r7, sp, #0
 8006402:	60f8      	str	r0, [r7, #12]
 8006404:	60b9      	str	r1, [r7, #8]
 8006406:	4613      	mov	r3, r2
 8006408:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	68ba      	ldr	r2, [r7, #8]
 800640e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	88fa      	ldrh	r2, [r7, #6]
 8006414:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	88fa      	ldrh	r2, [r7, #6]
 800641a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2200      	movs	r2, #0
 8006420:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2222      	movs	r2, #34	; 0x22
 8006426:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2200      	movs	r2, #0
 800642e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	691b      	ldr	r3, [r3, #16]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d007      	beq.n	800644a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	68da      	ldr	r2, [r3, #12]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006448:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	695a      	ldr	r2, [r3, #20]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f042 0201 	orr.w	r2, r2, #1
 8006458:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	68da      	ldr	r2, [r3, #12]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f042 0220 	orr.w	r2, r2, #32
 8006468:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800646a:	2300      	movs	r3, #0
}
 800646c:	4618      	mov	r0, r3
 800646e:	3714      	adds	r7, #20
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr

08006478 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006478:	b480      	push	{r7}
 800647a:	b095      	sub	sp, #84	; 0x54
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	330c      	adds	r3, #12
 8006486:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800648a:	e853 3f00 	ldrex	r3, [r3]
 800648e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006492:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006496:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	330c      	adds	r3, #12
 800649e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80064a0:	643a      	str	r2, [r7, #64]	; 0x40
 80064a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80064a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80064a8:	e841 2300 	strex	r3, r2, [r1]
 80064ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80064ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d1e5      	bne.n	8006480 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	3314      	adds	r3, #20
 80064ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064bc:	6a3b      	ldr	r3, [r7, #32]
 80064be:	e853 3f00 	ldrex	r3, [r3]
 80064c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	f023 0301 	bic.w	r3, r3, #1
 80064ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	3314      	adds	r3, #20
 80064d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064dc:	e841 2300 	strex	r3, r2, [r1]
 80064e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d1e5      	bne.n	80064b4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d119      	bne.n	8006524 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	330c      	adds	r3, #12
 80064f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	e853 3f00 	ldrex	r3, [r3]
 80064fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	f023 0310 	bic.w	r3, r3, #16
 8006506:	647b      	str	r3, [r7, #68]	; 0x44
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	330c      	adds	r3, #12
 800650e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006510:	61ba      	str	r2, [r7, #24]
 8006512:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006514:	6979      	ldr	r1, [r7, #20]
 8006516:	69ba      	ldr	r2, [r7, #24]
 8006518:	e841 2300 	strex	r3, r2, [r1]
 800651c:	613b      	str	r3, [r7, #16]
   return(result);
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d1e5      	bne.n	80064f0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2220      	movs	r2, #32
 8006528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006532:	bf00      	nop
 8006534:	3754      	adds	r7, #84	; 0x54
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr

0800653e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800653e:	b580      	push	{r7, lr}
 8006540:	b084      	sub	sp, #16
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800654a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2200      	movs	r2, #0
 8006550:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2200      	movs	r2, #0
 8006556:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006558:	68f8      	ldr	r0, [r7, #12]
 800655a:	f7ff fecb 	bl	80062f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800655e:	bf00      	nop
 8006560:	3710      	adds	r7, #16
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}

08006566 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006566:	b480      	push	{r7}
 8006568:	b085      	sub	sp, #20
 800656a:	af00      	add	r7, sp, #0
 800656c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006574:	b2db      	uxtb	r3, r3
 8006576:	2b21      	cmp	r3, #33	; 0x21
 8006578:	d13e      	bne.n	80065f8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006582:	d114      	bne.n	80065ae <UART_Transmit_IT+0x48>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d110      	bne.n	80065ae <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6a1b      	ldr	r3, [r3, #32]
 8006590:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	881b      	ldrh	r3, [r3, #0]
 8006596:	461a      	mov	r2, r3
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065a0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a1b      	ldr	r3, [r3, #32]
 80065a6:	1c9a      	adds	r2, r3, #2
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	621a      	str	r2, [r3, #32]
 80065ac:	e008      	b.n	80065c0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6a1b      	ldr	r3, [r3, #32]
 80065b2:	1c59      	adds	r1, r3, #1
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	6211      	str	r1, [r2, #32]
 80065b8:	781a      	ldrb	r2, [r3, #0]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	3b01      	subs	r3, #1
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	4619      	mov	r1, r3
 80065ce:	84d1      	strh	r1, [r2, #38]	; 0x26
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d10f      	bne.n	80065f4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	68da      	ldr	r2, [r3, #12]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80065e2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	68da      	ldr	r2, [r3, #12]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065f2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80065f4:	2300      	movs	r3, #0
 80065f6:	e000      	b.n	80065fa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80065f8:	2302      	movs	r3, #2
  }
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3714      	adds	r7, #20
 80065fe:	46bd      	mov	sp, r7
 8006600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006604:	4770      	bx	lr

08006606 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006606:	b580      	push	{r7, lr}
 8006608:	b082      	sub	sp, #8
 800660a:	af00      	add	r7, sp, #0
 800660c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	68da      	ldr	r2, [r3, #12]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800661c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2220      	movs	r2, #32
 8006622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f7ff fe5a 	bl	80062e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800662c:	2300      	movs	r3, #0
}
 800662e:	4618      	mov	r0, r3
 8006630:	3708      	adds	r7, #8
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}

08006636 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006636:	b580      	push	{r7, lr}
 8006638:	b08c      	sub	sp, #48	; 0x30
 800663a:	af00      	add	r7, sp, #0
 800663c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006644:	b2db      	uxtb	r3, r3
 8006646:	2b22      	cmp	r3, #34	; 0x22
 8006648:	f040 80ab 	bne.w	80067a2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006654:	d117      	bne.n	8006686 <UART_Receive_IT+0x50>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d113      	bne.n	8006686 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800665e:	2300      	movs	r3, #0
 8006660:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006666:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	b29b      	uxth	r3, r3
 8006670:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006674:	b29a      	uxth	r2, r3
 8006676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006678:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800667e:	1c9a      	adds	r2, r3, #2
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	629a      	str	r2, [r3, #40]	; 0x28
 8006684:	e026      	b.n	80066d4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800668a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800668c:	2300      	movs	r3, #0
 800668e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006698:	d007      	beq.n	80066aa <UART_Receive_IT+0x74>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d10a      	bne.n	80066b8 <UART_Receive_IT+0x82>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	691b      	ldr	r3, [r3, #16]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d106      	bne.n	80066b8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	b2da      	uxtb	r2, r3
 80066b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b4:	701a      	strb	r2, [r3, #0]
 80066b6:	e008      	b.n	80066ca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	b2db      	uxtb	r3, r3
 80066c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066c4:	b2da      	uxtb	r2, r3
 80066c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ce:	1c5a      	adds	r2, r3, #1
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80066d8:	b29b      	uxth	r3, r3
 80066da:	3b01      	subs	r3, #1
 80066dc:	b29b      	uxth	r3, r3
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	4619      	mov	r1, r3
 80066e2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d15a      	bne.n	800679e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	68da      	ldr	r2, [r3, #12]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f022 0220 	bic.w	r2, r2, #32
 80066f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	68da      	ldr	r2, [r3, #12]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006706:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	695a      	ldr	r2, [r3, #20]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f022 0201 	bic.w	r2, r2, #1
 8006716:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2220      	movs	r2, #32
 800671c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006724:	2b01      	cmp	r3, #1
 8006726:	d135      	bne.n	8006794 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	330c      	adds	r3, #12
 8006734:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	e853 3f00 	ldrex	r3, [r3]
 800673c:	613b      	str	r3, [r7, #16]
   return(result);
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	f023 0310 	bic.w	r3, r3, #16
 8006744:	627b      	str	r3, [r7, #36]	; 0x24
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	330c      	adds	r3, #12
 800674c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800674e:	623a      	str	r2, [r7, #32]
 8006750:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006752:	69f9      	ldr	r1, [r7, #28]
 8006754:	6a3a      	ldr	r2, [r7, #32]
 8006756:	e841 2300 	strex	r3, r2, [r1]
 800675a:	61bb      	str	r3, [r7, #24]
   return(result);
 800675c:	69bb      	ldr	r3, [r7, #24]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d1e5      	bne.n	800672e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 0310 	and.w	r3, r3, #16
 800676c:	2b10      	cmp	r3, #16
 800676e:	d10a      	bne.n	8006786 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006770:	2300      	movs	r3, #0
 8006772:	60fb      	str	r3, [r7, #12]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	60fb      	str	r3, [r7, #12]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	60fb      	str	r3, [r7, #12]
 8006784:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800678a:	4619      	mov	r1, r3
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f7ff fdbb 	bl	8006308 <HAL_UARTEx_RxEventCallback>
 8006792:	e002      	b.n	800679a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f7fa fbb9 	bl	8000f0c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800679a:	2300      	movs	r3, #0
 800679c:	e002      	b.n	80067a4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800679e:	2300      	movs	r3, #0
 80067a0:	e000      	b.n	80067a4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80067a2:	2302      	movs	r3, #2
  }
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3730      	adds	r7, #48	; 0x30
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067b0:	b0c0      	sub	sp, #256	; 0x100
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	691b      	ldr	r3, [r3, #16]
 80067c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80067c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067c8:	68d9      	ldr	r1, [r3, #12]
 80067ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	ea40 0301 	orr.w	r3, r0, r1
 80067d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80067d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067da:	689a      	ldr	r2, [r3, #8]
 80067dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067e0:	691b      	ldr	r3, [r3, #16]
 80067e2:	431a      	orrs	r2, r3
 80067e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067e8:	695b      	ldr	r3, [r3, #20]
 80067ea:	431a      	orrs	r2, r3
 80067ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067f0:	69db      	ldr	r3, [r3, #28]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80067f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006804:	f021 010c 	bic.w	r1, r1, #12
 8006808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800680c:	681a      	ldr	r2, [r3, #0]
 800680e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006812:	430b      	orrs	r3, r1
 8006814:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	695b      	ldr	r3, [r3, #20]
 800681e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006826:	6999      	ldr	r1, [r3, #24]
 8006828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	ea40 0301 	orr.w	r3, r0, r1
 8006832:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	4b8f      	ldr	r3, [pc, #572]	; (8006a78 <UART_SetConfig+0x2cc>)
 800683c:	429a      	cmp	r2, r3
 800683e:	d005      	beq.n	800684c <UART_SetConfig+0xa0>
 8006840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	4b8d      	ldr	r3, [pc, #564]	; (8006a7c <UART_SetConfig+0x2d0>)
 8006848:	429a      	cmp	r2, r3
 800684a:	d104      	bne.n	8006856 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800684c:	f7fd fe74 	bl	8004538 <HAL_RCC_GetPCLK2Freq>
 8006850:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006854:	e003      	b.n	800685e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006856:	f7fd fe5b 	bl	8004510 <HAL_RCC_GetPCLK1Freq>
 800685a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800685e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006862:	69db      	ldr	r3, [r3, #28]
 8006864:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006868:	f040 810c 	bne.w	8006a84 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800686c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006870:	2200      	movs	r2, #0
 8006872:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006876:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800687a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800687e:	4622      	mov	r2, r4
 8006880:	462b      	mov	r3, r5
 8006882:	1891      	adds	r1, r2, r2
 8006884:	65b9      	str	r1, [r7, #88]	; 0x58
 8006886:	415b      	adcs	r3, r3
 8006888:	65fb      	str	r3, [r7, #92]	; 0x5c
 800688a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800688e:	4621      	mov	r1, r4
 8006890:	eb12 0801 	adds.w	r8, r2, r1
 8006894:	4629      	mov	r1, r5
 8006896:	eb43 0901 	adc.w	r9, r3, r1
 800689a:	f04f 0200 	mov.w	r2, #0
 800689e:	f04f 0300 	mov.w	r3, #0
 80068a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80068a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80068aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80068ae:	4690      	mov	r8, r2
 80068b0:	4699      	mov	r9, r3
 80068b2:	4623      	mov	r3, r4
 80068b4:	eb18 0303 	adds.w	r3, r8, r3
 80068b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80068bc:	462b      	mov	r3, r5
 80068be:	eb49 0303 	adc.w	r3, r9, r3
 80068c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80068c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	2200      	movs	r2, #0
 80068ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80068d2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80068d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80068da:	460b      	mov	r3, r1
 80068dc:	18db      	adds	r3, r3, r3
 80068de:	653b      	str	r3, [r7, #80]	; 0x50
 80068e0:	4613      	mov	r3, r2
 80068e2:	eb42 0303 	adc.w	r3, r2, r3
 80068e6:	657b      	str	r3, [r7, #84]	; 0x54
 80068e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80068ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80068f0:	f7fa f96c 	bl	8000bcc <__aeabi_uldivmod>
 80068f4:	4602      	mov	r2, r0
 80068f6:	460b      	mov	r3, r1
 80068f8:	4b61      	ldr	r3, [pc, #388]	; (8006a80 <UART_SetConfig+0x2d4>)
 80068fa:	fba3 2302 	umull	r2, r3, r3, r2
 80068fe:	095b      	lsrs	r3, r3, #5
 8006900:	011c      	lsls	r4, r3, #4
 8006902:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006906:	2200      	movs	r2, #0
 8006908:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800690c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006910:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006914:	4642      	mov	r2, r8
 8006916:	464b      	mov	r3, r9
 8006918:	1891      	adds	r1, r2, r2
 800691a:	64b9      	str	r1, [r7, #72]	; 0x48
 800691c:	415b      	adcs	r3, r3
 800691e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006920:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006924:	4641      	mov	r1, r8
 8006926:	eb12 0a01 	adds.w	sl, r2, r1
 800692a:	4649      	mov	r1, r9
 800692c:	eb43 0b01 	adc.w	fp, r3, r1
 8006930:	f04f 0200 	mov.w	r2, #0
 8006934:	f04f 0300 	mov.w	r3, #0
 8006938:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800693c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006940:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006944:	4692      	mov	sl, r2
 8006946:	469b      	mov	fp, r3
 8006948:	4643      	mov	r3, r8
 800694a:	eb1a 0303 	adds.w	r3, sl, r3
 800694e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006952:	464b      	mov	r3, r9
 8006954:	eb4b 0303 	adc.w	r3, fp, r3
 8006958:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800695c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006968:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800696c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006970:	460b      	mov	r3, r1
 8006972:	18db      	adds	r3, r3, r3
 8006974:	643b      	str	r3, [r7, #64]	; 0x40
 8006976:	4613      	mov	r3, r2
 8006978:	eb42 0303 	adc.w	r3, r2, r3
 800697c:	647b      	str	r3, [r7, #68]	; 0x44
 800697e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006982:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006986:	f7fa f921 	bl	8000bcc <__aeabi_uldivmod>
 800698a:	4602      	mov	r2, r0
 800698c:	460b      	mov	r3, r1
 800698e:	4611      	mov	r1, r2
 8006990:	4b3b      	ldr	r3, [pc, #236]	; (8006a80 <UART_SetConfig+0x2d4>)
 8006992:	fba3 2301 	umull	r2, r3, r3, r1
 8006996:	095b      	lsrs	r3, r3, #5
 8006998:	2264      	movs	r2, #100	; 0x64
 800699a:	fb02 f303 	mul.w	r3, r2, r3
 800699e:	1acb      	subs	r3, r1, r3
 80069a0:	00db      	lsls	r3, r3, #3
 80069a2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80069a6:	4b36      	ldr	r3, [pc, #216]	; (8006a80 <UART_SetConfig+0x2d4>)
 80069a8:	fba3 2302 	umull	r2, r3, r3, r2
 80069ac:	095b      	lsrs	r3, r3, #5
 80069ae:	005b      	lsls	r3, r3, #1
 80069b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80069b4:	441c      	add	r4, r3
 80069b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069ba:	2200      	movs	r2, #0
 80069bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80069c0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80069c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80069c8:	4642      	mov	r2, r8
 80069ca:	464b      	mov	r3, r9
 80069cc:	1891      	adds	r1, r2, r2
 80069ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80069d0:	415b      	adcs	r3, r3
 80069d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80069d8:	4641      	mov	r1, r8
 80069da:	1851      	adds	r1, r2, r1
 80069dc:	6339      	str	r1, [r7, #48]	; 0x30
 80069de:	4649      	mov	r1, r9
 80069e0:	414b      	adcs	r3, r1
 80069e2:	637b      	str	r3, [r7, #52]	; 0x34
 80069e4:	f04f 0200 	mov.w	r2, #0
 80069e8:	f04f 0300 	mov.w	r3, #0
 80069ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80069f0:	4659      	mov	r1, fp
 80069f2:	00cb      	lsls	r3, r1, #3
 80069f4:	4651      	mov	r1, sl
 80069f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069fa:	4651      	mov	r1, sl
 80069fc:	00ca      	lsls	r2, r1, #3
 80069fe:	4610      	mov	r0, r2
 8006a00:	4619      	mov	r1, r3
 8006a02:	4603      	mov	r3, r0
 8006a04:	4642      	mov	r2, r8
 8006a06:	189b      	adds	r3, r3, r2
 8006a08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a0c:	464b      	mov	r3, r9
 8006a0e:	460a      	mov	r2, r1
 8006a10:	eb42 0303 	adc.w	r3, r2, r3
 8006a14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006a24:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006a28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006a2c:	460b      	mov	r3, r1
 8006a2e:	18db      	adds	r3, r3, r3
 8006a30:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a32:	4613      	mov	r3, r2
 8006a34:	eb42 0303 	adc.w	r3, r2, r3
 8006a38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006a3e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006a42:	f7fa f8c3 	bl	8000bcc <__aeabi_uldivmod>
 8006a46:	4602      	mov	r2, r0
 8006a48:	460b      	mov	r3, r1
 8006a4a:	4b0d      	ldr	r3, [pc, #52]	; (8006a80 <UART_SetConfig+0x2d4>)
 8006a4c:	fba3 1302 	umull	r1, r3, r3, r2
 8006a50:	095b      	lsrs	r3, r3, #5
 8006a52:	2164      	movs	r1, #100	; 0x64
 8006a54:	fb01 f303 	mul.w	r3, r1, r3
 8006a58:	1ad3      	subs	r3, r2, r3
 8006a5a:	00db      	lsls	r3, r3, #3
 8006a5c:	3332      	adds	r3, #50	; 0x32
 8006a5e:	4a08      	ldr	r2, [pc, #32]	; (8006a80 <UART_SetConfig+0x2d4>)
 8006a60:	fba2 2303 	umull	r2, r3, r2, r3
 8006a64:	095b      	lsrs	r3, r3, #5
 8006a66:	f003 0207 	and.w	r2, r3, #7
 8006a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4422      	add	r2, r4
 8006a72:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006a74:	e106      	b.n	8006c84 <UART_SetConfig+0x4d8>
 8006a76:	bf00      	nop
 8006a78:	40011000 	.word	0x40011000
 8006a7c:	40011400 	.word	0x40011400
 8006a80:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006a8e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006a92:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006a96:	4642      	mov	r2, r8
 8006a98:	464b      	mov	r3, r9
 8006a9a:	1891      	adds	r1, r2, r2
 8006a9c:	6239      	str	r1, [r7, #32]
 8006a9e:	415b      	adcs	r3, r3
 8006aa0:	627b      	str	r3, [r7, #36]	; 0x24
 8006aa2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006aa6:	4641      	mov	r1, r8
 8006aa8:	1854      	adds	r4, r2, r1
 8006aaa:	4649      	mov	r1, r9
 8006aac:	eb43 0501 	adc.w	r5, r3, r1
 8006ab0:	f04f 0200 	mov.w	r2, #0
 8006ab4:	f04f 0300 	mov.w	r3, #0
 8006ab8:	00eb      	lsls	r3, r5, #3
 8006aba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006abe:	00e2      	lsls	r2, r4, #3
 8006ac0:	4614      	mov	r4, r2
 8006ac2:	461d      	mov	r5, r3
 8006ac4:	4643      	mov	r3, r8
 8006ac6:	18e3      	adds	r3, r4, r3
 8006ac8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006acc:	464b      	mov	r3, r9
 8006ace:	eb45 0303 	adc.w	r3, r5, r3
 8006ad2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	2200      	movs	r2, #0
 8006ade:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006ae2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006ae6:	f04f 0200 	mov.w	r2, #0
 8006aea:	f04f 0300 	mov.w	r3, #0
 8006aee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006af2:	4629      	mov	r1, r5
 8006af4:	008b      	lsls	r3, r1, #2
 8006af6:	4621      	mov	r1, r4
 8006af8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006afc:	4621      	mov	r1, r4
 8006afe:	008a      	lsls	r2, r1, #2
 8006b00:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006b04:	f7fa f862 	bl	8000bcc <__aeabi_uldivmod>
 8006b08:	4602      	mov	r2, r0
 8006b0a:	460b      	mov	r3, r1
 8006b0c:	4b60      	ldr	r3, [pc, #384]	; (8006c90 <UART_SetConfig+0x4e4>)
 8006b0e:	fba3 2302 	umull	r2, r3, r3, r2
 8006b12:	095b      	lsrs	r3, r3, #5
 8006b14:	011c      	lsls	r4, r3, #4
 8006b16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006b20:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006b24:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006b28:	4642      	mov	r2, r8
 8006b2a:	464b      	mov	r3, r9
 8006b2c:	1891      	adds	r1, r2, r2
 8006b2e:	61b9      	str	r1, [r7, #24]
 8006b30:	415b      	adcs	r3, r3
 8006b32:	61fb      	str	r3, [r7, #28]
 8006b34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b38:	4641      	mov	r1, r8
 8006b3a:	1851      	adds	r1, r2, r1
 8006b3c:	6139      	str	r1, [r7, #16]
 8006b3e:	4649      	mov	r1, r9
 8006b40:	414b      	adcs	r3, r1
 8006b42:	617b      	str	r3, [r7, #20]
 8006b44:	f04f 0200 	mov.w	r2, #0
 8006b48:	f04f 0300 	mov.w	r3, #0
 8006b4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006b50:	4659      	mov	r1, fp
 8006b52:	00cb      	lsls	r3, r1, #3
 8006b54:	4651      	mov	r1, sl
 8006b56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b5a:	4651      	mov	r1, sl
 8006b5c:	00ca      	lsls	r2, r1, #3
 8006b5e:	4610      	mov	r0, r2
 8006b60:	4619      	mov	r1, r3
 8006b62:	4603      	mov	r3, r0
 8006b64:	4642      	mov	r2, r8
 8006b66:	189b      	adds	r3, r3, r2
 8006b68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006b6c:	464b      	mov	r3, r9
 8006b6e:	460a      	mov	r2, r1
 8006b70:	eb42 0303 	adc.w	r3, r2, r3
 8006b74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	67bb      	str	r3, [r7, #120]	; 0x78
 8006b82:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006b84:	f04f 0200 	mov.w	r2, #0
 8006b88:	f04f 0300 	mov.w	r3, #0
 8006b8c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006b90:	4649      	mov	r1, r9
 8006b92:	008b      	lsls	r3, r1, #2
 8006b94:	4641      	mov	r1, r8
 8006b96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b9a:	4641      	mov	r1, r8
 8006b9c:	008a      	lsls	r2, r1, #2
 8006b9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006ba2:	f7fa f813 	bl	8000bcc <__aeabi_uldivmod>
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	460b      	mov	r3, r1
 8006baa:	4611      	mov	r1, r2
 8006bac:	4b38      	ldr	r3, [pc, #224]	; (8006c90 <UART_SetConfig+0x4e4>)
 8006bae:	fba3 2301 	umull	r2, r3, r3, r1
 8006bb2:	095b      	lsrs	r3, r3, #5
 8006bb4:	2264      	movs	r2, #100	; 0x64
 8006bb6:	fb02 f303 	mul.w	r3, r2, r3
 8006bba:	1acb      	subs	r3, r1, r3
 8006bbc:	011b      	lsls	r3, r3, #4
 8006bbe:	3332      	adds	r3, #50	; 0x32
 8006bc0:	4a33      	ldr	r2, [pc, #204]	; (8006c90 <UART_SetConfig+0x4e4>)
 8006bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8006bc6:	095b      	lsrs	r3, r3, #5
 8006bc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006bcc:	441c      	add	r4, r3
 8006bce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	673b      	str	r3, [r7, #112]	; 0x70
 8006bd6:	677a      	str	r2, [r7, #116]	; 0x74
 8006bd8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006bdc:	4642      	mov	r2, r8
 8006bde:	464b      	mov	r3, r9
 8006be0:	1891      	adds	r1, r2, r2
 8006be2:	60b9      	str	r1, [r7, #8]
 8006be4:	415b      	adcs	r3, r3
 8006be6:	60fb      	str	r3, [r7, #12]
 8006be8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006bec:	4641      	mov	r1, r8
 8006bee:	1851      	adds	r1, r2, r1
 8006bf0:	6039      	str	r1, [r7, #0]
 8006bf2:	4649      	mov	r1, r9
 8006bf4:	414b      	adcs	r3, r1
 8006bf6:	607b      	str	r3, [r7, #4]
 8006bf8:	f04f 0200 	mov.w	r2, #0
 8006bfc:	f04f 0300 	mov.w	r3, #0
 8006c00:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006c04:	4659      	mov	r1, fp
 8006c06:	00cb      	lsls	r3, r1, #3
 8006c08:	4651      	mov	r1, sl
 8006c0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c0e:	4651      	mov	r1, sl
 8006c10:	00ca      	lsls	r2, r1, #3
 8006c12:	4610      	mov	r0, r2
 8006c14:	4619      	mov	r1, r3
 8006c16:	4603      	mov	r3, r0
 8006c18:	4642      	mov	r2, r8
 8006c1a:	189b      	adds	r3, r3, r2
 8006c1c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c1e:	464b      	mov	r3, r9
 8006c20:	460a      	mov	r2, r1
 8006c22:	eb42 0303 	adc.w	r3, r2, r3
 8006c26:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	663b      	str	r3, [r7, #96]	; 0x60
 8006c32:	667a      	str	r2, [r7, #100]	; 0x64
 8006c34:	f04f 0200 	mov.w	r2, #0
 8006c38:	f04f 0300 	mov.w	r3, #0
 8006c3c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006c40:	4649      	mov	r1, r9
 8006c42:	008b      	lsls	r3, r1, #2
 8006c44:	4641      	mov	r1, r8
 8006c46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c4a:	4641      	mov	r1, r8
 8006c4c:	008a      	lsls	r2, r1, #2
 8006c4e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006c52:	f7f9 ffbb 	bl	8000bcc <__aeabi_uldivmod>
 8006c56:	4602      	mov	r2, r0
 8006c58:	460b      	mov	r3, r1
 8006c5a:	4b0d      	ldr	r3, [pc, #52]	; (8006c90 <UART_SetConfig+0x4e4>)
 8006c5c:	fba3 1302 	umull	r1, r3, r3, r2
 8006c60:	095b      	lsrs	r3, r3, #5
 8006c62:	2164      	movs	r1, #100	; 0x64
 8006c64:	fb01 f303 	mul.w	r3, r1, r3
 8006c68:	1ad3      	subs	r3, r2, r3
 8006c6a:	011b      	lsls	r3, r3, #4
 8006c6c:	3332      	adds	r3, #50	; 0x32
 8006c6e:	4a08      	ldr	r2, [pc, #32]	; (8006c90 <UART_SetConfig+0x4e4>)
 8006c70:	fba2 2303 	umull	r2, r3, r2, r3
 8006c74:	095b      	lsrs	r3, r3, #5
 8006c76:	f003 020f 	and.w	r2, r3, #15
 8006c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4422      	add	r2, r4
 8006c82:	609a      	str	r2, [r3, #8]
}
 8006c84:	bf00      	nop
 8006c86:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c90:	51eb851f 	.word	0x51eb851f

08006c94 <sniprintf>:
 8006c94:	b40c      	push	{r2, r3}
 8006c96:	b530      	push	{r4, r5, lr}
 8006c98:	4b17      	ldr	r3, [pc, #92]	; (8006cf8 <sniprintf+0x64>)
 8006c9a:	1e0c      	subs	r4, r1, #0
 8006c9c:	681d      	ldr	r5, [r3, #0]
 8006c9e:	b09d      	sub	sp, #116	; 0x74
 8006ca0:	da08      	bge.n	8006cb4 <sniprintf+0x20>
 8006ca2:	238b      	movs	r3, #139	; 0x8b
 8006ca4:	602b      	str	r3, [r5, #0]
 8006ca6:	f04f 30ff 	mov.w	r0, #4294967295
 8006caa:	b01d      	add	sp, #116	; 0x74
 8006cac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006cb0:	b002      	add	sp, #8
 8006cb2:	4770      	bx	lr
 8006cb4:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006cb8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006cbc:	bf14      	ite	ne
 8006cbe:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006cc2:	4623      	moveq	r3, r4
 8006cc4:	9304      	str	r3, [sp, #16]
 8006cc6:	9307      	str	r3, [sp, #28]
 8006cc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006ccc:	9002      	str	r0, [sp, #8]
 8006cce:	9006      	str	r0, [sp, #24]
 8006cd0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006cd4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006cd6:	ab21      	add	r3, sp, #132	; 0x84
 8006cd8:	a902      	add	r1, sp, #8
 8006cda:	4628      	mov	r0, r5
 8006cdc:	9301      	str	r3, [sp, #4]
 8006cde:	f000 f9e1 	bl	80070a4 <_svfiprintf_r>
 8006ce2:	1c43      	adds	r3, r0, #1
 8006ce4:	bfbc      	itt	lt
 8006ce6:	238b      	movlt	r3, #139	; 0x8b
 8006ce8:	602b      	strlt	r3, [r5, #0]
 8006cea:	2c00      	cmp	r4, #0
 8006cec:	d0dd      	beq.n	8006caa <sniprintf+0x16>
 8006cee:	9b02      	ldr	r3, [sp, #8]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	701a      	strb	r2, [r3, #0]
 8006cf4:	e7d9      	b.n	8006caa <sniprintf+0x16>
 8006cf6:	bf00      	nop
 8006cf8:	20000064 	.word	0x20000064

08006cfc <siprintf>:
 8006cfc:	b40e      	push	{r1, r2, r3}
 8006cfe:	b500      	push	{lr}
 8006d00:	b09c      	sub	sp, #112	; 0x70
 8006d02:	ab1d      	add	r3, sp, #116	; 0x74
 8006d04:	9002      	str	r0, [sp, #8]
 8006d06:	9006      	str	r0, [sp, #24]
 8006d08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006d0c:	4809      	ldr	r0, [pc, #36]	; (8006d34 <siprintf+0x38>)
 8006d0e:	9107      	str	r1, [sp, #28]
 8006d10:	9104      	str	r1, [sp, #16]
 8006d12:	4909      	ldr	r1, [pc, #36]	; (8006d38 <siprintf+0x3c>)
 8006d14:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d18:	9105      	str	r1, [sp, #20]
 8006d1a:	6800      	ldr	r0, [r0, #0]
 8006d1c:	9301      	str	r3, [sp, #4]
 8006d1e:	a902      	add	r1, sp, #8
 8006d20:	f000 f9c0 	bl	80070a4 <_svfiprintf_r>
 8006d24:	9b02      	ldr	r3, [sp, #8]
 8006d26:	2200      	movs	r2, #0
 8006d28:	701a      	strb	r2, [r3, #0]
 8006d2a:	b01c      	add	sp, #112	; 0x70
 8006d2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d30:	b003      	add	sp, #12
 8006d32:	4770      	bx	lr
 8006d34:	20000064 	.word	0x20000064
 8006d38:	ffff0208 	.word	0xffff0208

08006d3c <siscanf>:
 8006d3c:	b40e      	push	{r1, r2, r3}
 8006d3e:	b510      	push	{r4, lr}
 8006d40:	b09f      	sub	sp, #124	; 0x7c
 8006d42:	ac21      	add	r4, sp, #132	; 0x84
 8006d44:	f44f 7101 	mov.w	r1, #516	; 0x204
 8006d48:	f854 2b04 	ldr.w	r2, [r4], #4
 8006d4c:	9201      	str	r2, [sp, #4]
 8006d4e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8006d52:	9004      	str	r0, [sp, #16]
 8006d54:	9008      	str	r0, [sp, #32]
 8006d56:	f7f9 fa43 	bl	80001e0 <strlen>
 8006d5a:	4b0c      	ldr	r3, [pc, #48]	; (8006d8c <siscanf+0x50>)
 8006d5c:	9005      	str	r0, [sp, #20]
 8006d5e:	9009      	str	r0, [sp, #36]	; 0x24
 8006d60:	930d      	str	r3, [sp, #52]	; 0x34
 8006d62:	480b      	ldr	r0, [pc, #44]	; (8006d90 <siscanf+0x54>)
 8006d64:	9a01      	ldr	r2, [sp, #4]
 8006d66:	6800      	ldr	r0, [r0, #0]
 8006d68:	9403      	str	r4, [sp, #12]
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	9311      	str	r3, [sp, #68]	; 0x44
 8006d6e:	9316      	str	r3, [sp, #88]	; 0x58
 8006d70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006d74:	f8ad 301e 	strh.w	r3, [sp, #30]
 8006d78:	a904      	add	r1, sp, #16
 8006d7a:	4623      	mov	r3, r4
 8006d7c:	f000 faea 	bl	8007354 <__ssvfiscanf_r>
 8006d80:	b01f      	add	sp, #124	; 0x7c
 8006d82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d86:	b003      	add	sp, #12
 8006d88:	4770      	bx	lr
 8006d8a:	bf00      	nop
 8006d8c:	08006d95 	.word	0x08006d95
 8006d90:	20000064 	.word	0x20000064

08006d94 <__seofread>:
 8006d94:	2000      	movs	r0, #0
 8006d96:	4770      	bx	lr

08006d98 <memset>:
 8006d98:	4402      	add	r2, r0
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d100      	bne.n	8006da2 <memset+0xa>
 8006da0:	4770      	bx	lr
 8006da2:	f803 1b01 	strb.w	r1, [r3], #1
 8006da6:	e7f9      	b.n	8006d9c <memset+0x4>

08006da8 <__errno>:
 8006da8:	4b01      	ldr	r3, [pc, #4]	; (8006db0 <__errno+0x8>)
 8006daa:	6818      	ldr	r0, [r3, #0]
 8006dac:	4770      	bx	lr
 8006dae:	bf00      	nop
 8006db0:	20000064 	.word	0x20000064

08006db4 <__libc_init_array>:
 8006db4:	b570      	push	{r4, r5, r6, lr}
 8006db6:	4d0d      	ldr	r5, [pc, #52]	; (8006dec <__libc_init_array+0x38>)
 8006db8:	4c0d      	ldr	r4, [pc, #52]	; (8006df0 <__libc_init_array+0x3c>)
 8006dba:	1b64      	subs	r4, r4, r5
 8006dbc:	10a4      	asrs	r4, r4, #2
 8006dbe:	2600      	movs	r6, #0
 8006dc0:	42a6      	cmp	r6, r4
 8006dc2:	d109      	bne.n	8006dd8 <__libc_init_array+0x24>
 8006dc4:	4d0b      	ldr	r5, [pc, #44]	; (8006df4 <__libc_init_array+0x40>)
 8006dc6:	4c0c      	ldr	r4, [pc, #48]	; (8006df8 <__libc_init_array+0x44>)
 8006dc8:	f001 f8f6 	bl	8007fb8 <_init>
 8006dcc:	1b64      	subs	r4, r4, r5
 8006dce:	10a4      	asrs	r4, r4, #2
 8006dd0:	2600      	movs	r6, #0
 8006dd2:	42a6      	cmp	r6, r4
 8006dd4:	d105      	bne.n	8006de2 <__libc_init_array+0x2e>
 8006dd6:	bd70      	pop	{r4, r5, r6, pc}
 8006dd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ddc:	4798      	blx	r3
 8006dde:	3601      	adds	r6, #1
 8006de0:	e7ee      	b.n	8006dc0 <__libc_init_array+0xc>
 8006de2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006de6:	4798      	blx	r3
 8006de8:	3601      	adds	r6, #1
 8006dea:	e7f2      	b.n	8006dd2 <__libc_init_array+0x1e>
 8006dec:	080084a8 	.word	0x080084a8
 8006df0:	080084a8 	.word	0x080084a8
 8006df4:	080084a8 	.word	0x080084a8
 8006df8:	080084ac 	.word	0x080084ac

08006dfc <__retarget_lock_acquire_recursive>:
 8006dfc:	4770      	bx	lr

08006dfe <__retarget_lock_release_recursive>:
 8006dfe:	4770      	bx	lr

08006e00 <_free_r>:
 8006e00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e02:	2900      	cmp	r1, #0
 8006e04:	d044      	beq.n	8006e90 <_free_r+0x90>
 8006e06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e0a:	9001      	str	r0, [sp, #4]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	f1a1 0404 	sub.w	r4, r1, #4
 8006e12:	bfb8      	it	lt
 8006e14:	18e4      	addlt	r4, r4, r3
 8006e16:	f000 f8df 	bl	8006fd8 <__malloc_lock>
 8006e1a:	4a1e      	ldr	r2, [pc, #120]	; (8006e94 <_free_r+0x94>)
 8006e1c:	9801      	ldr	r0, [sp, #4]
 8006e1e:	6813      	ldr	r3, [r2, #0]
 8006e20:	b933      	cbnz	r3, 8006e30 <_free_r+0x30>
 8006e22:	6063      	str	r3, [r4, #4]
 8006e24:	6014      	str	r4, [r2, #0]
 8006e26:	b003      	add	sp, #12
 8006e28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e2c:	f000 b8da 	b.w	8006fe4 <__malloc_unlock>
 8006e30:	42a3      	cmp	r3, r4
 8006e32:	d908      	bls.n	8006e46 <_free_r+0x46>
 8006e34:	6825      	ldr	r5, [r4, #0]
 8006e36:	1961      	adds	r1, r4, r5
 8006e38:	428b      	cmp	r3, r1
 8006e3a:	bf01      	itttt	eq
 8006e3c:	6819      	ldreq	r1, [r3, #0]
 8006e3e:	685b      	ldreq	r3, [r3, #4]
 8006e40:	1949      	addeq	r1, r1, r5
 8006e42:	6021      	streq	r1, [r4, #0]
 8006e44:	e7ed      	b.n	8006e22 <_free_r+0x22>
 8006e46:	461a      	mov	r2, r3
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	b10b      	cbz	r3, 8006e50 <_free_r+0x50>
 8006e4c:	42a3      	cmp	r3, r4
 8006e4e:	d9fa      	bls.n	8006e46 <_free_r+0x46>
 8006e50:	6811      	ldr	r1, [r2, #0]
 8006e52:	1855      	adds	r5, r2, r1
 8006e54:	42a5      	cmp	r5, r4
 8006e56:	d10b      	bne.n	8006e70 <_free_r+0x70>
 8006e58:	6824      	ldr	r4, [r4, #0]
 8006e5a:	4421      	add	r1, r4
 8006e5c:	1854      	adds	r4, r2, r1
 8006e5e:	42a3      	cmp	r3, r4
 8006e60:	6011      	str	r1, [r2, #0]
 8006e62:	d1e0      	bne.n	8006e26 <_free_r+0x26>
 8006e64:	681c      	ldr	r4, [r3, #0]
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	6053      	str	r3, [r2, #4]
 8006e6a:	440c      	add	r4, r1
 8006e6c:	6014      	str	r4, [r2, #0]
 8006e6e:	e7da      	b.n	8006e26 <_free_r+0x26>
 8006e70:	d902      	bls.n	8006e78 <_free_r+0x78>
 8006e72:	230c      	movs	r3, #12
 8006e74:	6003      	str	r3, [r0, #0]
 8006e76:	e7d6      	b.n	8006e26 <_free_r+0x26>
 8006e78:	6825      	ldr	r5, [r4, #0]
 8006e7a:	1961      	adds	r1, r4, r5
 8006e7c:	428b      	cmp	r3, r1
 8006e7e:	bf04      	itt	eq
 8006e80:	6819      	ldreq	r1, [r3, #0]
 8006e82:	685b      	ldreq	r3, [r3, #4]
 8006e84:	6063      	str	r3, [r4, #4]
 8006e86:	bf04      	itt	eq
 8006e88:	1949      	addeq	r1, r1, r5
 8006e8a:	6021      	streq	r1, [r4, #0]
 8006e8c:	6054      	str	r4, [r2, #4]
 8006e8e:	e7ca      	b.n	8006e26 <_free_r+0x26>
 8006e90:	b003      	add	sp, #12
 8006e92:	bd30      	pop	{r4, r5, pc}
 8006e94:	20000740 	.word	0x20000740

08006e98 <sbrk_aligned>:
 8006e98:	b570      	push	{r4, r5, r6, lr}
 8006e9a:	4e0e      	ldr	r6, [pc, #56]	; (8006ed4 <sbrk_aligned+0x3c>)
 8006e9c:	460c      	mov	r4, r1
 8006e9e:	6831      	ldr	r1, [r6, #0]
 8006ea0:	4605      	mov	r5, r0
 8006ea2:	b911      	cbnz	r1, 8006eaa <sbrk_aligned+0x12>
 8006ea4:	f000 ff3a 	bl	8007d1c <_sbrk_r>
 8006ea8:	6030      	str	r0, [r6, #0]
 8006eaa:	4621      	mov	r1, r4
 8006eac:	4628      	mov	r0, r5
 8006eae:	f000 ff35 	bl	8007d1c <_sbrk_r>
 8006eb2:	1c43      	adds	r3, r0, #1
 8006eb4:	d00a      	beq.n	8006ecc <sbrk_aligned+0x34>
 8006eb6:	1cc4      	adds	r4, r0, #3
 8006eb8:	f024 0403 	bic.w	r4, r4, #3
 8006ebc:	42a0      	cmp	r0, r4
 8006ebe:	d007      	beq.n	8006ed0 <sbrk_aligned+0x38>
 8006ec0:	1a21      	subs	r1, r4, r0
 8006ec2:	4628      	mov	r0, r5
 8006ec4:	f000 ff2a 	bl	8007d1c <_sbrk_r>
 8006ec8:	3001      	adds	r0, #1
 8006eca:	d101      	bne.n	8006ed0 <sbrk_aligned+0x38>
 8006ecc:	f04f 34ff 	mov.w	r4, #4294967295
 8006ed0:	4620      	mov	r0, r4
 8006ed2:	bd70      	pop	{r4, r5, r6, pc}
 8006ed4:	20000744 	.word	0x20000744

08006ed8 <_malloc_r>:
 8006ed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006edc:	1ccd      	adds	r5, r1, #3
 8006ede:	f025 0503 	bic.w	r5, r5, #3
 8006ee2:	3508      	adds	r5, #8
 8006ee4:	2d0c      	cmp	r5, #12
 8006ee6:	bf38      	it	cc
 8006ee8:	250c      	movcc	r5, #12
 8006eea:	2d00      	cmp	r5, #0
 8006eec:	4607      	mov	r7, r0
 8006eee:	db01      	blt.n	8006ef4 <_malloc_r+0x1c>
 8006ef0:	42a9      	cmp	r1, r5
 8006ef2:	d905      	bls.n	8006f00 <_malloc_r+0x28>
 8006ef4:	230c      	movs	r3, #12
 8006ef6:	603b      	str	r3, [r7, #0]
 8006ef8:	2600      	movs	r6, #0
 8006efa:	4630      	mov	r0, r6
 8006efc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f00:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006fd4 <_malloc_r+0xfc>
 8006f04:	f000 f868 	bl	8006fd8 <__malloc_lock>
 8006f08:	f8d8 3000 	ldr.w	r3, [r8]
 8006f0c:	461c      	mov	r4, r3
 8006f0e:	bb5c      	cbnz	r4, 8006f68 <_malloc_r+0x90>
 8006f10:	4629      	mov	r1, r5
 8006f12:	4638      	mov	r0, r7
 8006f14:	f7ff ffc0 	bl	8006e98 <sbrk_aligned>
 8006f18:	1c43      	adds	r3, r0, #1
 8006f1a:	4604      	mov	r4, r0
 8006f1c:	d155      	bne.n	8006fca <_malloc_r+0xf2>
 8006f1e:	f8d8 4000 	ldr.w	r4, [r8]
 8006f22:	4626      	mov	r6, r4
 8006f24:	2e00      	cmp	r6, #0
 8006f26:	d145      	bne.n	8006fb4 <_malloc_r+0xdc>
 8006f28:	2c00      	cmp	r4, #0
 8006f2a:	d048      	beq.n	8006fbe <_malloc_r+0xe6>
 8006f2c:	6823      	ldr	r3, [r4, #0]
 8006f2e:	4631      	mov	r1, r6
 8006f30:	4638      	mov	r0, r7
 8006f32:	eb04 0903 	add.w	r9, r4, r3
 8006f36:	f000 fef1 	bl	8007d1c <_sbrk_r>
 8006f3a:	4581      	cmp	r9, r0
 8006f3c:	d13f      	bne.n	8006fbe <_malloc_r+0xe6>
 8006f3e:	6821      	ldr	r1, [r4, #0]
 8006f40:	1a6d      	subs	r5, r5, r1
 8006f42:	4629      	mov	r1, r5
 8006f44:	4638      	mov	r0, r7
 8006f46:	f7ff ffa7 	bl	8006e98 <sbrk_aligned>
 8006f4a:	3001      	adds	r0, #1
 8006f4c:	d037      	beq.n	8006fbe <_malloc_r+0xe6>
 8006f4e:	6823      	ldr	r3, [r4, #0]
 8006f50:	442b      	add	r3, r5
 8006f52:	6023      	str	r3, [r4, #0]
 8006f54:	f8d8 3000 	ldr.w	r3, [r8]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d038      	beq.n	8006fce <_malloc_r+0xf6>
 8006f5c:	685a      	ldr	r2, [r3, #4]
 8006f5e:	42a2      	cmp	r2, r4
 8006f60:	d12b      	bne.n	8006fba <_malloc_r+0xe2>
 8006f62:	2200      	movs	r2, #0
 8006f64:	605a      	str	r2, [r3, #4]
 8006f66:	e00f      	b.n	8006f88 <_malloc_r+0xb0>
 8006f68:	6822      	ldr	r2, [r4, #0]
 8006f6a:	1b52      	subs	r2, r2, r5
 8006f6c:	d41f      	bmi.n	8006fae <_malloc_r+0xd6>
 8006f6e:	2a0b      	cmp	r2, #11
 8006f70:	d917      	bls.n	8006fa2 <_malloc_r+0xca>
 8006f72:	1961      	adds	r1, r4, r5
 8006f74:	42a3      	cmp	r3, r4
 8006f76:	6025      	str	r5, [r4, #0]
 8006f78:	bf18      	it	ne
 8006f7a:	6059      	strne	r1, [r3, #4]
 8006f7c:	6863      	ldr	r3, [r4, #4]
 8006f7e:	bf08      	it	eq
 8006f80:	f8c8 1000 	streq.w	r1, [r8]
 8006f84:	5162      	str	r2, [r4, r5]
 8006f86:	604b      	str	r3, [r1, #4]
 8006f88:	4638      	mov	r0, r7
 8006f8a:	f104 060b 	add.w	r6, r4, #11
 8006f8e:	f000 f829 	bl	8006fe4 <__malloc_unlock>
 8006f92:	f026 0607 	bic.w	r6, r6, #7
 8006f96:	1d23      	adds	r3, r4, #4
 8006f98:	1af2      	subs	r2, r6, r3
 8006f9a:	d0ae      	beq.n	8006efa <_malloc_r+0x22>
 8006f9c:	1b9b      	subs	r3, r3, r6
 8006f9e:	50a3      	str	r3, [r4, r2]
 8006fa0:	e7ab      	b.n	8006efa <_malloc_r+0x22>
 8006fa2:	42a3      	cmp	r3, r4
 8006fa4:	6862      	ldr	r2, [r4, #4]
 8006fa6:	d1dd      	bne.n	8006f64 <_malloc_r+0x8c>
 8006fa8:	f8c8 2000 	str.w	r2, [r8]
 8006fac:	e7ec      	b.n	8006f88 <_malloc_r+0xb0>
 8006fae:	4623      	mov	r3, r4
 8006fb0:	6864      	ldr	r4, [r4, #4]
 8006fb2:	e7ac      	b.n	8006f0e <_malloc_r+0x36>
 8006fb4:	4634      	mov	r4, r6
 8006fb6:	6876      	ldr	r6, [r6, #4]
 8006fb8:	e7b4      	b.n	8006f24 <_malloc_r+0x4c>
 8006fba:	4613      	mov	r3, r2
 8006fbc:	e7cc      	b.n	8006f58 <_malloc_r+0x80>
 8006fbe:	230c      	movs	r3, #12
 8006fc0:	603b      	str	r3, [r7, #0]
 8006fc2:	4638      	mov	r0, r7
 8006fc4:	f000 f80e 	bl	8006fe4 <__malloc_unlock>
 8006fc8:	e797      	b.n	8006efa <_malloc_r+0x22>
 8006fca:	6025      	str	r5, [r4, #0]
 8006fcc:	e7dc      	b.n	8006f88 <_malloc_r+0xb0>
 8006fce:	605b      	str	r3, [r3, #4]
 8006fd0:	deff      	udf	#255	; 0xff
 8006fd2:	bf00      	nop
 8006fd4:	20000740 	.word	0x20000740

08006fd8 <__malloc_lock>:
 8006fd8:	4801      	ldr	r0, [pc, #4]	; (8006fe0 <__malloc_lock+0x8>)
 8006fda:	f7ff bf0f 	b.w	8006dfc <__retarget_lock_acquire_recursive>
 8006fde:	bf00      	nop
 8006fe0:	2000073c 	.word	0x2000073c

08006fe4 <__malloc_unlock>:
 8006fe4:	4801      	ldr	r0, [pc, #4]	; (8006fec <__malloc_unlock+0x8>)
 8006fe6:	f7ff bf0a 	b.w	8006dfe <__retarget_lock_release_recursive>
 8006fea:	bf00      	nop
 8006fec:	2000073c 	.word	0x2000073c

08006ff0 <__ssputs_r>:
 8006ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ff4:	688e      	ldr	r6, [r1, #8]
 8006ff6:	461f      	mov	r7, r3
 8006ff8:	42be      	cmp	r6, r7
 8006ffa:	680b      	ldr	r3, [r1, #0]
 8006ffc:	4682      	mov	sl, r0
 8006ffe:	460c      	mov	r4, r1
 8007000:	4690      	mov	r8, r2
 8007002:	d82c      	bhi.n	800705e <__ssputs_r+0x6e>
 8007004:	898a      	ldrh	r2, [r1, #12]
 8007006:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800700a:	d026      	beq.n	800705a <__ssputs_r+0x6a>
 800700c:	6965      	ldr	r5, [r4, #20]
 800700e:	6909      	ldr	r1, [r1, #16]
 8007010:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007014:	eba3 0901 	sub.w	r9, r3, r1
 8007018:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800701c:	1c7b      	adds	r3, r7, #1
 800701e:	444b      	add	r3, r9
 8007020:	106d      	asrs	r5, r5, #1
 8007022:	429d      	cmp	r5, r3
 8007024:	bf38      	it	cc
 8007026:	461d      	movcc	r5, r3
 8007028:	0553      	lsls	r3, r2, #21
 800702a:	d527      	bpl.n	800707c <__ssputs_r+0x8c>
 800702c:	4629      	mov	r1, r5
 800702e:	f7ff ff53 	bl	8006ed8 <_malloc_r>
 8007032:	4606      	mov	r6, r0
 8007034:	b360      	cbz	r0, 8007090 <__ssputs_r+0xa0>
 8007036:	6921      	ldr	r1, [r4, #16]
 8007038:	464a      	mov	r2, r9
 800703a:	f000 fe7f 	bl	8007d3c <memcpy>
 800703e:	89a3      	ldrh	r3, [r4, #12]
 8007040:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007048:	81a3      	strh	r3, [r4, #12]
 800704a:	6126      	str	r6, [r4, #16]
 800704c:	6165      	str	r5, [r4, #20]
 800704e:	444e      	add	r6, r9
 8007050:	eba5 0509 	sub.w	r5, r5, r9
 8007054:	6026      	str	r6, [r4, #0]
 8007056:	60a5      	str	r5, [r4, #8]
 8007058:	463e      	mov	r6, r7
 800705a:	42be      	cmp	r6, r7
 800705c:	d900      	bls.n	8007060 <__ssputs_r+0x70>
 800705e:	463e      	mov	r6, r7
 8007060:	6820      	ldr	r0, [r4, #0]
 8007062:	4632      	mov	r2, r6
 8007064:	4641      	mov	r1, r8
 8007066:	f000 fe3e 	bl	8007ce6 <memmove>
 800706a:	68a3      	ldr	r3, [r4, #8]
 800706c:	1b9b      	subs	r3, r3, r6
 800706e:	60a3      	str	r3, [r4, #8]
 8007070:	6823      	ldr	r3, [r4, #0]
 8007072:	4433      	add	r3, r6
 8007074:	6023      	str	r3, [r4, #0]
 8007076:	2000      	movs	r0, #0
 8007078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800707c:	462a      	mov	r2, r5
 800707e:	f000 fe6b 	bl	8007d58 <_realloc_r>
 8007082:	4606      	mov	r6, r0
 8007084:	2800      	cmp	r0, #0
 8007086:	d1e0      	bne.n	800704a <__ssputs_r+0x5a>
 8007088:	6921      	ldr	r1, [r4, #16]
 800708a:	4650      	mov	r0, sl
 800708c:	f7ff feb8 	bl	8006e00 <_free_r>
 8007090:	230c      	movs	r3, #12
 8007092:	f8ca 3000 	str.w	r3, [sl]
 8007096:	89a3      	ldrh	r3, [r4, #12]
 8007098:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800709c:	81a3      	strh	r3, [r4, #12]
 800709e:	f04f 30ff 	mov.w	r0, #4294967295
 80070a2:	e7e9      	b.n	8007078 <__ssputs_r+0x88>

080070a4 <_svfiprintf_r>:
 80070a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070a8:	4698      	mov	r8, r3
 80070aa:	898b      	ldrh	r3, [r1, #12]
 80070ac:	061b      	lsls	r3, r3, #24
 80070ae:	b09d      	sub	sp, #116	; 0x74
 80070b0:	4607      	mov	r7, r0
 80070b2:	460d      	mov	r5, r1
 80070b4:	4614      	mov	r4, r2
 80070b6:	d50e      	bpl.n	80070d6 <_svfiprintf_r+0x32>
 80070b8:	690b      	ldr	r3, [r1, #16]
 80070ba:	b963      	cbnz	r3, 80070d6 <_svfiprintf_r+0x32>
 80070bc:	2140      	movs	r1, #64	; 0x40
 80070be:	f7ff ff0b 	bl	8006ed8 <_malloc_r>
 80070c2:	6028      	str	r0, [r5, #0]
 80070c4:	6128      	str	r0, [r5, #16]
 80070c6:	b920      	cbnz	r0, 80070d2 <_svfiprintf_r+0x2e>
 80070c8:	230c      	movs	r3, #12
 80070ca:	603b      	str	r3, [r7, #0]
 80070cc:	f04f 30ff 	mov.w	r0, #4294967295
 80070d0:	e0d0      	b.n	8007274 <_svfiprintf_r+0x1d0>
 80070d2:	2340      	movs	r3, #64	; 0x40
 80070d4:	616b      	str	r3, [r5, #20]
 80070d6:	2300      	movs	r3, #0
 80070d8:	9309      	str	r3, [sp, #36]	; 0x24
 80070da:	2320      	movs	r3, #32
 80070dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80070e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80070e4:	2330      	movs	r3, #48	; 0x30
 80070e6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800728c <_svfiprintf_r+0x1e8>
 80070ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80070ee:	f04f 0901 	mov.w	r9, #1
 80070f2:	4623      	mov	r3, r4
 80070f4:	469a      	mov	sl, r3
 80070f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80070fa:	b10a      	cbz	r2, 8007100 <_svfiprintf_r+0x5c>
 80070fc:	2a25      	cmp	r2, #37	; 0x25
 80070fe:	d1f9      	bne.n	80070f4 <_svfiprintf_r+0x50>
 8007100:	ebba 0b04 	subs.w	fp, sl, r4
 8007104:	d00b      	beq.n	800711e <_svfiprintf_r+0x7a>
 8007106:	465b      	mov	r3, fp
 8007108:	4622      	mov	r2, r4
 800710a:	4629      	mov	r1, r5
 800710c:	4638      	mov	r0, r7
 800710e:	f7ff ff6f 	bl	8006ff0 <__ssputs_r>
 8007112:	3001      	adds	r0, #1
 8007114:	f000 80a9 	beq.w	800726a <_svfiprintf_r+0x1c6>
 8007118:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800711a:	445a      	add	r2, fp
 800711c:	9209      	str	r2, [sp, #36]	; 0x24
 800711e:	f89a 3000 	ldrb.w	r3, [sl]
 8007122:	2b00      	cmp	r3, #0
 8007124:	f000 80a1 	beq.w	800726a <_svfiprintf_r+0x1c6>
 8007128:	2300      	movs	r3, #0
 800712a:	f04f 32ff 	mov.w	r2, #4294967295
 800712e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007132:	f10a 0a01 	add.w	sl, sl, #1
 8007136:	9304      	str	r3, [sp, #16]
 8007138:	9307      	str	r3, [sp, #28]
 800713a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800713e:	931a      	str	r3, [sp, #104]	; 0x68
 8007140:	4654      	mov	r4, sl
 8007142:	2205      	movs	r2, #5
 8007144:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007148:	4850      	ldr	r0, [pc, #320]	; (800728c <_svfiprintf_r+0x1e8>)
 800714a:	f7f9 f851 	bl	80001f0 <memchr>
 800714e:	9a04      	ldr	r2, [sp, #16]
 8007150:	b9d8      	cbnz	r0, 800718a <_svfiprintf_r+0xe6>
 8007152:	06d0      	lsls	r0, r2, #27
 8007154:	bf44      	itt	mi
 8007156:	2320      	movmi	r3, #32
 8007158:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800715c:	0711      	lsls	r1, r2, #28
 800715e:	bf44      	itt	mi
 8007160:	232b      	movmi	r3, #43	; 0x2b
 8007162:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007166:	f89a 3000 	ldrb.w	r3, [sl]
 800716a:	2b2a      	cmp	r3, #42	; 0x2a
 800716c:	d015      	beq.n	800719a <_svfiprintf_r+0xf6>
 800716e:	9a07      	ldr	r2, [sp, #28]
 8007170:	4654      	mov	r4, sl
 8007172:	2000      	movs	r0, #0
 8007174:	f04f 0c0a 	mov.w	ip, #10
 8007178:	4621      	mov	r1, r4
 800717a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800717e:	3b30      	subs	r3, #48	; 0x30
 8007180:	2b09      	cmp	r3, #9
 8007182:	d94d      	bls.n	8007220 <_svfiprintf_r+0x17c>
 8007184:	b1b0      	cbz	r0, 80071b4 <_svfiprintf_r+0x110>
 8007186:	9207      	str	r2, [sp, #28]
 8007188:	e014      	b.n	80071b4 <_svfiprintf_r+0x110>
 800718a:	eba0 0308 	sub.w	r3, r0, r8
 800718e:	fa09 f303 	lsl.w	r3, r9, r3
 8007192:	4313      	orrs	r3, r2
 8007194:	9304      	str	r3, [sp, #16]
 8007196:	46a2      	mov	sl, r4
 8007198:	e7d2      	b.n	8007140 <_svfiprintf_r+0x9c>
 800719a:	9b03      	ldr	r3, [sp, #12]
 800719c:	1d19      	adds	r1, r3, #4
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	9103      	str	r1, [sp, #12]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	bfbb      	ittet	lt
 80071a6:	425b      	neglt	r3, r3
 80071a8:	f042 0202 	orrlt.w	r2, r2, #2
 80071ac:	9307      	strge	r3, [sp, #28]
 80071ae:	9307      	strlt	r3, [sp, #28]
 80071b0:	bfb8      	it	lt
 80071b2:	9204      	strlt	r2, [sp, #16]
 80071b4:	7823      	ldrb	r3, [r4, #0]
 80071b6:	2b2e      	cmp	r3, #46	; 0x2e
 80071b8:	d10c      	bne.n	80071d4 <_svfiprintf_r+0x130>
 80071ba:	7863      	ldrb	r3, [r4, #1]
 80071bc:	2b2a      	cmp	r3, #42	; 0x2a
 80071be:	d134      	bne.n	800722a <_svfiprintf_r+0x186>
 80071c0:	9b03      	ldr	r3, [sp, #12]
 80071c2:	1d1a      	adds	r2, r3, #4
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	9203      	str	r2, [sp, #12]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	bfb8      	it	lt
 80071cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80071d0:	3402      	adds	r4, #2
 80071d2:	9305      	str	r3, [sp, #20]
 80071d4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800729c <_svfiprintf_r+0x1f8>
 80071d8:	7821      	ldrb	r1, [r4, #0]
 80071da:	2203      	movs	r2, #3
 80071dc:	4650      	mov	r0, sl
 80071de:	f7f9 f807 	bl	80001f0 <memchr>
 80071e2:	b138      	cbz	r0, 80071f4 <_svfiprintf_r+0x150>
 80071e4:	9b04      	ldr	r3, [sp, #16]
 80071e6:	eba0 000a 	sub.w	r0, r0, sl
 80071ea:	2240      	movs	r2, #64	; 0x40
 80071ec:	4082      	lsls	r2, r0
 80071ee:	4313      	orrs	r3, r2
 80071f0:	3401      	adds	r4, #1
 80071f2:	9304      	str	r3, [sp, #16]
 80071f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071f8:	4825      	ldr	r0, [pc, #148]	; (8007290 <_svfiprintf_r+0x1ec>)
 80071fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80071fe:	2206      	movs	r2, #6
 8007200:	f7f8 fff6 	bl	80001f0 <memchr>
 8007204:	2800      	cmp	r0, #0
 8007206:	d038      	beq.n	800727a <_svfiprintf_r+0x1d6>
 8007208:	4b22      	ldr	r3, [pc, #136]	; (8007294 <_svfiprintf_r+0x1f0>)
 800720a:	bb1b      	cbnz	r3, 8007254 <_svfiprintf_r+0x1b0>
 800720c:	9b03      	ldr	r3, [sp, #12]
 800720e:	3307      	adds	r3, #7
 8007210:	f023 0307 	bic.w	r3, r3, #7
 8007214:	3308      	adds	r3, #8
 8007216:	9303      	str	r3, [sp, #12]
 8007218:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800721a:	4433      	add	r3, r6
 800721c:	9309      	str	r3, [sp, #36]	; 0x24
 800721e:	e768      	b.n	80070f2 <_svfiprintf_r+0x4e>
 8007220:	fb0c 3202 	mla	r2, ip, r2, r3
 8007224:	460c      	mov	r4, r1
 8007226:	2001      	movs	r0, #1
 8007228:	e7a6      	b.n	8007178 <_svfiprintf_r+0xd4>
 800722a:	2300      	movs	r3, #0
 800722c:	3401      	adds	r4, #1
 800722e:	9305      	str	r3, [sp, #20]
 8007230:	4619      	mov	r1, r3
 8007232:	f04f 0c0a 	mov.w	ip, #10
 8007236:	4620      	mov	r0, r4
 8007238:	f810 2b01 	ldrb.w	r2, [r0], #1
 800723c:	3a30      	subs	r2, #48	; 0x30
 800723e:	2a09      	cmp	r2, #9
 8007240:	d903      	bls.n	800724a <_svfiprintf_r+0x1a6>
 8007242:	2b00      	cmp	r3, #0
 8007244:	d0c6      	beq.n	80071d4 <_svfiprintf_r+0x130>
 8007246:	9105      	str	r1, [sp, #20]
 8007248:	e7c4      	b.n	80071d4 <_svfiprintf_r+0x130>
 800724a:	fb0c 2101 	mla	r1, ip, r1, r2
 800724e:	4604      	mov	r4, r0
 8007250:	2301      	movs	r3, #1
 8007252:	e7f0      	b.n	8007236 <_svfiprintf_r+0x192>
 8007254:	ab03      	add	r3, sp, #12
 8007256:	9300      	str	r3, [sp, #0]
 8007258:	462a      	mov	r2, r5
 800725a:	4b0f      	ldr	r3, [pc, #60]	; (8007298 <_svfiprintf_r+0x1f4>)
 800725c:	a904      	add	r1, sp, #16
 800725e:	4638      	mov	r0, r7
 8007260:	f3af 8000 	nop.w
 8007264:	1c42      	adds	r2, r0, #1
 8007266:	4606      	mov	r6, r0
 8007268:	d1d6      	bne.n	8007218 <_svfiprintf_r+0x174>
 800726a:	89ab      	ldrh	r3, [r5, #12]
 800726c:	065b      	lsls	r3, r3, #25
 800726e:	f53f af2d 	bmi.w	80070cc <_svfiprintf_r+0x28>
 8007272:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007274:	b01d      	add	sp, #116	; 0x74
 8007276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800727a:	ab03      	add	r3, sp, #12
 800727c:	9300      	str	r3, [sp, #0]
 800727e:	462a      	mov	r2, r5
 8007280:	4b05      	ldr	r3, [pc, #20]	; (8007298 <_svfiprintf_r+0x1f4>)
 8007282:	a904      	add	r1, sp, #16
 8007284:	4638      	mov	r0, r7
 8007286:	f000 fa4b 	bl	8007720 <_printf_i>
 800728a:	e7eb      	b.n	8007264 <_svfiprintf_r+0x1c0>
 800728c:	08008350 	.word	0x08008350
 8007290:	0800835a 	.word	0x0800835a
 8007294:	00000000 	.word	0x00000000
 8007298:	08006ff1 	.word	0x08006ff1
 800729c:	08008356 	.word	0x08008356

080072a0 <_sungetc_r>:
 80072a0:	b538      	push	{r3, r4, r5, lr}
 80072a2:	1c4b      	adds	r3, r1, #1
 80072a4:	4614      	mov	r4, r2
 80072a6:	d103      	bne.n	80072b0 <_sungetc_r+0x10>
 80072a8:	f04f 35ff 	mov.w	r5, #4294967295
 80072ac:	4628      	mov	r0, r5
 80072ae:	bd38      	pop	{r3, r4, r5, pc}
 80072b0:	8993      	ldrh	r3, [r2, #12]
 80072b2:	f023 0320 	bic.w	r3, r3, #32
 80072b6:	8193      	strh	r3, [r2, #12]
 80072b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80072ba:	6852      	ldr	r2, [r2, #4]
 80072bc:	b2cd      	uxtb	r5, r1
 80072be:	b18b      	cbz	r3, 80072e4 <_sungetc_r+0x44>
 80072c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80072c2:	4293      	cmp	r3, r2
 80072c4:	dd08      	ble.n	80072d8 <_sungetc_r+0x38>
 80072c6:	6823      	ldr	r3, [r4, #0]
 80072c8:	1e5a      	subs	r2, r3, #1
 80072ca:	6022      	str	r2, [r4, #0]
 80072cc:	f803 5c01 	strb.w	r5, [r3, #-1]
 80072d0:	6863      	ldr	r3, [r4, #4]
 80072d2:	3301      	adds	r3, #1
 80072d4:	6063      	str	r3, [r4, #4]
 80072d6:	e7e9      	b.n	80072ac <_sungetc_r+0xc>
 80072d8:	4621      	mov	r1, r4
 80072da:	f000 fcca 	bl	8007c72 <__submore>
 80072de:	2800      	cmp	r0, #0
 80072e0:	d0f1      	beq.n	80072c6 <_sungetc_r+0x26>
 80072e2:	e7e1      	b.n	80072a8 <_sungetc_r+0x8>
 80072e4:	6921      	ldr	r1, [r4, #16]
 80072e6:	6823      	ldr	r3, [r4, #0]
 80072e8:	b151      	cbz	r1, 8007300 <_sungetc_r+0x60>
 80072ea:	4299      	cmp	r1, r3
 80072ec:	d208      	bcs.n	8007300 <_sungetc_r+0x60>
 80072ee:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80072f2:	42a9      	cmp	r1, r5
 80072f4:	d104      	bne.n	8007300 <_sungetc_r+0x60>
 80072f6:	3b01      	subs	r3, #1
 80072f8:	3201      	adds	r2, #1
 80072fa:	6023      	str	r3, [r4, #0]
 80072fc:	6062      	str	r2, [r4, #4]
 80072fe:	e7d5      	b.n	80072ac <_sungetc_r+0xc>
 8007300:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8007304:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007308:	6363      	str	r3, [r4, #52]	; 0x34
 800730a:	2303      	movs	r3, #3
 800730c:	63a3      	str	r3, [r4, #56]	; 0x38
 800730e:	4623      	mov	r3, r4
 8007310:	f803 5f46 	strb.w	r5, [r3, #70]!
 8007314:	6023      	str	r3, [r4, #0]
 8007316:	2301      	movs	r3, #1
 8007318:	e7dc      	b.n	80072d4 <_sungetc_r+0x34>

0800731a <__ssrefill_r>:
 800731a:	b510      	push	{r4, lr}
 800731c:	460c      	mov	r4, r1
 800731e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007320:	b169      	cbz	r1, 800733e <__ssrefill_r+0x24>
 8007322:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007326:	4299      	cmp	r1, r3
 8007328:	d001      	beq.n	800732e <__ssrefill_r+0x14>
 800732a:	f7ff fd69 	bl	8006e00 <_free_r>
 800732e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007330:	6063      	str	r3, [r4, #4]
 8007332:	2000      	movs	r0, #0
 8007334:	6360      	str	r0, [r4, #52]	; 0x34
 8007336:	b113      	cbz	r3, 800733e <__ssrefill_r+0x24>
 8007338:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800733a:	6023      	str	r3, [r4, #0]
 800733c:	bd10      	pop	{r4, pc}
 800733e:	6923      	ldr	r3, [r4, #16]
 8007340:	6023      	str	r3, [r4, #0]
 8007342:	2300      	movs	r3, #0
 8007344:	6063      	str	r3, [r4, #4]
 8007346:	89a3      	ldrh	r3, [r4, #12]
 8007348:	f043 0320 	orr.w	r3, r3, #32
 800734c:	81a3      	strh	r3, [r4, #12]
 800734e:	f04f 30ff 	mov.w	r0, #4294967295
 8007352:	e7f3      	b.n	800733c <__ssrefill_r+0x22>

08007354 <__ssvfiscanf_r>:
 8007354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007358:	460c      	mov	r4, r1
 800735a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800735e:	2100      	movs	r1, #0
 8007360:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8007364:	49a6      	ldr	r1, [pc, #664]	; (8007600 <__ssvfiscanf_r+0x2ac>)
 8007366:	91a0      	str	r1, [sp, #640]	; 0x280
 8007368:	f10d 0804 	add.w	r8, sp, #4
 800736c:	49a5      	ldr	r1, [pc, #660]	; (8007604 <__ssvfiscanf_r+0x2b0>)
 800736e:	4fa6      	ldr	r7, [pc, #664]	; (8007608 <__ssvfiscanf_r+0x2b4>)
 8007370:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800760c <__ssvfiscanf_r+0x2b8>
 8007374:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8007378:	4606      	mov	r6, r0
 800737a:	91a1      	str	r1, [sp, #644]	; 0x284
 800737c:	9300      	str	r3, [sp, #0]
 800737e:	7813      	ldrb	r3, [r2, #0]
 8007380:	2b00      	cmp	r3, #0
 8007382:	f000 815a 	beq.w	800763a <__ssvfiscanf_r+0x2e6>
 8007386:	5cf9      	ldrb	r1, [r7, r3]
 8007388:	f011 0108 	ands.w	r1, r1, #8
 800738c:	f102 0501 	add.w	r5, r2, #1
 8007390:	d019      	beq.n	80073c6 <__ssvfiscanf_r+0x72>
 8007392:	6863      	ldr	r3, [r4, #4]
 8007394:	2b00      	cmp	r3, #0
 8007396:	dd0f      	ble.n	80073b8 <__ssvfiscanf_r+0x64>
 8007398:	6823      	ldr	r3, [r4, #0]
 800739a:	781a      	ldrb	r2, [r3, #0]
 800739c:	5cba      	ldrb	r2, [r7, r2]
 800739e:	0712      	lsls	r2, r2, #28
 80073a0:	d401      	bmi.n	80073a6 <__ssvfiscanf_r+0x52>
 80073a2:	462a      	mov	r2, r5
 80073a4:	e7eb      	b.n	800737e <__ssvfiscanf_r+0x2a>
 80073a6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80073a8:	3201      	adds	r2, #1
 80073aa:	9245      	str	r2, [sp, #276]	; 0x114
 80073ac:	6862      	ldr	r2, [r4, #4]
 80073ae:	3301      	adds	r3, #1
 80073b0:	3a01      	subs	r2, #1
 80073b2:	6062      	str	r2, [r4, #4]
 80073b4:	6023      	str	r3, [r4, #0]
 80073b6:	e7ec      	b.n	8007392 <__ssvfiscanf_r+0x3e>
 80073b8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80073ba:	4621      	mov	r1, r4
 80073bc:	4630      	mov	r0, r6
 80073be:	4798      	blx	r3
 80073c0:	2800      	cmp	r0, #0
 80073c2:	d0e9      	beq.n	8007398 <__ssvfiscanf_r+0x44>
 80073c4:	e7ed      	b.n	80073a2 <__ssvfiscanf_r+0x4e>
 80073c6:	2b25      	cmp	r3, #37	; 0x25
 80073c8:	d012      	beq.n	80073f0 <__ssvfiscanf_r+0x9c>
 80073ca:	469a      	mov	sl, r3
 80073cc:	6863      	ldr	r3, [r4, #4]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	f340 8091 	ble.w	80074f6 <__ssvfiscanf_r+0x1a2>
 80073d4:	6822      	ldr	r2, [r4, #0]
 80073d6:	7813      	ldrb	r3, [r2, #0]
 80073d8:	4553      	cmp	r3, sl
 80073da:	f040 812e 	bne.w	800763a <__ssvfiscanf_r+0x2e6>
 80073de:	6863      	ldr	r3, [r4, #4]
 80073e0:	3b01      	subs	r3, #1
 80073e2:	6063      	str	r3, [r4, #4]
 80073e4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80073e6:	3201      	adds	r2, #1
 80073e8:	3301      	adds	r3, #1
 80073ea:	6022      	str	r2, [r4, #0]
 80073ec:	9345      	str	r3, [sp, #276]	; 0x114
 80073ee:	e7d8      	b.n	80073a2 <__ssvfiscanf_r+0x4e>
 80073f0:	9141      	str	r1, [sp, #260]	; 0x104
 80073f2:	9143      	str	r1, [sp, #268]	; 0x10c
 80073f4:	7853      	ldrb	r3, [r2, #1]
 80073f6:	2b2a      	cmp	r3, #42	; 0x2a
 80073f8:	bf02      	ittt	eq
 80073fa:	2310      	moveq	r3, #16
 80073fc:	1c95      	addeq	r5, r2, #2
 80073fe:	9341      	streq	r3, [sp, #260]	; 0x104
 8007400:	220a      	movs	r2, #10
 8007402:	46aa      	mov	sl, r5
 8007404:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8007408:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800740c:	2b09      	cmp	r3, #9
 800740e:	d91c      	bls.n	800744a <__ssvfiscanf_r+0xf6>
 8007410:	487e      	ldr	r0, [pc, #504]	; (800760c <__ssvfiscanf_r+0x2b8>)
 8007412:	2203      	movs	r2, #3
 8007414:	f7f8 feec 	bl	80001f0 <memchr>
 8007418:	b138      	cbz	r0, 800742a <__ssvfiscanf_r+0xd6>
 800741a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800741c:	eba0 0009 	sub.w	r0, r0, r9
 8007420:	2301      	movs	r3, #1
 8007422:	4083      	lsls	r3, r0
 8007424:	4313      	orrs	r3, r2
 8007426:	9341      	str	r3, [sp, #260]	; 0x104
 8007428:	4655      	mov	r5, sl
 800742a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800742e:	2b78      	cmp	r3, #120	; 0x78
 8007430:	d806      	bhi.n	8007440 <__ssvfiscanf_r+0xec>
 8007432:	2b57      	cmp	r3, #87	; 0x57
 8007434:	d810      	bhi.n	8007458 <__ssvfiscanf_r+0x104>
 8007436:	2b25      	cmp	r3, #37	; 0x25
 8007438:	d0c7      	beq.n	80073ca <__ssvfiscanf_r+0x76>
 800743a:	d857      	bhi.n	80074ec <__ssvfiscanf_r+0x198>
 800743c:	2b00      	cmp	r3, #0
 800743e:	d065      	beq.n	800750c <__ssvfiscanf_r+0x1b8>
 8007440:	2303      	movs	r3, #3
 8007442:	9347      	str	r3, [sp, #284]	; 0x11c
 8007444:	230a      	movs	r3, #10
 8007446:	9342      	str	r3, [sp, #264]	; 0x108
 8007448:	e076      	b.n	8007538 <__ssvfiscanf_r+0x1e4>
 800744a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800744c:	fb02 1103 	mla	r1, r2, r3, r1
 8007450:	3930      	subs	r1, #48	; 0x30
 8007452:	9143      	str	r1, [sp, #268]	; 0x10c
 8007454:	4655      	mov	r5, sl
 8007456:	e7d4      	b.n	8007402 <__ssvfiscanf_r+0xae>
 8007458:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800745c:	2a20      	cmp	r2, #32
 800745e:	d8ef      	bhi.n	8007440 <__ssvfiscanf_r+0xec>
 8007460:	a101      	add	r1, pc, #4	; (adr r1, 8007468 <__ssvfiscanf_r+0x114>)
 8007462:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007466:	bf00      	nop
 8007468:	0800751b 	.word	0x0800751b
 800746c:	08007441 	.word	0x08007441
 8007470:	08007441 	.word	0x08007441
 8007474:	08007579 	.word	0x08007579
 8007478:	08007441 	.word	0x08007441
 800747c:	08007441 	.word	0x08007441
 8007480:	08007441 	.word	0x08007441
 8007484:	08007441 	.word	0x08007441
 8007488:	08007441 	.word	0x08007441
 800748c:	08007441 	.word	0x08007441
 8007490:	08007441 	.word	0x08007441
 8007494:	0800758f 	.word	0x0800758f
 8007498:	08007575 	.word	0x08007575
 800749c:	080074f3 	.word	0x080074f3
 80074a0:	080074f3 	.word	0x080074f3
 80074a4:	080074f3 	.word	0x080074f3
 80074a8:	08007441 	.word	0x08007441
 80074ac:	08007531 	.word	0x08007531
 80074b0:	08007441 	.word	0x08007441
 80074b4:	08007441 	.word	0x08007441
 80074b8:	08007441 	.word	0x08007441
 80074bc:	08007441 	.word	0x08007441
 80074c0:	0800759f 	.word	0x0800759f
 80074c4:	0800756d 	.word	0x0800756d
 80074c8:	08007513 	.word	0x08007513
 80074cc:	08007441 	.word	0x08007441
 80074d0:	08007441 	.word	0x08007441
 80074d4:	0800759b 	.word	0x0800759b
 80074d8:	08007441 	.word	0x08007441
 80074dc:	08007575 	.word	0x08007575
 80074e0:	08007441 	.word	0x08007441
 80074e4:	08007441 	.word	0x08007441
 80074e8:	0800751b 	.word	0x0800751b
 80074ec:	3b45      	subs	r3, #69	; 0x45
 80074ee:	2b02      	cmp	r3, #2
 80074f0:	d8a6      	bhi.n	8007440 <__ssvfiscanf_r+0xec>
 80074f2:	2305      	movs	r3, #5
 80074f4:	e01f      	b.n	8007536 <__ssvfiscanf_r+0x1e2>
 80074f6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80074f8:	4621      	mov	r1, r4
 80074fa:	4630      	mov	r0, r6
 80074fc:	4798      	blx	r3
 80074fe:	2800      	cmp	r0, #0
 8007500:	f43f af68 	beq.w	80073d4 <__ssvfiscanf_r+0x80>
 8007504:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007506:	2800      	cmp	r0, #0
 8007508:	f040 808d 	bne.w	8007626 <__ssvfiscanf_r+0x2d2>
 800750c:	f04f 30ff 	mov.w	r0, #4294967295
 8007510:	e08f      	b.n	8007632 <__ssvfiscanf_r+0x2de>
 8007512:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007514:	f042 0220 	orr.w	r2, r2, #32
 8007518:	9241      	str	r2, [sp, #260]	; 0x104
 800751a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800751c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007520:	9241      	str	r2, [sp, #260]	; 0x104
 8007522:	2210      	movs	r2, #16
 8007524:	2b6f      	cmp	r3, #111	; 0x6f
 8007526:	9242      	str	r2, [sp, #264]	; 0x108
 8007528:	bf34      	ite	cc
 800752a:	2303      	movcc	r3, #3
 800752c:	2304      	movcs	r3, #4
 800752e:	e002      	b.n	8007536 <__ssvfiscanf_r+0x1e2>
 8007530:	2300      	movs	r3, #0
 8007532:	9342      	str	r3, [sp, #264]	; 0x108
 8007534:	2303      	movs	r3, #3
 8007536:	9347      	str	r3, [sp, #284]	; 0x11c
 8007538:	6863      	ldr	r3, [r4, #4]
 800753a:	2b00      	cmp	r3, #0
 800753c:	dd3d      	ble.n	80075ba <__ssvfiscanf_r+0x266>
 800753e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007540:	0659      	lsls	r1, r3, #25
 8007542:	d404      	bmi.n	800754e <__ssvfiscanf_r+0x1fa>
 8007544:	6823      	ldr	r3, [r4, #0]
 8007546:	781a      	ldrb	r2, [r3, #0]
 8007548:	5cba      	ldrb	r2, [r7, r2]
 800754a:	0712      	lsls	r2, r2, #28
 800754c:	d43c      	bmi.n	80075c8 <__ssvfiscanf_r+0x274>
 800754e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8007550:	2b02      	cmp	r3, #2
 8007552:	dc4b      	bgt.n	80075ec <__ssvfiscanf_r+0x298>
 8007554:	466b      	mov	r3, sp
 8007556:	4622      	mov	r2, r4
 8007558:	a941      	add	r1, sp, #260	; 0x104
 800755a:	4630      	mov	r0, r6
 800755c:	f000 fa02 	bl	8007964 <_scanf_chars>
 8007560:	2801      	cmp	r0, #1
 8007562:	d06a      	beq.n	800763a <__ssvfiscanf_r+0x2e6>
 8007564:	2802      	cmp	r0, #2
 8007566:	f47f af1c 	bne.w	80073a2 <__ssvfiscanf_r+0x4e>
 800756a:	e7cb      	b.n	8007504 <__ssvfiscanf_r+0x1b0>
 800756c:	2308      	movs	r3, #8
 800756e:	9342      	str	r3, [sp, #264]	; 0x108
 8007570:	2304      	movs	r3, #4
 8007572:	e7e0      	b.n	8007536 <__ssvfiscanf_r+0x1e2>
 8007574:	220a      	movs	r2, #10
 8007576:	e7d5      	b.n	8007524 <__ssvfiscanf_r+0x1d0>
 8007578:	4629      	mov	r1, r5
 800757a:	4640      	mov	r0, r8
 800757c:	f000 fb40 	bl	8007c00 <__sccl>
 8007580:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007582:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007586:	9341      	str	r3, [sp, #260]	; 0x104
 8007588:	4605      	mov	r5, r0
 800758a:	2301      	movs	r3, #1
 800758c:	e7d3      	b.n	8007536 <__ssvfiscanf_r+0x1e2>
 800758e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007590:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007594:	9341      	str	r3, [sp, #260]	; 0x104
 8007596:	2300      	movs	r3, #0
 8007598:	e7cd      	b.n	8007536 <__ssvfiscanf_r+0x1e2>
 800759a:	2302      	movs	r3, #2
 800759c:	e7cb      	b.n	8007536 <__ssvfiscanf_r+0x1e2>
 800759e:	9841      	ldr	r0, [sp, #260]	; 0x104
 80075a0:	06c3      	lsls	r3, r0, #27
 80075a2:	f53f aefe 	bmi.w	80073a2 <__ssvfiscanf_r+0x4e>
 80075a6:	9b00      	ldr	r3, [sp, #0]
 80075a8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80075aa:	1d19      	adds	r1, r3, #4
 80075ac:	9100      	str	r1, [sp, #0]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	07c0      	lsls	r0, r0, #31
 80075b2:	bf4c      	ite	mi
 80075b4:	801a      	strhmi	r2, [r3, #0]
 80075b6:	601a      	strpl	r2, [r3, #0]
 80075b8:	e6f3      	b.n	80073a2 <__ssvfiscanf_r+0x4e>
 80075ba:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80075bc:	4621      	mov	r1, r4
 80075be:	4630      	mov	r0, r6
 80075c0:	4798      	blx	r3
 80075c2:	2800      	cmp	r0, #0
 80075c4:	d0bb      	beq.n	800753e <__ssvfiscanf_r+0x1ea>
 80075c6:	e79d      	b.n	8007504 <__ssvfiscanf_r+0x1b0>
 80075c8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80075ca:	3201      	adds	r2, #1
 80075cc:	9245      	str	r2, [sp, #276]	; 0x114
 80075ce:	6862      	ldr	r2, [r4, #4]
 80075d0:	3a01      	subs	r2, #1
 80075d2:	2a00      	cmp	r2, #0
 80075d4:	6062      	str	r2, [r4, #4]
 80075d6:	dd02      	ble.n	80075de <__ssvfiscanf_r+0x28a>
 80075d8:	3301      	adds	r3, #1
 80075da:	6023      	str	r3, [r4, #0]
 80075dc:	e7b2      	b.n	8007544 <__ssvfiscanf_r+0x1f0>
 80075de:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80075e0:	4621      	mov	r1, r4
 80075e2:	4630      	mov	r0, r6
 80075e4:	4798      	blx	r3
 80075e6:	2800      	cmp	r0, #0
 80075e8:	d0ac      	beq.n	8007544 <__ssvfiscanf_r+0x1f0>
 80075ea:	e78b      	b.n	8007504 <__ssvfiscanf_r+0x1b0>
 80075ec:	2b04      	cmp	r3, #4
 80075ee:	dc0f      	bgt.n	8007610 <__ssvfiscanf_r+0x2bc>
 80075f0:	466b      	mov	r3, sp
 80075f2:	4622      	mov	r2, r4
 80075f4:	a941      	add	r1, sp, #260	; 0x104
 80075f6:	4630      	mov	r0, r6
 80075f8:	f000 fa0e 	bl	8007a18 <_scanf_i>
 80075fc:	e7b0      	b.n	8007560 <__ssvfiscanf_r+0x20c>
 80075fe:	bf00      	nop
 8007600:	080072a1 	.word	0x080072a1
 8007604:	0800731b 	.word	0x0800731b
 8007608:	0800839f 	.word	0x0800839f
 800760c:	08008356 	.word	0x08008356
 8007610:	4b0b      	ldr	r3, [pc, #44]	; (8007640 <__ssvfiscanf_r+0x2ec>)
 8007612:	2b00      	cmp	r3, #0
 8007614:	f43f aec5 	beq.w	80073a2 <__ssvfiscanf_r+0x4e>
 8007618:	466b      	mov	r3, sp
 800761a:	4622      	mov	r2, r4
 800761c:	a941      	add	r1, sp, #260	; 0x104
 800761e:	4630      	mov	r0, r6
 8007620:	f3af 8000 	nop.w
 8007624:	e79c      	b.n	8007560 <__ssvfiscanf_r+0x20c>
 8007626:	89a3      	ldrh	r3, [r4, #12]
 8007628:	f013 0f40 	tst.w	r3, #64	; 0x40
 800762c:	bf18      	it	ne
 800762e:	f04f 30ff 	movne.w	r0, #4294967295
 8007632:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8007636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800763a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800763c:	e7f9      	b.n	8007632 <__ssvfiscanf_r+0x2de>
 800763e:	bf00      	nop
 8007640:	00000000 	.word	0x00000000

08007644 <_printf_common>:
 8007644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007648:	4616      	mov	r6, r2
 800764a:	4699      	mov	r9, r3
 800764c:	688a      	ldr	r2, [r1, #8]
 800764e:	690b      	ldr	r3, [r1, #16]
 8007650:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007654:	4293      	cmp	r3, r2
 8007656:	bfb8      	it	lt
 8007658:	4613      	movlt	r3, r2
 800765a:	6033      	str	r3, [r6, #0]
 800765c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007660:	4607      	mov	r7, r0
 8007662:	460c      	mov	r4, r1
 8007664:	b10a      	cbz	r2, 800766a <_printf_common+0x26>
 8007666:	3301      	adds	r3, #1
 8007668:	6033      	str	r3, [r6, #0]
 800766a:	6823      	ldr	r3, [r4, #0]
 800766c:	0699      	lsls	r1, r3, #26
 800766e:	bf42      	ittt	mi
 8007670:	6833      	ldrmi	r3, [r6, #0]
 8007672:	3302      	addmi	r3, #2
 8007674:	6033      	strmi	r3, [r6, #0]
 8007676:	6825      	ldr	r5, [r4, #0]
 8007678:	f015 0506 	ands.w	r5, r5, #6
 800767c:	d106      	bne.n	800768c <_printf_common+0x48>
 800767e:	f104 0a19 	add.w	sl, r4, #25
 8007682:	68e3      	ldr	r3, [r4, #12]
 8007684:	6832      	ldr	r2, [r6, #0]
 8007686:	1a9b      	subs	r3, r3, r2
 8007688:	42ab      	cmp	r3, r5
 800768a:	dc26      	bgt.n	80076da <_printf_common+0x96>
 800768c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007690:	1e13      	subs	r3, r2, #0
 8007692:	6822      	ldr	r2, [r4, #0]
 8007694:	bf18      	it	ne
 8007696:	2301      	movne	r3, #1
 8007698:	0692      	lsls	r2, r2, #26
 800769a:	d42b      	bmi.n	80076f4 <_printf_common+0xb0>
 800769c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80076a0:	4649      	mov	r1, r9
 80076a2:	4638      	mov	r0, r7
 80076a4:	47c0      	blx	r8
 80076a6:	3001      	adds	r0, #1
 80076a8:	d01e      	beq.n	80076e8 <_printf_common+0xa4>
 80076aa:	6823      	ldr	r3, [r4, #0]
 80076ac:	6922      	ldr	r2, [r4, #16]
 80076ae:	f003 0306 	and.w	r3, r3, #6
 80076b2:	2b04      	cmp	r3, #4
 80076b4:	bf02      	ittt	eq
 80076b6:	68e5      	ldreq	r5, [r4, #12]
 80076b8:	6833      	ldreq	r3, [r6, #0]
 80076ba:	1aed      	subeq	r5, r5, r3
 80076bc:	68a3      	ldr	r3, [r4, #8]
 80076be:	bf0c      	ite	eq
 80076c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80076c4:	2500      	movne	r5, #0
 80076c6:	4293      	cmp	r3, r2
 80076c8:	bfc4      	itt	gt
 80076ca:	1a9b      	subgt	r3, r3, r2
 80076cc:	18ed      	addgt	r5, r5, r3
 80076ce:	2600      	movs	r6, #0
 80076d0:	341a      	adds	r4, #26
 80076d2:	42b5      	cmp	r5, r6
 80076d4:	d11a      	bne.n	800770c <_printf_common+0xc8>
 80076d6:	2000      	movs	r0, #0
 80076d8:	e008      	b.n	80076ec <_printf_common+0xa8>
 80076da:	2301      	movs	r3, #1
 80076dc:	4652      	mov	r2, sl
 80076de:	4649      	mov	r1, r9
 80076e0:	4638      	mov	r0, r7
 80076e2:	47c0      	blx	r8
 80076e4:	3001      	adds	r0, #1
 80076e6:	d103      	bne.n	80076f0 <_printf_common+0xac>
 80076e8:	f04f 30ff 	mov.w	r0, #4294967295
 80076ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076f0:	3501      	adds	r5, #1
 80076f2:	e7c6      	b.n	8007682 <_printf_common+0x3e>
 80076f4:	18e1      	adds	r1, r4, r3
 80076f6:	1c5a      	adds	r2, r3, #1
 80076f8:	2030      	movs	r0, #48	; 0x30
 80076fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80076fe:	4422      	add	r2, r4
 8007700:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007704:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007708:	3302      	adds	r3, #2
 800770a:	e7c7      	b.n	800769c <_printf_common+0x58>
 800770c:	2301      	movs	r3, #1
 800770e:	4622      	mov	r2, r4
 8007710:	4649      	mov	r1, r9
 8007712:	4638      	mov	r0, r7
 8007714:	47c0      	blx	r8
 8007716:	3001      	adds	r0, #1
 8007718:	d0e6      	beq.n	80076e8 <_printf_common+0xa4>
 800771a:	3601      	adds	r6, #1
 800771c:	e7d9      	b.n	80076d2 <_printf_common+0x8e>
	...

08007720 <_printf_i>:
 8007720:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007724:	7e0f      	ldrb	r7, [r1, #24]
 8007726:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007728:	2f78      	cmp	r7, #120	; 0x78
 800772a:	4691      	mov	r9, r2
 800772c:	4680      	mov	r8, r0
 800772e:	460c      	mov	r4, r1
 8007730:	469a      	mov	sl, r3
 8007732:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007736:	d807      	bhi.n	8007748 <_printf_i+0x28>
 8007738:	2f62      	cmp	r7, #98	; 0x62
 800773a:	d80a      	bhi.n	8007752 <_printf_i+0x32>
 800773c:	2f00      	cmp	r7, #0
 800773e:	f000 80d4 	beq.w	80078ea <_printf_i+0x1ca>
 8007742:	2f58      	cmp	r7, #88	; 0x58
 8007744:	f000 80c0 	beq.w	80078c8 <_printf_i+0x1a8>
 8007748:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800774c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007750:	e03a      	b.n	80077c8 <_printf_i+0xa8>
 8007752:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007756:	2b15      	cmp	r3, #21
 8007758:	d8f6      	bhi.n	8007748 <_printf_i+0x28>
 800775a:	a101      	add	r1, pc, #4	; (adr r1, 8007760 <_printf_i+0x40>)
 800775c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007760:	080077b9 	.word	0x080077b9
 8007764:	080077cd 	.word	0x080077cd
 8007768:	08007749 	.word	0x08007749
 800776c:	08007749 	.word	0x08007749
 8007770:	08007749 	.word	0x08007749
 8007774:	08007749 	.word	0x08007749
 8007778:	080077cd 	.word	0x080077cd
 800777c:	08007749 	.word	0x08007749
 8007780:	08007749 	.word	0x08007749
 8007784:	08007749 	.word	0x08007749
 8007788:	08007749 	.word	0x08007749
 800778c:	080078d1 	.word	0x080078d1
 8007790:	080077f9 	.word	0x080077f9
 8007794:	0800788b 	.word	0x0800788b
 8007798:	08007749 	.word	0x08007749
 800779c:	08007749 	.word	0x08007749
 80077a0:	080078f3 	.word	0x080078f3
 80077a4:	08007749 	.word	0x08007749
 80077a8:	080077f9 	.word	0x080077f9
 80077ac:	08007749 	.word	0x08007749
 80077b0:	08007749 	.word	0x08007749
 80077b4:	08007893 	.word	0x08007893
 80077b8:	682b      	ldr	r3, [r5, #0]
 80077ba:	1d1a      	adds	r2, r3, #4
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	602a      	str	r2, [r5, #0]
 80077c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80077c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80077c8:	2301      	movs	r3, #1
 80077ca:	e09f      	b.n	800790c <_printf_i+0x1ec>
 80077cc:	6820      	ldr	r0, [r4, #0]
 80077ce:	682b      	ldr	r3, [r5, #0]
 80077d0:	0607      	lsls	r7, r0, #24
 80077d2:	f103 0104 	add.w	r1, r3, #4
 80077d6:	6029      	str	r1, [r5, #0]
 80077d8:	d501      	bpl.n	80077de <_printf_i+0xbe>
 80077da:	681e      	ldr	r6, [r3, #0]
 80077dc:	e003      	b.n	80077e6 <_printf_i+0xc6>
 80077de:	0646      	lsls	r6, r0, #25
 80077e0:	d5fb      	bpl.n	80077da <_printf_i+0xba>
 80077e2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80077e6:	2e00      	cmp	r6, #0
 80077e8:	da03      	bge.n	80077f2 <_printf_i+0xd2>
 80077ea:	232d      	movs	r3, #45	; 0x2d
 80077ec:	4276      	negs	r6, r6
 80077ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077f2:	485a      	ldr	r0, [pc, #360]	; (800795c <_printf_i+0x23c>)
 80077f4:	230a      	movs	r3, #10
 80077f6:	e012      	b.n	800781e <_printf_i+0xfe>
 80077f8:	682b      	ldr	r3, [r5, #0]
 80077fa:	6820      	ldr	r0, [r4, #0]
 80077fc:	1d19      	adds	r1, r3, #4
 80077fe:	6029      	str	r1, [r5, #0]
 8007800:	0605      	lsls	r5, r0, #24
 8007802:	d501      	bpl.n	8007808 <_printf_i+0xe8>
 8007804:	681e      	ldr	r6, [r3, #0]
 8007806:	e002      	b.n	800780e <_printf_i+0xee>
 8007808:	0641      	lsls	r1, r0, #25
 800780a:	d5fb      	bpl.n	8007804 <_printf_i+0xe4>
 800780c:	881e      	ldrh	r6, [r3, #0]
 800780e:	4853      	ldr	r0, [pc, #332]	; (800795c <_printf_i+0x23c>)
 8007810:	2f6f      	cmp	r7, #111	; 0x6f
 8007812:	bf0c      	ite	eq
 8007814:	2308      	moveq	r3, #8
 8007816:	230a      	movne	r3, #10
 8007818:	2100      	movs	r1, #0
 800781a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800781e:	6865      	ldr	r5, [r4, #4]
 8007820:	60a5      	str	r5, [r4, #8]
 8007822:	2d00      	cmp	r5, #0
 8007824:	bfa2      	ittt	ge
 8007826:	6821      	ldrge	r1, [r4, #0]
 8007828:	f021 0104 	bicge.w	r1, r1, #4
 800782c:	6021      	strge	r1, [r4, #0]
 800782e:	b90e      	cbnz	r6, 8007834 <_printf_i+0x114>
 8007830:	2d00      	cmp	r5, #0
 8007832:	d04b      	beq.n	80078cc <_printf_i+0x1ac>
 8007834:	4615      	mov	r5, r2
 8007836:	fbb6 f1f3 	udiv	r1, r6, r3
 800783a:	fb03 6711 	mls	r7, r3, r1, r6
 800783e:	5dc7      	ldrb	r7, [r0, r7]
 8007840:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007844:	4637      	mov	r7, r6
 8007846:	42bb      	cmp	r3, r7
 8007848:	460e      	mov	r6, r1
 800784a:	d9f4      	bls.n	8007836 <_printf_i+0x116>
 800784c:	2b08      	cmp	r3, #8
 800784e:	d10b      	bne.n	8007868 <_printf_i+0x148>
 8007850:	6823      	ldr	r3, [r4, #0]
 8007852:	07de      	lsls	r6, r3, #31
 8007854:	d508      	bpl.n	8007868 <_printf_i+0x148>
 8007856:	6923      	ldr	r3, [r4, #16]
 8007858:	6861      	ldr	r1, [r4, #4]
 800785a:	4299      	cmp	r1, r3
 800785c:	bfde      	ittt	le
 800785e:	2330      	movle	r3, #48	; 0x30
 8007860:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007864:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007868:	1b52      	subs	r2, r2, r5
 800786a:	6122      	str	r2, [r4, #16]
 800786c:	f8cd a000 	str.w	sl, [sp]
 8007870:	464b      	mov	r3, r9
 8007872:	aa03      	add	r2, sp, #12
 8007874:	4621      	mov	r1, r4
 8007876:	4640      	mov	r0, r8
 8007878:	f7ff fee4 	bl	8007644 <_printf_common>
 800787c:	3001      	adds	r0, #1
 800787e:	d14a      	bne.n	8007916 <_printf_i+0x1f6>
 8007880:	f04f 30ff 	mov.w	r0, #4294967295
 8007884:	b004      	add	sp, #16
 8007886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800788a:	6823      	ldr	r3, [r4, #0]
 800788c:	f043 0320 	orr.w	r3, r3, #32
 8007890:	6023      	str	r3, [r4, #0]
 8007892:	4833      	ldr	r0, [pc, #204]	; (8007960 <_printf_i+0x240>)
 8007894:	2778      	movs	r7, #120	; 0x78
 8007896:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800789a:	6823      	ldr	r3, [r4, #0]
 800789c:	6829      	ldr	r1, [r5, #0]
 800789e:	061f      	lsls	r7, r3, #24
 80078a0:	f851 6b04 	ldr.w	r6, [r1], #4
 80078a4:	d402      	bmi.n	80078ac <_printf_i+0x18c>
 80078a6:	065f      	lsls	r7, r3, #25
 80078a8:	bf48      	it	mi
 80078aa:	b2b6      	uxthmi	r6, r6
 80078ac:	07df      	lsls	r7, r3, #31
 80078ae:	bf48      	it	mi
 80078b0:	f043 0320 	orrmi.w	r3, r3, #32
 80078b4:	6029      	str	r1, [r5, #0]
 80078b6:	bf48      	it	mi
 80078b8:	6023      	strmi	r3, [r4, #0]
 80078ba:	b91e      	cbnz	r6, 80078c4 <_printf_i+0x1a4>
 80078bc:	6823      	ldr	r3, [r4, #0]
 80078be:	f023 0320 	bic.w	r3, r3, #32
 80078c2:	6023      	str	r3, [r4, #0]
 80078c4:	2310      	movs	r3, #16
 80078c6:	e7a7      	b.n	8007818 <_printf_i+0xf8>
 80078c8:	4824      	ldr	r0, [pc, #144]	; (800795c <_printf_i+0x23c>)
 80078ca:	e7e4      	b.n	8007896 <_printf_i+0x176>
 80078cc:	4615      	mov	r5, r2
 80078ce:	e7bd      	b.n	800784c <_printf_i+0x12c>
 80078d0:	682b      	ldr	r3, [r5, #0]
 80078d2:	6826      	ldr	r6, [r4, #0]
 80078d4:	6961      	ldr	r1, [r4, #20]
 80078d6:	1d18      	adds	r0, r3, #4
 80078d8:	6028      	str	r0, [r5, #0]
 80078da:	0635      	lsls	r5, r6, #24
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	d501      	bpl.n	80078e4 <_printf_i+0x1c4>
 80078e0:	6019      	str	r1, [r3, #0]
 80078e2:	e002      	b.n	80078ea <_printf_i+0x1ca>
 80078e4:	0670      	lsls	r0, r6, #25
 80078e6:	d5fb      	bpl.n	80078e0 <_printf_i+0x1c0>
 80078e8:	8019      	strh	r1, [r3, #0]
 80078ea:	2300      	movs	r3, #0
 80078ec:	6123      	str	r3, [r4, #16]
 80078ee:	4615      	mov	r5, r2
 80078f0:	e7bc      	b.n	800786c <_printf_i+0x14c>
 80078f2:	682b      	ldr	r3, [r5, #0]
 80078f4:	1d1a      	adds	r2, r3, #4
 80078f6:	602a      	str	r2, [r5, #0]
 80078f8:	681d      	ldr	r5, [r3, #0]
 80078fa:	6862      	ldr	r2, [r4, #4]
 80078fc:	2100      	movs	r1, #0
 80078fe:	4628      	mov	r0, r5
 8007900:	f7f8 fc76 	bl	80001f0 <memchr>
 8007904:	b108      	cbz	r0, 800790a <_printf_i+0x1ea>
 8007906:	1b40      	subs	r0, r0, r5
 8007908:	6060      	str	r0, [r4, #4]
 800790a:	6863      	ldr	r3, [r4, #4]
 800790c:	6123      	str	r3, [r4, #16]
 800790e:	2300      	movs	r3, #0
 8007910:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007914:	e7aa      	b.n	800786c <_printf_i+0x14c>
 8007916:	6923      	ldr	r3, [r4, #16]
 8007918:	462a      	mov	r2, r5
 800791a:	4649      	mov	r1, r9
 800791c:	4640      	mov	r0, r8
 800791e:	47d0      	blx	sl
 8007920:	3001      	adds	r0, #1
 8007922:	d0ad      	beq.n	8007880 <_printf_i+0x160>
 8007924:	6823      	ldr	r3, [r4, #0]
 8007926:	079b      	lsls	r3, r3, #30
 8007928:	d413      	bmi.n	8007952 <_printf_i+0x232>
 800792a:	68e0      	ldr	r0, [r4, #12]
 800792c:	9b03      	ldr	r3, [sp, #12]
 800792e:	4298      	cmp	r0, r3
 8007930:	bfb8      	it	lt
 8007932:	4618      	movlt	r0, r3
 8007934:	e7a6      	b.n	8007884 <_printf_i+0x164>
 8007936:	2301      	movs	r3, #1
 8007938:	4632      	mov	r2, r6
 800793a:	4649      	mov	r1, r9
 800793c:	4640      	mov	r0, r8
 800793e:	47d0      	blx	sl
 8007940:	3001      	adds	r0, #1
 8007942:	d09d      	beq.n	8007880 <_printf_i+0x160>
 8007944:	3501      	adds	r5, #1
 8007946:	68e3      	ldr	r3, [r4, #12]
 8007948:	9903      	ldr	r1, [sp, #12]
 800794a:	1a5b      	subs	r3, r3, r1
 800794c:	42ab      	cmp	r3, r5
 800794e:	dcf2      	bgt.n	8007936 <_printf_i+0x216>
 8007950:	e7eb      	b.n	800792a <_printf_i+0x20a>
 8007952:	2500      	movs	r5, #0
 8007954:	f104 0619 	add.w	r6, r4, #25
 8007958:	e7f5      	b.n	8007946 <_printf_i+0x226>
 800795a:	bf00      	nop
 800795c:	08008361 	.word	0x08008361
 8007960:	08008372 	.word	0x08008372

08007964 <_scanf_chars>:
 8007964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007968:	4615      	mov	r5, r2
 800796a:	688a      	ldr	r2, [r1, #8]
 800796c:	4680      	mov	r8, r0
 800796e:	460c      	mov	r4, r1
 8007970:	b932      	cbnz	r2, 8007980 <_scanf_chars+0x1c>
 8007972:	698a      	ldr	r2, [r1, #24]
 8007974:	2a00      	cmp	r2, #0
 8007976:	bf0c      	ite	eq
 8007978:	2201      	moveq	r2, #1
 800797a:	f04f 32ff 	movne.w	r2, #4294967295
 800797e:	608a      	str	r2, [r1, #8]
 8007980:	6822      	ldr	r2, [r4, #0]
 8007982:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8007a14 <_scanf_chars+0xb0>
 8007986:	06d1      	lsls	r1, r2, #27
 8007988:	bf5f      	itttt	pl
 800798a:	681a      	ldrpl	r2, [r3, #0]
 800798c:	1d11      	addpl	r1, r2, #4
 800798e:	6019      	strpl	r1, [r3, #0]
 8007990:	6816      	ldrpl	r6, [r2, #0]
 8007992:	2700      	movs	r7, #0
 8007994:	69a0      	ldr	r0, [r4, #24]
 8007996:	b188      	cbz	r0, 80079bc <_scanf_chars+0x58>
 8007998:	2801      	cmp	r0, #1
 800799a:	d107      	bne.n	80079ac <_scanf_chars+0x48>
 800799c:	682a      	ldr	r2, [r5, #0]
 800799e:	7811      	ldrb	r1, [r2, #0]
 80079a0:	6962      	ldr	r2, [r4, #20]
 80079a2:	5c52      	ldrb	r2, [r2, r1]
 80079a4:	b952      	cbnz	r2, 80079bc <_scanf_chars+0x58>
 80079a6:	2f00      	cmp	r7, #0
 80079a8:	d031      	beq.n	8007a0e <_scanf_chars+0xaa>
 80079aa:	e022      	b.n	80079f2 <_scanf_chars+0x8e>
 80079ac:	2802      	cmp	r0, #2
 80079ae:	d120      	bne.n	80079f2 <_scanf_chars+0x8e>
 80079b0:	682b      	ldr	r3, [r5, #0]
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	f819 3003 	ldrb.w	r3, [r9, r3]
 80079b8:	071b      	lsls	r3, r3, #28
 80079ba:	d41a      	bmi.n	80079f2 <_scanf_chars+0x8e>
 80079bc:	6823      	ldr	r3, [r4, #0]
 80079be:	06da      	lsls	r2, r3, #27
 80079c0:	bf5e      	ittt	pl
 80079c2:	682b      	ldrpl	r3, [r5, #0]
 80079c4:	781b      	ldrbpl	r3, [r3, #0]
 80079c6:	f806 3b01 	strbpl.w	r3, [r6], #1
 80079ca:	682a      	ldr	r2, [r5, #0]
 80079cc:	686b      	ldr	r3, [r5, #4]
 80079ce:	3201      	adds	r2, #1
 80079d0:	602a      	str	r2, [r5, #0]
 80079d2:	68a2      	ldr	r2, [r4, #8]
 80079d4:	3b01      	subs	r3, #1
 80079d6:	3a01      	subs	r2, #1
 80079d8:	606b      	str	r3, [r5, #4]
 80079da:	3701      	adds	r7, #1
 80079dc:	60a2      	str	r2, [r4, #8]
 80079de:	b142      	cbz	r2, 80079f2 <_scanf_chars+0x8e>
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	dcd7      	bgt.n	8007994 <_scanf_chars+0x30>
 80079e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80079e8:	4629      	mov	r1, r5
 80079ea:	4640      	mov	r0, r8
 80079ec:	4798      	blx	r3
 80079ee:	2800      	cmp	r0, #0
 80079f0:	d0d0      	beq.n	8007994 <_scanf_chars+0x30>
 80079f2:	6823      	ldr	r3, [r4, #0]
 80079f4:	f013 0310 	ands.w	r3, r3, #16
 80079f8:	d105      	bne.n	8007a06 <_scanf_chars+0xa2>
 80079fa:	68e2      	ldr	r2, [r4, #12]
 80079fc:	3201      	adds	r2, #1
 80079fe:	60e2      	str	r2, [r4, #12]
 8007a00:	69a2      	ldr	r2, [r4, #24]
 8007a02:	b102      	cbz	r2, 8007a06 <_scanf_chars+0xa2>
 8007a04:	7033      	strb	r3, [r6, #0]
 8007a06:	6923      	ldr	r3, [r4, #16]
 8007a08:	443b      	add	r3, r7
 8007a0a:	6123      	str	r3, [r4, #16]
 8007a0c:	2000      	movs	r0, #0
 8007a0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a12:	bf00      	nop
 8007a14:	0800839f 	.word	0x0800839f

08007a18 <_scanf_i>:
 8007a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a1c:	4698      	mov	r8, r3
 8007a1e:	4b74      	ldr	r3, [pc, #464]	; (8007bf0 <_scanf_i+0x1d8>)
 8007a20:	460c      	mov	r4, r1
 8007a22:	4682      	mov	sl, r0
 8007a24:	4616      	mov	r6, r2
 8007a26:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007a2a:	b087      	sub	sp, #28
 8007a2c:	ab03      	add	r3, sp, #12
 8007a2e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007a32:	4b70      	ldr	r3, [pc, #448]	; (8007bf4 <_scanf_i+0x1dc>)
 8007a34:	69a1      	ldr	r1, [r4, #24]
 8007a36:	4a70      	ldr	r2, [pc, #448]	; (8007bf8 <_scanf_i+0x1e0>)
 8007a38:	2903      	cmp	r1, #3
 8007a3a:	bf18      	it	ne
 8007a3c:	461a      	movne	r2, r3
 8007a3e:	68a3      	ldr	r3, [r4, #8]
 8007a40:	9201      	str	r2, [sp, #4]
 8007a42:	1e5a      	subs	r2, r3, #1
 8007a44:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007a48:	bf88      	it	hi
 8007a4a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007a4e:	4627      	mov	r7, r4
 8007a50:	bf82      	ittt	hi
 8007a52:	eb03 0905 	addhi.w	r9, r3, r5
 8007a56:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007a5a:	60a3      	strhi	r3, [r4, #8]
 8007a5c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8007a60:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8007a64:	bf98      	it	ls
 8007a66:	f04f 0900 	movls.w	r9, #0
 8007a6a:	6023      	str	r3, [r4, #0]
 8007a6c:	463d      	mov	r5, r7
 8007a6e:	f04f 0b00 	mov.w	fp, #0
 8007a72:	6831      	ldr	r1, [r6, #0]
 8007a74:	ab03      	add	r3, sp, #12
 8007a76:	7809      	ldrb	r1, [r1, #0]
 8007a78:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8007a7c:	2202      	movs	r2, #2
 8007a7e:	f7f8 fbb7 	bl	80001f0 <memchr>
 8007a82:	b328      	cbz	r0, 8007ad0 <_scanf_i+0xb8>
 8007a84:	f1bb 0f01 	cmp.w	fp, #1
 8007a88:	d159      	bne.n	8007b3e <_scanf_i+0x126>
 8007a8a:	6862      	ldr	r2, [r4, #4]
 8007a8c:	b92a      	cbnz	r2, 8007a9a <_scanf_i+0x82>
 8007a8e:	6822      	ldr	r2, [r4, #0]
 8007a90:	2308      	movs	r3, #8
 8007a92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a96:	6063      	str	r3, [r4, #4]
 8007a98:	6022      	str	r2, [r4, #0]
 8007a9a:	6822      	ldr	r2, [r4, #0]
 8007a9c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8007aa0:	6022      	str	r2, [r4, #0]
 8007aa2:	68a2      	ldr	r2, [r4, #8]
 8007aa4:	1e51      	subs	r1, r2, #1
 8007aa6:	60a1      	str	r1, [r4, #8]
 8007aa8:	b192      	cbz	r2, 8007ad0 <_scanf_i+0xb8>
 8007aaa:	6832      	ldr	r2, [r6, #0]
 8007aac:	1c51      	adds	r1, r2, #1
 8007aae:	6031      	str	r1, [r6, #0]
 8007ab0:	7812      	ldrb	r2, [r2, #0]
 8007ab2:	f805 2b01 	strb.w	r2, [r5], #1
 8007ab6:	6872      	ldr	r2, [r6, #4]
 8007ab8:	3a01      	subs	r2, #1
 8007aba:	2a00      	cmp	r2, #0
 8007abc:	6072      	str	r2, [r6, #4]
 8007abe:	dc07      	bgt.n	8007ad0 <_scanf_i+0xb8>
 8007ac0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8007ac4:	4631      	mov	r1, r6
 8007ac6:	4650      	mov	r0, sl
 8007ac8:	4790      	blx	r2
 8007aca:	2800      	cmp	r0, #0
 8007acc:	f040 8085 	bne.w	8007bda <_scanf_i+0x1c2>
 8007ad0:	f10b 0b01 	add.w	fp, fp, #1
 8007ad4:	f1bb 0f03 	cmp.w	fp, #3
 8007ad8:	d1cb      	bne.n	8007a72 <_scanf_i+0x5a>
 8007ada:	6863      	ldr	r3, [r4, #4]
 8007adc:	b90b      	cbnz	r3, 8007ae2 <_scanf_i+0xca>
 8007ade:	230a      	movs	r3, #10
 8007ae0:	6063      	str	r3, [r4, #4]
 8007ae2:	6863      	ldr	r3, [r4, #4]
 8007ae4:	4945      	ldr	r1, [pc, #276]	; (8007bfc <_scanf_i+0x1e4>)
 8007ae6:	6960      	ldr	r0, [r4, #20]
 8007ae8:	1ac9      	subs	r1, r1, r3
 8007aea:	f000 f889 	bl	8007c00 <__sccl>
 8007aee:	f04f 0b00 	mov.w	fp, #0
 8007af2:	68a3      	ldr	r3, [r4, #8]
 8007af4:	6822      	ldr	r2, [r4, #0]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d03d      	beq.n	8007b76 <_scanf_i+0x15e>
 8007afa:	6831      	ldr	r1, [r6, #0]
 8007afc:	6960      	ldr	r0, [r4, #20]
 8007afe:	f891 c000 	ldrb.w	ip, [r1]
 8007b02:	f810 000c 	ldrb.w	r0, [r0, ip]
 8007b06:	2800      	cmp	r0, #0
 8007b08:	d035      	beq.n	8007b76 <_scanf_i+0x15e>
 8007b0a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8007b0e:	d124      	bne.n	8007b5a <_scanf_i+0x142>
 8007b10:	0510      	lsls	r0, r2, #20
 8007b12:	d522      	bpl.n	8007b5a <_scanf_i+0x142>
 8007b14:	f10b 0b01 	add.w	fp, fp, #1
 8007b18:	f1b9 0f00 	cmp.w	r9, #0
 8007b1c:	d003      	beq.n	8007b26 <_scanf_i+0x10e>
 8007b1e:	3301      	adds	r3, #1
 8007b20:	f109 39ff 	add.w	r9, r9, #4294967295
 8007b24:	60a3      	str	r3, [r4, #8]
 8007b26:	6873      	ldr	r3, [r6, #4]
 8007b28:	3b01      	subs	r3, #1
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	6073      	str	r3, [r6, #4]
 8007b2e:	dd1b      	ble.n	8007b68 <_scanf_i+0x150>
 8007b30:	6833      	ldr	r3, [r6, #0]
 8007b32:	3301      	adds	r3, #1
 8007b34:	6033      	str	r3, [r6, #0]
 8007b36:	68a3      	ldr	r3, [r4, #8]
 8007b38:	3b01      	subs	r3, #1
 8007b3a:	60a3      	str	r3, [r4, #8]
 8007b3c:	e7d9      	b.n	8007af2 <_scanf_i+0xda>
 8007b3e:	f1bb 0f02 	cmp.w	fp, #2
 8007b42:	d1ae      	bne.n	8007aa2 <_scanf_i+0x8a>
 8007b44:	6822      	ldr	r2, [r4, #0]
 8007b46:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8007b4a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8007b4e:	d1bf      	bne.n	8007ad0 <_scanf_i+0xb8>
 8007b50:	2310      	movs	r3, #16
 8007b52:	6063      	str	r3, [r4, #4]
 8007b54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b58:	e7a2      	b.n	8007aa0 <_scanf_i+0x88>
 8007b5a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8007b5e:	6022      	str	r2, [r4, #0]
 8007b60:	780b      	ldrb	r3, [r1, #0]
 8007b62:	f805 3b01 	strb.w	r3, [r5], #1
 8007b66:	e7de      	b.n	8007b26 <_scanf_i+0x10e>
 8007b68:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007b6c:	4631      	mov	r1, r6
 8007b6e:	4650      	mov	r0, sl
 8007b70:	4798      	blx	r3
 8007b72:	2800      	cmp	r0, #0
 8007b74:	d0df      	beq.n	8007b36 <_scanf_i+0x11e>
 8007b76:	6823      	ldr	r3, [r4, #0]
 8007b78:	05d9      	lsls	r1, r3, #23
 8007b7a:	d50d      	bpl.n	8007b98 <_scanf_i+0x180>
 8007b7c:	42bd      	cmp	r5, r7
 8007b7e:	d909      	bls.n	8007b94 <_scanf_i+0x17c>
 8007b80:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007b84:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007b88:	4632      	mov	r2, r6
 8007b8a:	4650      	mov	r0, sl
 8007b8c:	4798      	blx	r3
 8007b8e:	f105 39ff 	add.w	r9, r5, #4294967295
 8007b92:	464d      	mov	r5, r9
 8007b94:	42bd      	cmp	r5, r7
 8007b96:	d028      	beq.n	8007bea <_scanf_i+0x1d2>
 8007b98:	6822      	ldr	r2, [r4, #0]
 8007b9a:	f012 0210 	ands.w	r2, r2, #16
 8007b9e:	d113      	bne.n	8007bc8 <_scanf_i+0x1b0>
 8007ba0:	702a      	strb	r2, [r5, #0]
 8007ba2:	6863      	ldr	r3, [r4, #4]
 8007ba4:	9e01      	ldr	r6, [sp, #4]
 8007ba6:	4639      	mov	r1, r7
 8007ba8:	4650      	mov	r0, sl
 8007baa:	47b0      	blx	r6
 8007bac:	f8d8 3000 	ldr.w	r3, [r8]
 8007bb0:	6821      	ldr	r1, [r4, #0]
 8007bb2:	1d1a      	adds	r2, r3, #4
 8007bb4:	f8c8 2000 	str.w	r2, [r8]
 8007bb8:	f011 0f20 	tst.w	r1, #32
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	d00f      	beq.n	8007be0 <_scanf_i+0x1c8>
 8007bc0:	6018      	str	r0, [r3, #0]
 8007bc2:	68e3      	ldr	r3, [r4, #12]
 8007bc4:	3301      	adds	r3, #1
 8007bc6:	60e3      	str	r3, [r4, #12]
 8007bc8:	6923      	ldr	r3, [r4, #16]
 8007bca:	1bed      	subs	r5, r5, r7
 8007bcc:	445d      	add	r5, fp
 8007bce:	442b      	add	r3, r5
 8007bd0:	6123      	str	r3, [r4, #16]
 8007bd2:	2000      	movs	r0, #0
 8007bd4:	b007      	add	sp, #28
 8007bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bda:	f04f 0b00 	mov.w	fp, #0
 8007bde:	e7ca      	b.n	8007b76 <_scanf_i+0x15e>
 8007be0:	07ca      	lsls	r2, r1, #31
 8007be2:	bf4c      	ite	mi
 8007be4:	8018      	strhmi	r0, [r3, #0]
 8007be6:	6018      	strpl	r0, [r3, #0]
 8007be8:	e7eb      	b.n	8007bc2 <_scanf_i+0x1aa>
 8007bea:	2001      	movs	r0, #1
 8007bec:	e7f2      	b.n	8007bd4 <_scanf_i+0x1bc>
 8007bee:	bf00      	nop
 8007bf0:	0800832c 	.word	0x0800832c
 8007bf4:	08007fa5 	.word	0x08007fa5
 8007bf8:	08007ebd 	.word	0x08007ebd
 8007bfc:	08008393 	.word	0x08008393

08007c00 <__sccl>:
 8007c00:	b570      	push	{r4, r5, r6, lr}
 8007c02:	780b      	ldrb	r3, [r1, #0]
 8007c04:	4604      	mov	r4, r0
 8007c06:	2b5e      	cmp	r3, #94	; 0x5e
 8007c08:	bf0b      	itete	eq
 8007c0a:	784b      	ldrbeq	r3, [r1, #1]
 8007c0c:	1c4a      	addne	r2, r1, #1
 8007c0e:	1c8a      	addeq	r2, r1, #2
 8007c10:	2100      	movne	r1, #0
 8007c12:	bf08      	it	eq
 8007c14:	2101      	moveq	r1, #1
 8007c16:	3801      	subs	r0, #1
 8007c18:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8007c1c:	f800 1f01 	strb.w	r1, [r0, #1]!
 8007c20:	42a8      	cmp	r0, r5
 8007c22:	d1fb      	bne.n	8007c1c <__sccl+0x1c>
 8007c24:	b90b      	cbnz	r3, 8007c2a <__sccl+0x2a>
 8007c26:	1e50      	subs	r0, r2, #1
 8007c28:	bd70      	pop	{r4, r5, r6, pc}
 8007c2a:	f081 0101 	eor.w	r1, r1, #1
 8007c2e:	54e1      	strb	r1, [r4, r3]
 8007c30:	4610      	mov	r0, r2
 8007c32:	4602      	mov	r2, r0
 8007c34:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007c38:	2d2d      	cmp	r5, #45	; 0x2d
 8007c3a:	d005      	beq.n	8007c48 <__sccl+0x48>
 8007c3c:	2d5d      	cmp	r5, #93	; 0x5d
 8007c3e:	d016      	beq.n	8007c6e <__sccl+0x6e>
 8007c40:	2d00      	cmp	r5, #0
 8007c42:	d0f1      	beq.n	8007c28 <__sccl+0x28>
 8007c44:	462b      	mov	r3, r5
 8007c46:	e7f2      	b.n	8007c2e <__sccl+0x2e>
 8007c48:	7846      	ldrb	r6, [r0, #1]
 8007c4a:	2e5d      	cmp	r6, #93	; 0x5d
 8007c4c:	d0fa      	beq.n	8007c44 <__sccl+0x44>
 8007c4e:	42b3      	cmp	r3, r6
 8007c50:	dcf8      	bgt.n	8007c44 <__sccl+0x44>
 8007c52:	3002      	adds	r0, #2
 8007c54:	461a      	mov	r2, r3
 8007c56:	3201      	adds	r2, #1
 8007c58:	4296      	cmp	r6, r2
 8007c5a:	54a1      	strb	r1, [r4, r2]
 8007c5c:	dcfb      	bgt.n	8007c56 <__sccl+0x56>
 8007c5e:	1af2      	subs	r2, r6, r3
 8007c60:	3a01      	subs	r2, #1
 8007c62:	1c5d      	adds	r5, r3, #1
 8007c64:	42b3      	cmp	r3, r6
 8007c66:	bfa8      	it	ge
 8007c68:	2200      	movge	r2, #0
 8007c6a:	18ab      	adds	r3, r5, r2
 8007c6c:	e7e1      	b.n	8007c32 <__sccl+0x32>
 8007c6e:	4610      	mov	r0, r2
 8007c70:	e7da      	b.n	8007c28 <__sccl+0x28>

08007c72 <__submore>:
 8007c72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c76:	460c      	mov	r4, r1
 8007c78:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007c7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c7e:	4299      	cmp	r1, r3
 8007c80:	d11d      	bne.n	8007cbe <__submore+0x4c>
 8007c82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007c86:	f7ff f927 	bl	8006ed8 <_malloc_r>
 8007c8a:	b918      	cbnz	r0, 8007c94 <__submore+0x22>
 8007c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c98:	63a3      	str	r3, [r4, #56]	; 0x38
 8007c9a:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8007c9e:	6360      	str	r0, [r4, #52]	; 0x34
 8007ca0:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8007ca4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007ca8:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8007cac:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007cb0:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8007cb4:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8007cb8:	6020      	str	r0, [r4, #0]
 8007cba:	2000      	movs	r0, #0
 8007cbc:	e7e8      	b.n	8007c90 <__submore+0x1e>
 8007cbe:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8007cc0:	0077      	lsls	r7, r6, #1
 8007cc2:	463a      	mov	r2, r7
 8007cc4:	f000 f848 	bl	8007d58 <_realloc_r>
 8007cc8:	4605      	mov	r5, r0
 8007cca:	2800      	cmp	r0, #0
 8007ccc:	d0de      	beq.n	8007c8c <__submore+0x1a>
 8007cce:	eb00 0806 	add.w	r8, r0, r6
 8007cd2:	4601      	mov	r1, r0
 8007cd4:	4632      	mov	r2, r6
 8007cd6:	4640      	mov	r0, r8
 8007cd8:	f000 f830 	bl	8007d3c <memcpy>
 8007cdc:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8007ce0:	f8c4 8000 	str.w	r8, [r4]
 8007ce4:	e7e9      	b.n	8007cba <__submore+0x48>

08007ce6 <memmove>:
 8007ce6:	4288      	cmp	r0, r1
 8007ce8:	b510      	push	{r4, lr}
 8007cea:	eb01 0402 	add.w	r4, r1, r2
 8007cee:	d902      	bls.n	8007cf6 <memmove+0x10>
 8007cf0:	4284      	cmp	r4, r0
 8007cf2:	4623      	mov	r3, r4
 8007cf4:	d807      	bhi.n	8007d06 <memmove+0x20>
 8007cf6:	1e43      	subs	r3, r0, #1
 8007cf8:	42a1      	cmp	r1, r4
 8007cfa:	d008      	beq.n	8007d0e <memmove+0x28>
 8007cfc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d00:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007d04:	e7f8      	b.n	8007cf8 <memmove+0x12>
 8007d06:	4402      	add	r2, r0
 8007d08:	4601      	mov	r1, r0
 8007d0a:	428a      	cmp	r2, r1
 8007d0c:	d100      	bne.n	8007d10 <memmove+0x2a>
 8007d0e:	bd10      	pop	{r4, pc}
 8007d10:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007d14:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007d18:	e7f7      	b.n	8007d0a <memmove+0x24>
	...

08007d1c <_sbrk_r>:
 8007d1c:	b538      	push	{r3, r4, r5, lr}
 8007d1e:	4d06      	ldr	r5, [pc, #24]	; (8007d38 <_sbrk_r+0x1c>)
 8007d20:	2300      	movs	r3, #0
 8007d22:	4604      	mov	r4, r0
 8007d24:	4608      	mov	r0, r1
 8007d26:	602b      	str	r3, [r5, #0]
 8007d28:	f7fa ff24 	bl	8002b74 <_sbrk>
 8007d2c:	1c43      	adds	r3, r0, #1
 8007d2e:	d102      	bne.n	8007d36 <_sbrk_r+0x1a>
 8007d30:	682b      	ldr	r3, [r5, #0]
 8007d32:	b103      	cbz	r3, 8007d36 <_sbrk_r+0x1a>
 8007d34:	6023      	str	r3, [r4, #0]
 8007d36:	bd38      	pop	{r3, r4, r5, pc}
 8007d38:	20000738 	.word	0x20000738

08007d3c <memcpy>:
 8007d3c:	440a      	add	r2, r1
 8007d3e:	4291      	cmp	r1, r2
 8007d40:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d44:	d100      	bne.n	8007d48 <memcpy+0xc>
 8007d46:	4770      	bx	lr
 8007d48:	b510      	push	{r4, lr}
 8007d4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d52:	4291      	cmp	r1, r2
 8007d54:	d1f9      	bne.n	8007d4a <memcpy+0xe>
 8007d56:	bd10      	pop	{r4, pc}

08007d58 <_realloc_r>:
 8007d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d5c:	4680      	mov	r8, r0
 8007d5e:	4614      	mov	r4, r2
 8007d60:	460e      	mov	r6, r1
 8007d62:	b921      	cbnz	r1, 8007d6e <_realloc_r+0x16>
 8007d64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d68:	4611      	mov	r1, r2
 8007d6a:	f7ff b8b5 	b.w	8006ed8 <_malloc_r>
 8007d6e:	b92a      	cbnz	r2, 8007d7c <_realloc_r+0x24>
 8007d70:	f7ff f846 	bl	8006e00 <_free_r>
 8007d74:	4625      	mov	r5, r4
 8007d76:	4628      	mov	r0, r5
 8007d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d7c:	f000 f914 	bl	8007fa8 <_malloc_usable_size_r>
 8007d80:	4284      	cmp	r4, r0
 8007d82:	4607      	mov	r7, r0
 8007d84:	d802      	bhi.n	8007d8c <_realloc_r+0x34>
 8007d86:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007d8a:	d812      	bhi.n	8007db2 <_realloc_r+0x5a>
 8007d8c:	4621      	mov	r1, r4
 8007d8e:	4640      	mov	r0, r8
 8007d90:	f7ff f8a2 	bl	8006ed8 <_malloc_r>
 8007d94:	4605      	mov	r5, r0
 8007d96:	2800      	cmp	r0, #0
 8007d98:	d0ed      	beq.n	8007d76 <_realloc_r+0x1e>
 8007d9a:	42bc      	cmp	r4, r7
 8007d9c:	4622      	mov	r2, r4
 8007d9e:	4631      	mov	r1, r6
 8007da0:	bf28      	it	cs
 8007da2:	463a      	movcs	r2, r7
 8007da4:	f7ff ffca 	bl	8007d3c <memcpy>
 8007da8:	4631      	mov	r1, r6
 8007daa:	4640      	mov	r0, r8
 8007dac:	f7ff f828 	bl	8006e00 <_free_r>
 8007db0:	e7e1      	b.n	8007d76 <_realloc_r+0x1e>
 8007db2:	4635      	mov	r5, r6
 8007db4:	e7df      	b.n	8007d76 <_realloc_r+0x1e>
	...

08007db8 <_strtol_l.constprop.0>:
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dbe:	d001      	beq.n	8007dc4 <_strtol_l.constprop.0+0xc>
 8007dc0:	2b24      	cmp	r3, #36	; 0x24
 8007dc2:	d906      	bls.n	8007dd2 <_strtol_l.constprop.0+0x1a>
 8007dc4:	f7fe fff0 	bl	8006da8 <__errno>
 8007dc8:	2316      	movs	r3, #22
 8007dca:	6003      	str	r3, [r0, #0]
 8007dcc:	2000      	movs	r0, #0
 8007dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dd2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007eb8 <_strtol_l.constprop.0+0x100>
 8007dd6:	460d      	mov	r5, r1
 8007dd8:	462e      	mov	r6, r5
 8007dda:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007dde:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8007de2:	f017 0708 	ands.w	r7, r7, #8
 8007de6:	d1f7      	bne.n	8007dd8 <_strtol_l.constprop.0+0x20>
 8007de8:	2c2d      	cmp	r4, #45	; 0x2d
 8007dea:	d132      	bne.n	8007e52 <_strtol_l.constprop.0+0x9a>
 8007dec:	782c      	ldrb	r4, [r5, #0]
 8007dee:	2701      	movs	r7, #1
 8007df0:	1cb5      	adds	r5, r6, #2
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d05b      	beq.n	8007eae <_strtol_l.constprop.0+0xf6>
 8007df6:	2b10      	cmp	r3, #16
 8007df8:	d109      	bne.n	8007e0e <_strtol_l.constprop.0+0x56>
 8007dfa:	2c30      	cmp	r4, #48	; 0x30
 8007dfc:	d107      	bne.n	8007e0e <_strtol_l.constprop.0+0x56>
 8007dfe:	782c      	ldrb	r4, [r5, #0]
 8007e00:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007e04:	2c58      	cmp	r4, #88	; 0x58
 8007e06:	d14d      	bne.n	8007ea4 <_strtol_l.constprop.0+0xec>
 8007e08:	786c      	ldrb	r4, [r5, #1]
 8007e0a:	2310      	movs	r3, #16
 8007e0c:	3502      	adds	r5, #2
 8007e0e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007e12:	f108 38ff 	add.w	r8, r8, #4294967295
 8007e16:	f04f 0e00 	mov.w	lr, #0
 8007e1a:	fbb8 f9f3 	udiv	r9, r8, r3
 8007e1e:	4676      	mov	r6, lr
 8007e20:	fb03 8a19 	mls	sl, r3, r9, r8
 8007e24:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007e28:	f1bc 0f09 	cmp.w	ip, #9
 8007e2c:	d816      	bhi.n	8007e5c <_strtol_l.constprop.0+0xa4>
 8007e2e:	4664      	mov	r4, ip
 8007e30:	42a3      	cmp	r3, r4
 8007e32:	dd24      	ble.n	8007e7e <_strtol_l.constprop.0+0xc6>
 8007e34:	f1be 3fff 	cmp.w	lr, #4294967295
 8007e38:	d008      	beq.n	8007e4c <_strtol_l.constprop.0+0x94>
 8007e3a:	45b1      	cmp	r9, r6
 8007e3c:	d31c      	bcc.n	8007e78 <_strtol_l.constprop.0+0xc0>
 8007e3e:	d101      	bne.n	8007e44 <_strtol_l.constprop.0+0x8c>
 8007e40:	45a2      	cmp	sl, r4
 8007e42:	db19      	blt.n	8007e78 <_strtol_l.constprop.0+0xc0>
 8007e44:	fb06 4603 	mla	r6, r6, r3, r4
 8007e48:	f04f 0e01 	mov.w	lr, #1
 8007e4c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007e50:	e7e8      	b.n	8007e24 <_strtol_l.constprop.0+0x6c>
 8007e52:	2c2b      	cmp	r4, #43	; 0x2b
 8007e54:	bf04      	itt	eq
 8007e56:	782c      	ldrbeq	r4, [r5, #0]
 8007e58:	1cb5      	addeq	r5, r6, #2
 8007e5a:	e7ca      	b.n	8007df2 <_strtol_l.constprop.0+0x3a>
 8007e5c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007e60:	f1bc 0f19 	cmp.w	ip, #25
 8007e64:	d801      	bhi.n	8007e6a <_strtol_l.constprop.0+0xb2>
 8007e66:	3c37      	subs	r4, #55	; 0x37
 8007e68:	e7e2      	b.n	8007e30 <_strtol_l.constprop.0+0x78>
 8007e6a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007e6e:	f1bc 0f19 	cmp.w	ip, #25
 8007e72:	d804      	bhi.n	8007e7e <_strtol_l.constprop.0+0xc6>
 8007e74:	3c57      	subs	r4, #87	; 0x57
 8007e76:	e7db      	b.n	8007e30 <_strtol_l.constprop.0+0x78>
 8007e78:	f04f 3eff 	mov.w	lr, #4294967295
 8007e7c:	e7e6      	b.n	8007e4c <_strtol_l.constprop.0+0x94>
 8007e7e:	f1be 3fff 	cmp.w	lr, #4294967295
 8007e82:	d105      	bne.n	8007e90 <_strtol_l.constprop.0+0xd8>
 8007e84:	2322      	movs	r3, #34	; 0x22
 8007e86:	6003      	str	r3, [r0, #0]
 8007e88:	4646      	mov	r6, r8
 8007e8a:	b942      	cbnz	r2, 8007e9e <_strtol_l.constprop.0+0xe6>
 8007e8c:	4630      	mov	r0, r6
 8007e8e:	e79e      	b.n	8007dce <_strtol_l.constprop.0+0x16>
 8007e90:	b107      	cbz	r7, 8007e94 <_strtol_l.constprop.0+0xdc>
 8007e92:	4276      	negs	r6, r6
 8007e94:	2a00      	cmp	r2, #0
 8007e96:	d0f9      	beq.n	8007e8c <_strtol_l.constprop.0+0xd4>
 8007e98:	f1be 0f00 	cmp.w	lr, #0
 8007e9c:	d000      	beq.n	8007ea0 <_strtol_l.constprop.0+0xe8>
 8007e9e:	1e69      	subs	r1, r5, #1
 8007ea0:	6011      	str	r1, [r2, #0]
 8007ea2:	e7f3      	b.n	8007e8c <_strtol_l.constprop.0+0xd4>
 8007ea4:	2430      	movs	r4, #48	; 0x30
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d1b1      	bne.n	8007e0e <_strtol_l.constprop.0+0x56>
 8007eaa:	2308      	movs	r3, #8
 8007eac:	e7af      	b.n	8007e0e <_strtol_l.constprop.0+0x56>
 8007eae:	2c30      	cmp	r4, #48	; 0x30
 8007eb0:	d0a5      	beq.n	8007dfe <_strtol_l.constprop.0+0x46>
 8007eb2:	230a      	movs	r3, #10
 8007eb4:	e7ab      	b.n	8007e0e <_strtol_l.constprop.0+0x56>
 8007eb6:	bf00      	nop
 8007eb8:	0800839f 	.word	0x0800839f

08007ebc <_strtol_r>:
 8007ebc:	f7ff bf7c 	b.w	8007db8 <_strtol_l.constprop.0>

08007ec0 <_strtoul_l.constprop.0>:
 8007ec0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007ec4:	4f36      	ldr	r7, [pc, #216]	; (8007fa0 <_strtoul_l.constprop.0+0xe0>)
 8007ec6:	4686      	mov	lr, r0
 8007ec8:	460d      	mov	r5, r1
 8007eca:	4628      	mov	r0, r5
 8007ecc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007ed0:	5d3e      	ldrb	r6, [r7, r4]
 8007ed2:	f016 0608 	ands.w	r6, r6, #8
 8007ed6:	d1f8      	bne.n	8007eca <_strtoul_l.constprop.0+0xa>
 8007ed8:	2c2d      	cmp	r4, #45	; 0x2d
 8007eda:	d130      	bne.n	8007f3e <_strtoul_l.constprop.0+0x7e>
 8007edc:	782c      	ldrb	r4, [r5, #0]
 8007ede:	2601      	movs	r6, #1
 8007ee0:	1c85      	adds	r5, r0, #2
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d057      	beq.n	8007f96 <_strtoul_l.constprop.0+0xd6>
 8007ee6:	2b10      	cmp	r3, #16
 8007ee8:	d109      	bne.n	8007efe <_strtoul_l.constprop.0+0x3e>
 8007eea:	2c30      	cmp	r4, #48	; 0x30
 8007eec:	d107      	bne.n	8007efe <_strtoul_l.constprop.0+0x3e>
 8007eee:	7828      	ldrb	r0, [r5, #0]
 8007ef0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8007ef4:	2858      	cmp	r0, #88	; 0x58
 8007ef6:	d149      	bne.n	8007f8c <_strtoul_l.constprop.0+0xcc>
 8007ef8:	786c      	ldrb	r4, [r5, #1]
 8007efa:	2310      	movs	r3, #16
 8007efc:	3502      	adds	r5, #2
 8007efe:	f04f 38ff 	mov.w	r8, #4294967295
 8007f02:	2700      	movs	r7, #0
 8007f04:	fbb8 f8f3 	udiv	r8, r8, r3
 8007f08:	fb03 f908 	mul.w	r9, r3, r8
 8007f0c:	ea6f 0909 	mvn.w	r9, r9
 8007f10:	4638      	mov	r0, r7
 8007f12:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007f16:	f1bc 0f09 	cmp.w	ip, #9
 8007f1a:	d815      	bhi.n	8007f48 <_strtoul_l.constprop.0+0x88>
 8007f1c:	4664      	mov	r4, ip
 8007f1e:	42a3      	cmp	r3, r4
 8007f20:	dd23      	ble.n	8007f6a <_strtoul_l.constprop.0+0xaa>
 8007f22:	f1b7 3fff 	cmp.w	r7, #4294967295
 8007f26:	d007      	beq.n	8007f38 <_strtoul_l.constprop.0+0x78>
 8007f28:	4580      	cmp	r8, r0
 8007f2a:	d31b      	bcc.n	8007f64 <_strtoul_l.constprop.0+0xa4>
 8007f2c:	d101      	bne.n	8007f32 <_strtoul_l.constprop.0+0x72>
 8007f2e:	45a1      	cmp	r9, r4
 8007f30:	db18      	blt.n	8007f64 <_strtoul_l.constprop.0+0xa4>
 8007f32:	fb00 4003 	mla	r0, r0, r3, r4
 8007f36:	2701      	movs	r7, #1
 8007f38:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007f3c:	e7e9      	b.n	8007f12 <_strtoul_l.constprop.0+0x52>
 8007f3e:	2c2b      	cmp	r4, #43	; 0x2b
 8007f40:	bf04      	itt	eq
 8007f42:	782c      	ldrbeq	r4, [r5, #0]
 8007f44:	1c85      	addeq	r5, r0, #2
 8007f46:	e7cc      	b.n	8007ee2 <_strtoul_l.constprop.0+0x22>
 8007f48:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007f4c:	f1bc 0f19 	cmp.w	ip, #25
 8007f50:	d801      	bhi.n	8007f56 <_strtoul_l.constprop.0+0x96>
 8007f52:	3c37      	subs	r4, #55	; 0x37
 8007f54:	e7e3      	b.n	8007f1e <_strtoul_l.constprop.0+0x5e>
 8007f56:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007f5a:	f1bc 0f19 	cmp.w	ip, #25
 8007f5e:	d804      	bhi.n	8007f6a <_strtoul_l.constprop.0+0xaa>
 8007f60:	3c57      	subs	r4, #87	; 0x57
 8007f62:	e7dc      	b.n	8007f1e <_strtoul_l.constprop.0+0x5e>
 8007f64:	f04f 37ff 	mov.w	r7, #4294967295
 8007f68:	e7e6      	b.n	8007f38 <_strtoul_l.constprop.0+0x78>
 8007f6a:	1c7b      	adds	r3, r7, #1
 8007f6c:	d106      	bne.n	8007f7c <_strtoul_l.constprop.0+0xbc>
 8007f6e:	2322      	movs	r3, #34	; 0x22
 8007f70:	f8ce 3000 	str.w	r3, [lr]
 8007f74:	4638      	mov	r0, r7
 8007f76:	b932      	cbnz	r2, 8007f86 <_strtoul_l.constprop.0+0xc6>
 8007f78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f7c:	b106      	cbz	r6, 8007f80 <_strtoul_l.constprop.0+0xc0>
 8007f7e:	4240      	negs	r0, r0
 8007f80:	2a00      	cmp	r2, #0
 8007f82:	d0f9      	beq.n	8007f78 <_strtoul_l.constprop.0+0xb8>
 8007f84:	b107      	cbz	r7, 8007f88 <_strtoul_l.constprop.0+0xc8>
 8007f86:	1e69      	subs	r1, r5, #1
 8007f88:	6011      	str	r1, [r2, #0]
 8007f8a:	e7f5      	b.n	8007f78 <_strtoul_l.constprop.0+0xb8>
 8007f8c:	2430      	movs	r4, #48	; 0x30
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d1b5      	bne.n	8007efe <_strtoul_l.constprop.0+0x3e>
 8007f92:	2308      	movs	r3, #8
 8007f94:	e7b3      	b.n	8007efe <_strtoul_l.constprop.0+0x3e>
 8007f96:	2c30      	cmp	r4, #48	; 0x30
 8007f98:	d0a9      	beq.n	8007eee <_strtoul_l.constprop.0+0x2e>
 8007f9a:	230a      	movs	r3, #10
 8007f9c:	e7af      	b.n	8007efe <_strtoul_l.constprop.0+0x3e>
 8007f9e:	bf00      	nop
 8007fa0:	0800839f 	.word	0x0800839f

08007fa4 <_strtoul_r>:
 8007fa4:	f7ff bf8c 	b.w	8007ec0 <_strtoul_l.constprop.0>

08007fa8 <_malloc_usable_size_r>:
 8007fa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fac:	1f18      	subs	r0, r3, #4
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	bfbc      	itt	lt
 8007fb2:	580b      	ldrlt	r3, [r1, r0]
 8007fb4:	18c0      	addlt	r0, r0, r3
 8007fb6:	4770      	bx	lr

08007fb8 <_init>:
 8007fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fba:	bf00      	nop
 8007fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fbe:	bc08      	pop	{r3}
 8007fc0:	469e      	mov	lr, r3
 8007fc2:	4770      	bx	lr

08007fc4 <_fini>:
 8007fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fc6:	bf00      	nop
 8007fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fca:	bc08      	pop	{r3}
 8007fcc:	469e      	mov	lr, r3
 8007fce:	4770      	bx	lr
