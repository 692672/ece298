
Final_B4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f30  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004dc  080040d0  080040d0  000050d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045ac  080045ac  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  080045ac  080045ac  000055ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045b4  080045b4  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045b4  080045b4  000055b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080045b8  080045b8  000055b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080045bc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  2000005c  08004618  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000298  08004618  00006298  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000083ef  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001706  00000000  00000000  0000e47b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e8  00000000  00000000  0000fb88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000545  00000000  00000000  00010270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000156c5  00000000  00000000  000107b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008f41  00000000  00000000  00025e7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000851fe  00000000  00000000  0002edbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b3fb9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000237c  00000000  00000000  000b3ffc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  000b6378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080040b8 	.word	0x080040b8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	080040b8 	.word	0x080040b8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a19      	ldr	r2, [pc, #100]	@ (80005f4 <HAL_UART_RxCpltCallback+0x74>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d12b      	bne.n	80005ea <HAL_UART_RxCpltCallback+0x6a>
  {
    if (rx_data == '\r')
 8000592:	4b19      	ldr	r3, [pc, #100]	@ (80005f8 <HAL_UART_RxCpltCallback+0x78>)
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	2b0d      	cmp	r3, #13
 8000598:	d112      	bne.n	80005c0 <HAL_UART_RxCpltCallback+0x40>
    {
      buffer[buffer_index] = '\0';
 800059a:	4b18      	ldr	r3, [pc, #96]	@ (80005fc <HAL_UART_RxCpltCallback+0x7c>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4a18      	ldr	r2, [pc, #96]	@ (8000600 <HAL_UART_RxCpltCallback+0x80>)
 80005a0:	2100      	movs	r1, #0
 80005a2:	54d1      	strb	r1, [r2, r3]
      rcv_intpt_flag = 1;
 80005a4:	4b17      	ldr	r3, [pc, #92]	@ (8000604 <HAL_UART_RxCpltCallback+0x84>)
 80005a6:	2201      	movs	r2, #1
 80005a8:	701a      	strb	r2, [r3, #0]
      buffer_index = 0; // Reset buffer index for next input
 80005aa:	4b14      	ldr	r3, [pc, #80]	@ (80005fc <HAL_UART_RxCpltCallback+0x7c>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
      HAL_UART_Transmit(&huart6, (uint8_t *)"\r\n", 2, HAL_MAX_DELAY); // Echo newline
 80005b0:	f04f 33ff 	mov.w	r3, #4294967295
 80005b4:	2202      	movs	r2, #2
 80005b6:	4914      	ldr	r1, [pc, #80]	@ (8000608 <HAL_UART_RxCpltCallback+0x88>)
 80005b8:	4814      	ldr	r0, [pc, #80]	@ (800060c <HAL_UART_RxCpltCallback+0x8c>)
 80005ba:	f001 fc1d 	bl	8001df8 <HAL_UART_Transmit>
 80005be:	e00f      	b.n	80005e0 <HAL_UART_RxCpltCallback+0x60>
    }
    else
    {
      buffer[buffer_index++] = rx_data;
 80005c0:	4b0e      	ldr	r3, [pc, #56]	@ (80005fc <HAL_UART_RxCpltCallback+0x7c>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	1c5a      	adds	r2, r3, #1
 80005c6:	490d      	ldr	r1, [pc, #52]	@ (80005fc <HAL_UART_RxCpltCallback+0x7c>)
 80005c8:	600a      	str	r2, [r1, #0]
 80005ca:	4a0b      	ldr	r2, [pc, #44]	@ (80005f8 <HAL_UART_RxCpltCallback+0x78>)
 80005cc:	7811      	ldrb	r1, [r2, #0]
 80005ce:	4a0c      	ldr	r2, [pc, #48]	@ (8000600 <HAL_UART_RxCpltCallback+0x80>)
 80005d0:	54d1      	strb	r1, [r2, r3]
      HAL_UART_Transmit(&huart6, &rx_data, 1, HAL_MAX_DELAY); // Echo the received character
 80005d2:	f04f 33ff 	mov.w	r3, #4294967295
 80005d6:	2201      	movs	r2, #1
 80005d8:	4907      	ldr	r1, [pc, #28]	@ (80005f8 <HAL_UART_RxCpltCallback+0x78>)
 80005da:	480c      	ldr	r0, [pc, #48]	@ (800060c <HAL_UART_RxCpltCallback+0x8c>)
 80005dc:	f001 fc0c 	bl	8001df8 <HAL_UART_Transmit>
    }
    HAL_UART_Receive_IT(&huart6, &rx_data, 1);
 80005e0:	2201      	movs	r2, #1
 80005e2:	4905      	ldr	r1, [pc, #20]	@ (80005f8 <HAL_UART_RxCpltCallback+0x78>)
 80005e4:	4809      	ldr	r0, [pc, #36]	@ (800060c <HAL_UART_RxCpltCallback+0x8c>)
 80005e6:	f001 fc92 	bl	8001f0e <HAL_UART_Receive_IT>
  }
}
 80005ea:	bf00      	nop
 80005ec:	3708      	adds	r7, #8
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40011400 	.word	0x40011400
 80005f8:	20000144 	.word	0x20000144
 80005fc:	20000140 	.word	0x20000140
 8000600:	200000c0 	.word	0x200000c0
 8000604:	20000145 	.word	0x20000145
 8000608:	080040d0 	.word	0x080040d0
 800060c:	20000078 	.word	0x20000078

08000610 <handle_setup_mode>:

void handle_setup_mode(void)
{
 8000610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000612:	b0c1      	sub	sp, #260	@ 0x104
 8000614:	af0c      	add	r7, sp, #48	@ 0x30
  char response[BUFFER_SIZE];
  int inlet_pwm, zone1_pwm, zone2_pwm, zone3_pwm;
  int current_time, inlet_start, inlet_stop, zone1_start, zone1_stop, zone2_start, zone2_stop, zone3_start, zone3_stop;

  snprintf(response, BUFFER_SIZE, "SETUP MODE\r\n");
 8000616:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800061a:	4a4f      	ldr	r2, [pc, #316]	@ (8000758 <handle_setup_mode+0x148>)
 800061c:	2180      	movs	r1, #128	@ 0x80
 800061e:	4618      	mov	r0, r3
 8000620:	f002 fbf0 	bl	8002e04 <sniprintf>
  HAL_UART_Transmit(&huart6, (uint8_t *)response, strlen(response), HAL_MAX_DELAY);
 8000624:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000628:	4618      	mov	r0, r3
 800062a:	f7ff fdd9 	bl	80001e0 <strlen>
 800062e:	4603      	mov	r3, r0
 8000630:	b29a      	uxth	r2, r3
 8000632:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8000636:	f04f 33ff 	mov.w	r3, #4294967295
 800063a:	4848      	ldr	r0, [pc, #288]	@ (800075c <handle_setup_mode+0x14c>)
 800063c:	f001 fbdc 	bl	8001df8 <HAL_UART_Transmit>

  prompt_and_receive("Enter Inlet Motor Speed PWM (0-3):\r\n", &inlet_pwm);
 8000640:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000644:	4619      	mov	r1, r3
 8000646:	4846      	ldr	r0, [pc, #280]	@ (8000760 <handle_setup_mode+0x150>)
 8000648:	f000 f8a6 	bl	8000798 <prompt_and_receive>
  prompt_and_receive("Enter Zone 1 Motor Speed PWM (0-3):\r\n", &zone1_pwm);
 800064c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000650:	4619      	mov	r1, r3
 8000652:	4844      	ldr	r0, [pc, #272]	@ (8000764 <handle_setup_mode+0x154>)
 8000654:	f000 f8a0 	bl	8000798 <prompt_and_receive>
  prompt_and_receive("Enter Zone 2 Motor Speed PWM (0-3):\r\n", &zone2_pwm);
 8000658:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800065c:	4619      	mov	r1, r3
 800065e:	4842      	ldr	r0, [pc, #264]	@ (8000768 <handle_setup_mode+0x158>)
 8000660:	f000 f89a 	bl	8000798 <prompt_and_receive>
  prompt_and_receive("Enter Zone 3 Motor Speed PWM (0-3):\r\n", &zone3_pwm);
 8000664:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000668:	4619      	mov	r1, r3
 800066a:	4840      	ldr	r0, [pc, #256]	@ (800076c <handle_setup_mode+0x15c>)
 800066c:	f000 f894 	bl	8000798 <prompt_and_receive>
  prompt_and_receive("Enter Current Wall Clock Time (00-23):\r\n", &current_time);
 8000670:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000674:	4619      	mov	r1, r3
 8000676:	483e      	ldr	r0, [pc, #248]	@ (8000770 <handle_setup_mode+0x160>)
 8000678:	f000 f88e 	bl	8000798 <prompt_and_receive>
  prompt_and_receive("Enter Inlet Wall Clock Start Time (00-23):\r\n", &inlet_start);
 800067c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000680:	4619      	mov	r1, r3
 8000682:	483c      	ldr	r0, [pc, #240]	@ (8000774 <handle_setup_mode+0x164>)
 8000684:	f000 f888 	bl	8000798 <prompt_and_receive>
  prompt_and_receive("Enter Inlet Wall Clock Stop Time (00-23):\r\n", &inlet_stop);
 8000688:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800068c:	4619      	mov	r1, r3
 800068e:	483a      	ldr	r0, [pc, #232]	@ (8000778 <handle_setup_mode+0x168>)
 8000690:	f000 f882 	bl	8000798 <prompt_and_receive>
  prompt_and_receive("Enter Zone 1 Wall Clock Start Time (00-23):\r\n", &zone1_start);
 8000694:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000698:	4619      	mov	r1, r3
 800069a:	4838      	ldr	r0, [pc, #224]	@ (800077c <handle_setup_mode+0x16c>)
 800069c:	f000 f87c 	bl	8000798 <prompt_and_receive>
  prompt_and_receive("Enter Zone 1 Wall Clock Stop Time (00-23):\r\n", &zone1_stop);
 80006a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80006a4:	4619      	mov	r1, r3
 80006a6:	4836      	ldr	r0, [pc, #216]	@ (8000780 <handle_setup_mode+0x170>)
 80006a8:	f000 f876 	bl	8000798 <prompt_and_receive>
  prompt_and_receive("Enter Zone 2 Wall Clock Start Time (00-23):\r\n", &zone2_start);
 80006ac:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006b0:	4619      	mov	r1, r3
 80006b2:	4834      	ldr	r0, [pc, #208]	@ (8000784 <handle_setup_mode+0x174>)
 80006b4:	f000 f870 	bl	8000798 <prompt_and_receive>
  prompt_and_receive("Enter Zone 2 Wall Clock Stop Time (00-23):\r\n", &zone2_stop);
 80006b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006bc:	4619      	mov	r1, r3
 80006be:	4832      	ldr	r0, [pc, #200]	@ (8000788 <handle_setup_mode+0x178>)
 80006c0:	f000 f86a 	bl	8000798 <prompt_and_receive>
  prompt_and_receive("Enter Zone 3 Wall Clock Start Time (00-23):\r\n", &zone3_start);
 80006c4:	f107 0320 	add.w	r3, r7, #32
 80006c8:	4619      	mov	r1, r3
 80006ca:	4830      	ldr	r0, [pc, #192]	@ (800078c <handle_setup_mode+0x17c>)
 80006cc:	f000 f864 	bl	8000798 <prompt_and_receive>
  prompt_and_receive("Enter Zone 3 Wall Clock Stop Time (00-23):\r\n", &zone3_stop);
 80006d0:	f107 031c 	add.w	r3, r7, #28
 80006d4:	4619      	mov	r1, r3
 80006d6:	482e      	ldr	r0, [pc, #184]	@ (8000790 <handle_setup_mode+0x180>)
 80006d8:	f000 f85e 	bl	8000798 <prompt_and_receive>

  snprintf(response, BUFFER_SIZE, "Configuration Completed:\r\nInlet PWM: %d\r\nZone 1 PWM: %d\r\nZone 2 PWM: %d\r\nZone 3 PWM: %d\r\nCurrent Time: %d\r\nInlet Start: %d\r\nInlet Stop: %d\r\nZone 1 Start: %d\r\nZone 1 Stop: %d\r\nZone 2 Start: %d\r\nZone 2 Stop: %d\r\nZone 3 Start: %d\r\nZone 3 Stop: %d\r\n",
 80006dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80006de:	617b      	str	r3, [r7, #20]
 80006e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80006e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80006e4:	613a      	str	r2, [r7, #16]
 80006e6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80006e8:	60fa      	str	r2, [r7, #12]
 80006ea:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80006ec:	60ba      	str	r2, [r7, #8]
 80006ee:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 80006f0:	6b7d      	ldr	r5, [r7, #52]	@ 0x34
 80006f2:	6b3e      	ldr	r6, [r7, #48]	@ 0x30
 80006f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80006f6:	607a      	str	r2, [r7, #4]
 80006f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80006fa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80006fc:	6039      	str	r1, [r7, #0]
 80006fe:	6a39      	ldr	r1, [r7, #32]
 8000700:	69f8      	ldr	r0, [r7, #28]
 8000702:	f107 0c50 	add.w	ip, r7, #80	@ 0x50
 8000706:	900b      	str	r0, [sp, #44]	@ 0x2c
 8000708:	910a      	str	r1, [sp, #40]	@ 0x28
 800070a:	6839      	ldr	r1, [r7, #0]
 800070c:	9109      	str	r1, [sp, #36]	@ 0x24
 800070e:	9208      	str	r2, [sp, #32]
 8000710:	687a      	ldr	r2, [r7, #4]
 8000712:	9207      	str	r2, [sp, #28]
 8000714:	9606      	str	r6, [sp, #24]
 8000716:	9505      	str	r5, [sp, #20]
 8000718:	9404      	str	r4, [sp, #16]
 800071a:	68ba      	ldr	r2, [r7, #8]
 800071c:	9203      	str	r2, [sp, #12]
 800071e:	68fa      	ldr	r2, [r7, #12]
 8000720:	9202      	str	r2, [sp, #8]
 8000722:	693a      	ldr	r2, [r7, #16]
 8000724:	9201      	str	r2, [sp, #4]
 8000726:	9300      	str	r3, [sp, #0]
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	4a1a      	ldr	r2, [pc, #104]	@ (8000794 <handle_setup_mode+0x184>)
 800072c:	2180      	movs	r1, #128	@ 0x80
 800072e:	4660      	mov	r0, ip
 8000730:	f002 fb68 	bl	8002e04 <sniprintf>
           inlet_pwm, zone1_pwm, zone2_pwm, zone3_pwm, current_time, inlet_start, inlet_stop, zone1_start, zone1_stop, zone2_start, zone2_stop, zone3_start, zone3_stop);
  HAL_UART_Transmit(&huart6, (uint8_t *)response, strlen(response), HAL_MAX_DELAY);
 8000734:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000738:	4618      	mov	r0, r3
 800073a:	f7ff fd51 	bl	80001e0 <strlen>
 800073e:	4603      	mov	r3, r0
 8000740:	b29a      	uxth	r2, r3
 8000742:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8000746:	f04f 33ff 	mov.w	r3, #4294967295
 800074a:	4804      	ldr	r0, [pc, #16]	@ (800075c <handle_setup_mode+0x14c>)
 800074c:	f001 fb54 	bl	8001df8 <HAL_UART_Transmit>
}
 8000750:	bf00      	nop
 8000752:	37d4      	adds	r7, #212	@ 0xd4
 8000754:	46bd      	mov	sp, r7
 8000756:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000758:	080040d4 	.word	0x080040d4
 800075c:	20000078 	.word	0x20000078
 8000760:	080040e4 	.word	0x080040e4
 8000764:	0800410c 	.word	0x0800410c
 8000768:	08004134 	.word	0x08004134
 800076c:	0800415c 	.word	0x0800415c
 8000770:	08004184 	.word	0x08004184
 8000774:	080041b0 	.word	0x080041b0
 8000778:	080041e0 	.word	0x080041e0
 800077c:	0800420c 	.word	0x0800420c
 8000780:	0800423c 	.word	0x0800423c
 8000784:	0800426c 	.word	0x0800426c
 8000788:	0800429c 	.word	0x0800429c
 800078c:	080042cc 	.word	0x080042cc
 8000790:	080042fc 	.word	0x080042fc
 8000794:	0800432c 	.word	0x0800432c

08000798 <prompt_and_receive>:

void prompt_and_receive(const char *prompt, int *value)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b0a2      	sub	sp, #136	@ 0x88
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	6039      	str	r1, [r7, #0]
  char response[BUFFER_SIZE];

  HAL_UART_Transmit(&huart6, (uint8_t *)prompt, strlen(prompt), HAL_MAX_DELAY);
 80007a2:	6878      	ldr	r0, [r7, #4]
 80007a4:	f7ff fd1c 	bl	80001e0 <strlen>
 80007a8:	4603      	mov	r3, r0
 80007aa:	b29a      	uxth	r2, r3
 80007ac:	f04f 33ff 	mov.w	r3, #4294967295
 80007b0:	6879      	ldr	r1, [r7, #4]
 80007b2:	4815      	ldr	r0, [pc, #84]	@ (8000808 <prompt_and_receive+0x70>)
 80007b4:	f001 fb20 	bl	8001df8 <HAL_UART_Transmit>
  rcv_intpt_flag = 0;
 80007b8:	4b14      	ldr	r3, [pc, #80]	@ (800080c <prompt_and_receive+0x74>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	701a      	strb	r2, [r3, #0]
  while (!rcv_intpt_flag); // Wait for input
 80007be:	bf00      	nop
 80007c0:	4b12      	ldr	r3, [pc, #72]	@ (800080c <prompt_and_receive+0x74>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d0fa      	beq.n	80007c0 <prompt_and_receive+0x28>
  sscanf(buffer, "%d", value);
 80007ca:	683a      	ldr	r2, [r7, #0]
 80007cc:	4910      	ldr	r1, [pc, #64]	@ (8000810 <prompt_and_receive+0x78>)
 80007ce:	4811      	ldr	r0, [pc, #68]	@ (8000814 <prompt_and_receive+0x7c>)
 80007d0:	f002 fb4c 	bl	8002e6c <siscanf>
  snprintf(response, BUFFER_SIZE, "Received: %d\r\n", *value);
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	f107 0008 	add.w	r0, r7, #8
 80007dc:	4a0e      	ldr	r2, [pc, #56]	@ (8000818 <prompt_and_receive+0x80>)
 80007de:	2180      	movs	r1, #128	@ 0x80
 80007e0:	f002 fb10 	bl	8002e04 <sniprintf>
  HAL_UART_Transmit(&huart6, (uint8_t *)response, strlen(response), HAL_MAX_DELAY);
 80007e4:	f107 0308 	add.w	r3, r7, #8
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff fcf9 	bl	80001e0 <strlen>
 80007ee:	4603      	mov	r3, r0
 80007f0:	b29a      	uxth	r2, r3
 80007f2:	f107 0108 	add.w	r1, r7, #8
 80007f6:	f04f 33ff 	mov.w	r3, #4294967295
 80007fa:	4803      	ldr	r0, [pc, #12]	@ (8000808 <prompt_and_receive+0x70>)
 80007fc:	f001 fafc 	bl	8001df8 <HAL_UART_Transmit>
}
 8000800:	bf00      	nop
 8000802:	3788      	adds	r7, #136	@ 0x88
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	20000078 	.word	0x20000078
 800080c:	20000145 	.word	0x20000145
 8000810:	08004424 	.word	0x08004424
 8000814:	200000c0 	.word	0x200000c0
 8000818:	08004428 	.word	0x08004428

0800081c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000820:	f000 fa4e 	bl	8000cc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000824:	f000 f81e 	bl	8000864 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000828:	f000 f8b2 	bl	8000990 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 800082c:	f000 f886 	bl	800093c <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  // Turn off the green LED (PA5) at startup
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000830:	2200      	movs	r2, #0
 8000832:	2120      	movs	r1, #32
 8000834:	4808      	ldr	r0, [pc, #32]	@ (8000858 <main+0x3c>)
 8000836:	f000 fddd 	bl	80013f4 <HAL_GPIO_WritePin>

  // Start receiving data via interrupt
  HAL_UART_Receive_IT(&huart6, &rx_data, 1);
 800083a:	2201      	movs	r2, #1
 800083c:	4907      	ldr	r1, [pc, #28]	@ (800085c <main+0x40>)
 800083e:	4808      	ldr	r0, [pc, #32]	@ (8000860 <main+0x44>)
 8000840:	f001 fb65 	bl	8001f0e <HAL_UART_Receive_IT>

  // Indicate entering setup mode
  handle_setup_mode();
 8000844:	f7ff fee4 	bl	8000610 <handle_setup_mode>

  // Turn on the green LED after setup mode
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000848:	2201      	movs	r2, #1
 800084a:	2120      	movs	r1, #32
 800084c:	4802      	ldr	r0, [pc, #8]	@ (8000858 <main+0x3c>)
 800084e:	f000 fdd1 	bl	80013f4 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000852:	bf00      	nop
 8000854:	e7fd      	b.n	8000852 <main+0x36>
 8000856:	bf00      	nop
 8000858:	40020000 	.word	0x40020000
 800085c:	20000144 	.word	0x20000144
 8000860:	20000078 	.word	0x20000078

08000864 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b094      	sub	sp, #80	@ 0x50
 8000868:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086a:	f107 0320 	add.w	r3, r7, #32
 800086e:	2230      	movs	r2, #48	@ 0x30
 8000870:	2100      	movs	r1, #0
 8000872:	4618      	mov	r0, r3
 8000874:	f002 fb26 	bl	8002ec4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000878:	f107 030c 	add.w	r3, r7, #12
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
 8000886:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000888:	2300      	movs	r3, #0
 800088a:	60bb      	str	r3, [r7, #8]
 800088c:	4b29      	ldr	r3, [pc, #164]	@ (8000934 <SystemClock_Config+0xd0>)
 800088e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000890:	4a28      	ldr	r2, [pc, #160]	@ (8000934 <SystemClock_Config+0xd0>)
 8000892:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000896:	6413      	str	r3, [r2, #64]	@ 0x40
 8000898:	4b26      	ldr	r3, [pc, #152]	@ (8000934 <SystemClock_Config+0xd0>)
 800089a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800089c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008a0:	60bb      	str	r3, [r7, #8]
 80008a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008a4:	2300      	movs	r3, #0
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	4b23      	ldr	r3, [pc, #140]	@ (8000938 <SystemClock_Config+0xd4>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80008b0:	4a21      	ldr	r2, [pc, #132]	@ (8000938 <SystemClock_Config+0xd4>)
 80008b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80008b6:	6013      	str	r3, [r2, #0]
 80008b8:	4b1f      	ldr	r3, [pc, #124]	@ (8000938 <SystemClock_Config+0xd4>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008c0:	607b      	str	r3, [r7, #4]
 80008c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008c4:	2302      	movs	r3, #2
 80008c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008c8:	2301      	movs	r3, #1
 80008ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008cc:	2310      	movs	r3, #16
 80008ce:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008d0:	2302      	movs	r3, #2
 80008d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008d4:	2300      	movs	r3, #0
 80008d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80008d8:	2310      	movs	r3, #16
 80008da:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008dc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80008e0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008e2:	2304      	movs	r3, #4
 80008e4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008e6:	2307      	movs	r3, #7
 80008e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ea:	f107 0320 	add.w	r3, r7, #32
 80008ee:	4618      	mov	r0, r3
 80008f0:	f000 fd9a 	bl	8001428 <HAL_RCC_OscConfig>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80008fa:	f000 f8b7 	bl	8000a6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008fe:	230f      	movs	r3, #15
 8000900:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000902:	2302      	movs	r3, #2
 8000904:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000906:	2300      	movs	r3, #0
 8000908:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800090a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800090e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000910:	2300      	movs	r3, #0
 8000912:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000914:	f107 030c 	add.w	r3, r7, #12
 8000918:	2102      	movs	r1, #2
 800091a:	4618      	mov	r0, r3
 800091c:	f000 fffc 	bl	8001918 <HAL_RCC_ClockConfig>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000926:	f000 f8a1 	bl	8000a6c <Error_Handler>
  }
}
 800092a:	bf00      	nop
 800092c:	3750      	adds	r7, #80	@ 0x50
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40023800 	.word	0x40023800
 8000938:	40007000 	.word	0x40007000

0800093c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000940:	4b11      	ldr	r3, [pc, #68]	@ (8000988 <MX_USART6_UART_Init+0x4c>)
 8000942:	4a12      	ldr	r2, [pc, #72]	@ (800098c <MX_USART6_UART_Init+0x50>)
 8000944:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600; // Updated baud rate to 11520
 8000946:	4b10      	ldr	r3, [pc, #64]	@ (8000988 <MX_USART6_UART_Init+0x4c>)
 8000948:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800094c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800094e:	4b0e      	ldr	r3, [pc, #56]	@ (8000988 <MX_USART6_UART_Init+0x4c>)
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000954:	4b0c      	ldr	r3, [pc, #48]	@ (8000988 <MX_USART6_UART_Init+0x4c>)
 8000956:	2200      	movs	r2, #0
 8000958:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800095a:	4b0b      	ldr	r3, [pc, #44]	@ (8000988 <MX_USART6_UART_Init+0x4c>)
 800095c:	2200      	movs	r2, #0
 800095e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000960:	4b09      	ldr	r3, [pc, #36]	@ (8000988 <MX_USART6_UART_Init+0x4c>)
 8000962:	220c      	movs	r2, #12
 8000964:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000966:	4b08      	ldr	r3, [pc, #32]	@ (8000988 <MX_USART6_UART_Init+0x4c>)
 8000968:	2200      	movs	r2, #0
 800096a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800096c:	4b06      	ldr	r3, [pc, #24]	@ (8000988 <MX_USART6_UART_Init+0x4c>)
 800096e:	2200      	movs	r2, #0
 8000970:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000972:	4805      	ldr	r0, [pc, #20]	@ (8000988 <MX_USART6_UART_Init+0x4c>)
 8000974:	f001 f9f0 	bl	8001d58 <HAL_UART_Init>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800097e:	f000 f875 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20000078 	.word	0x20000078
 800098c:	40011400 	.word	0x40011400

08000990 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08a      	sub	sp, #40	@ 0x28
 8000994:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
 80009a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	613b      	str	r3, [r7, #16]
 80009aa:	4b2d      	ldr	r3, [pc, #180]	@ (8000a60 <MX_GPIO_Init+0xd0>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ae:	4a2c      	ldr	r2, [pc, #176]	@ (8000a60 <MX_GPIO_Init+0xd0>)
 80009b0:	f043 0304 	orr.w	r3, r3, #4
 80009b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b6:	4b2a      	ldr	r3, [pc, #168]	@ (8000a60 <MX_GPIO_Init+0xd0>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ba:	f003 0304 	and.w	r3, r3, #4
 80009be:	613b      	str	r3, [r7, #16]
 80009c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	4b26      	ldr	r3, [pc, #152]	@ (8000a60 <MX_GPIO_Init+0xd0>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ca:	4a25      	ldr	r2, [pc, #148]	@ (8000a60 <MX_GPIO_Init+0xd0>)
 80009cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009d2:	4b23      	ldr	r3, [pc, #140]	@ (8000a60 <MX_GPIO_Init+0xd0>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	60bb      	str	r3, [r7, #8]
 80009e2:	4b1f      	ldr	r3, [pc, #124]	@ (8000a60 <MX_GPIO_Init+0xd0>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e6:	4a1e      	ldr	r2, [pc, #120]	@ (8000a60 <MX_GPIO_Init+0xd0>)
 80009e8:	f043 0301 	orr.w	r3, r3, #1
 80009ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000a60 <MX_GPIO_Init+0xd0>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	60bb      	str	r3, [r7, #8]
 80009f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	607b      	str	r3, [r7, #4]
 80009fe:	4b18      	ldr	r3, [pc, #96]	@ (8000a60 <MX_GPIO_Init+0xd0>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a02:	4a17      	ldr	r2, [pc, #92]	@ (8000a60 <MX_GPIO_Init+0xd0>)
 8000a04:	f043 0302 	orr.w	r3, r3, #2
 8000a08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a0a:	4b15      	ldr	r3, [pc, #84]	@ (8000a60 <MX_GPIO_Init+0xd0>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0e:	f003 0302 	and.w	r3, r3, #2
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000a16:	2200      	movs	r2, #0
 8000a18:	2120      	movs	r1, #32
 8000a1a:	4812      	ldr	r0, [pc, #72]	@ (8000a64 <MX_GPIO_Init+0xd4>)
 8000a1c:	f000 fcea 	bl	80013f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a20:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a26:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	4619      	mov	r1, r3
 8000a36:	480c      	ldr	r0, [pc, #48]	@ (8000a68 <MX_GPIO_Init+0xd8>)
 8000a38:	f000 fb58 	bl	80010ec <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000a3c:	2320      	movs	r3, #32
 8000a3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a40:	2301      	movs	r3, #1
 8000a42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4c:	f107 0314 	add.w	r3, r7, #20
 8000a50:	4619      	mov	r1, r3
 8000a52:	4804      	ldr	r0, [pc, #16]	@ (8000a64 <MX_GPIO_Init+0xd4>)
 8000a54:	f000 fb4a 	bl	80010ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a58:	bf00      	nop
 8000a5a:	3728      	adds	r7, #40	@ 0x28
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	40023800 	.word	0x40023800
 8000a64:	40020000 	.word	0x40020000
 8000a68:	40020800 	.word	0x40020800

08000a6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a70:	b672      	cpsid	i
}
 8000a72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a74:	bf00      	nop
 8000a76:	e7fd      	b.n	8000a74 <Error_Handler+0x8>

08000a78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	607b      	str	r3, [r7, #4]
 8000a82:	4b10      	ldr	r3, [pc, #64]	@ (8000ac4 <HAL_MspInit+0x4c>)
 8000a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a86:	4a0f      	ldr	r2, [pc, #60]	@ (8000ac4 <HAL_MspInit+0x4c>)
 8000a88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ac4 <HAL_MspInit+0x4c>)
 8000a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	603b      	str	r3, [r7, #0]
 8000a9e:	4b09      	ldr	r3, [pc, #36]	@ (8000ac4 <HAL_MspInit+0x4c>)
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa2:	4a08      	ldr	r2, [pc, #32]	@ (8000ac4 <HAL_MspInit+0x4c>)
 8000aa4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000aa8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aaa:	4b06      	ldr	r3, [pc, #24]	@ (8000ac4 <HAL_MspInit+0x4c>)
 8000aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ab2:	603b      	str	r3, [r7, #0]
 8000ab4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ab6:	2007      	movs	r0, #7
 8000ab8:	f000 fa44 	bl	8000f44 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000abc:	bf00      	nop
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40023800 	.word	0x40023800

08000ac8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08a      	sub	sp, #40	@ 0x28
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
 8000ade:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a1d      	ldr	r2, [pc, #116]	@ (8000b5c <HAL_UART_MspInit+0x94>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d133      	bne.n	8000b52 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	613b      	str	r3, [r7, #16]
 8000aee:	4b1c      	ldr	r3, [pc, #112]	@ (8000b60 <HAL_UART_MspInit+0x98>)
 8000af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000af2:	4a1b      	ldr	r2, [pc, #108]	@ (8000b60 <HAL_UART_MspInit+0x98>)
 8000af4:	f043 0320 	orr.w	r3, r3, #32
 8000af8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000afa:	4b19      	ldr	r3, [pc, #100]	@ (8000b60 <HAL_UART_MspInit+0x98>)
 8000afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000afe:	f003 0320 	and.w	r3, r3, #32
 8000b02:	613b      	str	r3, [r7, #16]
 8000b04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	60fb      	str	r3, [r7, #12]
 8000b0a:	4b15      	ldr	r3, [pc, #84]	@ (8000b60 <HAL_UART_MspInit+0x98>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0e:	4a14      	ldr	r2, [pc, #80]	@ (8000b60 <HAL_UART_MspInit+0x98>)
 8000b10:	f043 0304 	orr.w	r3, r3, #4
 8000b14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b16:	4b12      	ldr	r3, [pc, #72]	@ (8000b60 <HAL_UART_MspInit+0x98>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1a:	f003 0304 	and.w	r3, r3, #4
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b22:	23c0      	movs	r3, #192	@ 0xc0
 8000b24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b26:	2302      	movs	r3, #2
 8000b28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2e:	2303      	movs	r3, #3
 8000b30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000b32:	2308      	movs	r3, #8
 8000b34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b36:	f107 0314 	add.w	r3, r7, #20
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4809      	ldr	r0, [pc, #36]	@ (8000b64 <HAL_UART_MspInit+0x9c>)
 8000b3e:	f000 fad5 	bl	80010ec <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8000b42:	2200      	movs	r2, #0
 8000b44:	2100      	movs	r1, #0
 8000b46:	2047      	movs	r0, #71	@ 0x47
 8000b48:	f000 fa07 	bl	8000f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000b4c:	2047      	movs	r0, #71	@ 0x47
 8000b4e:	f000 fa20 	bl	8000f92 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART6_MspInit 1 */

  }

}
 8000b52:	bf00      	nop
 8000b54:	3728      	adds	r7, #40	@ 0x28
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40011400 	.word	0x40011400
 8000b60:	40023800 	.word	0x40023800
 8000b64:	40020800 	.word	0x40020800

08000b68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b6c:	bf00      	nop
 8000b6e:	e7fd      	b.n	8000b6c <NMI_Handler+0x4>

08000b70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b74:	bf00      	nop
 8000b76:	e7fd      	b.n	8000b74 <HardFault_Handler+0x4>

08000b78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b7c:	bf00      	nop
 8000b7e:	e7fd      	b.n	8000b7c <MemManage_Handler+0x4>

08000b80 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b84:	bf00      	nop
 8000b86:	e7fd      	b.n	8000b84 <BusFault_Handler+0x4>

08000b88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <UsageFault_Handler+0x4>

08000b90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr

08000b9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr

08000bba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bbe:	f000 f8d1 	bl	8000d64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
	...

08000bc8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000bcc:	4802      	ldr	r0, [pc, #8]	@ (8000bd8 <USART6_IRQHandler+0x10>)
 8000bce:	f001 f9c3 	bl	8001f58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20000078 	.word	0x20000078

08000bdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000be4:	4a14      	ldr	r2, [pc, #80]	@ (8000c38 <_sbrk+0x5c>)
 8000be6:	4b15      	ldr	r3, [pc, #84]	@ (8000c3c <_sbrk+0x60>)
 8000be8:	1ad3      	subs	r3, r2, r3
 8000bea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bf0:	4b13      	ldr	r3, [pc, #76]	@ (8000c40 <_sbrk+0x64>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d102      	bne.n	8000bfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bf8:	4b11      	ldr	r3, [pc, #68]	@ (8000c40 <_sbrk+0x64>)
 8000bfa:	4a12      	ldr	r2, [pc, #72]	@ (8000c44 <_sbrk+0x68>)
 8000bfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bfe:	4b10      	ldr	r3, [pc, #64]	@ (8000c40 <_sbrk+0x64>)
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4413      	add	r3, r2
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	d207      	bcs.n	8000c1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c0c:	f002 f962 	bl	8002ed4 <__errno>
 8000c10:	4603      	mov	r3, r0
 8000c12:	220c      	movs	r2, #12
 8000c14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c16:	f04f 33ff 	mov.w	r3, #4294967295
 8000c1a:	e009      	b.n	8000c30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c1c:	4b08      	ldr	r3, [pc, #32]	@ (8000c40 <_sbrk+0x64>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c22:	4b07      	ldr	r3, [pc, #28]	@ (8000c40 <_sbrk+0x64>)
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4413      	add	r3, r2
 8000c2a:	4a05      	ldr	r2, [pc, #20]	@ (8000c40 <_sbrk+0x64>)
 8000c2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c2e:	68fb      	ldr	r3, [r7, #12]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3718      	adds	r7, #24
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	20018000 	.word	0x20018000
 8000c3c:	00000400 	.word	0x00000400
 8000c40:	20000148 	.word	0x20000148
 8000c44:	20000298 	.word	0x20000298

08000c48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c4c:	4b06      	ldr	r3, [pc, #24]	@ (8000c68 <SystemInit+0x20>)
 8000c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c52:	4a05      	ldr	r2, [pc, #20]	@ (8000c68 <SystemInit+0x20>)
 8000c54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c6c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ca4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c70:	f7ff ffea 	bl	8000c48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c74:	480c      	ldr	r0, [pc, #48]	@ (8000ca8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c76:	490d      	ldr	r1, [pc, #52]	@ (8000cac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c78:	4a0d      	ldr	r2, [pc, #52]	@ (8000cb0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c7c:	e002      	b.n	8000c84 <LoopCopyDataInit>

08000c7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c82:	3304      	adds	r3, #4

08000c84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c88:	d3f9      	bcc.n	8000c7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000cb4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c8c:	4c0a      	ldr	r4, [pc, #40]	@ (8000cb8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c90:	e001      	b.n	8000c96 <LoopFillZerobss>

08000c92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c94:	3204      	adds	r2, #4

08000c96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c98:	d3fb      	bcc.n	8000c92 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000c9a:	f002 f921 	bl	8002ee0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c9e:	f7ff fdbd 	bl	800081c <main>
  bx  lr    
 8000ca2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ca4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ca8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cac:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000cb0:	080045bc 	.word	0x080045bc
  ldr r2, =_sbss
 8000cb4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000cb8:	20000298 	.word	0x20000298

08000cbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cbc:	e7fe      	b.n	8000cbc <ADC_IRQHandler>
	...

08000cc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cc4:	4b0e      	ldr	r3, [pc, #56]	@ (8000d00 <HAL_Init+0x40>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a0d      	ldr	r2, [pc, #52]	@ (8000d00 <HAL_Init+0x40>)
 8000cca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cd0:	4b0b      	ldr	r3, [pc, #44]	@ (8000d00 <HAL_Init+0x40>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a0a      	ldr	r2, [pc, #40]	@ (8000d00 <HAL_Init+0x40>)
 8000cd6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cdc:	4b08      	ldr	r3, [pc, #32]	@ (8000d00 <HAL_Init+0x40>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a07      	ldr	r2, [pc, #28]	@ (8000d00 <HAL_Init+0x40>)
 8000ce2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ce6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce8:	2003      	movs	r0, #3
 8000cea:	f000 f92b 	bl	8000f44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cee:	2000      	movs	r0, #0
 8000cf0:	f000 f808 	bl	8000d04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cf4:	f7ff fec0 	bl	8000a78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cf8:	2300      	movs	r3, #0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40023c00 	.word	0x40023c00

08000d04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d0c:	4b12      	ldr	r3, [pc, #72]	@ (8000d58 <HAL_InitTick+0x54>)
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	4b12      	ldr	r3, [pc, #72]	@ (8000d5c <HAL_InitTick+0x58>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	4619      	mov	r1, r3
 8000d16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d22:	4618      	mov	r0, r3
 8000d24:	f000 f943 	bl	8000fae <HAL_SYSTICK_Config>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e00e      	b.n	8000d50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2b0f      	cmp	r3, #15
 8000d36:	d80a      	bhi.n	8000d4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	6879      	ldr	r1, [r7, #4]
 8000d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d40:	f000 f90b 	bl	8000f5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d44:	4a06      	ldr	r2, [pc, #24]	@ (8000d60 <HAL_InitTick+0x5c>)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	e000      	b.n	8000d50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	20000000 	.word	0x20000000
 8000d5c:	20000008 	.word	0x20000008
 8000d60:	20000004 	.word	0x20000004

08000d64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d68:	4b06      	ldr	r3, [pc, #24]	@ (8000d84 <HAL_IncTick+0x20>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	4b06      	ldr	r3, [pc, #24]	@ (8000d88 <HAL_IncTick+0x24>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4413      	add	r3, r2
 8000d74:	4a04      	ldr	r2, [pc, #16]	@ (8000d88 <HAL_IncTick+0x24>)
 8000d76:	6013      	str	r3, [r2, #0]
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	20000008 	.word	0x20000008
 8000d88:	2000014c 	.word	0x2000014c

08000d8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d90:	4b03      	ldr	r3, [pc, #12]	@ (8000da0 <HAL_GetTick+0x14>)
 8000d92:	681b      	ldr	r3, [r3, #0]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	2000014c 	.word	0x2000014c

08000da4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	f003 0307 	and.w	r3, r3, #7
 8000db2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000db4:	4b0c      	ldr	r3, [pc, #48]	@ (8000de8 <__NVIC_SetPriorityGrouping+0x44>)
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dba:	68ba      	ldr	r2, [r7, #8]
 8000dbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dcc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000dd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dd6:	4a04      	ldr	r2, [pc, #16]	@ (8000de8 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	60d3      	str	r3, [r2, #12]
}
 8000ddc:	bf00      	nop
 8000dde:	3714      	adds	r7, #20
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000df0:	4b04      	ldr	r3, [pc, #16]	@ (8000e04 <__NVIC_GetPriorityGrouping+0x18>)
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	0a1b      	lsrs	r3, r3, #8
 8000df6:	f003 0307 	and.w	r3, r3, #7
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	db0b      	blt.n	8000e32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
 8000e1c:	f003 021f 	and.w	r2, r3, #31
 8000e20:	4907      	ldr	r1, [pc, #28]	@ (8000e40 <__NVIC_EnableIRQ+0x38>)
 8000e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e26:	095b      	lsrs	r3, r3, #5
 8000e28:	2001      	movs	r0, #1
 8000e2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e32:	bf00      	nop
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	e000e100 	.word	0xe000e100

08000e44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	6039      	str	r1, [r7, #0]
 8000e4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	db0a      	blt.n	8000e6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	b2da      	uxtb	r2, r3
 8000e5c:	490c      	ldr	r1, [pc, #48]	@ (8000e90 <__NVIC_SetPriority+0x4c>)
 8000e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e62:	0112      	lsls	r2, r2, #4
 8000e64:	b2d2      	uxtb	r2, r2
 8000e66:	440b      	add	r3, r1
 8000e68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e6c:	e00a      	b.n	8000e84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	b2da      	uxtb	r2, r3
 8000e72:	4908      	ldr	r1, [pc, #32]	@ (8000e94 <__NVIC_SetPriority+0x50>)
 8000e74:	79fb      	ldrb	r3, [r7, #7]
 8000e76:	f003 030f 	and.w	r3, r3, #15
 8000e7a:	3b04      	subs	r3, #4
 8000e7c:	0112      	lsls	r2, r2, #4
 8000e7e:	b2d2      	uxtb	r2, r2
 8000e80:	440b      	add	r3, r1
 8000e82:	761a      	strb	r2, [r3, #24]
}
 8000e84:	bf00      	nop
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	e000e100 	.word	0xe000e100
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b089      	sub	sp, #36	@ 0x24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	f003 0307 	and.w	r3, r3, #7
 8000eaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	f1c3 0307 	rsb	r3, r3, #7
 8000eb2:	2b04      	cmp	r3, #4
 8000eb4:	bf28      	it	cs
 8000eb6:	2304      	movcs	r3, #4
 8000eb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	3304      	adds	r3, #4
 8000ebe:	2b06      	cmp	r3, #6
 8000ec0:	d902      	bls.n	8000ec8 <NVIC_EncodePriority+0x30>
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	3b03      	subs	r3, #3
 8000ec6:	e000      	b.n	8000eca <NVIC_EncodePriority+0x32>
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ed0:	69bb      	ldr	r3, [r7, #24]
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	43da      	mvns	r2, r3
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	401a      	ands	r2, r3
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ee0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eea:	43d9      	mvns	r1, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef0:	4313      	orrs	r3, r2
         );
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3724      	adds	r7, #36	@ 0x24
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
	...

08000f00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3b01      	subs	r3, #1
 8000f0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f10:	d301      	bcc.n	8000f16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f12:	2301      	movs	r3, #1
 8000f14:	e00f      	b.n	8000f36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f16:	4a0a      	ldr	r2, [pc, #40]	@ (8000f40 <SysTick_Config+0x40>)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	3b01      	subs	r3, #1
 8000f1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f1e:	210f      	movs	r1, #15
 8000f20:	f04f 30ff 	mov.w	r0, #4294967295
 8000f24:	f7ff ff8e 	bl	8000e44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f28:	4b05      	ldr	r3, [pc, #20]	@ (8000f40 <SysTick_Config+0x40>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f2e:	4b04      	ldr	r3, [pc, #16]	@ (8000f40 <SysTick_Config+0x40>)
 8000f30:	2207      	movs	r2, #7
 8000f32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	e000e010 	.word	0xe000e010

08000f44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f7ff ff29 	bl	8000da4 <__NVIC_SetPriorityGrouping>
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b086      	sub	sp, #24
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	4603      	mov	r3, r0
 8000f62:	60b9      	str	r1, [r7, #8]
 8000f64:	607a      	str	r2, [r7, #4]
 8000f66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f6c:	f7ff ff3e 	bl	8000dec <__NVIC_GetPriorityGrouping>
 8000f70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f72:	687a      	ldr	r2, [r7, #4]
 8000f74:	68b9      	ldr	r1, [r7, #8]
 8000f76:	6978      	ldr	r0, [r7, #20]
 8000f78:	f7ff ff8e 	bl	8000e98 <NVIC_EncodePriority>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f82:	4611      	mov	r1, r2
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff ff5d 	bl	8000e44 <__NVIC_SetPriority>
}
 8000f8a:	bf00      	nop
 8000f8c:	3718      	adds	r7, #24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b082      	sub	sp, #8
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	4603      	mov	r3, r0
 8000f9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff ff31 	bl	8000e08 <__NVIC_EnableIRQ>
}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b082      	sub	sp, #8
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f7ff ffa2 	bl	8000f00 <SysTick_Config>
 8000fbc:	4603      	mov	r3, r0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b084      	sub	sp, #16
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fd2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000fd4:	f7ff feda 	bl	8000d8c <HAL_GetTick>
 8000fd8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	2b02      	cmp	r3, #2
 8000fe4:	d008      	beq.n	8000ff8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2280      	movs	r2, #128	@ 0x80
 8000fea:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e052      	b.n	800109e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f022 0216 	bic.w	r2, r2, #22
 8001006:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	695a      	ldr	r2, [r3, #20]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001016:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800101c:	2b00      	cmp	r3, #0
 800101e:	d103      	bne.n	8001028 <HAL_DMA_Abort+0x62>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001024:	2b00      	cmp	r3, #0
 8001026:	d007      	beq.n	8001038 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f022 0208 	bic.w	r2, r2, #8
 8001036:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f022 0201 	bic.w	r2, r2, #1
 8001046:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001048:	e013      	b.n	8001072 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800104a:	f7ff fe9f 	bl	8000d8c <HAL_GetTick>
 800104e:	4602      	mov	r2, r0
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	2b05      	cmp	r3, #5
 8001056:	d90c      	bls.n	8001072 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2220      	movs	r2, #32
 800105c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2203      	movs	r2, #3
 8001062:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2200      	movs	r2, #0
 800106a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800106e:	2303      	movs	r3, #3
 8001070:	e015      	b.n	800109e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f003 0301 	and.w	r3, r3, #1
 800107c:	2b00      	cmp	r3, #0
 800107e:	d1e4      	bne.n	800104a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001084:	223f      	movs	r2, #63	@ 0x3f
 8001086:	409a      	lsls	r2, r3
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2201      	movs	r2, #1
 8001090:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2200      	movs	r2, #0
 8001098:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010a6:	b480      	push	{r7}
 80010a8:	b083      	sub	sp, #12
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	d004      	beq.n	80010c4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2280      	movs	r2, #128	@ 0x80
 80010be:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80010c0:	2301      	movs	r3, #1
 80010c2:	e00c      	b.n	80010de <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2205      	movs	r2, #5
 80010c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f022 0201 	bic.w	r2, r2, #1
 80010da:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80010dc:	2300      	movs	r3, #0
}
 80010de:	4618      	mov	r0, r3
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
	...

080010ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b089      	sub	sp, #36	@ 0x24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010f6:	2300      	movs	r3, #0
 80010f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010fa:	2300      	movs	r3, #0
 80010fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010fe:	2300      	movs	r3, #0
 8001100:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001102:	2300      	movs	r3, #0
 8001104:	61fb      	str	r3, [r7, #28]
 8001106:	e159      	b.n	80013bc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001108:	2201      	movs	r2, #1
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	697a      	ldr	r2, [r7, #20]
 8001118:	4013      	ands	r3, r2
 800111a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	429a      	cmp	r2, r3
 8001122:	f040 8148 	bne.w	80013b6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f003 0303 	and.w	r3, r3, #3
 800112e:	2b01      	cmp	r3, #1
 8001130:	d005      	beq.n	800113e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800113a:	2b02      	cmp	r3, #2
 800113c:	d130      	bne.n	80011a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	2203      	movs	r2, #3
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	43db      	mvns	r3, r3
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	4013      	ands	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	68da      	ldr	r2, [r3, #12]
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4313      	orrs	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001174:	2201      	movs	r2, #1
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	43db      	mvns	r3, r3
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4013      	ands	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	091b      	lsrs	r3, r3, #4
 800118a:	f003 0201 	and.w	r2, r3, #1
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4313      	orrs	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f003 0303 	and.w	r3, r3, #3
 80011a8:	2b03      	cmp	r3, #3
 80011aa:	d017      	beq.n	80011dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	2203      	movs	r2, #3
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	4013      	ands	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	689a      	ldr	r2, [r3, #8]
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f003 0303 	and.w	r3, r3, #3
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d123      	bne.n	8001230 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	08da      	lsrs	r2, r3, #3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	3208      	adds	r2, #8
 80011f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	f003 0307 	and.w	r3, r3, #7
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	220f      	movs	r2, #15
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	43db      	mvns	r3, r3
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4013      	ands	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	691a      	ldr	r2, [r3, #16]
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	f003 0307 	and.w	r3, r3, #7
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4313      	orrs	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	08da      	lsrs	r2, r3, #3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	3208      	adds	r2, #8
 800122a:	69b9      	ldr	r1, [r7, #24]
 800122c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	2203      	movs	r2, #3
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	43db      	mvns	r3, r3
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	4013      	ands	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f003 0203 	and.w	r2, r3, #3
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	4313      	orrs	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800126c:	2b00      	cmp	r3, #0
 800126e:	f000 80a2 	beq.w	80013b6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	60fb      	str	r3, [r7, #12]
 8001276:	4b57      	ldr	r3, [pc, #348]	@ (80013d4 <HAL_GPIO_Init+0x2e8>)
 8001278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800127a:	4a56      	ldr	r2, [pc, #344]	@ (80013d4 <HAL_GPIO_Init+0x2e8>)
 800127c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001280:	6453      	str	r3, [r2, #68]	@ 0x44
 8001282:	4b54      	ldr	r3, [pc, #336]	@ (80013d4 <HAL_GPIO_Init+0x2e8>)
 8001284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001286:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800128e:	4a52      	ldr	r2, [pc, #328]	@ (80013d8 <HAL_GPIO_Init+0x2ec>)
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	089b      	lsrs	r3, r3, #2
 8001294:	3302      	adds	r3, #2
 8001296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800129a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	f003 0303 	and.w	r3, r3, #3
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	220f      	movs	r2, #15
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	43db      	mvns	r3, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4013      	ands	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a49      	ldr	r2, [pc, #292]	@ (80013dc <HAL_GPIO_Init+0x2f0>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d019      	beq.n	80012ee <HAL_GPIO_Init+0x202>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a48      	ldr	r2, [pc, #288]	@ (80013e0 <HAL_GPIO_Init+0x2f4>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d013      	beq.n	80012ea <HAL_GPIO_Init+0x1fe>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a47      	ldr	r2, [pc, #284]	@ (80013e4 <HAL_GPIO_Init+0x2f8>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d00d      	beq.n	80012e6 <HAL_GPIO_Init+0x1fa>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a46      	ldr	r2, [pc, #280]	@ (80013e8 <HAL_GPIO_Init+0x2fc>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d007      	beq.n	80012e2 <HAL_GPIO_Init+0x1f6>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a45      	ldr	r2, [pc, #276]	@ (80013ec <HAL_GPIO_Init+0x300>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d101      	bne.n	80012de <HAL_GPIO_Init+0x1f2>
 80012da:	2304      	movs	r3, #4
 80012dc:	e008      	b.n	80012f0 <HAL_GPIO_Init+0x204>
 80012de:	2307      	movs	r3, #7
 80012e0:	e006      	b.n	80012f0 <HAL_GPIO_Init+0x204>
 80012e2:	2303      	movs	r3, #3
 80012e4:	e004      	b.n	80012f0 <HAL_GPIO_Init+0x204>
 80012e6:	2302      	movs	r3, #2
 80012e8:	e002      	b.n	80012f0 <HAL_GPIO_Init+0x204>
 80012ea:	2301      	movs	r3, #1
 80012ec:	e000      	b.n	80012f0 <HAL_GPIO_Init+0x204>
 80012ee:	2300      	movs	r3, #0
 80012f0:	69fa      	ldr	r2, [r7, #28]
 80012f2:	f002 0203 	and.w	r2, r2, #3
 80012f6:	0092      	lsls	r2, r2, #2
 80012f8:	4093      	lsls	r3, r2
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001300:	4935      	ldr	r1, [pc, #212]	@ (80013d8 <HAL_GPIO_Init+0x2ec>)
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	089b      	lsrs	r3, r3, #2
 8001306:	3302      	adds	r3, #2
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800130e:	4b38      	ldr	r3, [pc, #224]	@ (80013f0 <HAL_GPIO_Init+0x304>)
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	43db      	mvns	r3, r3
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4013      	ands	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d003      	beq.n	8001332 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	4313      	orrs	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001332:	4a2f      	ldr	r2, [pc, #188]	@ (80013f0 <HAL_GPIO_Init+0x304>)
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001338:	4b2d      	ldr	r3, [pc, #180]	@ (80013f0 <HAL_GPIO_Init+0x304>)
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	43db      	mvns	r3, r3
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	4013      	ands	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001350:	2b00      	cmp	r3, #0
 8001352:	d003      	beq.n	800135c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	4313      	orrs	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800135c:	4a24      	ldr	r2, [pc, #144]	@ (80013f0 <HAL_GPIO_Init+0x304>)
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001362:	4b23      	ldr	r3, [pc, #140]	@ (80013f0 <HAL_GPIO_Init+0x304>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	43db      	mvns	r3, r3
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	4013      	ands	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d003      	beq.n	8001386 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	4313      	orrs	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001386:	4a1a      	ldr	r2, [pc, #104]	@ (80013f0 <HAL_GPIO_Init+0x304>)
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800138c:	4b18      	ldr	r3, [pc, #96]	@ (80013f0 <HAL_GPIO_Init+0x304>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	43db      	mvns	r3, r3
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	4013      	ands	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d003      	beq.n	80013b0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013b0:	4a0f      	ldr	r2, [pc, #60]	@ (80013f0 <HAL_GPIO_Init+0x304>)
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	3301      	adds	r3, #1
 80013ba:	61fb      	str	r3, [r7, #28]
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	2b0f      	cmp	r3, #15
 80013c0:	f67f aea2 	bls.w	8001108 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013c4:	bf00      	nop
 80013c6:	bf00      	nop
 80013c8:	3724      	adds	r7, #36	@ 0x24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	40023800 	.word	0x40023800
 80013d8:	40013800 	.word	0x40013800
 80013dc:	40020000 	.word	0x40020000
 80013e0:	40020400 	.word	0x40020400
 80013e4:	40020800 	.word	0x40020800
 80013e8:	40020c00 	.word	0x40020c00
 80013ec:	40021000 	.word	0x40021000
 80013f0:	40013c00 	.word	0x40013c00

080013f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	460b      	mov	r3, r1
 80013fe:	807b      	strh	r3, [r7, #2]
 8001400:	4613      	mov	r3, r2
 8001402:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001404:	787b      	ldrb	r3, [r7, #1]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d003      	beq.n	8001412 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800140a:	887a      	ldrh	r2, [r7, #2]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001410:	e003      	b.n	800141a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001412:	887b      	ldrh	r3, [r7, #2]
 8001414:	041a      	lsls	r2, r3, #16
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	619a      	str	r2, [r3, #24]
}
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
	...

08001428 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d101      	bne.n	800143a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e267      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	2b00      	cmp	r3, #0
 8001444:	d075      	beq.n	8001532 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001446:	4b88      	ldr	r3, [pc, #544]	@ (8001668 <HAL_RCC_OscConfig+0x240>)
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	f003 030c 	and.w	r3, r3, #12
 800144e:	2b04      	cmp	r3, #4
 8001450:	d00c      	beq.n	800146c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001452:	4b85      	ldr	r3, [pc, #532]	@ (8001668 <HAL_RCC_OscConfig+0x240>)
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800145a:	2b08      	cmp	r3, #8
 800145c:	d112      	bne.n	8001484 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800145e:	4b82      	ldr	r3, [pc, #520]	@ (8001668 <HAL_RCC_OscConfig+0x240>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001466:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800146a:	d10b      	bne.n	8001484 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800146c:	4b7e      	ldr	r3, [pc, #504]	@ (8001668 <HAL_RCC_OscConfig+0x240>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d05b      	beq.n	8001530 <HAL_RCC_OscConfig+0x108>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d157      	bne.n	8001530 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e242      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800148c:	d106      	bne.n	800149c <HAL_RCC_OscConfig+0x74>
 800148e:	4b76      	ldr	r3, [pc, #472]	@ (8001668 <HAL_RCC_OscConfig+0x240>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a75      	ldr	r2, [pc, #468]	@ (8001668 <HAL_RCC_OscConfig+0x240>)
 8001494:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001498:	6013      	str	r3, [r2, #0]
 800149a:	e01d      	b.n	80014d8 <HAL_RCC_OscConfig+0xb0>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014a4:	d10c      	bne.n	80014c0 <HAL_RCC_OscConfig+0x98>
 80014a6:	4b70      	ldr	r3, [pc, #448]	@ (8001668 <HAL_RCC_OscConfig+0x240>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a6f      	ldr	r2, [pc, #444]	@ (8001668 <HAL_RCC_OscConfig+0x240>)
 80014ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014b0:	6013      	str	r3, [r2, #0]
 80014b2:	4b6d      	ldr	r3, [pc, #436]	@ (8001668 <HAL_RCC_OscConfig+0x240>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a6c      	ldr	r2, [pc, #432]	@ (8001668 <HAL_RCC_OscConfig+0x240>)
 80014b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014bc:	6013      	str	r3, [r2, #0]
 80014be:	e00b      	b.n	80014d8 <HAL_RCC_OscConfig+0xb0>
 80014c0:	4b69      	ldr	r3, [pc, #420]	@ (8001668 <HAL_RCC_OscConfig+0x240>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a68      	ldr	r2, [pc, #416]	@ (8001668 <HAL_RCC_OscConfig+0x240>)
 80014c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014ca:	6013      	str	r3, [r2, #0]
 80014cc:	4b66      	ldr	r3, [pc, #408]	@ (8001668 <HAL_RCC_OscConfig+0x240>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a65      	ldr	r2, [pc, #404]	@ (8001668 <HAL_RCC_OscConfig+0x240>)
 80014d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d013      	beq.n	8001508 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e0:	f7ff fc54 	bl	8000d8c <HAL_GetTick>
 80014e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014e6:	e008      	b.n	80014fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014e8:	f7ff fc50 	bl	8000d8c <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b64      	cmp	r3, #100	@ 0x64
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e207      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014fa:	4b5b      	ldr	r3, [pc, #364]	@ (8001668 <HAL_RCC_OscConfig+0x240>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d0f0      	beq.n	80014e8 <HAL_RCC_OscConfig+0xc0>
 8001506:	e014      	b.n	8001532 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001508:	f7ff fc40 	bl	8000d8c <HAL_GetTick>
 800150c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800150e:	e008      	b.n	8001522 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001510:	f7ff fc3c 	bl	8000d8c <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b64      	cmp	r3, #100	@ 0x64
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e1f3      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001522:	4b51      	ldr	r3, [pc, #324]	@ (8001668 <HAL_RCC_OscConfig+0x240>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d1f0      	bne.n	8001510 <HAL_RCC_OscConfig+0xe8>
 800152e:	e000      	b.n	8001532 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001530:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d063      	beq.n	8001606 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800153e:	4b4a      	ldr	r3, [pc, #296]	@ (8001668 <HAL_RCC_OscConfig+0x240>)
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	f003 030c 	and.w	r3, r3, #12
 8001546:	2b00      	cmp	r3, #0
 8001548:	d00b      	beq.n	8001562 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800154a:	4b47      	ldr	r3, [pc, #284]	@ (8001668 <HAL_RCC_OscConfig+0x240>)
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001552:	2b08      	cmp	r3, #8
 8001554:	d11c      	bne.n	8001590 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001556:	4b44      	ldr	r3, [pc, #272]	@ (8001668 <HAL_RCC_OscConfig+0x240>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d116      	bne.n	8001590 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001562:	4b41      	ldr	r3, [pc, #260]	@ (8001668 <HAL_RCC_OscConfig+0x240>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	2b00      	cmp	r3, #0
 800156c:	d005      	beq.n	800157a <HAL_RCC_OscConfig+0x152>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d001      	beq.n	800157a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e1c7      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800157a:	4b3b      	ldr	r3, [pc, #236]	@ (8001668 <HAL_RCC_OscConfig+0x240>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	691b      	ldr	r3, [r3, #16]
 8001586:	00db      	lsls	r3, r3, #3
 8001588:	4937      	ldr	r1, [pc, #220]	@ (8001668 <HAL_RCC_OscConfig+0x240>)
 800158a:	4313      	orrs	r3, r2
 800158c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800158e:	e03a      	b.n	8001606 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d020      	beq.n	80015da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001598:	4b34      	ldr	r3, [pc, #208]	@ (800166c <HAL_RCC_OscConfig+0x244>)
 800159a:	2201      	movs	r2, #1
 800159c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800159e:	f7ff fbf5 	bl	8000d8c <HAL_GetTick>
 80015a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015a4:	e008      	b.n	80015b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015a6:	f7ff fbf1 	bl	8000d8c <HAL_GetTick>
 80015aa:	4602      	mov	r2, r0
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d901      	bls.n	80015b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015b4:	2303      	movs	r3, #3
 80015b6:	e1a8      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b8:	4b2b      	ldr	r3, [pc, #172]	@ (8001668 <HAL_RCC_OscConfig+0x240>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0302 	and.w	r3, r3, #2
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d0f0      	beq.n	80015a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c4:	4b28      	ldr	r3, [pc, #160]	@ (8001668 <HAL_RCC_OscConfig+0x240>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	691b      	ldr	r3, [r3, #16]
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	4925      	ldr	r1, [pc, #148]	@ (8001668 <HAL_RCC_OscConfig+0x240>)
 80015d4:	4313      	orrs	r3, r2
 80015d6:	600b      	str	r3, [r1, #0]
 80015d8:	e015      	b.n	8001606 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015da:	4b24      	ldr	r3, [pc, #144]	@ (800166c <HAL_RCC_OscConfig+0x244>)
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e0:	f7ff fbd4 	bl	8000d8c <HAL_GetTick>
 80015e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015e6:	e008      	b.n	80015fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015e8:	f7ff fbd0 	bl	8000d8c <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e187      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001668 <HAL_RCC_OscConfig+0x240>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	2b00      	cmp	r3, #0
 8001604:	d1f0      	bne.n	80015e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0308 	and.w	r3, r3, #8
 800160e:	2b00      	cmp	r3, #0
 8001610:	d036      	beq.n	8001680 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d016      	beq.n	8001648 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800161a:	4b15      	ldr	r3, [pc, #84]	@ (8001670 <HAL_RCC_OscConfig+0x248>)
 800161c:	2201      	movs	r2, #1
 800161e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001620:	f7ff fbb4 	bl	8000d8c <HAL_GetTick>
 8001624:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001626:	e008      	b.n	800163a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001628:	f7ff fbb0 	bl	8000d8c <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b02      	cmp	r3, #2
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e167      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800163a:	4b0b      	ldr	r3, [pc, #44]	@ (8001668 <HAL_RCC_OscConfig+0x240>)
 800163c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d0f0      	beq.n	8001628 <HAL_RCC_OscConfig+0x200>
 8001646:	e01b      	b.n	8001680 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001648:	4b09      	ldr	r3, [pc, #36]	@ (8001670 <HAL_RCC_OscConfig+0x248>)
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800164e:	f7ff fb9d 	bl	8000d8c <HAL_GetTick>
 8001652:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001654:	e00e      	b.n	8001674 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001656:	f7ff fb99 	bl	8000d8c <HAL_GetTick>
 800165a:	4602      	mov	r2, r0
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	2b02      	cmp	r3, #2
 8001662:	d907      	bls.n	8001674 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e150      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
 8001668:	40023800 	.word	0x40023800
 800166c:	42470000 	.word	0x42470000
 8001670:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001674:	4b88      	ldr	r3, [pc, #544]	@ (8001898 <HAL_RCC_OscConfig+0x470>)
 8001676:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001678:	f003 0302 	and.w	r3, r3, #2
 800167c:	2b00      	cmp	r3, #0
 800167e:	d1ea      	bne.n	8001656 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0304 	and.w	r3, r3, #4
 8001688:	2b00      	cmp	r3, #0
 800168a:	f000 8097 	beq.w	80017bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800168e:	2300      	movs	r3, #0
 8001690:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001692:	4b81      	ldr	r3, [pc, #516]	@ (8001898 <HAL_RCC_OscConfig+0x470>)
 8001694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001696:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d10f      	bne.n	80016be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	60bb      	str	r3, [r7, #8]
 80016a2:	4b7d      	ldr	r3, [pc, #500]	@ (8001898 <HAL_RCC_OscConfig+0x470>)
 80016a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a6:	4a7c      	ldr	r2, [pc, #496]	@ (8001898 <HAL_RCC_OscConfig+0x470>)
 80016a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80016ae:	4b7a      	ldr	r3, [pc, #488]	@ (8001898 <HAL_RCC_OscConfig+0x470>)
 80016b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016b6:	60bb      	str	r3, [r7, #8]
 80016b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016ba:	2301      	movs	r3, #1
 80016bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016be:	4b77      	ldr	r3, [pc, #476]	@ (800189c <HAL_RCC_OscConfig+0x474>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d118      	bne.n	80016fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016ca:	4b74      	ldr	r3, [pc, #464]	@ (800189c <HAL_RCC_OscConfig+0x474>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a73      	ldr	r2, [pc, #460]	@ (800189c <HAL_RCC_OscConfig+0x474>)
 80016d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016d6:	f7ff fb59 	bl	8000d8c <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016dc:	e008      	b.n	80016f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016de:	f7ff fb55 	bl	8000d8c <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e10c      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f0:	4b6a      	ldr	r3, [pc, #424]	@ (800189c <HAL_RCC_OscConfig+0x474>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d0f0      	beq.n	80016de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d106      	bne.n	8001712 <HAL_RCC_OscConfig+0x2ea>
 8001704:	4b64      	ldr	r3, [pc, #400]	@ (8001898 <HAL_RCC_OscConfig+0x470>)
 8001706:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001708:	4a63      	ldr	r2, [pc, #396]	@ (8001898 <HAL_RCC_OscConfig+0x470>)
 800170a:	f043 0301 	orr.w	r3, r3, #1
 800170e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001710:	e01c      	b.n	800174c <HAL_RCC_OscConfig+0x324>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	2b05      	cmp	r3, #5
 8001718:	d10c      	bne.n	8001734 <HAL_RCC_OscConfig+0x30c>
 800171a:	4b5f      	ldr	r3, [pc, #380]	@ (8001898 <HAL_RCC_OscConfig+0x470>)
 800171c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800171e:	4a5e      	ldr	r2, [pc, #376]	@ (8001898 <HAL_RCC_OscConfig+0x470>)
 8001720:	f043 0304 	orr.w	r3, r3, #4
 8001724:	6713      	str	r3, [r2, #112]	@ 0x70
 8001726:	4b5c      	ldr	r3, [pc, #368]	@ (8001898 <HAL_RCC_OscConfig+0x470>)
 8001728:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800172a:	4a5b      	ldr	r2, [pc, #364]	@ (8001898 <HAL_RCC_OscConfig+0x470>)
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	6713      	str	r3, [r2, #112]	@ 0x70
 8001732:	e00b      	b.n	800174c <HAL_RCC_OscConfig+0x324>
 8001734:	4b58      	ldr	r3, [pc, #352]	@ (8001898 <HAL_RCC_OscConfig+0x470>)
 8001736:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001738:	4a57      	ldr	r2, [pc, #348]	@ (8001898 <HAL_RCC_OscConfig+0x470>)
 800173a:	f023 0301 	bic.w	r3, r3, #1
 800173e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001740:	4b55      	ldr	r3, [pc, #340]	@ (8001898 <HAL_RCC_OscConfig+0x470>)
 8001742:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001744:	4a54      	ldr	r2, [pc, #336]	@ (8001898 <HAL_RCC_OscConfig+0x470>)
 8001746:	f023 0304 	bic.w	r3, r3, #4
 800174a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d015      	beq.n	8001780 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001754:	f7ff fb1a 	bl	8000d8c <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800175a:	e00a      	b.n	8001772 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800175c:	f7ff fb16 	bl	8000d8c <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	f241 3288 	movw	r2, #5000	@ 0x1388
 800176a:	4293      	cmp	r3, r2
 800176c:	d901      	bls.n	8001772 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e0cb      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001772:	4b49      	ldr	r3, [pc, #292]	@ (8001898 <HAL_RCC_OscConfig+0x470>)
 8001774:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d0ee      	beq.n	800175c <HAL_RCC_OscConfig+0x334>
 800177e:	e014      	b.n	80017aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001780:	f7ff fb04 	bl	8000d8c <HAL_GetTick>
 8001784:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001786:	e00a      	b.n	800179e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001788:	f7ff fb00 	bl	8000d8c <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001796:	4293      	cmp	r3, r2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e0b5      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800179e:	4b3e      	ldr	r3, [pc, #248]	@ (8001898 <HAL_RCC_OscConfig+0x470>)
 80017a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1ee      	bne.n	8001788 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017aa:	7dfb      	ldrb	r3, [r7, #23]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d105      	bne.n	80017bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017b0:	4b39      	ldr	r3, [pc, #228]	@ (8001898 <HAL_RCC_OscConfig+0x470>)
 80017b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b4:	4a38      	ldr	r2, [pc, #224]	@ (8001898 <HAL_RCC_OscConfig+0x470>)
 80017b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017ba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	f000 80a1 	beq.w	8001908 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017c6:	4b34      	ldr	r3, [pc, #208]	@ (8001898 <HAL_RCC_OscConfig+0x470>)
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	f003 030c 	and.w	r3, r3, #12
 80017ce:	2b08      	cmp	r3, #8
 80017d0:	d05c      	beq.n	800188c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	699b      	ldr	r3, [r3, #24]
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d141      	bne.n	800185e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017da:	4b31      	ldr	r3, [pc, #196]	@ (80018a0 <HAL_RCC_OscConfig+0x478>)
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e0:	f7ff fad4 	bl	8000d8c <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017e8:	f7ff fad0 	bl	8000d8c <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e087      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017fa:	4b27      	ldr	r3, [pc, #156]	@ (8001898 <HAL_RCC_OscConfig+0x470>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1f0      	bne.n	80017e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	69da      	ldr	r2, [r3, #28]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a1b      	ldr	r3, [r3, #32]
 800180e:	431a      	orrs	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001814:	019b      	lsls	r3, r3, #6
 8001816:	431a      	orrs	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800181c:	085b      	lsrs	r3, r3, #1
 800181e:	3b01      	subs	r3, #1
 8001820:	041b      	lsls	r3, r3, #16
 8001822:	431a      	orrs	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001828:	061b      	lsls	r3, r3, #24
 800182a:	491b      	ldr	r1, [pc, #108]	@ (8001898 <HAL_RCC_OscConfig+0x470>)
 800182c:	4313      	orrs	r3, r2
 800182e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001830:	4b1b      	ldr	r3, [pc, #108]	@ (80018a0 <HAL_RCC_OscConfig+0x478>)
 8001832:	2201      	movs	r2, #1
 8001834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001836:	f7ff faa9 	bl	8000d8c <HAL_GetTick>
 800183a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800183c:	e008      	b.n	8001850 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800183e:	f7ff faa5 	bl	8000d8c <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e05c      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001850:	4b11      	ldr	r3, [pc, #68]	@ (8001898 <HAL_RCC_OscConfig+0x470>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d0f0      	beq.n	800183e <HAL_RCC_OscConfig+0x416>
 800185c:	e054      	b.n	8001908 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800185e:	4b10      	ldr	r3, [pc, #64]	@ (80018a0 <HAL_RCC_OscConfig+0x478>)
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001864:	f7ff fa92 	bl	8000d8c <HAL_GetTick>
 8001868:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800186a:	e008      	b.n	800187e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800186c:	f7ff fa8e 	bl	8000d8c <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b02      	cmp	r3, #2
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e045      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800187e:	4b06      	ldr	r3, [pc, #24]	@ (8001898 <HAL_RCC_OscConfig+0x470>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d1f0      	bne.n	800186c <HAL_RCC_OscConfig+0x444>
 800188a:	e03d      	b.n	8001908 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d107      	bne.n	80018a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e038      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
 8001898:	40023800 	.word	0x40023800
 800189c:	40007000 	.word	0x40007000
 80018a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001914 <HAL_RCC_OscConfig+0x4ec>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	699b      	ldr	r3, [r3, #24]
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d028      	beq.n	8001904 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018bc:	429a      	cmp	r2, r3
 80018be:	d121      	bne.n	8001904 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d11a      	bne.n	8001904 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018ce:	68fa      	ldr	r2, [r7, #12]
 80018d0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80018d4:	4013      	ands	r3, r2
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80018da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018dc:	4293      	cmp	r3, r2
 80018de:	d111      	bne.n	8001904 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ea:	085b      	lsrs	r3, r3, #1
 80018ec:	3b01      	subs	r3, #1
 80018ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d107      	bne.n	8001904 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001900:	429a      	cmp	r2, r3
 8001902:	d001      	beq.n	8001908 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e000      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3718      	adds	r7, #24
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40023800 	.word	0x40023800

08001918 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d101      	bne.n	800192c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e0cc      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800192c:	4b68      	ldr	r3, [pc, #416]	@ (8001ad0 <HAL_RCC_ClockConfig+0x1b8>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0307 	and.w	r3, r3, #7
 8001934:	683a      	ldr	r2, [r7, #0]
 8001936:	429a      	cmp	r2, r3
 8001938:	d90c      	bls.n	8001954 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800193a:	4b65      	ldr	r3, [pc, #404]	@ (8001ad0 <HAL_RCC_ClockConfig+0x1b8>)
 800193c:	683a      	ldr	r2, [r7, #0]
 800193e:	b2d2      	uxtb	r2, r2
 8001940:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001942:	4b63      	ldr	r3, [pc, #396]	@ (8001ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	683a      	ldr	r2, [r7, #0]
 800194c:	429a      	cmp	r2, r3
 800194e:	d001      	beq.n	8001954 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e0b8      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d020      	beq.n	80019a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0304 	and.w	r3, r3, #4
 8001968:	2b00      	cmp	r3, #0
 800196a:	d005      	beq.n	8001978 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800196c:	4b59      	ldr	r3, [pc, #356]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	4a58      	ldr	r2, [pc, #352]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8001972:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001976:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0308 	and.w	r3, r3, #8
 8001980:	2b00      	cmp	r3, #0
 8001982:	d005      	beq.n	8001990 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001984:	4b53      	ldr	r3, [pc, #332]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	4a52      	ldr	r2, [pc, #328]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 800198a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800198e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001990:	4b50      	ldr	r3, [pc, #320]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	494d      	ldr	r1, [pc, #308]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 800199e:	4313      	orrs	r3, r2
 80019a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d044      	beq.n	8001a38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d107      	bne.n	80019c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019b6:	4b47      	ldr	r3, [pc, #284]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d119      	bne.n	80019f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e07f      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d003      	beq.n	80019d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019d2:	2b03      	cmp	r3, #3
 80019d4:	d107      	bne.n	80019e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019d6:	4b3f      	ldr	r3, [pc, #252]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d109      	bne.n	80019f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e06f      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e6:	4b3b      	ldr	r3, [pc, #236]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d101      	bne.n	80019f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e067      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019f6:	4b37      	ldr	r3, [pc, #220]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f023 0203 	bic.w	r2, r3, #3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	4934      	ldr	r1, [pc, #208]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a04:	4313      	orrs	r3, r2
 8001a06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a08:	f7ff f9c0 	bl	8000d8c <HAL_GetTick>
 8001a0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a0e:	e00a      	b.n	8001a26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a10:	f7ff f9bc 	bl	8000d8c <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e04f      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a26:	4b2b      	ldr	r3, [pc, #172]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f003 020c 	and.w	r2, r3, #12
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d1eb      	bne.n	8001a10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a38:	4b25      	ldr	r3, [pc, #148]	@ (8001ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0307 	and.w	r3, r3, #7
 8001a40:	683a      	ldr	r2, [r7, #0]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d20c      	bcs.n	8001a60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a46:	4b22      	ldr	r3, [pc, #136]	@ (8001ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a48:	683a      	ldr	r2, [r7, #0]
 8001a4a:	b2d2      	uxtb	r2, r2
 8001a4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a4e:	4b20      	ldr	r3, [pc, #128]	@ (8001ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0307 	and.w	r3, r3, #7
 8001a56:	683a      	ldr	r2, [r7, #0]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d001      	beq.n	8001a60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e032      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0304 	and.w	r3, r3, #4
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d008      	beq.n	8001a7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a6c:	4b19      	ldr	r3, [pc, #100]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	4916      	ldr	r1, [pc, #88]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0308 	and.w	r3, r3, #8
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d009      	beq.n	8001a9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a8a:	4b12      	ldr	r3, [pc, #72]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	490e      	ldr	r1, [pc, #56]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a9e:	f000 f821 	bl	8001ae4 <HAL_RCC_GetSysClockFreq>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	091b      	lsrs	r3, r3, #4
 8001aaa:	f003 030f 	and.w	r3, r3, #15
 8001aae:	490a      	ldr	r1, [pc, #40]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1c0>)
 8001ab0:	5ccb      	ldrb	r3, [r1, r3]
 8001ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ab6:	4a09      	ldr	r2, [pc, #36]	@ (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 8001ab8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001aba:	4b09      	ldr	r3, [pc, #36]	@ (8001ae0 <HAL_RCC_ClockConfig+0x1c8>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff f920 	bl	8000d04 <HAL_InitTick>

  return HAL_OK;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	40023c00 	.word	0x40023c00
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	08004444 	.word	0x08004444
 8001adc:	20000000 	.word	0x20000000
 8001ae0:	20000004 	.word	0x20000004

08001ae4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ae4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ae8:	b094      	sub	sp, #80	@ 0x50
 8001aea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001aec:	2300      	movs	r3, #0
 8001aee:	647b      	str	r3, [r7, #68]	@ 0x44
 8001af0:	2300      	movs	r3, #0
 8001af2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001af4:	2300      	movs	r3, #0
 8001af6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001af8:	2300      	movs	r3, #0
 8001afa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001afc:	4b79      	ldr	r3, [pc, #484]	@ (8001ce4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f003 030c 	and.w	r3, r3, #12
 8001b04:	2b08      	cmp	r3, #8
 8001b06:	d00d      	beq.n	8001b24 <HAL_RCC_GetSysClockFreq+0x40>
 8001b08:	2b08      	cmp	r3, #8
 8001b0a:	f200 80e1 	bhi.w	8001cd0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d002      	beq.n	8001b18 <HAL_RCC_GetSysClockFreq+0x34>
 8001b12:	2b04      	cmp	r3, #4
 8001b14:	d003      	beq.n	8001b1e <HAL_RCC_GetSysClockFreq+0x3a>
 8001b16:	e0db      	b.n	8001cd0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b18:	4b73      	ldr	r3, [pc, #460]	@ (8001ce8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b1a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001b1c:	e0db      	b.n	8001cd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b1e:	4b73      	ldr	r3, [pc, #460]	@ (8001cec <HAL_RCC_GetSysClockFreq+0x208>)
 8001b20:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b22:	e0d8      	b.n	8001cd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b24:	4b6f      	ldr	r3, [pc, #444]	@ (8001ce4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b2c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b2e:	4b6d      	ldr	r3, [pc, #436]	@ (8001ce4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d063      	beq.n	8001c02 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b3a:	4b6a      	ldr	r3, [pc, #424]	@ (8001ce4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	099b      	lsrs	r3, r3, #6
 8001b40:	2200      	movs	r2, #0
 8001b42:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001b44:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001b46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b4c:	633b      	str	r3, [r7, #48]	@ 0x30
 8001b4e:	2300      	movs	r3, #0
 8001b50:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b52:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001b56:	4622      	mov	r2, r4
 8001b58:	462b      	mov	r3, r5
 8001b5a:	f04f 0000 	mov.w	r0, #0
 8001b5e:	f04f 0100 	mov.w	r1, #0
 8001b62:	0159      	lsls	r1, r3, #5
 8001b64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b68:	0150      	lsls	r0, r2, #5
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	4621      	mov	r1, r4
 8001b70:	1a51      	subs	r1, r2, r1
 8001b72:	6139      	str	r1, [r7, #16]
 8001b74:	4629      	mov	r1, r5
 8001b76:	eb63 0301 	sbc.w	r3, r3, r1
 8001b7a:	617b      	str	r3, [r7, #20]
 8001b7c:	f04f 0200 	mov.w	r2, #0
 8001b80:	f04f 0300 	mov.w	r3, #0
 8001b84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b88:	4659      	mov	r1, fp
 8001b8a:	018b      	lsls	r3, r1, #6
 8001b8c:	4651      	mov	r1, sl
 8001b8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b92:	4651      	mov	r1, sl
 8001b94:	018a      	lsls	r2, r1, #6
 8001b96:	4651      	mov	r1, sl
 8001b98:	ebb2 0801 	subs.w	r8, r2, r1
 8001b9c:	4659      	mov	r1, fp
 8001b9e:	eb63 0901 	sbc.w	r9, r3, r1
 8001ba2:	f04f 0200 	mov.w	r2, #0
 8001ba6:	f04f 0300 	mov.w	r3, #0
 8001baa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bb6:	4690      	mov	r8, r2
 8001bb8:	4699      	mov	r9, r3
 8001bba:	4623      	mov	r3, r4
 8001bbc:	eb18 0303 	adds.w	r3, r8, r3
 8001bc0:	60bb      	str	r3, [r7, #8]
 8001bc2:	462b      	mov	r3, r5
 8001bc4:	eb49 0303 	adc.w	r3, r9, r3
 8001bc8:	60fb      	str	r3, [r7, #12]
 8001bca:	f04f 0200 	mov.w	r2, #0
 8001bce:	f04f 0300 	mov.w	r3, #0
 8001bd2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001bd6:	4629      	mov	r1, r5
 8001bd8:	024b      	lsls	r3, r1, #9
 8001bda:	4621      	mov	r1, r4
 8001bdc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001be0:	4621      	mov	r1, r4
 8001be2:	024a      	lsls	r2, r1, #9
 8001be4:	4610      	mov	r0, r2
 8001be6:	4619      	mov	r1, r3
 8001be8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bea:	2200      	movs	r2, #0
 8001bec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001bee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001bf0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001bf4:	f7fe fb4c 	bl	8000290 <__aeabi_uldivmod>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c00:	e058      	b.n	8001cb4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c02:	4b38      	ldr	r3, [pc, #224]	@ (8001ce4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	099b      	lsrs	r3, r3, #6
 8001c08:	2200      	movs	r2, #0
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	4611      	mov	r1, r2
 8001c0e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c12:	623b      	str	r3, [r7, #32]
 8001c14:	2300      	movs	r3, #0
 8001c16:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c18:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c1c:	4642      	mov	r2, r8
 8001c1e:	464b      	mov	r3, r9
 8001c20:	f04f 0000 	mov.w	r0, #0
 8001c24:	f04f 0100 	mov.w	r1, #0
 8001c28:	0159      	lsls	r1, r3, #5
 8001c2a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c2e:	0150      	lsls	r0, r2, #5
 8001c30:	4602      	mov	r2, r0
 8001c32:	460b      	mov	r3, r1
 8001c34:	4641      	mov	r1, r8
 8001c36:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c3a:	4649      	mov	r1, r9
 8001c3c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c40:	f04f 0200 	mov.w	r2, #0
 8001c44:	f04f 0300 	mov.w	r3, #0
 8001c48:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c4c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c50:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c54:	ebb2 040a 	subs.w	r4, r2, sl
 8001c58:	eb63 050b 	sbc.w	r5, r3, fp
 8001c5c:	f04f 0200 	mov.w	r2, #0
 8001c60:	f04f 0300 	mov.w	r3, #0
 8001c64:	00eb      	lsls	r3, r5, #3
 8001c66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c6a:	00e2      	lsls	r2, r4, #3
 8001c6c:	4614      	mov	r4, r2
 8001c6e:	461d      	mov	r5, r3
 8001c70:	4643      	mov	r3, r8
 8001c72:	18e3      	adds	r3, r4, r3
 8001c74:	603b      	str	r3, [r7, #0]
 8001c76:	464b      	mov	r3, r9
 8001c78:	eb45 0303 	adc.w	r3, r5, r3
 8001c7c:	607b      	str	r3, [r7, #4]
 8001c7e:	f04f 0200 	mov.w	r2, #0
 8001c82:	f04f 0300 	mov.w	r3, #0
 8001c86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c8a:	4629      	mov	r1, r5
 8001c8c:	028b      	lsls	r3, r1, #10
 8001c8e:	4621      	mov	r1, r4
 8001c90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c94:	4621      	mov	r1, r4
 8001c96:	028a      	lsls	r2, r1, #10
 8001c98:	4610      	mov	r0, r2
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	61bb      	str	r3, [r7, #24]
 8001ca2:	61fa      	str	r2, [r7, #28]
 8001ca4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ca8:	f7fe faf2 	bl	8000290 <__aeabi_uldivmod>
 8001cac:	4602      	mov	r2, r0
 8001cae:	460b      	mov	r3, r1
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ce4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	0c1b      	lsrs	r3, r3, #16
 8001cba:	f003 0303 	and.w	r3, r3, #3
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001cc4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001cc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ccc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001cce:	e002      	b.n	8001cd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cd0:	4b05      	ldr	r3, [pc, #20]	@ (8001ce8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001cd2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001cd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3750      	adds	r7, #80	@ 0x50
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	00f42400 	.word	0x00f42400
 8001cec:	007a1200 	.word	0x007a1200

08001cf0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cf4:	4b03      	ldr	r3, [pc, #12]	@ (8001d04 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	20000000 	.word	0x20000000

08001d08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d0c:	f7ff fff0 	bl	8001cf0 <HAL_RCC_GetHCLKFreq>
 8001d10:	4602      	mov	r2, r0
 8001d12:	4b05      	ldr	r3, [pc, #20]	@ (8001d28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	0a9b      	lsrs	r3, r3, #10
 8001d18:	f003 0307 	and.w	r3, r3, #7
 8001d1c:	4903      	ldr	r1, [pc, #12]	@ (8001d2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d1e:	5ccb      	ldrb	r3, [r1, r3]
 8001d20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40023800 	.word	0x40023800
 8001d2c:	08004454 	.word	0x08004454

08001d30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d34:	f7ff ffdc 	bl	8001cf0 <HAL_RCC_GetHCLKFreq>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	4b05      	ldr	r3, [pc, #20]	@ (8001d50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	0b5b      	lsrs	r3, r3, #13
 8001d40:	f003 0307 	and.w	r3, r3, #7
 8001d44:	4903      	ldr	r1, [pc, #12]	@ (8001d54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d46:	5ccb      	ldrb	r3, [r1, r3]
 8001d48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40023800 	.word	0x40023800
 8001d54:	08004454 	.word	0x08004454

08001d58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d101      	bne.n	8001d6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e042      	b.n	8001df0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d106      	bne.n	8001d84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f7fe fea2 	bl	8000ac8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2224      	movs	r2, #36	@ 0x24
 8001d88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	68da      	ldr	r2, [r3, #12]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001d9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f000 fdbd 	bl	800291c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	691a      	ldr	r2, [r3, #16]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001db0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	695a      	ldr	r2, [r3, #20]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001dc0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	68da      	ldr	r2, [r3, #12]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001dd0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2220      	movs	r2, #32
 8001ddc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2220      	movs	r2, #32
 8001de4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b08a      	sub	sp, #40	@ 0x28
 8001dfc:	af02      	add	r7, sp, #8
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	603b      	str	r3, [r7, #0]
 8001e04:	4613      	mov	r3, r2
 8001e06:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	2b20      	cmp	r3, #32
 8001e16:	d175      	bne.n	8001f04 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d002      	beq.n	8001e24 <HAL_UART_Transmit+0x2c>
 8001e1e:	88fb      	ldrh	r3, [r7, #6]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d101      	bne.n	8001e28 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e06e      	b.n	8001f06 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2221      	movs	r2, #33	@ 0x21
 8001e32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001e36:	f7fe ffa9 	bl	8000d8c <HAL_GetTick>
 8001e3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	88fa      	ldrh	r2, [r7, #6]
 8001e40:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	88fa      	ldrh	r2, [r7, #6]
 8001e46:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e50:	d108      	bne.n	8001e64 <HAL_UART_Transmit+0x6c>
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d104      	bne.n	8001e64 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	61bb      	str	r3, [r7, #24]
 8001e62:	e003      	b.n	8001e6c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001e6c:	e02e      	b.n	8001ecc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	9300      	str	r3, [sp, #0]
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	2200      	movs	r2, #0
 8001e76:	2180      	movs	r1, #128	@ 0x80
 8001e78:	68f8      	ldr	r0, [r7, #12]
 8001e7a:	f000 fb1f 	bl	80024bc <UART_WaitOnFlagUntilTimeout>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d005      	beq.n	8001e90 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2220      	movs	r2, #32
 8001e88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e03a      	b.n	8001f06 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d10b      	bne.n	8001eae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	881b      	ldrh	r3, [r3, #0]
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ea4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	3302      	adds	r3, #2
 8001eaa:	61bb      	str	r3, [r7, #24]
 8001eac:	e007      	b.n	8001ebe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	781a      	ldrb	r2, [r3, #0]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	3b01      	subs	r3, #1
 8001ec6:	b29a      	uxth	r2, r3
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1cb      	bne.n	8001e6e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	9300      	str	r3, [sp, #0]
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	2200      	movs	r2, #0
 8001ede:	2140      	movs	r1, #64	@ 0x40
 8001ee0:	68f8      	ldr	r0, [r7, #12]
 8001ee2:	f000 faeb 	bl	80024bc <UART_WaitOnFlagUntilTimeout>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d005      	beq.n	8001ef8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2220      	movs	r2, #32
 8001ef0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e006      	b.n	8001f06 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2220      	movs	r2, #32
 8001efc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001f00:	2300      	movs	r3, #0
 8001f02:	e000      	b.n	8001f06 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001f04:	2302      	movs	r3, #2
  }
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3720      	adds	r7, #32
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b084      	sub	sp, #16
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	60f8      	str	r0, [r7, #12]
 8001f16:	60b9      	str	r1, [r7, #8]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	2b20      	cmp	r3, #32
 8001f26:	d112      	bne.n	8001f4e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d002      	beq.n	8001f34 <HAL_UART_Receive_IT+0x26>
 8001f2e:	88fb      	ldrh	r3, [r7, #6]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d101      	bne.n	8001f38 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e00b      	b.n	8001f50 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001f3e:	88fb      	ldrh	r3, [r7, #6]
 8001f40:	461a      	mov	r2, r3
 8001f42:	68b9      	ldr	r1, [r7, #8]
 8001f44:	68f8      	ldr	r0, [r7, #12]
 8001f46:	f000 fb12 	bl	800256e <UART_Start_Receive_IT>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	e000      	b.n	8001f50 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001f4e:	2302      	movs	r3, #2
  }
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3710      	adds	r7, #16
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b0ba      	sub	sp, #232	@ 0xe8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8001f84:	2300      	movs	r3, #0
 8001f86:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001f8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001f8e:	f003 030f 	and.w	r3, r3, #15
 8001f92:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8001f96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d10f      	bne.n	8001fbe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001fa2:	f003 0320 	and.w	r3, r3, #32
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d009      	beq.n	8001fbe <HAL_UART_IRQHandler+0x66>
 8001faa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001fae:	f003 0320 	and.w	r3, r3, #32
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d003      	beq.n	8001fbe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 fbf2 	bl	80027a0 <UART_Receive_IT>
      return;
 8001fbc:	e25b      	b.n	8002476 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001fbe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	f000 80de 	beq.w	8002184 <HAL_UART_IRQHandler+0x22c>
 8001fc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001fcc:	f003 0301 	and.w	r3, r3, #1
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d106      	bne.n	8001fe2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001fd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001fd8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	f000 80d1 	beq.w	8002184 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d00b      	beq.n	8002006 <HAL_UART_IRQHandler+0xae>
 8001fee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001ff2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d005      	beq.n	8002006 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ffe:	f043 0201 	orr.w	r2, r3, #1
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800200a:	f003 0304 	and.w	r3, r3, #4
 800200e:	2b00      	cmp	r3, #0
 8002010:	d00b      	beq.n	800202a <HAL_UART_IRQHandler+0xd2>
 8002012:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	2b00      	cmp	r3, #0
 800201c:	d005      	beq.n	800202a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002022:	f043 0202 	orr.w	r2, r3, #2
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800202a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	2b00      	cmp	r3, #0
 8002034:	d00b      	beq.n	800204e <HAL_UART_IRQHandler+0xf6>
 8002036:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	2b00      	cmp	r3, #0
 8002040:	d005      	beq.n	800204e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002046:	f043 0204 	orr.w	r2, r3, #4
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800204e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002052:	f003 0308 	and.w	r3, r3, #8
 8002056:	2b00      	cmp	r3, #0
 8002058:	d011      	beq.n	800207e <HAL_UART_IRQHandler+0x126>
 800205a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800205e:	f003 0320 	and.w	r3, r3, #32
 8002062:	2b00      	cmp	r3, #0
 8002064:	d105      	bne.n	8002072 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002066:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	2b00      	cmp	r3, #0
 8002070:	d005      	beq.n	800207e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002076:	f043 0208 	orr.w	r2, r3, #8
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002082:	2b00      	cmp	r3, #0
 8002084:	f000 81f2 	beq.w	800246c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002088:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800208c:	f003 0320 	and.w	r3, r3, #32
 8002090:	2b00      	cmp	r3, #0
 8002092:	d008      	beq.n	80020a6 <HAL_UART_IRQHandler+0x14e>
 8002094:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002098:	f003 0320 	and.w	r3, r3, #32
 800209c:	2b00      	cmp	r3, #0
 800209e:	d002      	beq.n	80020a6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f000 fb7d 	bl	80027a0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	695b      	ldr	r3, [r3, #20]
 80020ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020b0:	2b40      	cmp	r3, #64	@ 0x40
 80020b2:	bf0c      	ite	eq
 80020b4:	2301      	moveq	r3, #1
 80020b6:	2300      	movne	r3, #0
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020c2:	f003 0308 	and.w	r3, r3, #8
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d103      	bne.n	80020d2 <HAL_UART_IRQHandler+0x17a>
 80020ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d04f      	beq.n	8002172 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 fa85 	bl	80025e2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	695b      	ldr	r3, [r3, #20]
 80020de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020e2:	2b40      	cmp	r3, #64	@ 0x40
 80020e4:	d141      	bne.n	800216a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	3314      	adds	r3, #20
 80020ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80020f4:	e853 3f00 	ldrex	r3, [r3]
 80020f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80020fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002100:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002104:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	3314      	adds	r3, #20
 800210e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002112:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002116:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800211a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800211e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002122:	e841 2300 	strex	r3, r2, [r1]
 8002126:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800212a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1d9      	bne.n	80020e6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002136:	2b00      	cmp	r3, #0
 8002138:	d013      	beq.n	8002162 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800213e:	4a7e      	ldr	r2, [pc, #504]	@ (8002338 <HAL_UART_IRQHandler+0x3e0>)
 8002140:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002146:	4618      	mov	r0, r3
 8002148:	f7fe ffad 	bl	80010a6 <HAL_DMA_Abort_IT>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d016      	beq.n	8002180 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002156:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800215c:	4610      	mov	r0, r2
 800215e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002160:	e00e      	b.n	8002180 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 f994 	bl	8002490 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002168:	e00a      	b.n	8002180 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f000 f990 	bl	8002490 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002170:	e006      	b.n	8002180 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f000 f98c 	bl	8002490 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800217e:	e175      	b.n	800246c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002180:	bf00      	nop
    return;
 8002182:	e173      	b.n	800246c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002188:	2b01      	cmp	r3, #1
 800218a:	f040 814f 	bne.w	800242c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800218e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002192:	f003 0310 	and.w	r3, r3, #16
 8002196:	2b00      	cmp	r3, #0
 8002198:	f000 8148 	beq.w	800242c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800219c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80021a0:	f003 0310 	and.w	r3, r3, #16
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	f000 8141 	beq.w	800242c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80021aa:	2300      	movs	r3, #0
 80021ac:	60bb      	str	r3, [r7, #8]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	60bb      	str	r3, [r7, #8]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	60bb      	str	r3, [r7, #8]
 80021be:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	695b      	ldr	r3, [r3, #20]
 80021c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021ca:	2b40      	cmp	r3, #64	@ 0x40
 80021cc:	f040 80b6 	bne.w	800233c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80021dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	f000 8145 	beq.w	8002470 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80021ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80021ee:	429a      	cmp	r2, r3
 80021f0:	f080 813e 	bcs.w	8002470 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80021fa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002206:	f000 8088 	beq.w	800231a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	330c      	adds	r3, #12
 8002210:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002214:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002218:	e853 3f00 	ldrex	r3, [r3]
 800221c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002220:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002224:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002228:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	330c      	adds	r3, #12
 8002232:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002236:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800223a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800223e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002242:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002246:	e841 2300 	strex	r3, r2, [r1]
 800224a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800224e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1d9      	bne.n	800220a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	3314      	adds	r3, #20
 800225c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800225e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002260:	e853 3f00 	ldrex	r3, [r3]
 8002264:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002266:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002268:	f023 0301 	bic.w	r3, r3, #1
 800226c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	3314      	adds	r3, #20
 8002276:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800227a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800227e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002280:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002282:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002286:	e841 2300 	strex	r3, r2, [r1]
 800228a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800228c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800228e:	2b00      	cmp	r3, #0
 8002290:	d1e1      	bne.n	8002256 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	3314      	adds	r3, #20
 8002298:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800229a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800229c:	e853 3f00 	ldrex	r3, [r3]
 80022a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80022a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80022a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80022a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	3314      	adds	r3, #20
 80022b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80022b6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80022b8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022ba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80022bc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80022be:	e841 2300 	strex	r3, r2, [r1]
 80022c2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80022c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1e3      	bne.n	8002292 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2220      	movs	r2, #32
 80022ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	330c      	adds	r3, #12
 80022de:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80022e2:	e853 3f00 	ldrex	r3, [r3]
 80022e6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80022e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80022ea:	f023 0310 	bic.w	r3, r3, #16
 80022ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	330c      	adds	r3, #12
 80022f8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80022fc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80022fe:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002300:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002302:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002304:	e841 2300 	strex	r3, r2, [r1]
 8002308:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800230a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800230c:	2b00      	cmp	r3, #0
 800230e:	d1e3      	bne.n	80022d8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002314:	4618      	mov	r0, r3
 8002316:	f7fe fe56 	bl	8000fc6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2202      	movs	r2, #2
 800231e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002328:	b29b      	uxth	r3, r3
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	b29b      	uxth	r3, r3
 800232e:	4619      	mov	r1, r3
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f000 f8b7 	bl	80024a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002336:	e09b      	b.n	8002470 <HAL_UART_IRQHandler+0x518>
 8002338:	080026a9 	.word	0x080026a9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002344:	b29b      	uxth	r3, r3
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002350:	b29b      	uxth	r3, r3
 8002352:	2b00      	cmp	r3, #0
 8002354:	f000 808e 	beq.w	8002474 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002358:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800235c:	2b00      	cmp	r3, #0
 800235e:	f000 8089 	beq.w	8002474 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	330c      	adds	r3, #12
 8002368:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800236a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800236c:	e853 3f00 	ldrex	r3, [r3]
 8002370:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002372:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002374:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002378:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	330c      	adds	r3, #12
 8002382:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002386:	647a      	str	r2, [r7, #68]	@ 0x44
 8002388:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800238a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800238c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800238e:	e841 2300 	strex	r3, r2, [r1]
 8002392:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002394:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1e3      	bne.n	8002362 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	3314      	adds	r3, #20
 80023a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a4:	e853 3f00 	ldrex	r3, [r3]
 80023a8:	623b      	str	r3, [r7, #32]
   return(result);
 80023aa:	6a3b      	ldr	r3, [r7, #32]
 80023ac:	f023 0301 	bic.w	r3, r3, #1
 80023b0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	3314      	adds	r3, #20
 80023ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80023be:	633a      	str	r2, [r7, #48]	@ 0x30
 80023c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80023c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023c6:	e841 2300 	strex	r3, r2, [r1]
 80023ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80023cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1e3      	bne.n	800239a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2220      	movs	r2, #32
 80023d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	330c      	adds	r3, #12
 80023e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	e853 3f00 	ldrex	r3, [r3]
 80023ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	f023 0310 	bic.w	r3, r3, #16
 80023f6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	330c      	adds	r3, #12
 8002400:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002404:	61fa      	str	r2, [r7, #28]
 8002406:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002408:	69b9      	ldr	r1, [r7, #24]
 800240a:	69fa      	ldr	r2, [r7, #28]
 800240c:	e841 2300 	strex	r3, r2, [r1]
 8002410:	617b      	str	r3, [r7, #20]
   return(result);
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1e3      	bne.n	80023e0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2202      	movs	r2, #2
 800241c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800241e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002422:	4619      	mov	r1, r3
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f000 f83d 	bl	80024a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800242a:	e023      	b.n	8002474 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800242c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002430:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002434:	2b00      	cmp	r3, #0
 8002436:	d009      	beq.n	800244c <HAL_UART_IRQHandler+0x4f4>
 8002438:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800243c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002440:	2b00      	cmp	r3, #0
 8002442:	d003      	beq.n	800244c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f000 f943 	bl	80026d0 <UART_Transmit_IT>
    return;
 800244a:	e014      	b.n	8002476 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800244c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002450:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002454:	2b00      	cmp	r3, #0
 8002456:	d00e      	beq.n	8002476 <HAL_UART_IRQHandler+0x51e>
 8002458:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800245c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002460:	2b00      	cmp	r3, #0
 8002462:	d008      	beq.n	8002476 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f000 f983 	bl	8002770 <UART_EndTransmit_IT>
    return;
 800246a:	e004      	b.n	8002476 <HAL_UART_IRQHandler+0x51e>
    return;
 800246c:	bf00      	nop
 800246e:	e002      	b.n	8002476 <HAL_UART_IRQHandler+0x51e>
      return;
 8002470:	bf00      	nop
 8002472:	e000      	b.n	8002476 <HAL_UART_IRQHandler+0x51e>
      return;
 8002474:	bf00      	nop
  }
}
 8002476:	37e8      	adds	r7, #232	@ 0xe8
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	460b      	mov	r3, r1
 80024ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80024b0:	bf00      	nop
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b086      	sub	sp, #24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	603b      	str	r3, [r7, #0]
 80024c8:	4613      	mov	r3, r2
 80024ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024cc:	e03b      	b.n	8002546 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024ce:	6a3b      	ldr	r3, [r7, #32]
 80024d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d4:	d037      	beq.n	8002546 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024d6:	f7fe fc59 	bl	8000d8c <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	6a3a      	ldr	r2, [r7, #32]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d302      	bcc.n	80024ec <UART_WaitOnFlagUntilTimeout+0x30>
 80024e6:	6a3b      	ldr	r3, [r7, #32]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d101      	bne.n	80024f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e03a      	b.n	8002566 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	f003 0304 	and.w	r3, r3, #4
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d023      	beq.n	8002546 <UART_WaitOnFlagUntilTimeout+0x8a>
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	2b80      	cmp	r3, #128	@ 0x80
 8002502:	d020      	beq.n	8002546 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	2b40      	cmp	r3, #64	@ 0x40
 8002508:	d01d      	beq.n	8002546 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0308 	and.w	r3, r3, #8
 8002514:	2b08      	cmp	r3, #8
 8002516:	d116      	bne.n	8002546 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002518:	2300      	movs	r3, #0
 800251a:	617b      	str	r3, [r7, #20]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	617b      	str	r3, [r7, #20]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	617b      	str	r3, [r7, #20]
 800252c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800252e:	68f8      	ldr	r0, [r7, #12]
 8002530:	f000 f857 	bl	80025e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2208      	movs	r2, #8
 8002538:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e00f      	b.n	8002566 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	4013      	ands	r3, r2
 8002550:	68ba      	ldr	r2, [r7, #8]
 8002552:	429a      	cmp	r2, r3
 8002554:	bf0c      	ite	eq
 8002556:	2301      	moveq	r3, #1
 8002558:	2300      	movne	r3, #0
 800255a:	b2db      	uxtb	r3, r3
 800255c:	461a      	mov	r2, r3
 800255e:	79fb      	ldrb	r3, [r7, #7]
 8002560:	429a      	cmp	r2, r3
 8002562:	d0b4      	beq.n	80024ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	3718      	adds	r7, #24
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800256e:	b480      	push	{r7}
 8002570:	b085      	sub	sp, #20
 8002572:	af00      	add	r7, sp, #0
 8002574:	60f8      	str	r0, [r7, #12]
 8002576:	60b9      	str	r1, [r7, #8]
 8002578:	4613      	mov	r3, r2
 800257a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	68ba      	ldr	r2, [r7, #8]
 8002580:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	88fa      	ldrh	r2, [r7, #6]
 8002586:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	88fa      	ldrh	r2, [r7, #6]
 800258c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2200      	movs	r2, #0
 8002592:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2222      	movs	r2, #34	@ 0x22
 8002598:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d007      	beq.n	80025b4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	68da      	ldr	r2, [r3, #12]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025b2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	695a      	ldr	r2, [r3, #20]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f042 0201 	orr.w	r2, r2, #1
 80025c2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68da      	ldr	r2, [r3, #12]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f042 0220 	orr.w	r2, r2, #32
 80025d2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3714      	adds	r7, #20
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr

080025e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80025e2:	b480      	push	{r7}
 80025e4:	b095      	sub	sp, #84	@ 0x54
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	330c      	adds	r3, #12
 80025f0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025f4:	e853 3f00 	ldrex	r3, [r3]
 80025f8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80025fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002600:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	330c      	adds	r3, #12
 8002608:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800260a:	643a      	str	r2, [r7, #64]	@ 0x40
 800260c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800260e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002610:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002612:	e841 2300 	strex	r3, r2, [r1]
 8002616:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1e5      	bne.n	80025ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	3314      	adds	r3, #20
 8002624:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002626:	6a3b      	ldr	r3, [r7, #32]
 8002628:	e853 3f00 	ldrex	r3, [r3]
 800262c:	61fb      	str	r3, [r7, #28]
   return(result);
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	f023 0301 	bic.w	r3, r3, #1
 8002634:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	3314      	adds	r3, #20
 800263c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800263e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002640:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002642:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002644:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002646:	e841 2300 	strex	r3, r2, [r1]
 800264a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800264c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1e5      	bne.n	800261e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002656:	2b01      	cmp	r3, #1
 8002658:	d119      	bne.n	800268e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	330c      	adds	r3, #12
 8002660:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	e853 3f00 	ldrex	r3, [r3]
 8002668:	60bb      	str	r3, [r7, #8]
   return(result);
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	f023 0310 	bic.w	r3, r3, #16
 8002670:	647b      	str	r3, [r7, #68]	@ 0x44
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	330c      	adds	r3, #12
 8002678:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800267a:	61ba      	str	r2, [r7, #24]
 800267c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800267e:	6979      	ldr	r1, [r7, #20]
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	e841 2300 	strex	r3, r2, [r1]
 8002686:	613b      	str	r3, [r7, #16]
   return(result);
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1e5      	bne.n	800265a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2220      	movs	r2, #32
 8002692:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800269c:	bf00      	nop
 800269e:	3754      	adds	r7, #84	@ 0x54
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2200      	movs	r2, #0
 80026ba:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2200      	movs	r2, #0
 80026c0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80026c2:	68f8      	ldr	r0, [r7, #12]
 80026c4:	f7ff fee4 	bl	8002490 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80026c8:	bf00      	nop
 80026ca:	3710      	adds	r7, #16
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	2b21      	cmp	r3, #33	@ 0x21
 80026e2:	d13e      	bne.n	8002762 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026ec:	d114      	bne.n	8002718 <UART_Transmit_IT+0x48>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d110      	bne.n	8002718 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a1b      	ldr	r3, [r3, #32]
 80026fa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	881b      	ldrh	r3, [r3, #0]
 8002700:	461a      	mov	r2, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800270a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a1b      	ldr	r3, [r3, #32]
 8002710:	1c9a      	adds	r2, r3, #2
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	621a      	str	r2, [r3, #32]
 8002716:	e008      	b.n	800272a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a1b      	ldr	r3, [r3, #32]
 800271c:	1c59      	adds	r1, r3, #1
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	6211      	str	r1, [r2, #32]
 8002722:	781a      	ldrb	r2, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800272e:	b29b      	uxth	r3, r3
 8002730:	3b01      	subs	r3, #1
 8002732:	b29b      	uxth	r3, r3
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	4619      	mov	r1, r3
 8002738:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800273a:	2b00      	cmp	r3, #0
 800273c:	d10f      	bne.n	800275e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68da      	ldr	r2, [r3, #12]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800274c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	68da      	ldr	r2, [r3, #12]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800275c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800275e:	2300      	movs	r3, #0
 8002760:	e000      	b.n	8002764 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002762:	2302      	movs	r3, #2
  }
}
 8002764:	4618      	mov	r0, r3
 8002766:	3714      	adds	r7, #20
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68da      	ldr	r2, [r3, #12]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002786:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2220      	movs	r2, #32
 800278c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f7ff fe73 	bl	800247c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	3708      	adds	r7, #8
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b08c      	sub	sp, #48	@ 0x30
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	2b22      	cmp	r3, #34	@ 0x22
 80027b2:	f040 80ae 	bne.w	8002912 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027be:	d117      	bne.n	80027f0 <UART_Receive_IT+0x50>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d113      	bne.n	80027f0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80027c8:	2300      	movs	r3, #0
 80027ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027d0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	b29b      	uxth	r3, r3
 80027da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027de:	b29a      	uxth	r2, r3
 80027e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027e2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027e8:	1c9a      	adds	r2, r3, #2
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	629a      	str	r2, [r3, #40]	@ 0x28
 80027ee:	e026      	b.n	800283e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80027f6:	2300      	movs	r3, #0
 80027f8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002802:	d007      	beq.n	8002814 <UART_Receive_IT+0x74>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d10a      	bne.n	8002822 <UART_Receive_IT+0x82>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d106      	bne.n	8002822 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	b2da      	uxtb	r2, r3
 800281c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800281e:	701a      	strb	r2, [r3, #0]
 8002820:	e008      	b.n	8002834 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	b2db      	uxtb	r3, r3
 800282a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800282e:	b2da      	uxtb	r2, r3
 8002830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002832:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002838:	1c5a      	adds	r2, r3, #1
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002842:	b29b      	uxth	r3, r3
 8002844:	3b01      	subs	r3, #1
 8002846:	b29b      	uxth	r3, r3
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	4619      	mov	r1, r3
 800284c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800284e:	2b00      	cmp	r3, #0
 8002850:	d15d      	bne.n	800290e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68da      	ldr	r2, [r3, #12]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f022 0220 	bic.w	r2, r2, #32
 8002860:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	68da      	ldr	r2, [r3, #12]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002870:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	695a      	ldr	r2, [r3, #20]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f022 0201 	bic.w	r2, r2, #1
 8002880:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2220      	movs	r2, #32
 8002886:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002894:	2b01      	cmp	r3, #1
 8002896:	d135      	bne.n	8002904 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	330c      	adds	r3, #12
 80028a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	e853 3f00 	ldrex	r3, [r3]
 80028ac:	613b      	str	r3, [r7, #16]
   return(result);
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	f023 0310 	bic.w	r3, r3, #16
 80028b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	330c      	adds	r3, #12
 80028bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028be:	623a      	str	r2, [r7, #32]
 80028c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028c2:	69f9      	ldr	r1, [r7, #28]
 80028c4:	6a3a      	ldr	r2, [r7, #32]
 80028c6:	e841 2300 	strex	r3, r2, [r1]
 80028ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d1e5      	bne.n	800289e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0310 	and.w	r3, r3, #16
 80028dc:	2b10      	cmp	r3, #16
 80028de:	d10a      	bne.n	80028f6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80028e0:	2300      	movs	r3, #0
 80028e2:	60fb      	str	r3, [r7, #12]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	60fb      	str	r3, [r7, #12]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	60fb      	str	r3, [r7, #12]
 80028f4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80028fa:	4619      	mov	r1, r3
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f7ff fdd1 	bl	80024a4 <HAL_UARTEx_RxEventCallback>
 8002902:	e002      	b.n	800290a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f7fd fe3b 	bl	8000580 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800290a:	2300      	movs	r3, #0
 800290c:	e002      	b.n	8002914 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800290e:	2300      	movs	r3, #0
 8002910:	e000      	b.n	8002914 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002912:	2302      	movs	r3, #2
  }
}
 8002914:	4618      	mov	r0, r3
 8002916:	3730      	adds	r7, #48	@ 0x30
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800291c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002920:	b0c0      	sub	sp, #256	@ 0x100
 8002922:	af00      	add	r7, sp, #0
 8002924:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002938:	68d9      	ldr	r1, [r3, #12]
 800293a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	ea40 0301 	orr.w	r3, r0, r1
 8002944:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	431a      	orrs	r2, r3
 8002954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	431a      	orrs	r2, r3
 800295c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002960:	69db      	ldr	r3, [r3, #28]
 8002962:	4313      	orrs	r3, r2
 8002964:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002974:	f021 010c 	bic.w	r1, r1, #12
 8002978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002982:	430b      	orrs	r3, r1
 8002984:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002996:	6999      	ldr	r1, [r3, #24]
 8002998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	ea40 0301 	orr.w	r3, r0, r1
 80029a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80029a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	4b8f      	ldr	r3, [pc, #572]	@ (8002be8 <UART_SetConfig+0x2cc>)
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d005      	beq.n	80029bc <UART_SetConfig+0xa0>
 80029b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	4b8d      	ldr	r3, [pc, #564]	@ (8002bec <UART_SetConfig+0x2d0>)
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d104      	bne.n	80029c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80029bc:	f7ff f9b8 	bl	8001d30 <HAL_RCC_GetPCLK2Freq>
 80029c0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80029c4:	e003      	b.n	80029ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80029c6:	f7ff f99f 	bl	8001d08 <HAL_RCC_GetPCLK1Freq>
 80029ca:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029d2:	69db      	ldr	r3, [r3, #28]
 80029d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80029d8:	f040 810c 	bne.w	8002bf4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80029dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029e0:	2200      	movs	r2, #0
 80029e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80029e6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80029ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80029ee:	4622      	mov	r2, r4
 80029f0:	462b      	mov	r3, r5
 80029f2:	1891      	adds	r1, r2, r2
 80029f4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80029f6:	415b      	adcs	r3, r3
 80029f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80029fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80029fe:	4621      	mov	r1, r4
 8002a00:	eb12 0801 	adds.w	r8, r2, r1
 8002a04:	4629      	mov	r1, r5
 8002a06:	eb43 0901 	adc.w	r9, r3, r1
 8002a0a:	f04f 0200 	mov.w	r2, #0
 8002a0e:	f04f 0300 	mov.w	r3, #0
 8002a12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a1e:	4690      	mov	r8, r2
 8002a20:	4699      	mov	r9, r3
 8002a22:	4623      	mov	r3, r4
 8002a24:	eb18 0303 	adds.w	r3, r8, r3
 8002a28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002a2c:	462b      	mov	r3, r5
 8002a2e:	eb49 0303 	adc.w	r3, r9, r3
 8002a32:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002a42:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002a46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	18db      	adds	r3, r3, r3
 8002a4e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002a50:	4613      	mov	r3, r2
 8002a52:	eb42 0303 	adc.w	r3, r2, r3
 8002a56:	657b      	str	r3, [r7, #84]	@ 0x54
 8002a58:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002a5c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002a60:	f7fd fc16 	bl	8000290 <__aeabi_uldivmod>
 8002a64:	4602      	mov	r2, r0
 8002a66:	460b      	mov	r3, r1
 8002a68:	4b61      	ldr	r3, [pc, #388]	@ (8002bf0 <UART_SetConfig+0x2d4>)
 8002a6a:	fba3 2302 	umull	r2, r3, r3, r2
 8002a6e:	095b      	lsrs	r3, r3, #5
 8002a70:	011c      	lsls	r4, r3, #4
 8002a72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a76:	2200      	movs	r2, #0
 8002a78:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002a7c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002a80:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002a84:	4642      	mov	r2, r8
 8002a86:	464b      	mov	r3, r9
 8002a88:	1891      	adds	r1, r2, r2
 8002a8a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002a8c:	415b      	adcs	r3, r3
 8002a8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002a94:	4641      	mov	r1, r8
 8002a96:	eb12 0a01 	adds.w	sl, r2, r1
 8002a9a:	4649      	mov	r1, r9
 8002a9c:	eb43 0b01 	adc.w	fp, r3, r1
 8002aa0:	f04f 0200 	mov.w	r2, #0
 8002aa4:	f04f 0300 	mov.w	r3, #0
 8002aa8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002aac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ab0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ab4:	4692      	mov	sl, r2
 8002ab6:	469b      	mov	fp, r3
 8002ab8:	4643      	mov	r3, r8
 8002aba:	eb1a 0303 	adds.w	r3, sl, r3
 8002abe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002ac2:	464b      	mov	r3, r9
 8002ac4:	eb4b 0303 	adc.w	r3, fp, r3
 8002ac8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002ad8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002adc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	18db      	adds	r3, r3, r3
 8002ae4:	643b      	str	r3, [r7, #64]	@ 0x40
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	eb42 0303 	adc.w	r3, r2, r3
 8002aec:	647b      	str	r3, [r7, #68]	@ 0x44
 8002aee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002af2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002af6:	f7fd fbcb 	bl	8000290 <__aeabi_uldivmod>
 8002afa:	4602      	mov	r2, r0
 8002afc:	460b      	mov	r3, r1
 8002afe:	4611      	mov	r1, r2
 8002b00:	4b3b      	ldr	r3, [pc, #236]	@ (8002bf0 <UART_SetConfig+0x2d4>)
 8002b02:	fba3 2301 	umull	r2, r3, r3, r1
 8002b06:	095b      	lsrs	r3, r3, #5
 8002b08:	2264      	movs	r2, #100	@ 0x64
 8002b0a:	fb02 f303 	mul.w	r3, r2, r3
 8002b0e:	1acb      	subs	r3, r1, r3
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002b16:	4b36      	ldr	r3, [pc, #216]	@ (8002bf0 <UART_SetConfig+0x2d4>)
 8002b18:	fba3 2302 	umull	r2, r3, r3, r2
 8002b1c:	095b      	lsrs	r3, r3, #5
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002b24:	441c      	add	r4, r3
 8002b26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002b30:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002b34:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002b38:	4642      	mov	r2, r8
 8002b3a:	464b      	mov	r3, r9
 8002b3c:	1891      	adds	r1, r2, r2
 8002b3e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002b40:	415b      	adcs	r3, r3
 8002b42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002b48:	4641      	mov	r1, r8
 8002b4a:	1851      	adds	r1, r2, r1
 8002b4c:	6339      	str	r1, [r7, #48]	@ 0x30
 8002b4e:	4649      	mov	r1, r9
 8002b50:	414b      	adcs	r3, r1
 8002b52:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b54:	f04f 0200 	mov.w	r2, #0
 8002b58:	f04f 0300 	mov.w	r3, #0
 8002b5c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002b60:	4659      	mov	r1, fp
 8002b62:	00cb      	lsls	r3, r1, #3
 8002b64:	4651      	mov	r1, sl
 8002b66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b6a:	4651      	mov	r1, sl
 8002b6c:	00ca      	lsls	r2, r1, #3
 8002b6e:	4610      	mov	r0, r2
 8002b70:	4619      	mov	r1, r3
 8002b72:	4603      	mov	r3, r0
 8002b74:	4642      	mov	r2, r8
 8002b76:	189b      	adds	r3, r3, r2
 8002b78:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002b7c:	464b      	mov	r3, r9
 8002b7e:	460a      	mov	r2, r1
 8002b80:	eb42 0303 	adc.w	r3, r2, r3
 8002b84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002b94:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002b98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	18db      	adds	r3, r3, r3
 8002ba0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	eb42 0303 	adc.w	r3, r2, r3
 8002ba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002baa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002bae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002bb2:	f7fd fb6d 	bl	8000290 <__aeabi_uldivmod>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	460b      	mov	r3, r1
 8002bba:	4b0d      	ldr	r3, [pc, #52]	@ (8002bf0 <UART_SetConfig+0x2d4>)
 8002bbc:	fba3 1302 	umull	r1, r3, r3, r2
 8002bc0:	095b      	lsrs	r3, r3, #5
 8002bc2:	2164      	movs	r1, #100	@ 0x64
 8002bc4:	fb01 f303 	mul.w	r3, r1, r3
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	3332      	adds	r3, #50	@ 0x32
 8002bce:	4a08      	ldr	r2, [pc, #32]	@ (8002bf0 <UART_SetConfig+0x2d4>)
 8002bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd4:	095b      	lsrs	r3, r3, #5
 8002bd6:	f003 0207 	and.w	r2, r3, #7
 8002bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4422      	add	r2, r4
 8002be2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002be4:	e106      	b.n	8002df4 <UART_SetConfig+0x4d8>
 8002be6:	bf00      	nop
 8002be8:	40011000 	.word	0x40011000
 8002bec:	40011400 	.word	0x40011400
 8002bf0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002bf4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002bfe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002c02:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002c06:	4642      	mov	r2, r8
 8002c08:	464b      	mov	r3, r9
 8002c0a:	1891      	adds	r1, r2, r2
 8002c0c:	6239      	str	r1, [r7, #32]
 8002c0e:	415b      	adcs	r3, r3
 8002c10:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c16:	4641      	mov	r1, r8
 8002c18:	1854      	adds	r4, r2, r1
 8002c1a:	4649      	mov	r1, r9
 8002c1c:	eb43 0501 	adc.w	r5, r3, r1
 8002c20:	f04f 0200 	mov.w	r2, #0
 8002c24:	f04f 0300 	mov.w	r3, #0
 8002c28:	00eb      	lsls	r3, r5, #3
 8002c2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c2e:	00e2      	lsls	r2, r4, #3
 8002c30:	4614      	mov	r4, r2
 8002c32:	461d      	mov	r5, r3
 8002c34:	4643      	mov	r3, r8
 8002c36:	18e3      	adds	r3, r4, r3
 8002c38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002c3c:	464b      	mov	r3, r9
 8002c3e:	eb45 0303 	adc.w	r3, r5, r3
 8002c42:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002c46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002c52:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002c56:	f04f 0200 	mov.w	r2, #0
 8002c5a:	f04f 0300 	mov.w	r3, #0
 8002c5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002c62:	4629      	mov	r1, r5
 8002c64:	008b      	lsls	r3, r1, #2
 8002c66:	4621      	mov	r1, r4
 8002c68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c6c:	4621      	mov	r1, r4
 8002c6e:	008a      	lsls	r2, r1, #2
 8002c70:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002c74:	f7fd fb0c 	bl	8000290 <__aeabi_uldivmod>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	4b60      	ldr	r3, [pc, #384]	@ (8002e00 <UART_SetConfig+0x4e4>)
 8002c7e:	fba3 2302 	umull	r2, r3, r3, r2
 8002c82:	095b      	lsrs	r3, r3, #5
 8002c84:	011c      	lsls	r4, r3, #4
 8002c86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002c90:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002c94:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002c98:	4642      	mov	r2, r8
 8002c9a:	464b      	mov	r3, r9
 8002c9c:	1891      	adds	r1, r2, r2
 8002c9e:	61b9      	str	r1, [r7, #24]
 8002ca0:	415b      	adcs	r3, r3
 8002ca2:	61fb      	str	r3, [r7, #28]
 8002ca4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ca8:	4641      	mov	r1, r8
 8002caa:	1851      	adds	r1, r2, r1
 8002cac:	6139      	str	r1, [r7, #16]
 8002cae:	4649      	mov	r1, r9
 8002cb0:	414b      	adcs	r3, r1
 8002cb2:	617b      	str	r3, [r7, #20]
 8002cb4:	f04f 0200 	mov.w	r2, #0
 8002cb8:	f04f 0300 	mov.w	r3, #0
 8002cbc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002cc0:	4659      	mov	r1, fp
 8002cc2:	00cb      	lsls	r3, r1, #3
 8002cc4:	4651      	mov	r1, sl
 8002cc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cca:	4651      	mov	r1, sl
 8002ccc:	00ca      	lsls	r2, r1, #3
 8002cce:	4610      	mov	r0, r2
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	4642      	mov	r2, r8
 8002cd6:	189b      	adds	r3, r3, r2
 8002cd8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002cdc:	464b      	mov	r3, r9
 8002cde:	460a      	mov	r2, r1
 8002ce0:	eb42 0303 	adc.w	r3, r2, r3
 8002ce4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002cf2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002cf4:	f04f 0200 	mov.w	r2, #0
 8002cf8:	f04f 0300 	mov.w	r3, #0
 8002cfc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002d00:	4649      	mov	r1, r9
 8002d02:	008b      	lsls	r3, r1, #2
 8002d04:	4641      	mov	r1, r8
 8002d06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d0a:	4641      	mov	r1, r8
 8002d0c:	008a      	lsls	r2, r1, #2
 8002d0e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002d12:	f7fd fabd 	bl	8000290 <__aeabi_uldivmod>
 8002d16:	4602      	mov	r2, r0
 8002d18:	460b      	mov	r3, r1
 8002d1a:	4611      	mov	r1, r2
 8002d1c:	4b38      	ldr	r3, [pc, #224]	@ (8002e00 <UART_SetConfig+0x4e4>)
 8002d1e:	fba3 2301 	umull	r2, r3, r3, r1
 8002d22:	095b      	lsrs	r3, r3, #5
 8002d24:	2264      	movs	r2, #100	@ 0x64
 8002d26:	fb02 f303 	mul.w	r3, r2, r3
 8002d2a:	1acb      	subs	r3, r1, r3
 8002d2c:	011b      	lsls	r3, r3, #4
 8002d2e:	3332      	adds	r3, #50	@ 0x32
 8002d30:	4a33      	ldr	r2, [pc, #204]	@ (8002e00 <UART_SetConfig+0x4e4>)
 8002d32:	fba2 2303 	umull	r2, r3, r2, r3
 8002d36:	095b      	lsrs	r3, r3, #5
 8002d38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d3c:	441c      	add	r4, r3
 8002d3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d42:	2200      	movs	r2, #0
 8002d44:	673b      	str	r3, [r7, #112]	@ 0x70
 8002d46:	677a      	str	r2, [r7, #116]	@ 0x74
 8002d48:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002d4c:	4642      	mov	r2, r8
 8002d4e:	464b      	mov	r3, r9
 8002d50:	1891      	adds	r1, r2, r2
 8002d52:	60b9      	str	r1, [r7, #8]
 8002d54:	415b      	adcs	r3, r3
 8002d56:	60fb      	str	r3, [r7, #12]
 8002d58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d5c:	4641      	mov	r1, r8
 8002d5e:	1851      	adds	r1, r2, r1
 8002d60:	6039      	str	r1, [r7, #0]
 8002d62:	4649      	mov	r1, r9
 8002d64:	414b      	adcs	r3, r1
 8002d66:	607b      	str	r3, [r7, #4]
 8002d68:	f04f 0200 	mov.w	r2, #0
 8002d6c:	f04f 0300 	mov.w	r3, #0
 8002d70:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002d74:	4659      	mov	r1, fp
 8002d76:	00cb      	lsls	r3, r1, #3
 8002d78:	4651      	mov	r1, sl
 8002d7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d7e:	4651      	mov	r1, sl
 8002d80:	00ca      	lsls	r2, r1, #3
 8002d82:	4610      	mov	r0, r2
 8002d84:	4619      	mov	r1, r3
 8002d86:	4603      	mov	r3, r0
 8002d88:	4642      	mov	r2, r8
 8002d8a:	189b      	adds	r3, r3, r2
 8002d8c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002d8e:	464b      	mov	r3, r9
 8002d90:	460a      	mov	r2, r1
 8002d92:	eb42 0303 	adc.w	r3, r2, r3
 8002d96:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	663b      	str	r3, [r7, #96]	@ 0x60
 8002da2:	667a      	str	r2, [r7, #100]	@ 0x64
 8002da4:	f04f 0200 	mov.w	r2, #0
 8002da8:	f04f 0300 	mov.w	r3, #0
 8002dac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002db0:	4649      	mov	r1, r9
 8002db2:	008b      	lsls	r3, r1, #2
 8002db4:	4641      	mov	r1, r8
 8002db6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002dba:	4641      	mov	r1, r8
 8002dbc:	008a      	lsls	r2, r1, #2
 8002dbe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002dc2:	f7fd fa65 	bl	8000290 <__aeabi_uldivmod>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	460b      	mov	r3, r1
 8002dca:	4b0d      	ldr	r3, [pc, #52]	@ (8002e00 <UART_SetConfig+0x4e4>)
 8002dcc:	fba3 1302 	umull	r1, r3, r3, r2
 8002dd0:	095b      	lsrs	r3, r3, #5
 8002dd2:	2164      	movs	r1, #100	@ 0x64
 8002dd4:	fb01 f303 	mul.w	r3, r1, r3
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	011b      	lsls	r3, r3, #4
 8002ddc:	3332      	adds	r3, #50	@ 0x32
 8002dde:	4a08      	ldr	r2, [pc, #32]	@ (8002e00 <UART_SetConfig+0x4e4>)
 8002de0:	fba2 2303 	umull	r2, r3, r2, r3
 8002de4:	095b      	lsrs	r3, r3, #5
 8002de6:	f003 020f 	and.w	r2, r3, #15
 8002dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4422      	add	r2, r4
 8002df2:	609a      	str	r2, [r3, #8]
}
 8002df4:	bf00      	nop
 8002df6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e00:	51eb851f 	.word	0x51eb851f

08002e04 <sniprintf>:
 8002e04:	b40c      	push	{r2, r3}
 8002e06:	b530      	push	{r4, r5, lr}
 8002e08:	4b17      	ldr	r3, [pc, #92]	@ (8002e68 <sniprintf+0x64>)
 8002e0a:	1e0c      	subs	r4, r1, #0
 8002e0c:	681d      	ldr	r5, [r3, #0]
 8002e0e:	b09d      	sub	sp, #116	@ 0x74
 8002e10:	da08      	bge.n	8002e24 <sniprintf+0x20>
 8002e12:	238b      	movs	r3, #139	@ 0x8b
 8002e14:	602b      	str	r3, [r5, #0]
 8002e16:	f04f 30ff 	mov.w	r0, #4294967295
 8002e1a:	b01d      	add	sp, #116	@ 0x74
 8002e1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002e20:	b002      	add	sp, #8
 8002e22:	4770      	bx	lr
 8002e24:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8002e28:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002e2c:	bf14      	ite	ne
 8002e2e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002e32:	4623      	moveq	r3, r4
 8002e34:	9304      	str	r3, [sp, #16]
 8002e36:	9307      	str	r3, [sp, #28]
 8002e38:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e3c:	9002      	str	r0, [sp, #8]
 8002e3e:	9006      	str	r0, [sp, #24]
 8002e40:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002e44:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8002e46:	ab21      	add	r3, sp, #132	@ 0x84
 8002e48:	a902      	add	r1, sp, #8
 8002e4a:	4628      	mov	r0, r5
 8002e4c:	9301      	str	r3, [sp, #4]
 8002e4e:	f000 f9c1 	bl	80031d4 <_svfiprintf_r>
 8002e52:	1c43      	adds	r3, r0, #1
 8002e54:	bfbc      	itt	lt
 8002e56:	238b      	movlt	r3, #139	@ 0x8b
 8002e58:	602b      	strlt	r3, [r5, #0]
 8002e5a:	2c00      	cmp	r4, #0
 8002e5c:	d0dd      	beq.n	8002e1a <sniprintf+0x16>
 8002e5e:	9b02      	ldr	r3, [sp, #8]
 8002e60:	2200      	movs	r2, #0
 8002e62:	701a      	strb	r2, [r3, #0]
 8002e64:	e7d9      	b.n	8002e1a <sniprintf+0x16>
 8002e66:	bf00      	nop
 8002e68:	2000000c 	.word	0x2000000c

08002e6c <siscanf>:
 8002e6c:	b40e      	push	{r1, r2, r3}
 8002e6e:	b530      	push	{r4, r5, lr}
 8002e70:	b09c      	sub	sp, #112	@ 0x70
 8002e72:	ac1f      	add	r4, sp, #124	@ 0x7c
 8002e74:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8002e78:	f854 5b04 	ldr.w	r5, [r4], #4
 8002e7c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8002e80:	9002      	str	r0, [sp, #8]
 8002e82:	9006      	str	r0, [sp, #24]
 8002e84:	f7fd f9ac 	bl	80001e0 <strlen>
 8002e88:	4b0b      	ldr	r3, [pc, #44]	@ (8002eb8 <siscanf+0x4c>)
 8002e8a:	9003      	str	r0, [sp, #12]
 8002e8c:	9007      	str	r0, [sp, #28]
 8002e8e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002e90:	480a      	ldr	r0, [pc, #40]	@ (8002ebc <siscanf+0x50>)
 8002e92:	9401      	str	r4, [sp, #4]
 8002e94:	2300      	movs	r3, #0
 8002e96:	930f      	str	r3, [sp, #60]	@ 0x3c
 8002e98:	9314      	str	r3, [sp, #80]	@ 0x50
 8002e9a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e9e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002ea2:	462a      	mov	r2, r5
 8002ea4:	4623      	mov	r3, r4
 8002ea6:	a902      	add	r1, sp, #8
 8002ea8:	6800      	ldr	r0, [r0, #0]
 8002eaa:	f000 fae7 	bl	800347c <__ssvfiscanf_r>
 8002eae:	b01c      	add	sp, #112	@ 0x70
 8002eb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002eb4:	b003      	add	sp, #12
 8002eb6:	4770      	bx	lr
 8002eb8:	08002ec1 	.word	0x08002ec1
 8002ebc:	2000000c 	.word	0x2000000c

08002ec0 <__seofread>:
 8002ec0:	2000      	movs	r0, #0
 8002ec2:	4770      	bx	lr

08002ec4 <memset>:
 8002ec4:	4402      	add	r2, r0
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d100      	bne.n	8002ece <memset+0xa>
 8002ecc:	4770      	bx	lr
 8002ece:	f803 1b01 	strb.w	r1, [r3], #1
 8002ed2:	e7f9      	b.n	8002ec8 <memset+0x4>

08002ed4 <__errno>:
 8002ed4:	4b01      	ldr	r3, [pc, #4]	@ (8002edc <__errno+0x8>)
 8002ed6:	6818      	ldr	r0, [r3, #0]
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	2000000c 	.word	0x2000000c

08002ee0 <__libc_init_array>:
 8002ee0:	b570      	push	{r4, r5, r6, lr}
 8002ee2:	4d0d      	ldr	r5, [pc, #52]	@ (8002f18 <__libc_init_array+0x38>)
 8002ee4:	4c0d      	ldr	r4, [pc, #52]	@ (8002f1c <__libc_init_array+0x3c>)
 8002ee6:	1b64      	subs	r4, r4, r5
 8002ee8:	10a4      	asrs	r4, r4, #2
 8002eea:	2600      	movs	r6, #0
 8002eec:	42a6      	cmp	r6, r4
 8002eee:	d109      	bne.n	8002f04 <__libc_init_array+0x24>
 8002ef0:	4d0b      	ldr	r5, [pc, #44]	@ (8002f20 <__libc_init_array+0x40>)
 8002ef2:	4c0c      	ldr	r4, [pc, #48]	@ (8002f24 <__libc_init_array+0x44>)
 8002ef4:	f001 f8e0 	bl	80040b8 <_init>
 8002ef8:	1b64      	subs	r4, r4, r5
 8002efa:	10a4      	asrs	r4, r4, #2
 8002efc:	2600      	movs	r6, #0
 8002efe:	42a6      	cmp	r6, r4
 8002f00:	d105      	bne.n	8002f0e <__libc_init_array+0x2e>
 8002f02:	bd70      	pop	{r4, r5, r6, pc}
 8002f04:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f08:	4798      	blx	r3
 8002f0a:	3601      	adds	r6, #1
 8002f0c:	e7ee      	b.n	8002eec <__libc_init_array+0xc>
 8002f0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f12:	4798      	blx	r3
 8002f14:	3601      	adds	r6, #1
 8002f16:	e7f2      	b.n	8002efe <__libc_init_array+0x1e>
 8002f18:	080045b4 	.word	0x080045b4
 8002f1c:	080045b4 	.word	0x080045b4
 8002f20:	080045b4 	.word	0x080045b4
 8002f24:	080045b8 	.word	0x080045b8

08002f28 <__retarget_lock_acquire_recursive>:
 8002f28:	4770      	bx	lr

08002f2a <__retarget_lock_release_recursive>:
 8002f2a:	4770      	bx	lr

08002f2c <_free_r>:
 8002f2c:	b538      	push	{r3, r4, r5, lr}
 8002f2e:	4605      	mov	r5, r0
 8002f30:	2900      	cmp	r1, #0
 8002f32:	d041      	beq.n	8002fb8 <_free_r+0x8c>
 8002f34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f38:	1f0c      	subs	r4, r1, #4
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	bfb8      	it	lt
 8002f3e:	18e4      	addlt	r4, r4, r3
 8002f40:	f000 f8e0 	bl	8003104 <__malloc_lock>
 8002f44:	4a1d      	ldr	r2, [pc, #116]	@ (8002fbc <_free_r+0x90>)
 8002f46:	6813      	ldr	r3, [r2, #0]
 8002f48:	b933      	cbnz	r3, 8002f58 <_free_r+0x2c>
 8002f4a:	6063      	str	r3, [r4, #4]
 8002f4c:	6014      	str	r4, [r2, #0]
 8002f4e:	4628      	mov	r0, r5
 8002f50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002f54:	f000 b8dc 	b.w	8003110 <__malloc_unlock>
 8002f58:	42a3      	cmp	r3, r4
 8002f5a:	d908      	bls.n	8002f6e <_free_r+0x42>
 8002f5c:	6820      	ldr	r0, [r4, #0]
 8002f5e:	1821      	adds	r1, r4, r0
 8002f60:	428b      	cmp	r3, r1
 8002f62:	bf01      	itttt	eq
 8002f64:	6819      	ldreq	r1, [r3, #0]
 8002f66:	685b      	ldreq	r3, [r3, #4]
 8002f68:	1809      	addeq	r1, r1, r0
 8002f6a:	6021      	streq	r1, [r4, #0]
 8002f6c:	e7ed      	b.n	8002f4a <_free_r+0x1e>
 8002f6e:	461a      	mov	r2, r3
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	b10b      	cbz	r3, 8002f78 <_free_r+0x4c>
 8002f74:	42a3      	cmp	r3, r4
 8002f76:	d9fa      	bls.n	8002f6e <_free_r+0x42>
 8002f78:	6811      	ldr	r1, [r2, #0]
 8002f7a:	1850      	adds	r0, r2, r1
 8002f7c:	42a0      	cmp	r0, r4
 8002f7e:	d10b      	bne.n	8002f98 <_free_r+0x6c>
 8002f80:	6820      	ldr	r0, [r4, #0]
 8002f82:	4401      	add	r1, r0
 8002f84:	1850      	adds	r0, r2, r1
 8002f86:	4283      	cmp	r3, r0
 8002f88:	6011      	str	r1, [r2, #0]
 8002f8a:	d1e0      	bne.n	8002f4e <_free_r+0x22>
 8002f8c:	6818      	ldr	r0, [r3, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	6053      	str	r3, [r2, #4]
 8002f92:	4408      	add	r0, r1
 8002f94:	6010      	str	r0, [r2, #0]
 8002f96:	e7da      	b.n	8002f4e <_free_r+0x22>
 8002f98:	d902      	bls.n	8002fa0 <_free_r+0x74>
 8002f9a:	230c      	movs	r3, #12
 8002f9c:	602b      	str	r3, [r5, #0]
 8002f9e:	e7d6      	b.n	8002f4e <_free_r+0x22>
 8002fa0:	6820      	ldr	r0, [r4, #0]
 8002fa2:	1821      	adds	r1, r4, r0
 8002fa4:	428b      	cmp	r3, r1
 8002fa6:	bf04      	itt	eq
 8002fa8:	6819      	ldreq	r1, [r3, #0]
 8002faa:	685b      	ldreq	r3, [r3, #4]
 8002fac:	6063      	str	r3, [r4, #4]
 8002fae:	bf04      	itt	eq
 8002fb0:	1809      	addeq	r1, r1, r0
 8002fb2:	6021      	streq	r1, [r4, #0]
 8002fb4:	6054      	str	r4, [r2, #4]
 8002fb6:	e7ca      	b.n	8002f4e <_free_r+0x22>
 8002fb8:	bd38      	pop	{r3, r4, r5, pc}
 8002fba:	bf00      	nop
 8002fbc:	20000294 	.word	0x20000294

08002fc0 <sbrk_aligned>:
 8002fc0:	b570      	push	{r4, r5, r6, lr}
 8002fc2:	4e0f      	ldr	r6, [pc, #60]	@ (8003000 <sbrk_aligned+0x40>)
 8002fc4:	460c      	mov	r4, r1
 8002fc6:	6831      	ldr	r1, [r6, #0]
 8002fc8:	4605      	mov	r5, r0
 8002fca:	b911      	cbnz	r1, 8002fd2 <sbrk_aligned+0x12>
 8002fcc:	f000 ff34 	bl	8003e38 <_sbrk_r>
 8002fd0:	6030      	str	r0, [r6, #0]
 8002fd2:	4621      	mov	r1, r4
 8002fd4:	4628      	mov	r0, r5
 8002fd6:	f000 ff2f 	bl	8003e38 <_sbrk_r>
 8002fda:	1c43      	adds	r3, r0, #1
 8002fdc:	d103      	bne.n	8002fe6 <sbrk_aligned+0x26>
 8002fde:	f04f 34ff 	mov.w	r4, #4294967295
 8002fe2:	4620      	mov	r0, r4
 8002fe4:	bd70      	pop	{r4, r5, r6, pc}
 8002fe6:	1cc4      	adds	r4, r0, #3
 8002fe8:	f024 0403 	bic.w	r4, r4, #3
 8002fec:	42a0      	cmp	r0, r4
 8002fee:	d0f8      	beq.n	8002fe2 <sbrk_aligned+0x22>
 8002ff0:	1a21      	subs	r1, r4, r0
 8002ff2:	4628      	mov	r0, r5
 8002ff4:	f000 ff20 	bl	8003e38 <_sbrk_r>
 8002ff8:	3001      	adds	r0, #1
 8002ffa:	d1f2      	bne.n	8002fe2 <sbrk_aligned+0x22>
 8002ffc:	e7ef      	b.n	8002fde <sbrk_aligned+0x1e>
 8002ffe:	bf00      	nop
 8003000:	20000290 	.word	0x20000290

08003004 <_malloc_r>:
 8003004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003008:	1ccd      	adds	r5, r1, #3
 800300a:	f025 0503 	bic.w	r5, r5, #3
 800300e:	3508      	adds	r5, #8
 8003010:	2d0c      	cmp	r5, #12
 8003012:	bf38      	it	cc
 8003014:	250c      	movcc	r5, #12
 8003016:	2d00      	cmp	r5, #0
 8003018:	4606      	mov	r6, r0
 800301a:	db01      	blt.n	8003020 <_malloc_r+0x1c>
 800301c:	42a9      	cmp	r1, r5
 800301e:	d904      	bls.n	800302a <_malloc_r+0x26>
 8003020:	230c      	movs	r3, #12
 8003022:	6033      	str	r3, [r6, #0]
 8003024:	2000      	movs	r0, #0
 8003026:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800302a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003100 <_malloc_r+0xfc>
 800302e:	f000 f869 	bl	8003104 <__malloc_lock>
 8003032:	f8d8 3000 	ldr.w	r3, [r8]
 8003036:	461c      	mov	r4, r3
 8003038:	bb44      	cbnz	r4, 800308c <_malloc_r+0x88>
 800303a:	4629      	mov	r1, r5
 800303c:	4630      	mov	r0, r6
 800303e:	f7ff ffbf 	bl	8002fc0 <sbrk_aligned>
 8003042:	1c43      	adds	r3, r0, #1
 8003044:	4604      	mov	r4, r0
 8003046:	d158      	bne.n	80030fa <_malloc_r+0xf6>
 8003048:	f8d8 4000 	ldr.w	r4, [r8]
 800304c:	4627      	mov	r7, r4
 800304e:	2f00      	cmp	r7, #0
 8003050:	d143      	bne.n	80030da <_malloc_r+0xd6>
 8003052:	2c00      	cmp	r4, #0
 8003054:	d04b      	beq.n	80030ee <_malloc_r+0xea>
 8003056:	6823      	ldr	r3, [r4, #0]
 8003058:	4639      	mov	r1, r7
 800305a:	4630      	mov	r0, r6
 800305c:	eb04 0903 	add.w	r9, r4, r3
 8003060:	f000 feea 	bl	8003e38 <_sbrk_r>
 8003064:	4581      	cmp	r9, r0
 8003066:	d142      	bne.n	80030ee <_malloc_r+0xea>
 8003068:	6821      	ldr	r1, [r4, #0]
 800306a:	1a6d      	subs	r5, r5, r1
 800306c:	4629      	mov	r1, r5
 800306e:	4630      	mov	r0, r6
 8003070:	f7ff ffa6 	bl	8002fc0 <sbrk_aligned>
 8003074:	3001      	adds	r0, #1
 8003076:	d03a      	beq.n	80030ee <_malloc_r+0xea>
 8003078:	6823      	ldr	r3, [r4, #0]
 800307a:	442b      	add	r3, r5
 800307c:	6023      	str	r3, [r4, #0]
 800307e:	f8d8 3000 	ldr.w	r3, [r8]
 8003082:	685a      	ldr	r2, [r3, #4]
 8003084:	bb62      	cbnz	r2, 80030e0 <_malloc_r+0xdc>
 8003086:	f8c8 7000 	str.w	r7, [r8]
 800308a:	e00f      	b.n	80030ac <_malloc_r+0xa8>
 800308c:	6822      	ldr	r2, [r4, #0]
 800308e:	1b52      	subs	r2, r2, r5
 8003090:	d420      	bmi.n	80030d4 <_malloc_r+0xd0>
 8003092:	2a0b      	cmp	r2, #11
 8003094:	d917      	bls.n	80030c6 <_malloc_r+0xc2>
 8003096:	1961      	adds	r1, r4, r5
 8003098:	42a3      	cmp	r3, r4
 800309a:	6025      	str	r5, [r4, #0]
 800309c:	bf18      	it	ne
 800309e:	6059      	strne	r1, [r3, #4]
 80030a0:	6863      	ldr	r3, [r4, #4]
 80030a2:	bf08      	it	eq
 80030a4:	f8c8 1000 	streq.w	r1, [r8]
 80030a8:	5162      	str	r2, [r4, r5]
 80030aa:	604b      	str	r3, [r1, #4]
 80030ac:	4630      	mov	r0, r6
 80030ae:	f000 f82f 	bl	8003110 <__malloc_unlock>
 80030b2:	f104 000b 	add.w	r0, r4, #11
 80030b6:	1d23      	adds	r3, r4, #4
 80030b8:	f020 0007 	bic.w	r0, r0, #7
 80030bc:	1ac2      	subs	r2, r0, r3
 80030be:	bf1c      	itt	ne
 80030c0:	1a1b      	subne	r3, r3, r0
 80030c2:	50a3      	strne	r3, [r4, r2]
 80030c4:	e7af      	b.n	8003026 <_malloc_r+0x22>
 80030c6:	6862      	ldr	r2, [r4, #4]
 80030c8:	42a3      	cmp	r3, r4
 80030ca:	bf0c      	ite	eq
 80030cc:	f8c8 2000 	streq.w	r2, [r8]
 80030d0:	605a      	strne	r2, [r3, #4]
 80030d2:	e7eb      	b.n	80030ac <_malloc_r+0xa8>
 80030d4:	4623      	mov	r3, r4
 80030d6:	6864      	ldr	r4, [r4, #4]
 80030d8:	e7ae      	b.n	8003038 <_malloc_r+0x34>
 80030da:	463c      	mov	r4, r7
 80030dc:	687f      	ldr	r7, [r7, #4]
 80030de:	e7b6      	b.n	800304e <_malloc_r+0x4a>
 80030e0:	461a      	mov	r2, r3
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	42a3      	cmp	r3, r4
 80030e6:	d1fb      	bne.n	80030e0 <_malloc_r+0xdc>
 80030e8:	2300      	movs	r3, #0
 80030ea:	6053      	str	r3, [r2, #4]
 80030ec:	e7de      	b.n	80030ac <_malloc_r+0xa8>
 80030ee:	230c      	movs	r3, #12
 80030f0:	6033      	str	r3, [r6, #0]
 80030f2:	4630      	mov	r0, r6
 80030f4:	f000 f80c 	bl	8003110 <__malloc_unlock>
 80030f8:	e794      	b.n	8003024 <_malloc_r+0x20>
 80030fa:	6005      	str	r5, [r0, #0]
 80030fc:	e7d6      	b.n	80030ac <_malloc_r+0xa8>
 80030fe:	bf00      	nop
 8003100:	20000294 	.word	0x20000294

08003104 <__malloc_lock>:
 8003104:	4801      	ldr	r0, [pc, #4]	@ (800310c <__malloc_lock+0x8>)
 8003106:	f7ff bf0f 	b.w	8002f28 <__retarget_lock_acquire_recursive>
 800310a:	bf00      	nop
 800310c:	2000028c 	.word	0x2000028c

08003110 <__malloc_unlock>:
 8003110:	4801      	ldr	r0, [pc, #4]	@ (8003118 <__malloc_unlock+0x8>)
 8003112:	f7ff bf0a 	b.w	8002f2a <__retarget_lock_release_recursive>
 8003116:	bf00      	nop
 8003118:	2000028c 	.word	0x2000028c

0800311c <__ssputs_r>:
 800311c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003120:	688e      	ldr	r6, [r1, #8]
 8003122:	461f      	mov	r7, r3
 8003124:	42be      	cmp	r6, r7
 8003126:	680b      	ldr	r3, [r1, #0]
 8003128:	4682      	mov	sl, r0
 800312a:	460c      	mov	r4, r1
 800312c:	4690      	mov	r8, r2
 800312e:	d82d      	bhi.n	800318c <__ssputs_r+0x70>
 8003130:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003134:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003138:	d026      	beq.n	8003188 <__ssputs_r+0x6c>
 800313a:	6965      	ldr	r5, [r4, #20]
 800313c:	6909      	ldr	r1, [r1, #16]
 800313e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003142:	eba3 0901 	sub.w	r9, r3, r1
 8003146:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800314a:	1c7b      	adds	r3, r7, #1
 800314c:	444b      	add	r3, r9
 800314e:	106d      	asrs	r5, r5, #1
 8003150:	429d      	cmp	r5, r3
 8003152:	bf38      	it	cc
 8003154:	461d      	movcc	r5, r3
 8003156:	0553      	lsls	r3, r2, #21
 8003158:	d527      	bpl.n	80031aa <__ssputs_r+0x8e>
 800315a:	4629      	mov	r1, r5
 800315c:	f7ff ff52 	bl	8003004 <_malloc_r>
 8003160:	4606      	mov	r6, r0
 8003162:	b360      	cbz	r0, 80031be <__ssputs_r+0xa2>
 8003164:	6921      	ldr	r1, [r4, #16]
 8003166:	464a      	mov	r2, r9
 8003168:	f000 fe76 	bl	8003e58 <memcpy>
 800316c:	89a3      	ldrh	r3, [r4, #12]
 800316e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003172:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003176:	81a3      	strh	r3, [r4, #12]
 8003178:	6126      	str	r6, [r4, #16]
 800317a:	6165      	str	r5, [r4, #20]
 800317c:	444e      	add	r6, r9
 800317e:	eba5 0509 	sub.w	r5, r5, r9
 8003182:	6026      	str	r6, [r4, #0]
 8003184:	60a5      	str	r5, [r4, #8]
 8003186:	463e      	mov	r6, r7
 8003188:	42be      	cmp	r6, r7
 800318a:	d900      	bls.n	800318e <__ssputs_r+0x72>
 800318c:	463e      	mov	r6, r7
 800318e:	6820      	ldr	r0, [r4, #0]
 8003190:	4632      	mov	r2, r6
 8003192:	4641      	mov	r1, r8
 8003194:	f000 fe35 	bl	8003e02 <memmove>
 8003198:	68a3      	ldr	r3, [r4, #8]
 800319a:	1b9b      	subs	r3, r3, r6
 800319c:	60a3      	str	r3, [r4, #8]
 800319e:	6823      	ldr	r3, [r4, #0]
 80031a0:	4433      	add	r3, r6
 80031a2:	6023      	str	r3, [r4, #0]
 80031a4:	2000      	movs	r0, #0
 80031a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031aa:	462a      	mov	r2, r5
 80031ac:	f000 fe62 	bl	8003e74 <_realloc_r>
 80031b0:	4606      	mov	r6, r0
 80031b2:	2800      	cmp	r0, #0
 80031b4:	d1e0      	bne.n	8003178 <__ssputs_r+0x5c>
 80031b6:	6921      	ldr	r1, [r4, #16]
 80031b8:	4650      	mov	r0, sl
 80031ba:	f7ff feb7 	bl	8002f2c <_free_r>
 80031be:	230c      	movs	r3, #12
 80031c0:	f8ca 3000 	str.w	r3, [sl]
 80031c4:	89a3      	ldrh	r3, [r4, #12]
 80031c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80031ca:	81a3      	strh	r3, [r4, #12]
 80031cc:	f04f 30ff 	mov.w	r0, #4294967295
 80031d0:	e7e9      	b.n	80031a6 <__ssputs_r+0x8a>
	...

080031d4 <_svfiprintf_r>:
 80031d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031d8:	4698      	mov	r8, r3
 80031da:	898b      	ldrh	r3, [r1, #12]
 80031dc:	061b      	lsls	r3, r3, #24
 80031de:	b09d      	sub	sp, #116	@ 0x74
 80031e0:	4607      	mov	r7, r0
 80031e2:	460d      	mov	r5, r1
 80031e4:	4614      	mov	r4, r2
 80031e6:	d510      	bpl.n	800320a <_svfiprintf_r+0x36>
 80031e8:	690b      	ldr	r3, [r1, #16]
 80031ea:	b973      	cbnz	r3, 800320a <_svfiprintf_r+0x36>
 80031ec:	2140      	movs	r1, #64	@ 0x40
 80031ee:	f7ff ff09 	bl	8003004 <_malloc_r>
 80031f2:	6028      	str	r0, [r5, #0]
 80031f4:	6128      	str	r0, [r5, #16]
 80031f6:	b930      	cbnz	r0, 8003206 <_svfiprintf_r+0x32>
 80031f8:	230c      	movs	r3, #12
 80031fa:	603b      	str	r3, [r7, #0]
 80031fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003200:	b01d      	add	sp, #116	@ 0x74
 8003202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003206:	2340      	movs	r3, #64	@ 0x40
 8003208:	616b      	str	r3, [r5, #20]
 800320a:	2300      	movs	r3, #0
 800320c:	9309      	str	r3, [sp, #36]	@ 0x24
 800320e:	2320      	movs	r3, #32
 8003210:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003214:	f8cd 800c 	str.w	r8, [sp, #12]
 8003218:	2330      	movs	r3, #48	@ 0x30
 800321a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80033b8 <_svfiprintf_r+0x1e4>
 800321e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003222:	f04f 0901 	mov.w	r9, #1
 8003226:	4623      	mov	r3, r4
 8003228:	469a      	mov	sl, r3
 800322a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800322e:	b10a      	cbz	r2, 8003234 <_svfiprintf_r+0x60>
 8003230:	2a25      	cmp	r2, #37	@ 0x25
 8003232:	d1f9      	bne.n	8003228 <_svfiprintf_r+0x54>
 8003234:	ebba 0b04 	subs.w	fp, sl, r4
 8003238:	d00b      	beq.n	8003252 <_svfiprintf_r+0x7e>
 800323a:	465b      	mov	r3, fp
 800323c:	4622      	mov	r2, r4
 800323e:	4629      	mov	r1, r5
 8003240:	4638      	mov	r0, r7
 8003242:	f7ff ff6b 	bl	800311c <__ssputs_r>
 8003246:	3001      	adds	r0, #1
 8003248:	f000 80a7 	beq.w	800339a <_svfiprintf_r+0x1c6>
 800324c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800324e:	445a      	add	r2, fp
 8003250:	9209      	str	r2, [sp, #36]	@ 0x24
 8003252:	f89a 3000 	ldrb.w	r3, [sl]
 8003256:	2b00      	cmp	r3, #0
 8003258:	f000 809f 	beq.w	800339a <_svfiprintf_r+0x1c6>
 800325c:	2300      	movs	r3, #0
 800325e:	f04f 32ff 	mov.w	r2, #4294967295
 8003262:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003266:	f10a 0a01 	add.w	sl, sl, #1
 800326a:	9304      	str	r3, [sp, #16]
 800326c:	9307      	str	r3, [sp, #28]
 800326e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003272:	931a      	str	r3, [sp, #104]	@ 0x68
 8003274:	4654      	mov	r4, sl
 8003276:	2205      	movs	r2, #5
 8003278:	f814 1b01 	ldrb.w	r1, [r4], #1
 800327c:	484e      	ldr	r0, [pc, #312]	@ (80033b8 <_svfiprintf_r+0x1e4>)
 800327e:	f7fc ffb7 	bl	80001f0 <memchr>
 8003282:	9a04      	ldr	r2, [sp, #16]
 8003284:	b9d8      	cbnz	r0, 80032be <_svfiprintf_r+0xea>
 8003286:	06d0      	lsls	r0, r2, #27
 8003288:	bf44      	itt	mi
 800328a:	2320      	movmi	r3, #32
 800328c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003290:	0711      	lsls	r1, r2, #28
 8003292:	bf44      	itt	mi
 8003294:	232b      	movmi	r3, #43	@ 0x2b
 8003296:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800329a:	f89a 3000 	ldrb.w	r3, [sl]
 800329e:	2b2a      	cmp	r3, #42	@ 0x2a
 80032a0:	d015      	beq.n	80032ce <_svfiprintf_r+0xfa>
 80032a2:	9a07      	ldr	r2, [sp, #28]
 80032a4:	4654      	mov	r4, sl
 80032a6:	2000      	movs	r0, #0
 80032a8:	f04f 0c0a 	mov.w	ip, #10
 80032ac:	4621      	mov	r1, r4
 80032ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80032b2:	3b30      	subs	r3, #48	@ 0x30
 80032b4:	2b09      	cmp	r3, #9
 80032b6:	d94b      	bls.n	8003350 <_svfiprintf_r+0x17c>
 80032b8:	b1b0      	cbz	r0, 80032e8 <_svfiprintf_r+0x114>
 80032ba:	9207      	str	r2, [sp, #28]
 80032bc:	e014      	b.n	80032e8 <_svfiprintf_r+0x114>
 80032be:	eba0 0308 	sub.w	r3, r0, r8
 80032c2:	fa09 f303 	lsl.w	r3, r9, r3
 80032c6:	4313      	orrs	r3, r2
 80032c8:	9304      	str	r3, [sp, #16]
 80032ca:	46a2      	mov	sl, r4
 80032cc:	e7d2      	b.n	8003274 <_svfiprintf_r+0xa0>
 80032ce:	9b03      	ldr	r3, [sp, #12]
 80032d0:	1d19      	adds	r1, r3, #4
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	9103      	str	r1, [sp, #12]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	bfbb      	ittet	lt
 80032da:	425b      	neglt	r3, r3
 80032dc:	f042 0202 	orrlt.w	r2, r2, #2
 80032e0:	9307      	strge	r3, [sp, #28]
 80032e2:	9307      	strlt	r3, [sp, #28]
 80032e4:	bfb8      	it	lt
 80032e6:	9204      	strlt	r2, [sp, #16]
 80032e8:	7823      	ldrb	r3, [r4, #0]
 80032ea:	2b2e      	cmp	r3, #46	@ 0x2e
 80032ec:	d10a      	bne.n	8003304 <_svfiprintf_r+0x130>
 80032ee:	7863      	ldrb	r3, [r4, #1]
 80032f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80032f2:	d132      	bne.n	800335a <_svfiprintf_r+0x186>
 80032f4:	9b03      	ldr	r3, [sp, #12]
 80032f6:	1d1a      	adds	r2, r3, #4
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	9203      	str	r2, [sp, #12]
 80032fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003300:	3402      	adds	r4, #2
 8003302:	9305      	str	r3, [sp, #20]
 8003304:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80033c8 <_svfiprintf_r+0x1f4>
 8003308:	7821      	ldrb	r1, [r4, #0]
 800330a:	2203      	movs	r2, #3
 800330c:	4650      	mov	r0, sl
 800330e:	f7fc ff6f 	bl	80001f0 <memchr>
 8003312:	b138      	cbz	r0, 8003324 <_svfiprintf_r+0x150>
 8003314:	9b04      	ldr	r3, [sp, #16]
 8003316:	eba0 000a 	sub.w	r0, r0, sl
 800331a:	2240      	movs	r2, #64	@ 0x40
 800331c:	4082      	lsls	r2, r0
 800331e:	4313      	orrs	r3, r2
 8003320:	3401      	adds	r4, #1
 8003322:	9304      	str	r3, [sp, #16]
 8003324:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003328:	4824      	ldr	r0, [pc, #144]	@ (80033bc <_svfiprintf_r+0x1e8>)
 800332a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800332e:	2206      	movs	r2, #6
 8003330:	f7fc ff5e 	bl	80001f0 <memchr>
 8003334:	2800      	cmp	r0, #0
 8003336:	d036      	beq.n	80033a6 <_svfiprintf_r+0x1d2>
 8003338:	4b21      	ldr	r3, [pc, #132]	@ (80033c0 <_svfiprintf_r+0x1ec>)
 800333a:	bb1b      	cbnz	r3, 8003384 <_svfiprintf_r+0x1b0>
 800333c:	9b03      	ldr	r3, [sp, #12]
 800333e:	3307      	adds	r3, #7
 8003340:	f023 0307 	bic.w	r3, r3, #7
 8003344:	3308      	adds	r3, #8
 8003346:	9303      	str	r3, [sp, #12]
 8003348:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800334a:	4433      	add	r3, r6
 800334c:	9309      	str	r3, [sp, #36]	@ 0x24
 800334e:	e76a      	b.n	8003226 <_svfiprintf_r+0x52>
 8003350:	fb0c 3202 	mla	r2, ip, r2, r3
 8003354:	460c      	mov	r4, r1
 8003356:	2001      	movs	r0, #1
 8003358:	e7a8      	b.n	80032ac <_svfiprintf_r+0xd8>
 800335a:	2300      	movs	r3, #0
 800335c:	3401      	adds	r4, #1
 800335e:	9305      	str	r3, [sp, #20]
 8003360:	4619      	mov	r1, r3
 8003362:	f04f 0c0a 	mov.w	ip, #10
 8003366:	4620      	mov	r0, r4
 8003368:	f810 2b01 	ldrb.w	r2, [r0], #1
 800336c:	3a30      	subs	r2, #48	@ 0x30
 800336e:	2a09      	cmp	r2, #9
 8003370:	d903      	bls.n	800337a <_svfiprintf_r+0x1a6>
 8003372:	2b00      	cmp	r3, #0
 8003374:	d0c6      	beq.n	8003304 <_svfiprintf_r+0x130>
 8003376:	9105      	str	r1, [sp, #20]
 8003378:	e7c4      	b.n	8003304 <_svfiprintf_r+0x130>
 800337a:	fb0c 2101 	mla	r1, ip, r1, r2
 800337e:	4604      	mov	r4, r0
 8003380:	2301      	movs	r3, #1
 8003382:	e7f0      	b.n	8003366 <_svfiprintf_r+0x192>
 8003384:	ab03      	add	r3, sp, #12
 8003386:	9300      	str	r3, [sp, #0]
 8003388:	462a      	mov	r2, r5
 800338a:	4b0e      	ldr	r3, [pc, #56]	@ (80033c4 <_svfiprintf_r+0x1f0>)
 800338c:	a904      	add	r1, sp, #16
 800338e:	4638      	mov	r0, r7
 8003390:	f3af 8000 	nop.w
 8003394:	1c42      	adds	r2, r0, #1
 8003396:	4606      	mov	r6, r0
 8003398:	d1d6      	bne.n	8003348 <_svfiprintf_r+0x174>
 800339a:	89ab      	ldrh	r3, [r5, #12]
 800339c:	065b      	lsls	r3, r3, #25
 800339e:	f53f af2d 	bmi.w	80031fc <_svfiprintf_r+0x28>
 80033a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80033a4:	e72c      	b.n	8003200 <_svfiprintf_r+0x2c>
 80033a6:	ab03      	add	r3, sp, #12
 80033a8:	9300      	str	r3, [sp, #0]
 80033aa:	462a      	mov	r2, r5
 80033ac:	4b05      	ldr	r3, [pc, #20]	@ (80033c4 <_svfiprintf_r+0x1f0>)
 80033ae:	a904      	add	r1, sp, #16
 80033b0:	4638      	mov	r0, r7
 80033b2:	f000 fa45 	bl	8003840 <_printf_i>
 80033b6:	e7ed      	b.n	8003394 <_svfiprintf_r+0x1c0>
 80033b8:	0800445c 	.word	0x0800445c
 80033bc:	08004466 	.word	0x08004466
 80033c0:	00000000 	.word	0x00000000
 80033c4:	0800311d 	.word	0x0800311d
 80033c8:	08004462 	.word	0x08004462

080033cc <_sungetc_r>:
 80033cc:	b538      	push	{r3, r4, r5, lr}
 80033ce:	1c4b      	adds	r3, r1, #1
 80033d0:	4614      	mov	r4, r2
 80033d2:	d103      	bne.n	80033dc <_sungetc_r+0x10>
 80033d4:	f04f 35ff 	mov.w	r5, #4294967295
 80033d8:	4628      	mov	r0, r5
 80033da:	bd38      	pop	{r3, r4, r5, pc}
 80033dc:	8993      	ldrh	r3, [r2, #12]
 80033de:	f023 0320 	bic.w	r3, r3, #32
 80033e2:	8193      	strh	r3, [r2, #12]
 80033e4:	6853      	ldr	r3, [r2, #4]
 80033e6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80033e8:	b2cd      	uxtb	r5, r1
 80033ea:	b18a      	cbz	r2, 8003410 <_sungetc_r+0x44>
 80033ec:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80033ee:	429a      	cmp	r2, r3
 80033f0:	dd08      	ble.n	8003404 <_sungetc_r+0x38>
 80033f2:	6823      	ldr	r3, [r4, #0]
 80033f4:	1e5a      	subs	r2, r3, #1
 80033f6:	6022      	str	r2, [r4, #0]
 80033f8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80033fc:	6863      	ldr	r3, [r4, #4]
 80033fe:	3301      	adds	r3, #1
 8003400:	6063      	str	r3, [r4, #4]
 8003402:	e7e9      	b.n	80033d8 <_sungetc_r+0xc>
 8003404:	4621      	mov	r1, r4
 8003406:	f000 fcc2 	bl	8003d8e <__submore>
 800340a:	2800      	cmp	r0, #0
 800340c:	d0f1      	beq.n	80033f2 <_sungetc_r+0x26>
 800340e:	e7e1      	b.n	80033d4 <_sungetc_r+0x8>
 8003410:	6921      	ldr	r1, [r4, #16]
 8003412:	6822      	ldr	r2, [r4, #0]
 8003414:	b141      	cbz	r1, 8003428 <_sungetc_r+0x5c>
 8003416:	4291      	cmp	r1, r2
 8003418:	d206      	bcs.n	8003428 <_sungetc_r+0x5c>
 800341a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800341e:	42a9      	cmp	r1, r5
 8003420:	d102      	bne.n	8003428 <_sungetc_r+0x5c>
 8003422:	3a01      	subs	r2, #1
 8003424:	6022      	str	r2, [r4, #0]
 8003426:	e7ea      	b.n	80033fe <_sungetc_r+0x32>
 8003428:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800342c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003430:	6363      	str	r3, [r4, #52]	@ 0x34
 8003432:	2303      	movs	r3, #3
 8003434:	63a3      	str	r3, [r4, #56]	@ 0x38
 8003436:	4623      	mov	r3, r4
 8003438:	f803 5f46 	strb.w	r5, [r3, #70]!
 800343c:	6023      	str	r3, [r4, #0]
 800343e:	2301      	movs	r3, #1
 8003440:	e7de      	b.n	8003400 <_sungetc_r+0x34>

08003442 <__ssrefill_r>:
 8003442:	b510      	push	{r4, lr}
 8003444:	460c      	mov	r4, r1
 8003446:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8003448:	b169      	cbz	r1, 8003466 <__ssrefill_r+0x24>
 800344a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800344e:	4299      	cmp	r1, r3
 8003450:	d001      	beq.n	8003456 <__ssrefill_r+0x14>
 8003452:	f7ff fd6b 	bl	8002f2c <_free_r>
 8003456:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003458:	6063      	str	r3, [r4, #4]
 800345a:	2000      	movs	r0, #0
 800345c:	6360      	str	r0, [r4, #52]	@ 0x34
 800345e:	b113      	cbz	r3, 8003466 <__ssrefill_r+0x24>
 8003460:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003462:	6023      	str	r3, [r4, #0]
 8003464:	bd10      	pop	{r4, pc}
 8003466:	6923      	ldr	r3, [r4, #16]
 8003468:	6023      	str	r3, [r4, #0]
 800346a:	2300      	movs	r3, #0
 800346c:	6063      	str	r3, [r4, #4]
 800346e:	89a3      	ldrh	r3, [r4, #12]
 8003470:	f043 0320 	orr.w	r3, r3, #32
 8003474:	81a3      	strh	r3, [r4, #12]
 8003476:	f04f 30ff 	mov.w	r0, #4294967295
 800347a:	e7f3      	b.n	8003464 <__ssrefill_r+0x22>

0800347c <__ssvfiscanf_r>:
 800347c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003480:	460c      	mov	r4, r1
 8003482:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8003486:	2100      	movs	r1, #0
 8003488:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800348c:	49a5      	ldr	r1, [pc, #660]	@ (8003724 <__ssvfiscanf_r+0x2a8>)
 800348e:	91a0      	str	r1, [sp, #640]	@ 0x280
 8003490:	f10d 0804 	add.w	r8, sp, #4
 8003494:	49a4      	ldr	r1, [pc, #656]	@ (8003728 <__ssvfiscanf_r+0x2ac>)
 8003496:	4fa5      	ldr	r7, [pc, #660]	@ (800372c <__ssvfiscanf_r+0x2b0>)
 8003498:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800349c:	4606      	mov	r6, r0
 800349e:	91a1      	str	r1, [sp, #644]	@ 0x284
 80034a0:	9300      	str	r3, [sp, #0]
 80034a2:	7813      	ldrb	r3, [r2, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f000 8158 	beq.w	800375a <__ssvfiscanf_r+0x2de>
 80034aa:	5cf9      	ldrb	r1, [r7, r3]
 80034ac:	f011 0108 	ands.w	r1, r1, #8
 80034b0:	f102 0501 	add.w	r5, r2, #1
 80034b4:	d019      	beq.n	80034ea <__ssvfiscanf_r+0x6e>
 80034b6:	6863      	ldr	r3, [r4, #4]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	dd0f      	ble.n	80034dc <__ssvfiscanf_r+0x60>
 80034bc:	6823      	ldr	r3, [r4, #0]
 80034be:	781a      	ldrb	r2, [r3, #0]
 80034c0:	5cba      	ldrb	r2, [r7, r2]
 80034c2:	0712      	lsls	r2, r2, #28
 80034c4:	d401      	bmi.n	80034ca <__ssvfiscanf_r+0x4e>
 80034c6:	462a      	mov	r2, r5
 80034c8:	e7eb      	b.n	80034a2 <__ssvfiscanf_r+0x26>
 80034ca:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80034cc:	3201      	adds	r2, #1
 80034ce:	9245      	str	r2, [sp, #276]	@ 0x114
 80034d0:	6862      	ldr	r2, [r4, #4]
 80034d2:	3301      	adds	r3, #1
 80034d4:	3a01      	subs	r2, #1
 80034d6:	6062      	str	r2, [r4, #4]
 80034d8:	6023      	str	r3, [r4, #0]
 80034da:	e7ec      	b.n	80034b6 <__ssvfiscanf_r+0x3a>
 80034dc:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80034de:	4621      	mov	r1, r4
 80034e0:	4630      	mov	r0, r6
 80034e2:	4798      	blx	r3
 80034e4:	2800      	cmp	r0, #0
 80034e6:	d0e9      	beq.n	80034bc <__ssvfiscanf_r+0x40>
 80034e8:	e7ed      	b.n	80034c6 <__ssvfiscanf_r+0x4a>
 80034ea:	2b25      	cmp	r3, #37	@ 0x25
 80034ec:	d012      	beq.n	8003514 <__ssvfiscanf_r+0x98>
 80034ee:	4699      	mov	r9, r3
 80034f0:	6863      	ldr	r3, [r4, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	f340 8093 	ble.w	800361e <__ssvfiscanf_r+0x1a2>
 80034f8:	6822      	ldr	r2, [r4, #0]
 80034fa:	7813      	ldrb	r3, [r2, #0]
 80034fc:	454b      	cmp	r3, r9
 80034fe:	f040 812c 	bne.w	800375a <__ssvfiscanf_r+0x2de>
 8003502:	6863      	ldr	r3, [r4, #4]
 8003504:	3b01      	subs	r3, #1
 8003506:	6063      	str	r3, [r4, #4]
 8003508:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800350a:	3201      	adds	r2, #1
 800350c:	3301      	adds	r3, #1
 800350e:	6022      	str	r2, [r4, #0]
 8003510:	9345      	str	r3, [sp, #276]	@ 0x114
 8003512:	e7d8      	b.n	80034c6 <__ssvfiscanf_r+0x4a>
 8003514:	9141      	str	r1, [sp, #260]	@ 0x104
 8003516:	9143      	str	r1, [sp, #268]	@ 0x10c
 8003518:	7853      	ldrb	r3, [r2, #1]
 800351a:	2b2a      	cmp	r3, #42	@ 0x2a
 800351c:	bf02      	ittt	eq
 800351e:	2310      	moveq	r3, #16
 8003520:	1c95      	addeq	r5, r2, #2
 8003522:	9341      	streq	r3, [sp, #260]	@ 0x104
 8003524:	220a      	movs	r2, #10
 8003526:	46a9      	mov	r9, r5
 8003528:	f819 1b01 	ldrb.w	r1, [r9], #1
 800352c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8003530:	2b09      	cmp	r3, #9
 8003532:	d91e      	bls.n	8003572 <__ssvfiscanf_r+0xf6>
 8003534:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8003730 <__ssvfiscanf_r+0x2b4>
 8003538:	2203      	movs	r2, #3
 800353a:	4650      	mov	r0, sl
 800353c:	f7fc fe58 	bl	80001f0 <memchr>
 8003540:	b138      	cbz	r0, 8003552 <__ssvfiscanf_r+0xd6>
 8003542:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8003544:	eba0 000a 	sub.w	r0, r0, sl
 8003548:	2301      	movs	r3, #1
 800354a:	4083      	lsls	r3, r0
 800354c:	4313      	orrs	r3, r2
 800354e:	9341      	str	r3, [sp, #260]	@ 0x104
 8003550:	464d      	mov	r5, r9
 8003552:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003556:	2b78      	cmp	r3, #120	@ 0x78
 8003558:	d806      	bhi.n	8003568 <__ssvfiscanf_r+0xec>
 800355a:	2b57      	cmp	r3, #87	@ 0x57
 800355c:	d810      	bhi.n	8003580 <__ssvfiscanf_r+0x104>
 800355e:	2b25      	cmp	r3, #37	@ 0x25
 8003560:	d0c5      	beq.n	80034ee <__ssvfiscanf_r+0x72>
 8003562:	d857      	bhi.n	8003614 <__ssvfiscanf_r+0x198>
 8003564:	2b00      	cmp	r3, #0
 8003566:	d065      	beq.n	8003634 <__ssvfiscanf_r+0x1b8>
 8003568:	2303      	movs	r3, #3
 800356a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800356c:	230a      	movs	r3, #10
 800356e:	9342      	str	r3, [sp, #264]	@ 0x108
 8003570:	e078      	b.n	8003664 <__ssvfiscanf_r+0x1e8>
 8003572:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8003574:	fb02 1103 	mla	r1, r2, r3, r1
 8003578:	3930      	subs	r1, #48	@ 0x30
 800357a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800357c:	464d      	mov	r5, r9
 800357e:	e7d2      	b.n	8003526 <__ssvfiscanf_r+0xaa>
 8003580:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8003584:	2a20      	cmp	r2, #32
 8003586:	d8ef      	bhi.n	8003568 <__ssvfiscanf_r+0xec>
 8003588:	a101      	add	r1, pc, #4	@ (adr r1, 8003590 <__ssvfiscanf_r+0x114>)
 800358a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800358e:	bf00      	nop
 8003590:	08003643 	.word	0x08003643
 8003594:	08003569 	.word	0x08003569
 8003598:	08003569 	.word	0x08003569
 800359c:	0800369d 	.word	0x0800369d
 80035a0:	08003569 	.word	0x08003569
 80035a4:	08003569 	.word	0x08003569
 80035a8:	08003569 	.word	0x08003569
 80035ac:	08003569 	.word	0x08003569
 80035b0:	08003569 	.word	0x08003569
 80035b4:	08003569 	.word	0x08003569
 80035b8:	08003569 	.word	0x08003569
 80035bc:	080036b3 	.word	0x080036b3
 80035c0:	08003699 	.word	0x08003699
 80035c4:	0800361b 	.word	0x0800361b
 80035c8:	0800361b 	.word	0x0800361b
 80035cc:	0800361b 	.word	0x0800361b
 80035d0:	08003569 	.word	0x08003569
 80035d4:	08003655 	.word	0x08003655
 80035d8:	08003569 	.word	0x08003569
 80035dc:	08003569 	.word	0x08003569
 80035e0:	08003569 	.word	0x08003569
 80035e4:	08003569 	.word	0x08003569
 80035e8:	080036c3 	.word	0x080036c3
 80035ec:	0800365d 	.word	0x0800365d
 80035f0:	0800363b 	.word	0x0800363b
 80035f4:	08003569 	.word	0x08003569
 80035f8:	08003569 	.word	0x08003569
 80035fc:	080036bf 	.word	0x080036bf
 8003600:	08003569 	.word	0x08003569
 8003604:	08003699 	.word	0x08003699
 8003608:	08003569 	.word	0x08003569
 800360c:	08003569 	.word	0x08003569
 8003610:	08003643 	.word	0x08003643
 8003614:	3b45      	subs	r3, #69	@ 0x45
 8003616:	2b02      	cmp	r3, #2
 8003618:	d8a6      	bhi.n	8003568 <__ssvfiscanf_r+0xec>
 800361a:	2305      	movs	r3, #5
 800361c:	e021      	b.n	8003662 <__ssvfiscanf_r+0x1e6>
 800361e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8003620:	4621      	mov	r1, r4
 8003622:	4630      	mov	r0, r6
 8003624:	4798      	blx	r3
 8003626:	2800      	cmp	r0, #0
 8003628:	f43f af66 	beq.w	80034f8 <__ssvfiscanf_r+0x7c>
 800362c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800362e:	2800      	cmp	r0, #0
 8003630:	f040 808b 	bne.w	800374a <__ssvfiscanf_r+0x2ce>
 8003634:	f04f 30ff 	mov.w	r0, #4294967295
 8003638:	e08b      	b.n	8003752 <__ssvfiscanf_r+0x2d6>
 800363a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800363c:	f042 0220 	orr.w	r2, r2, #32
 8003640:	9241      	str	r2, [sp, #260]	@ 0x104
 8003642:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8003644:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003648:	9241      	str	r2, [sp, #260]	@ 0x104
 800364a:	2210      	movs	r2, #16
 800364c:	2b6e      	cmp	r3, #110	@ 0x6e
 800364e:	9242      	str	r2, [sp, #264]	@ 0x108
 8003650:	d902      	bls.n	8003658 <__ssvfiscanf_r+0x1dc>
 8003652:	e005      	b.n	8003660 <__ssvfiscanf_r+0x1e4>
 8003654:	2300      	movs	r3, #0
 8003656:	9342      	str	r3, [sp, #264]	@ 0x108
 8003658:	2303      	movs	r3, #3
 800365a:	e002      	b.n	8003662 <__ssvfiscanf_r+0x1e6>
 800365c:	2308      	movs	r3, #8
 800365e:	9342      	str	r3, [sp, #264]	@ 0x108
 8003660:	2304      	movs	r3, #4
 8003662:	9347      	str	r3, [sp, #284]	@ 0x11c
 8003664:	6863      	ldr	r3, [r4, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	dd39      	ble.n	80036de <__ssvfiscanf_r+0x262>
 800366a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800366c:	0659      	lsls	r1, r3, #25
 800366e:	d404      	bmi.n	800367a <__ssvfiscanf_r+0x1fe>
 8003670:	6823      	ldr	r3, [r4, #0]
 8003672:	781a      	ldrb	r2, [r3, #0]
 8003674:	5cba      	ldrb	r2, [r7, r2]
 8003676:	0712      	lsls	r2, r2, #28
 8003678:	d438      	bmi.n	80036ec <__ssvfiscanf_r+0x270>
 800367a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800367c:	2b02      	cmp	r3, #2
 800367e:	dc47      	bgt.n	8003710 <__ssvfiscanf_r+0x294>
 8003680:	466b      	mov	r3, sp
 8003682:	4622      	mov	r2, r4
 8003684:	a941      	add	r1, sp, #260	@ 0x104
 8003686:	4630      	mov	r0, r6
 8003688:	f000 f9fa 	bl	8003a80 <_scanf_chars>
 800368c:	2801      	cmp	r0, #1
 800368e:	d064      	beq.n	800375a <__ssvfiscanf_r+0x2de>
 8003690:	2802      	cmp	r0, #2
 8003692:	f47f af18 	bne.w	80034c6 <__ssvfiscanf_r+0x4a>
 8003696:	e7c9      	b.n	800362c <__ssvfiscanf_r+0x1b0>
 8003698:	220a      	movs	r2, #10
 800369a:	e7d7      	b.n	800364c <__ssvfiscanf_r+0x1d0>
 800369c:	4629      	mov	r1, r5
 800369e:	4640      	mov	r0, r8
 80036a0:	f000 fb3c 	bl	8003d1c <__sccl>
 80036a4:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80036a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80036aa:	9341      	str	r3, [sp, #260]	@ 0x104
 80036ac:	4605      	mov	r5, r0
 80036ae:	2301      	movs	r3, #1
 80036b0:	e7d7      	b.n	8003662 <__ssvfiscanf_r+0x1e6>
 80036b2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80036b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80036b8:	9341      	str	r3, [sp, #260]	@ 0x104
 80036ba:	2300      	movs	r3, #0
 80036bc:	e7d1      	b.n	8003662 <__ssvfiscanf_r+0x1e6>
 80036be:	2302      	movs	r3, #2
 80036c0:	e7cf      	b.n	8003662 <__ssvfiscanf_r+0x1e6>
 80036c2:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80036c4:	06c3      	lsls	r3, r0, #27
 80036c6:	f53f aefe 	bmi.w	80034c6 <__ssvfiscanf_r+0x4a>
 80036ca:	9b00      	ldr	r3, [sp, #0]
 80036cc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80036ce:	1d19      	adds	r1, r3, #4
 80036d0:	9100      	str	r1, [sp, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	07c0      	lsls	r0, r0, #31
 80036d6:	bf4c      	ite	mi
 80036d8:	801a      	strhmi	r2, [r3, #0]
 80036da:	601a      	strpl	r2, [r3, #0]
 80036dc:	e6f3      	b.n	80034c6 <__ssvfiscanf_r+0x4a>
 80036de:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80036e0:	4621      	mov	r1, r4
 80036e2:	4630      	mov	r0, r6
 80036e4:	4798      	blx	r3
 80036e6:	2800      	cmp	r0, #0
 80036e8:	d0bf      	beq.n	800366a <__ssvfiscanf_r+0x1ee>
 80036ea:	e79f      	b.n	800362c <__ssvfiscanf_r+0x1b0>
 80036ec:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80036ee:	3201      	adds	r2, #1
 80036f0:	9245      	str	r2, [sp, #276]	@ 0x114
 80036f2:	6862      	ldr	r2, [r4, #4]
 80036f4:	3a01      	subs	r2, #1
 80036f6:	2a00      	cmp	r2, #0
 80036f8:	6062      	str	r2, [r4, #4]
 80036fa:	dd02      	ble.n	8003702 <__ssvfiscanf_r+0x286>
 80036fc:	3301      	adds	r3, #1
 80036fe:	6023      	str	r3, [r4, #0]
 8003700:	e7b6      	b.n	8003670 <__ssvfiscanf_r+0x1f4>
 8003702:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8003704:	4621      	mov	r1, r4
 8003706:	4630      	mov	r0, r6
 8003708:	4798      	blx	r3
 800370a:	2800      	cmp	r0, #0
 800370c:	d0b0      	beq.n	8003670 <__ssvfiscanf_r+0x1f4>
 800370e:	e78d      	b.n	800362c <__ssvfiscanf_r+0x1b0>
 8003710:	2b04      	cmp	r3, #4
 8003712:	dc0f      	bgt.n	8003734 <__ssvfiscanf_r+0x2b8>
 8003714:	466b      	mov	r3, sp
 8003716:	4622      	mov	r2, r4
 8003718:	a941      	add	r1, sp, #260	@ 0x104
 800371a:	4630      	mov	r0, r6
 800371c:	f000 fa0a 	bl	8003b34 <_scanf_i>
 8003720:	e7b4      	b.n	800368c <__ssvfiscanf_r+0x210>
 8003722:	bf00      	nop
 8003724:	080033cd 	.word	0x080033cd
 8003728:	08003443 	.word	0x08003443
 800372c:	080044ab 	.word	0x080044ab
 8003730:	08004462 	.word	0x08004462
 8003734:	4b0a      	ldr	r3, [pc, #40]	@ (8003760 <__ssvfiscanf_r+0x2e4>)
 8003736:	2b00      	cmp	r3, #0
 8003738:	f43f aec5 	beq.w	80034c6 <__ssvfiscanf_r+0x4a>
 800373c:	466b      	mov	r3, sp
 800373e:	4622      	mov	r2, r4
 8003740:	a941      	add	r1, sp, #260	@ 0x104
 8003742:	4630      	mov	r0, r6
 8003744:	f3af 8000 	nop.w
 8003748:	e7a0      	b.n	800368c <__ssvfiscanf_r+0x210>
 800374a:	89a3      	ldrh	r3, [r4, #12]
 800374c:	065b      	lsls	r3, r3, #25
 800374e:	f53f af71 	bmi.w	8003634 <__ssvfiscanf_r+0x1b8>
 8003752:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8003756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800375a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800375c:	e7f9      	b.n	8003752 <__ssvfiscanf_r+0x2d6>
 800375e:	bf00      	nop
 8003760:	00000000 	.word	0x00000000

08003764 <_printf_common>:
 8003764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003768:	4616      	mov	r6, r2
 800376a:	4698      	mov	r8, r3
 800376c:	688a      	ldr	r2, [r1, #8]
 800376e:	690b      	ldr	r3, [r1, #16]
 8003770:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003774:	4293      	cmp	r3, r2
 8003776:	bfb8      	it	lt
 8003778:	4613      	movlt	r3, r2
 800377a:	6033      	str	r3, [r6, #0]
 800377c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003780:	4607      	mov	r7, r0
 8003782:	460c      	mov	r4, r1
 8003784:	b10a      	cbz	r2, 800378a <_printf_common+0x26>
 8003786:	3301      	adds	r3, #1
 8003788:	6033      	str	r3, [r6, #0]
 800378a:	6823      	ldr	r3, [r4, #0]
 800378c:	0699      	lsls	r1, r3, #26
 800378e:	bf42      	ittt	mi
 8003790:	6833      	ldrmi	r3, [r6, #0]
 8003792:	3302      	addmi	r3, #2
 8003794:	6033      	strmi	r3, [r6, #0]
 8003796:	6825      	ldr	r5, [r4, #0]
 8003798:	f015 0506 	ands.w	r5, r5, #6
 800379c:	d106      	bne.n	80037ac <_printf_common+0x48>
 800379e:	f104 0a19 	add.w	sl, r4, #25
 80037a2:	68e3      	ldr	r3, [r4, #12]
 80037a4:	6832      	ldr	r2, [r6, #0]
 80037a6:	1a9b      	subs	r3, r3, r2
 80037a8:	42ab      	cmp	r3, r5
 80037aa:	dc26      	bgt.n	80037fa <_printf_common+0x96>
 80037ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80037b0:	6822      	ldr	r2, [r4, #0]
 80037b2:	3b00      	subs	r3, #0
 80037b4:	bf18      	it	ne
 80037b6:	2301      	movne	r3, #1
 80037b8:	0692      	lsls	r2, r2, #26
 80037ba:	d42b      	bmi.n	8003814 <_printf_common+0xb0>
 80037bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80037c0:	4641      	mov	r1, r8
 80037c2:	4638      	mov	r0, r7
 80037c4:	47c8      	blx	r9
 80037c6:	3001      	adds	r0, #1
 80037c8:	d01e      	beq.n	8003808 <_printf_common+0xa4>
 80037ca:	6823      	ldr	r3, [r4, #0]
 80037cc:	6922      	ldr	r2, [r4, #16]
 80037ce:	f003 0306 	and.w	r3, r3, #6
 80037d2:	2b04      	cmp	r3, #4
 80037d4:	bf02      	ittt	eq
 80037d6:	68e5      	ldreq	r5, [r4, #12]
 80037d8:	6833      	ldreq	r3, [r6, #0]
 80037da:	1aed      	subeq	r5, r5, r3
 80037dc:	68a3      	ldr	r3, [r4, #8]
 80037de:	bf0c      	ite	eq
 80037e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80037e4:	2500      	movne	r5, #0
 80037e6:	4293      	cmp	r3, r2
 80037e8:	bfc4      	itt	gt
 80037ea:	1a9b      	subgt	r3, r3, r2
 80037ec:	18ed      	addgt	r5, r5, r3
 80037ee:	2600      	movs	r6, #0
 80037f0:	341a      	adds	r4, #26
 80037f2:	42b5      	cmp	r5, r6
 80037f4:	d11a      	bne.n	800382c <_printf_common+0xc8>
 80037f6:	2000      	movs	r0, #0
 80037f8:	e008      	b.n	800380c <_printf_common+0xa8>
 80037fa:	2301      	movs	r3, #1
 80037fc:	4652      	mov	r2, sl
 80037fe:	4641      	mov	r1, r8
 8003800:	4638      	mov	r0, r7
 8003802:	47c8      	blx	r9
 8003804:	3001      	adds	r0, #1
 8003806:	d103      	bne.n	8003810 <_printf_common+0xac>
 8003808:	f04f 30ff 	mov.w	r0, #4294967295
 800380c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003810:	3501      	adds	r5, #1
 8003812:	e7c6      	b.n	80037a2 <_printf_common+0x3e>
 8003814:	18e1      	adds	r1, r4, r3
 8003816:	1c5a      	adds	r2, r3, #1
 8003818:	2030      	movs	r0, #48	@ 0x30
 800381a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800381e:	4422      	add	r2, r4
 8003820:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003824:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003828:	3302      	adds	r3, #2
 800382a:	e7c7      	b.n	80037bc <_printf_common+0x58>
 800382c:	2301      	movs	r3, #1
 800382e:	4622      	mov	r2, r4
 8003830:	4641      	mov	r1, r8
 8003832:	4638      	mov	r0, r7
 8003834:	47c8      	blx	r9
 8003836:	3001      	adds	r0, #1
 8003838:	d0e6      	beq.n	8003808 <_printf_common+0xa4>
 800383a:	3601      	adds	r6, #1
 800383c:	e7d9      	b.n	80037f2 <_printf_common+0x8e>
	...

08003840 <_printf_i>:
 8003840:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003844:	7e0f      	ldrb	r7, [r1, #24]
 8003846:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003848:	2f78      	cmp	r7, #120	@ 0x78
 800384a:	4691      	mov	r9, r2
 800384c:	4680      	mov	r8, r0
 800384e:	460c      	mov	r4, r1
 8003850:	469a      	mov	sl, r3
 8003852:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003856:	d807      	bhi.n	8003868 <_printf_i+0x28>
 8003858:	2f62      	cmp	r7, #98	@ 0x62
 800385a:	d80a      	bhi.n	8003872 <_printf_i+0x32>
 800385c:	2f00      	cmp	r7, #0
 800385e:	f000 80d2 	beq.w	8003a06 <_printf_i+0x1c6>
 8003862:	2f58      	cmp	r7, #88	@ 0x58
 8003864:	f000 80b9 	beq.w	80039da <_printf_i+0x19a>
 8003868:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800386c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003870:	e03a      	b.n	80038e8 <_printf_i+0xa8>
 8003872:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003876:	2b15      	cmp	r3, #21
 8003878:	d8f6      	bhi.n	8003868 <_printf_i+0x28>
 800387a:	a101      	add	r1, pc, #4	@ (adr r1, 8003880 <_printf_i+0x40>)
 800387c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003880:	080038d9 	.word	0x080038d9
 8003884:	080038ed 	.word	0x080038ed
 8003888:	08003869 	.word	0x08003869
 800388c:	08003869 	.word	0x08003869
 8003890:	08003869 	.word	0x08003869
 8003894:	08003869 	.word	0x08003869
 8003898:	080038ed 	.word	0x080038ed
 800389c:	08003869 	.word	0x08003869
 80038a0:	08003869 	.word	0x08003869
 80038a4:	08003869 	.word	0x08003869
 80038a8:	08003869 	.word	0x08003869
 80038ac:	080039ed 	.word	0x080039ed
 80038b0:	08003917 	.word	0x08003917
 80038b4:	080039a7 	.word	0x080039a7
 80038b8:	08003869 	.word	0x08003869
 80038bc:	08003869 	.word	0x08003869
 80038c0:	08003a0f 	.word	0x08003a0f
 80038c4:	08003869 	.word	0x08003869
 80038c8:	08003917 	.word	0x08003917
 80038cc:	08003869 	.word	0x08003869
 80038d0:	08003869 	.word	0x08003869
 80038d4:	080039af 	.word	0x080039af
 80038d8:	6833      	ldr	r3, [r6, #0]
 80038da:	1d1a      	adds	r2, r3, #4
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	6032      	str	r2, [r6, #0]
 80038e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80038e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80038e8:	2301      	movs	r3, #1
 80038ea:	e09d      	b.n	8003a28 <_printf_i+0x1e8>
 80038ec:	6833      	ldr	r3, [r6, #0]
 80038ee:	6820      	ldr	r0, [r4, #0]
 80038f0:	1d19      	adds	r1, r3, #4
 80038f2:	6031      	str	r1, [r6, #0]
 80038f4:	0606      	lsls	r6, r0, #24
 80038f6:	d501      	bpl.n	80038fc <_printf_i+0xbc>
 80038f8:	681d      	ldr	r5, [r3, #0]
 80038fa:	e003      	b.n	8003904 <_printf_i+0xc4>
 80038fc:	0645      	lsls	r5, r0, #25
 80038fe:	d5fb      	bpl.n	80038f8 <_printf_i+0xb8>
 8003900:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003904:	2d00      	cmp	r5, #0
 8003906:	da03      	bge.n	8003910 <_printf_i+0xd0>
 8003908:	232d      	movs	r3, #45	@ 0x2d
 800390a:	426d      	negs	r5, r5
 800390c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003910:	4859      	ldr	r0, [pc, #356]	@ (8003a78 <_printf_i+0x238>)
 8003912:	230a      	movs	r3, #10
 8003914:	e011      	b.n	800393a <_printf_i+0xfa>
 8003916:	6821      	ldr	r1, [r4, #0]
 8003918:	6833      	ldr	r3, [r6, #0]
 800391a:	0608      	lsls	r0, r1, #24
 800391c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003920:	d402      	bmi.n	8003928 <_printf_i+0xe8>
 8003922:	0649      	lsls	r1, r1, #25
 8003924:	bf48      	it	mi
 8003926:	b2ad      	uxthmi	r5, r5
 8003928:	2f6f      	cmp	r7, #111	@ 0x6f
 800392a:	4853      	ldr	r0, [pc, #332]	@ (8003a78 <_printf_i+0x238>)
 800392c:	6033      	str	r3, [r6, #0]
 800392e:	bf14      	ite	ne
 8003930:	230a      	movne	r3, #10
 8003932:	2308      	moveq	r3, #8
 8003934:	2100      	movs	r1, #0
 8003936:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800393a:	6866      	ldr	r6, [r4, #4]
 800393c:	60a6      	str	r6, [r4, #8]
 800393e:	2e00      	cmp	r6, #0
 8003940:	bfa2      	ittt	ge
 8003942:	6821      	ldrge	r1, [r4, #0]
 8003944:	f021 0104 	bicge.w	r1, r1, #4
 8003948:	6021      	strge	r1, [r4, #0]
 800394a:	b90d      	cbnz	r5, 8003950 <_printf_i+0x110>
 800394c:	2e00      	cmp	r6, #0
 800394e:	d04b      	beq.n	80039e8 <_printf_i+0x1a8>
 8003950:	4616      	mov	r6, r2
 8003952:	fbb5 f1f3 	udiv	r1, r5, r3
 8003956:	fb03 5711 	mls	r7, r3, r1, r5
 800395a:	5dc7      	ldrb	r7, [r0, r7]
 800395c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003960:	462f      	mov	r7, r5
 8003962:	42bb      	cmp	r3, r7
 8003964:	460d      	mov	r5, r1
 8003966:	d9f4      	bls.n	8003952 <_printf_i+0x112>
 8003968:	2b08      	cmp	r3, #8
 800396a:	d10b      	bne.n	8003984 <_printf_i+0x144>
 800396c:	6823      	ldr	r3, [r4, #0]
 800396e:	07df      	lsls	r7, r3, #31
 8003970:	d508      	bpl.n	8003984 <_printf_i+0x144>
 8003972:	6923      	ldr	r3, [r4, #16]
 8003974:	6861      	ldr	r1, [r4, #4]
 8003976:	4299      	cmp	r1, r3
 8003978:	bfde      	ittt	le
 800397a:	2330      	movle	r3, #48	@ 0x30
 800397c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003980:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003984:	1b92      	subs	r2, r2, r6
 8003986:	6122      	str	r2, [r4, #16]
 8003988:	f8cd a000 	str.w	sl, [sp]
 800398c:	464b      	mov	r3, r9
 800398e:	aa03      	add	r2, sp, #12
 8003990:	4621      	mov	r1, r4
 8003992:	4640      	mov	r0, r8
 8003994:	f7ff fee6 	bl	8003764 <_printf_common>
 8003998:	3001      	adds	r0, #1
 800399a:	d14a      	bne.n	8003a32 <_printf_i+0x1f2>
 800399c:	f04f 30ff 	mov.w	r0, #4294967295
 80039a0:	b004      	add	sp, #16
 80039a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039a6:	6823      	ldr	r3, [r4, #0]
 80039a8:	f043 0320 	orr.w	r3, r3, #32
 80039ac:	6023      	str	r3, [r4, #0]
 80039ae:	4833      	ldr	r0, [pc, #204]	@ (8003a7c <_printf_i+0x23c>)
 80039b0:	2778      	movs	r7, #120	@ 0x78
 80039b2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80039b6:	6823      	ldr	r3, [r4, #0]
 80039b8:	6831      	ldr	r1, [r6, #0]
 80039ba:	061f      	lsls	r7, r3, #24
 80039bc:	f851 5b04 	ldr.w	r5, [r1], #4
 80039c0:	d402      	bmi.n	80039c8 <_printf_i+0x188>
 80039c2:	065f      	lsls	r7, r3, #25
 80039c4:	bf48      	it	mi
 80039c6:	b2ad      	uxthmi	r5, r5
 80039c8:	6031      	str	r1, [r6, #0]
 80039ca:	07d9      	lsls	r1, r3, #31
 80039cc:	bf44      	itt	mi
 80039ce:	f043 0320 	orrmi.w	r3, r3, #32
 80039d2:	6023      	strmi	r3, [r4, #0]
 80039d4:	b11d      	cbz	r5, 80039de <_printf_i+0x19e>
 80039d6:	2310      	movs	r3, #16
 80039d8:	e7ac      	b.n	8003934 <_printf_i+0xf4>
 80039da:	4827      	ldr	r0, [pc, #156]	@ (8003a78 <_printf_i+0x238>)
 80039dc:	e7e9      	b.n	80039b2 <_printf_i+0x172>
 80039de:	6823      	ldr	r3, [r4, #0]
 80039e0:	f023 0320 	bic.w	r3, r3, #32
 80039e4:	6023      	str	r3, [r4, #0]
 80039e6:	e7f6      	b.n	80039d6 <_printf_i+0x196>
 80039e8:	4616      	mov	r6, r2
 80039ea:	e7bd      	b.n	8003968 <_printf_i+0x128>
 80039ec:	6833      	ldr	r3, [r6, #0]
 80039ee:	6825      	ldr	r5, [r4, #0]
 80039f0:	6961      	ldr	r1, [r4, #20]
 80039f2:	1d18      	adds	r0, r3, #4
 80039f4:	6030      	str	r0, [r6, #0]
 80039f6:	062e      	lsls	r6, r5, #24
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	d501      	bpl.n	8003a00 <_printf_i+0x1c0>
 80039fc:	6019      	str	r1, [r3, #0]
 80039fe:	e002      	b.n	8003a06 <_printf_i+0x1c6>
 8003a00:	0668      	lsls	r0, r5, #25
 8003a02:	d5fb      	bpl.n	80039fc <_printf_i+0x1bc>
 8003a04:	8019      	strh	r1, [r3, #0]
 8003a06:	2300      	movs	r3, #0
 8003a08:	6123      	str	r3, [r4, #16]
 8003a0a:	4616      	mov	r6, r2
 8003a0c:	e7bc      	b.n	8003988 <_printf_i+0x148>
 8003a0e:	6833      	ldr	r3, [r6, #0]
 8003a10:	1d1a      	adds	r2, r3, #4
 8003a12:	6032      	str	r2, [r6, #0]
 8003a14:	681e      	ldr	r6, [r3, #0]
 8003a16:	6862      	ldr	r2, [r4, #4]
 8003a18:	2100      	movs	r1, #0
 8003a1a:	4630      	mov	r0, r6
 8003a1c:	f7fc fbe8 	bl	80001f0 <memchr>
 8003a20:	b108      	cbz	r0, 8003a26 <_printf_i+0x1e6>
 8003a22:	1b80      	subs	r0, r0, r6
 8003a24:	6060      	str	r0, [r4, #4]
 8003a26:	6863      	ldr	r3, [r4, #4]
 8003a28:	6123      	str	r3, [r4, #16]
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003a30:	e7aa      	b.n	8003988 <_printf_i+0x148>
 8003a32:	6923      	ldr	r3, [r4, #16]
 8003a34:	4632      	mov	r2, r6
 8003a36:	4649      	mov	r1, r9
 8003a38:	4640      	mov	r0, r8
 8003a3a:	47d0      	blx	sl
 8003a3c:	3001      	adds	r0, #1
 8003a3e:	d0ad      	beq.n	800399c <_printf_i+0x15c>
 8003a40:	6823      	ldr	r3, [r4, #0]
 8003a42:	079b      	lsls	r3, r3, #30
 8003a44:	d413      	bmi.n	8003a6e <_printf_i+0x22e>
 8003a46:	68e0      	ldr	r0, [r4, #12]
 8003a48:	9b03      	ldr	r3, [sp, #12]
 8003a4a:	4298      	cmp	r0, r3
 8003a4c:	bfb8      	it	lt
 8003a4e:	4618      	movlt	r0, r3
 8003a50:	e7a6      	b.n	80039a0 <_printf_i+0x160>
 8003a52:	2301      	movs	r3, #1
 8003a54:	4632      	mov	r2, r6
 8003a56:	4649      	mov	r1, r9
 8003a58:	4640      	mov	r0, r8
 8003a5a:	47d0      	blx	sl
 8003a5c:	3001      	adds	r0, #1
 8003a5e:	d09d      	beq.n	800399c <_printf_i+0x15c>
 8003a60:	3501      	adds	r5, #1
 8003a62:	68e3      	ldr	r3, [r4, #12]
 8003a64:	9903      	ldr	r1, [sp, #12]
 8003a66:	1a5b      	subs	r3, r3, r1
 8003a68:	42ab      	cmp	r3, r5
 8003a6a:	dcf2      	bgt.n	8003a52 <_printf_i+0x212>
 8003a6c:	e7eb      	b.n	8003a46 <_printf_i+0x206>
 8003a6e:	2500      	movs	r5, #0
 8003a70:	f104 0619 	add.w	r6, r4, #25
 8003a74:	e7f5      	b.n	8003a62 <_printf_i+0x222>
 8003a76:	bf00      	nop
 8003a78:	0800446d 	.word	0x0800446d
 8003a7c:	0800447e 	.word	0x0800447e

08003a80 <_scanf_chars>:
 8003a80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a84:	4615      	mov	r5, r2
 8003a86:	688a      	ldr	r2, [r1, #8]
 8003a88:	4680      	mov	r8, r0
 8003a8a:	460c      	mov	r4, r1
 8003a8c:	b932      	cbnz	r2, 8003a9c <_scanf_chars+0x1c>
 8003a8e:	698a      	ldr	r2, [r1, #24]
 8003a90:	2a00      	cmp	r2, #0
 8003a92:	bf14      	ite	ne
 8003a94:	f04f 32ff 	movne.w	r2, #4294967295
 8003a98:	2201      	moveq	r2, #1
 8003a9a:	608a      	str	r2, [r1, #8]
 8003a9c:	6822      	ldr	r2, [r4, #0]
 8003a9e:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8003b30 <_scanf_chars+0xb0>
 8003aa2:	06d1      	lsls	r1, r2, #27
 8003aa4:	bf5f      	itttt	pl
 8003aa6:	681a      	ldrpl	r2, [r3, #0]
 8003aa8:	1d11      	addpl	r1, r2, #4
 8003aaa:	6019      	strpl	r1, [r3, #0]
 8003aac:	6816      	ldrpl	r6, [r2, #0]
 8003aae:	2700      	movs	r7, #0
 8003ab0:	69a0      	ldr	r0, [r4, #24]
 8003ab2:	b188      	cbz	r0, 8003ad8 <_scanf_chars+0x58>
 8003ab4:	2801      	cmp	r0, #1
 8003ab6:	d107      	bne.n	8003ac8 <_scanf_chars+0x48>
 8003ab8:	682b      	ldr	r3, [r5, #0]
 8003aba:	781a      	ldrb	r2, [r3, #0]
 8003abc:	6963      	ldr	r3, [r4, #20]
 8003abe:	5c9b      	ldrb	r3, [r3, r2]
 8003ac0:	b953      	cbnz	r3, 8003ad8 <_scanf_chars+0x58>
 8003ac2:	2f00      	cmp	r7, #0
 8003ac4:	d031      	beq.n	8003b2a <_scanf_chars+0xaa>
 8003ac6:	e022      	b.n	8003b0e <_scanf_chars+0x8e>
 8003ac8:	2802      	cmp	r0, #2
 8003aca:	d120      	bne.n	8003b0e <_scanf_chars+0x8e>
 8003acc:	682b      	ldr	r3, [r5, #0]
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	f819 3003 	ldrb.w	r3, [r9, r3]
 8003ad4:	071b      	lsls	r3, r3, #28
 8003ad6:	d41a      	bmi.n	8003b0e <_scanf_chars+0x8e>
 8003ad8:	6823      	ldr	r3, [r4, #0]
 8003ada:	06da      	lsls	r2, r3, #27
 8003adc:	bf5e      	ittt	pl
 8003ade:	682b      	ldrpl	r3, [r5, #0]
 8003ae0:	781b      	ldrbpl	r3, [r3, #0]
 8003ae2:	f806 3b01 	strbpl.w	r3, [r6], #1
 8003ae6:	682a      	ldr	r2, [r5, #0]
 8003ae8:	686b      	ldr	r3, [r5, #4]
 8003aea:	3201      	adds	r2, #1
 8003aec:	602a      	str	r2, [r5, #0]
 8003aee:	68a2      	ldr	r2, [r4, #8]
 8003af0:	3b01      	subs	r3, #1
 8003af2:	3a01      	subs	r2, #1
 8003af4:	606b      	str	r3, [r5, #4]
 8003af6:	3701      	adds	r7, #1
 8003af8:	60a2      	str	r2, [r4, #8]
 8003afa:	b142      	cbz	r2, 8003b0e <_scanf_chars+0x8e>
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	dcd7      	bgt.n	8003ab0 <_scanf_chars+0x30>
 8003b00:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8003b04:	4629      	mov	r1, r5
 8003b06:	4640      	mov	r0, r8
 8003b08:	4798      	blx	r3
 8003b0a:	2800      	cmp	r0, #0
 8003b0c:	d0d0      	beq.n	8003ab0 <_scanf_chars+0x30>
 8003b0e:	6823      	ldr	r3, [r4, #0]
 8003b10:	f013 0310 	ands.w	r3, r3, #16
 8003b14:	d105      	bne.n	8003b22 <_scanf_chars+0xa2>
 8003b16:	68e2      	ldr	r2, [r4, #12]
 8003b18:	3201      	adds	r2, #1
 8003b1a:	60e2      	str	r2, [r4, #12]
 8003b1c:	69a2      	ldr	r2, [r4, #24]
 8003b1e:	b102      	cbz	r2, 8003b22 <_scanf_chars+0xa2>
 8003b20:	7033      	strb	r3, [r6, #0]
 8003b22:	6923      	ldr	r3, [r4, #16]
 8003b24:	443b      	add	r3, r7
 8003b26:	6123      	str	r3, [r4, #16]
 8003b28:	2000      	movs	r0, #0
 8003b2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b2e:	bf00      	nop
 8003b30:	080044ab 	.word	0x080044ab

08003b34 <_scanf_i>:
 8003b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b38:	4698      	mov	r8, r3
 8003b3a:	4b74      	ldr	r3, [pc, #464]	@ (8003d0c <_scanf_i+0x1d8>)
 8003b3c:	460c      	mov	r4, r1
 8003b3e:	4682      	mov	sl, r0
 8003b40:	4616      	mov	r6, r2
 8003b42:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003b46:	b087      	sub	sp, #28
 8003b48:	ab03      	add	r3, sp, #12
 8003b4a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003b4e:	4b70      	ldr	r3, [pc, #448]	@ (8003d10 <_scanf_i+0x1dc>)
 8003b50:	69a1      	ldr	r1, [r4, #24]
 8003b52:	4a70      	ldr	r2, [pc, #448]	@ (8003d14 <_scanf_i+0x1e0>)
 8003b54:	2903      	cmp	r1, #3
 8003b56:	bf08      	it	eq
 8003b58:	461a      	moveq	r2, r3
 8003b5a:	68a3      	ldr	r3, [r4, #8]
 8003b5c:	9201      	str	r2, [sp, #4]
 8003b5e:	1e5a      	subs	r2, r3, #1
 8003b60:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8003b64:	bf88      	it	hi
 8003b66:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8003b6a:	4627      	mov	r7, r4
 8003b6c:	bf82      	ittt	hi
 8003b6e:	eb03 0905 	addhi.w	r9, r3, r5
 8003b72:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8003b76:	60a3      	strhi	r3, [r4, #8]
 8003b78:	f857 3b1c 	ldr.w	r3, [r7], #28
 8003b7c:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8003b80:	bf98      	it	ls
 8003b82:	f04f 0900 	movls.w	r9, #0
 8003b86:	6023      	str	r3, [r4, #0]
 8003b88:	463d      	mov	r5, r7
 8003b8a:	f04f 0b00 	mov.w	fp, #0
 8003b8e:	6831      	ldr	r1, [r6, #0]
 8003b90:	ab03      	add	r3, sp, #12
 8003b92:	7809      	ldrb	r1, [r1, #0]
 8003b94:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8003b98:	2202      	movs	r2, #2
 8003b9a:	f7fc fb29 	bl	80001f0 <memchr>
 8003b9e:	b328      	cbz	r0, 8003bec <_scanf_i+0xb8>
 8003ba0:	f1bb 0f01 	cmp.w	fp, #1
 8003ba4:	d159      	bne.n	8003c5a <_scanf_i+0x126>
 8003ba6:	6862      	ldr	r2, [r4, #4]
 8003ba8:	b92a      	cbnz	r2, 8003bb6 <_scanf_i+0x82>
 8003baa:	6822      	ldr	r2, [r4, #0]
 8003bac:	2108      	movs	r1, #8
 8003bae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bb2:	6061      	str	r1, [r4, #4]
 8003bb4:	6022      	str	r2, [r4, #0]
 8003bb6:	6822      	ldr	r2, [r4, #0]
 8003bb8:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8003bbc:	6022      	str	r2, [r4, #0]
 8003bbe:	68a2      	ldr	r2, [r4, #8]
 8003bc0:	1e51      	subs	r1, r2, #1
 8003bc2:	60a1      	str	r1, [r4, #8]
 8003bc4:	b192      	cbz	r2, 8003bec <_scanf_i+0xb8>
 8003bc6:	6832      	ldr	r2, [r6, #0]
 8003bc8:	1c51      	adds	r1, r2, #1
 8003bca:	6031      	str	r1, [r6, #0]
 8003bcc:	7812      	ldrb	r2, [r2, #0]
 8003bce:	f805 2b01 	strb.w	r2, [r5], #1
 8003bd2:	6872      	ldr	r2, [r6, #4]
 8003bd4:	3a01      	subs	r2, #1
 8003bd6:	2a00      	cmp	r2, #0
 8003bd8:	6072      	str	r2, [r6, #4]
 8003bda:	dc07      	bgt.n	8003bec <_scanf_i+0xb8>
 8003bdc:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8003be0:	4631      	mov	r1, r6
 8003be2:	4650      	mov	r0, sl
 8003be4:	4790      	blx	r2
 8003be6:	2800      	cmp	r0, #0
 8003be8:	f040 8085 	bne.w	8003cf6 <_scanf_i+0x1c2>
 8003bec:	f10b 0b01 	add.w	fp, fp, #1
 8003bf0:	f1bb 0f03 	cmp.w	fp, #3
 8003bf4:	d1cb      	bne.n	8003b8e <_scanf_i+0x5a>
 8003bf6:	6863      	ldr	r3, [r4, #4]
 8003bf8:	b90b      	cbnz	r3, 8003bfe <_scanf_i+0xca>
 8003bfa:	230a      	movs	r3, #10
 8003bfc:	6063      	str	r3, [r4, #4]
 8003bfe:	6863      	ldr	r3, [r4, #4]
 8003c00:	4945      	ldr	r1, [pc, #276]	@ (8003d18 <_scanf_i+0x1e4>)
 8003c02:	6960      	ldr	r0, [r4, #20]
 8003c04:	1ac9      	subs	r1, r1, r3
 8003c06:	f000 f889 	bl	8003d1c <__sccl>
 8003c0a:	f04f 0b00 	mov.w	fp, #0
 8003c0e:	68a3      	ldr	r3, [r4, #8]
 8003c10:	6822      	ldr	r2, [r4, #0]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d03d      	beq.n	8003c92 <_scanf_i+0x15e>
 8003c16:	6831      	ldr	r1, [r6, #0]
 8003c18:	6960      	ldr	r0, [r4, #20]
 8003c1a:	f891 c000 	ldrb.w	ip, [r1]
 8003c1e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8003c22:	2800      	cmp	r0, #0
 8003c24:	d035      	beq.n	8003c92 <_scanf_i+0x15e>
 8003c26:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8003c2a:	d124      	bne.n	8003c76 <_scanf_i+0x142>
 8003c2c:	0510      	lsls	r0, r2, #20
 8003c2e:	d522      	bpl.n	8003c76 <_scanf_i+0x142>
 8003c30:	f10b 0b01 	add.w	fp, fp, #1
 8003c34:	f1b9 0f00 	cmp.w	r9, #0
 8003c38:	d003      	beq.n	8003c42 <_scanf_i+0x10e>
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	f109 39ff 	add.w	r9, r9, #4294967295
 8003c40:	60a3      	str	r3, [r4, #8]
 8003c42:	6873      	ldr	r3, [r6, #4]
 8003c44:	3b01      	subs	r3, #1
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	6073      	str	r3, [r6, #4]
 8003c4a:	dd1b      	ble.n	8003c84 <_scanf_i+0x150>
 8003c4c:	6833      	ldr	r3, [r6, #0]
 8003c4e:	3301      	adds	r3, #1
 8003c50:	6033      	str	r3, [r6, #0]
 8003c52:	68a3      	ldr	r3, [r4, #8]
 8003c54:	3b01      	subs	r3, #1
 8003c56:	60a3      	str	r3, [r4, #8]
 8003c58:	e7d9      	b.n	8003c0e <_scanf_i+0xda>
 8003c5a:	f1bb 0f02 	cmp.w	fp, #2
 8003c5e:	d1ae      	bne.n	8003bbe <_scanf_i+0x8a>
 8003c60:	6822      	ldr	r2, [r4, #0]
 8003c62:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8003c66:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8003c6a:	d1bf      	bne.n	8003bec <_scanf_i+0xb8>
 8003c6c:	2110      	movs	r1, #16
 8003c6e:	6061      	str	r1, [r4, #4]
 8003c70:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c74:	e7a2      	b.n	8003bbc <_scanf_i+0x88>
 8003c76:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8003c7a:	6022      	str	r2, [r4, #0]
 8003c7c:	780b      	ldrb	r3, [r1, #0]
 8003c7e:	f805 3b01 	strb.w	r3, [r5], #1
 8003c82:	e7de      	b.n	8003c42 <_scanf_i+0x10e>
 8003c84:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8003c88:	4631      	mov	r1, r6
 8003c8a:	4650      	mov	r0, sl
 8003c8c:	4798      	blx	r3
 8003c8e:	2800      	cmp	r0, #0
 8003c90:	d0df      	beq.n	8003c52 <_scanf_i+0x11e>
 8003c92:	6823      	ldr	r3, [r4, #0]
 8003c94:	05d9      	lsls	r1, r3, #23
 8003c96:	d50d      	bpl.n	8003cb4 <_scanf_i+0x180>
 8003c98:	42bd      	cmp	r5, r7
 8003c9a:	d909      	bls.n	8003cb0 <_scanf_i+0x17c>
 8003c9c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8003ca0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003ca4:	4632      	mov	r2, r6
 8003ca6:	4650      	mov	r0, sl
 8003ca8:	4798      	blx	r3
 8003caa:	f105 39ff 	add.w	r9, r5, #4294967295
 8003cae:	464d      	mov	r5, r9
 8003cb0:	42bd      	cmp	r5, r7
 8003cb2:	d028      	beq.n	8003d06 <_scanf_i+0x1d2>
 8003cb4:	6822      	ldr	r2, [r4, #0]
 8003cb6:	f012 0210 	ands.w	r2, r2, #16
 8003cba:	d113      	bne.n	8003ce4 <_scanf_i+0x1b0>
 8003cbc:	702a      	strb	r2, [r5, #0]
 8003cbe:	6863      	ldr	r3, [r4, #4]
 8003cc0:	9e01      	ldr	r6, [sp, #4]
 8003cc2:	4639      	mov	r1, r7
 8003cc4:	4650      	mov	r0, sl
 8003cc6:	47b0      	blx	r6
 8003cc8:	f8d8 3000 	ldr.w	r3, [r8]
 8003ccc:	6821      	ldr	r1, [r4, #0]
 8003cce:	1d1a      	adds	r2, r3, #4
 8003cd0:	f8c8 2000 	str.w	r2, [r8]
 8003cd4:	f011 0f20 	tst.w	r1, #32
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	d00f      	beq.n	8003cfc <_scanf_i+0x1c8>
 8003cdc:	6018      	str	r0, [r3, #0]
 8003cde:	68e3      	ldr	r3, [r4, #12]
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	60e3      	str	r3, [r4, #12]
 8003ce4:	6923      	ldr	r3, [r4, #16]
 8003ce6:	1bed      	subs	r5, r5, r7
 8003ce8:	445d      	add	r5, fp
 8003cea:	442b      	add	r3, r5
 8003cec:	6123      	str	r3, [r4, #16]
 8003cee:	2000      	movs	r0, #0
 8003cf0:	b007      	add	sp, #28
 8003cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cf6:	f04f 0b00 	mov.w	fp, #0
 8003cfa:	e7ca      	b.n	8003c92 <_scanf_i+0x15e>
 8003cfc:	07ca      	lsls	r2, r1, #31
 8003cfe:	bf4c      	ite	mi
 8003d00:	8018      	strhmi	r0, [r3, #0]
 8003d02:	6018      	strpl	r0, [r3, #0]
 8003d04:	e7eb      	b.n	8003cde <_scanf_i+0x1aa>
 8003d06:	2001      	movs	r0, #1
 8003d08:	e7f2      	b.n	8003cf0 <_scanf_i+0x1bc>
 8003d0a:	bf00      	nop
 8003d0c:	08004438 	.word	0x08004438
 8003d10:	08003fc5 	.word	0x08003fc5
 8003d14:	080040a5 	.word	0x080040a5
 8003d18:	0800449f 	.word	0x0800449f

08003d1c <__sccl>:
 8003d1c:	b570      	push	{r4, r5, r6, lr}
 8003d1e:	780b      	ldrb	r3, [r1, #0]
 8003d20:	4604      	mov	r4, r0
 8003d22:	2b5e      	cmp	r3, #94	@ 0x5e
 8003d24:	bf0b      	itete	eq
 8003d26:	784b      	ldrbeq	r3, [r1, #1]
 8003d28:	1c4a      	addne	r2, r1, #1
 8003d2a:	1c8a      	addeq	r2, r1, #2
 8003d2c:	2100      	movne	r1, #0
 8003d2e:	bf08      	it	eq
 8003d30:	2101      	moveq	r1, #1
 8003d32:	3801      	subs	r0, #1
 8003d34:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8003d38:	f800 1f01 	strb.w	r1, [r0, #1]!
 8003d3c:	42a8      	cmp	r0, r5
 8003d3e:	d1fb      	bne.n	8003d38 <__sccl+0x1c>
 8003d40:	b90b      	cbnz	r3, 8003d46 <__sccl+0x2a>
 8003d42:	1e50      	subs	r0, r2, #1
 8003d44:	bd70      	pop	{r4, r5, r6, pc}
 8003d46:	f081 0101 	eor.w	r1, r1, #1
 8003d4a:	54e1      	strb	r1, [r4, r3]
 8003d4c:	4610      	mov	r0, r2
 8003d4e:	4602      	mov	r2, r0
 8003d50:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003d54:	2d2d      	cmp	r5, #45	@ 0x2d
 8003d56:	d005      	beq.n	8003d64 <__sccl+0x48>
 8003d58:	2d5d      	cmp	r5, #93	@ 0x5d
 8003d5a:	d016      	beq.n	8003d8a <__sccl+0x6e>
 8003d5c:	2d00      	cmp	r5, #0
 8003d5e:	d0f1      	beq.n	8003d44 <__sccl+0x28>
 8003d60:	462b      	mov	r3, r5
 8003d62:	e7f2      	b.n	8003d4a <__sccl+0x2e>
 8003d64:	7846      	ldrb	r6, [r0, #1]
 8003d66:	2e5d      	cmp	r6, #93	@ 0x5d
 8003d68:	d0fa      	beq.n	8003d60 <__sccl+0x44>
 8003d6a:	42b3      	cmp	r3, r6
 8003d6c:	dcf8      	bgt.n	8003d60 <__sccl+0x44>
 8003d6e:	3002      	adds	r0, #2
 8003d70:	461a      	mov	r2, r3
 8003d72:	3201      	adds	r2, #1
 8003d74:	4296      	cmp	r6, r2
 8003d76:	54a1      	strb	r1, [r4, r2]
 8003d78:	dcfb      	bgt.n	8003d72 <__sccl+0x56>
 8003d7a:	1af2      	subs	r2, r6, r3
 8003d7c:	3a01      	subs	r2, #1
 8003d7e:	1c5d      	adds	r5, r3, #1
 8003d80:	42b3      	cmp	r3, r6
 8003d82:	bfa8      	it	ge
 8003d84:	2200      	movge	r2, #0
 8003d86:	18ab      	adds	r3, r5, r2
 8003d88:	e7e1      	b.n	8003d4e <__sccl+0x32>
 8003d8a:	4610      	mov	r0, r2
 8003d8c:	e7da      	b.n	8003d44 <__sccl+0x28>

08003d8e <__submore>:
 8003d8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d92:	460c      	mov	r4, r1
 8003d94:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8003d96:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003d9a:	4299      	cmp	r1, r3
 8003d9c:	d11d      	bne.n	8003dda <__submore+0x4c>
 8003d9e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003da2:	f7ff f92f 	bl	8003004 <_malloc_r>
 8003da6:	b918      	cbnz	r0, 8003db0 <__submore+0x22>
 8003da8:	f04f 30ff 	mov.w	r0, #4294967295
 8003dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003db0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003db4:	63a3      	str	r3, [r4, #56]	@ 0x38
 8003db6:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8003dba:	6360      	str	r0, [r4, #52]	@ 0x34
 8003dbc:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8003dc0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8003dc4:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8003dc8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8003dcc:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8003dd0:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8003dd4:	6020      	str	r0, [r4, #0]
 8003dd6:	2000      	movs	r0, #0
 8003dd8:	e7e8      	b.n	8003dac <__submore+0x1e>
 8003dda:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8003ddc:	0077      	lsls	r7, r6, #1
 8003dde:	463a      	mov	r2, r7
 8003de0:	f000 f848 	bl	8003e74 <_realloc_r>
 8003de4:	4605      	mov	r5, r0
 8003de6:	2800      	cmp	r0, #0
 8003de8:	d0de      	beq.n	8003da8 <__submore+0x1a>
 8003dea:	eb00 0806 	add.w	r8, r0, r6
 8003dee:	4601      	mov	r1, r0
 8003df0:	4632      	mov	r2, r6
 8003df2:	4640      	mov	r0, r8
 8003df4:	f000 f830 	bl	8003e58 <memcpy>
 8003df8:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8003dfc:	f8c4 8000 	str.w	r8, [r4]
 8003e00:	e7e9      	b.n	8003dd6 <__submore+0x48>

08003e02 <memmove>:
 8003e02:	4288      	cmp	r0, r1
 8003e04:	b510      	push	{r4, lr}
 8003e06:	eb01 0402 	add.w	r4, r1, r2
 8003e0a:	d902      	bls.n	8003e12 <memmove+0x10>
 8003e0c:	4284      	cmp	r4, r0
 8003e0e:	4623      	mov	r3, r4
 8003e10:	d807      	bhi.n	8003e22 <memmove+0x20>
 8003e12:	1e43      	subs	r3, r0, #1
 8003e14:	42a1      	cmp	r1, r4
 8003e16:	d008      	beq.n	8003e2a <memmove+0x28>
 8003e18:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e1c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003e20:	e7f8      	b.n	8003e14 <memmove+0x12>
 8003e22:	4402      	add	r2, r0
 8003e24:	4601      	mov	r1, r0
 8003e26:	428a      	cmp	r2, r1
 8003e28:	d100      	bne.n	8003e2c <memmove+0x2a>
 8003e2a:	bd10      	pop	{r4, pc}
 8003e2c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003e30:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003e34:	e7f7      	b.n	8003e26 <memmove+0x24>
	...

08003e38 <_sbrk_r>:
 8003e38:	b538      	push	{r3, r4, r5, lr}
 8003e3a:	4d06      	ldr	r5, [pc, #24]	@ (8003e54 <_sbrk_r+0x1c>)
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	4604      	mov	r4, r0
 8003e40:	4608      	mov	r0, r1
 8003e42:	602b      	str	r3, [r5, #0]
 8003e44:	f7fc feca 	bl	8000bdc <_sbrk>
 8003e48:	1c43      	adds	r3, r0, #1
 8003e4a:	d102      	bne.n	8003e52 <_sbrk_r+0x1a>
 8003e4c:	682b      	ldr	r3, [r5, #0]
 8003e4e:	b103      	cbz	r3, 8003e52 <_sbrk_r+0x1a>
 8003e50:	6023      	str	r3, [r4, #0]
 8003e52:	bd38      	pop	{r3, r4, r5, pc}
 8003e54:	20000288 	.word	0x20000288

08003e58 <memcpy>:
 8003e58:	440a      	add	r2, r1
 8003e5a:	4291      	cmp	r1, r2
 8003e5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003e60:	d100      	bne.n	8003e64 <memcpy+0xc>
 8003e62:	4770      	bx	lr
 8003e64:	b510      	push	{r4, lr}
 8003e66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e6e:	4291      	cmp	r1, r2
 8003e70:	d1f9      	bne.n	8003e66 <memcpy+0xe>
 8003e72:	bd10      	pop	{r4, pc}

08003e74 <_realloc_r>:
 8003e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e78:	4680      	mov	r8, r0
 8003e7a:	4615      	mov	r5, r2
 8003e7c:	460c      	mov	r4, r1
 8003e7e:	b921      	cbnz	r1, 8003e8a <_realloc_r+0x16>
 8003e80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e84:	4611      	mov	r1, r2
 8003e86:	f7ff b8bd 	b.w	8003004 <_malloc_r>
 8003e8a:	b92a      	cbnz	r2, 8003e98 <_realloc_r+0x24>
 8003e8c:	f7ff f84e 	bl	8002f2c <_free_r>
 8003e90:	2400      	movs	r4, #0
 8003e92:	4620      	mov	r0, r4
 8003e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e98:	f000 f906 	bl	80040a8 <_malloc_usable_size_r>
 8003e9c:	4285      	cmp	r5, r0
 8003e9e:	4606      	mov	r6, r0
 8003ea0:	d802      	bhi.n	8003ea8 <_realloc_r+0x34>
 8003ea2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003ea6:	d8f4      	bhi.n	8003e92 <_realloc_r+0x1e>
 8003ea8:	4629      	mov	r1, r5
 8003eaa:	4640      	mov	r0, r8
 8003eac:	f7ff f8aa 	bl	8003004 <_malloc_r>
 8003eb0:	4607      	mov	r7, r0
 8003eb2:	2800      	cmp	r0, #0
 8003eb4:	d0ec      	beq.n	8003e90 <_realloc_r+0x1c>
 8003eb6:	42b5      	cmp	r5, r6
 8003eb8:	462a      	mov	r2, r5
 8003eba:	4621      	mov	r1, r4
 8003ebc:	bf28      	it	cs
 8003ebe:	4632      	movcs	r2, r6
 8003ec0:	f7ff ffca 	bl	8003e58 <memcpy>
 8003ec4:	4621      	mov	r1, r4
 8003ec6:	4640      	mov	r0, r8
 8003ec8:	f7ff f830 	bl	8002f2c <_free_r>
 8003ecc:	463c      	mov	r4, r7
 8003ece:	e7e0      	b.n	8003e92 <_realloc_r+0x1e>

08003ed0 <_strtol_l.constprop.0>:
 8003ed0:	2b24      	cmp	r3, #36	@ 0x24
 8003ed2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ed6:	4686      	mov	lr, r0
 8003ed8:	4690      	mov	r8, r2
 8003eda:	d801      	bhi.n	8003ee0 <_strtol_l.constprop.0+0x10>
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d106      	bne.n	8003eee <_strtol_l.constprop.0+0x1e>
 8003ee0:	f7fe fff8 	bl	8002ed4 <__errno>
 8003ee4:	2316      	movs	r3, #22
 8003ee6:	6003      	str	r3, [r0, #0]
 8003ee8:	2000      	movs	r0, #0
 8003eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003eee:	4834      	ldr	r0, [pc, #208]	@ (8003fc0 <_strtol_l.constprop.0+0xf0>)
 8003ef0:	460d      	mov	r5, r1
 8003ef2:	462a      	mov	r2, r5
 8003ef4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003ef8:	5d06      	ldrb	r6, [r0, r4]
 8003efa:	f016 0608 	ands.w	r6, r6, #8
 8003efe:	d1f8      	bne.n	8003ef2 <_strtol_l.constprop.0+0x22>
 8003f00:	2c2d      	cmp	r4, #45	@ 0x2d
 8003f02:	d12d      	bne.n	8003f60 <_strtol_l.constprop.0+0x90>
 8003f04:	782c      	ldrb	r4, [r5, #0]
 8003f06:	2601      	movs	r6, #1
 8003f08:	1c95      	adds	r5, r2, #2
 8003f0a:	f033 0210 	bics.w	r2, r3, #16
 8003f0e:	d109      	bne.n	8003f24 <_strtol_l.constprop.0+0x54>
 8003f10:	2c30      	cmp	r4, #48	@ 0x30
 8003f12:	d12a      	bne.n	8003f6a <_strtol_l.constprop.0+0x9a>
 8003f14:	782a      	ldrb	r2, [r5, #0]
 8003f16:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8003f1a:	2a58      	cmp	r2, #88	@ 0x58
 8003f1c:	d125      	bne.n	8003f6a <_strtol_l.constprop.0+0x9a>
 8003f1e:	786c      	ldrb	r4, [r5, #1]
 8003f20:	2310      	movs	r3, #16
 8003f22:	3502      	adds	r5, #2
 8003f24:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8003f28:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	fbbc f9f3 	udiv	r9, ip, r3
 8003f32:	4610      	mov	r0, r2
 8003f34:	fb03 ca19 	mls	sl, r3, r9, ip
 8003f38:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8003f3c:	2f09      	cmp	r7, #9
 8003f3e:	d81b      	bhi.n	8003f78 <_strtol_l.constprop.0+0xa8>
 8003f40:	463c      	mov	r4, r7
 8003f42:	42a3      	cmp	r3, r4
 8003f44:	dd27      	ble.n	8003f96 <_strtol_l.constprop.0+0xc6>
 8003f46:	1c57      	adds	r7, r2, #1
 8003f48:	d007      	beq.n	8003f5a <_strtol_l.constprop.0+0x8a>
 8003f4a:	4581      	cmp	r9, r0
 8003f4c:	d320      	bcc.n	8003f90 <_strtol_l.constprop.0+0xc0>
 8003f4e:	d101      	bne.n	8003f54 <_strtol_l.constprop.0+0x84>
 8003f50:	45a2      	cmp	sl, r4
 8003f52:	db1d      	blt.n	8003f90 <_strtol_l.constprop.0+0xc0>
 8003f54:	fb00 4003 	mla	r0, r0, r3, r4
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003f5e:	e7eb      	b.n	8003f38 <_strtol_l.constprop.0+0x68>
 8003f60:	2c2b      	cmp	r4, #43	@ 0x2b
 8003f62:	bf04      	itt	eq
 8003f64:	782c      	ldrbeq	r4, [r5, #0]
 8003f66:	1c95      	addeq	r5, r2, #2
 8003f68:	e7cf      	b.n	8003f0a <_strtol_l.constprop.0+0x3a>
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1da      	bne.n	8003f24 <_strtol_l.constprop.0+0x54>
 8003f6e:	2c30      	cmp	r4, #48	@ 0x30
 8003f70:	bf0c      	ite	eq
 8003f72:	2308      	moveq	r3, #8
 8003f74:	230a      	movne	r3, #10
 8003f76:	e7d5      	b.n	8003f24 <_strtol_l.constprop.0+0x54>
 8003f78:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8003f7c:	2f19      	cmp	r7, #25
 8003f7e:	d801      	bhi.n	8003f84 <_strtol_l.constprop.0+0xb4>
 8003f80:	3c37      	subs	r4, #55	@ 0x37
 8003f82:	e7de      	b.n	8003f42 <_strtol_l.constprop.0+0x72>
 8003f84:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8003f88:	2f19      	cmp	r7, #25
 8003f8a:	d804      	bhi.n	8003f96 <_strtol_l.constprop.0+0xc6>
 8003f8c:	3c57      	subs	r4, #87	@ 0x57
 8003f8e:	e7d8      	b.n	8003f42 <_strtol_l.constprop.0+0x72>
 8003f90:	f04f 32ff 	mov.w	r2, #4294967295
 8003f94:	e7e1      	b.n	8003f5a <_strtol_l.constprop.0+0x8a>
 8003f96:	1c53      	adds	r3, r2, #1
 8003f98:	d108      	bne.n	8003fac <_strtol_l.constprop.0+0xdc>
 8003f9a:	2322      	movs	r3, #34	@ 0x22
 8003f9c:	f8ce 3000 	str.w	r3, [lr]
 8003fa0:	4660      	mov	r0, ip
 8003fa2:	f1b8 0f00 	cmp.w	r8, #0
 8003fa6:	d0a0      	beq.n	8003eea <_strtol_l.constprop.0+0x1a>
 8003fa8:	1e69      	subs	r1, r5, #1
 8003faa:	e006      	b.n	8003fba <_strtol_l.constprop.0+0xea>
 8003fac:	b106      	cbz	r6, 8003fb0 <_strtol_l.constprop.0+0xe0>
 8003fae:	4240      	negs	r0, r0
 8003fb0:	f1b8 0f00 	cmp.w	r8, #0
 8003fb4:	d099      	beq.n	8003eea <_strtol_l.constprop.0+0x1a>
 8003fb6:	2a00      	cmp	r2, #0
 8003fb8:	d1f6      	bne.n	8003fa8 <_strtol_l.constprop.0+0xd8>
 8003fba:	f8c8 1000 	str.w	r1, [r8]
 8003fbe:	e794      	b.n	8003eea <_strtol_l.constprop.0+0x1a>
 8003fc0:	080044ab 	.word	0x080044ab

08003fc4 <_strtol_r>:
 8003fc4:	f7ff bf84 	b.w	8003ed0 <_strtol_l.constprop.0>

08003fc8 <_strtoul_l.constprop.0>:
 8003fc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003fcc:	4e34      	ldr	r6, [pc, #208]	@ (80040a0 <_strtoul_l.constprop.0+0xd8>)
 8003fce:	4686      	mov	lr, r0
 8003fd0:	460d      	mov	r5, r1
 8003fd2:	4628      	mov	r0, r5
 8003fd4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003fd8:	5d37      	ldrb	r7, [r6, r4]
 8003fda:	f017 0708 	ands.w	r7, r7, #8
 8003fde:	d1f8      	bne.n	8003fd2 <_strtoul_l.constprop.0+0xa>
 8003fe0:	2c2d      	cmp	r4, #45	@ 0x2d
 8003fe2:	d12f      	bne.n	8004044 <_strtoul_l.constprop.0+0x7c>
 8003fe4:	782c      	ldrb	r4, [r5, #0]
 8003fe6:	2701      	movs	r7, #1
 8003fe8:	1c85      	adds	r5, r0, #2
 8003fea:	f033 0010 	bics.w	r0, r3, #16
 8003fee:	d109      	bne.n	8004004 <_strtoul_l.constprop.0+0x3c>
 8003ff0:	2c30      	cmp	r4, #48	@ 0x30
 8003ff2:	d12c      	bne.n	800404e <_strtoul_l.constprop.0+0x86>
 8003ff4:	7828      	ldrb	r0, [r5, #0]
 8003ff6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8003ffa:	2858      	cmp	r0, #88	@ 0x58
 8003ffc:	d127      	bne.n	800404e <_strtoul_l.constprop.0+0x86>
 8003ffe:	786c      	ldrb	r4, [r5, #1]
 8004000:	2310      	movs	r3, #16
 8004002:	3502      	adds	r5, #2
 8004004:	f04f 38ff 	mov.w	r8, #4294967295
 8004008:	2600      	movs	r6, #0
 800400a:	fbb8 f8f3 	udiv	r8, r8, r3
 800400e:	fb03 f908 	mul.w	r9, r3, r8
 8004012:	ea6f 0909 	mvn.w	r9, r9
 8004016:	4630      	mov	r0, r6
 8004018:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800401c:	f1bc 0f09 	cmp.w	ip, #9
 8004020:	d81c      	bhi.n	800405c <_strtoul_l.constprop.0+0x94>
 8004022:	4664      	mov	r4, ip
 8004024:	42a3      	cmp	r3, r4
 8004026:	dd2a      	ble.n	800407e <_strtoul_l.constprop.0+0xb6>
 8004028:	f1b6 3fff 	cmp.w	r6, #4294967295
 800402c:	d007      	beq.n	800403e <_strtoul_l.constprop.0+0x76>
 800402e:	4580      	cmp	r8, r0
 8004030:	d322      	bcc.n	8004078 <_strtoul_l.constprop.0+0xb0>
 8004032:	d101      	bne.n	8004038 <_strtoul_l.constprop.0+0x70>
 8004034:	45a1      	cmp	r9, r4
 8004036:	db1f      	blt.n	8004078 <_strtoul_l.constprop.0+0xb0>
 8004038:	fb00 4003 	mla	r0, r0, r3, r4
 800403c:	2601      	movs	r6, #1
 800403e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004042:	e7e9      	b.n	8004018 <_strtoul_l.constprop.0+0x50>
 8004044:	2c2b      	cmp	r4, #43	@ 0x2b
 8004046:	bf04      	itt	eq
 8004048:	782c      	ldrbeq	r4, [r5, #0]
 800404a:	1c85      	addeq	r5, r0, #2
 800404c:	e7cd      	b.n	8003fea <_strtoul_l.constprop.0+0x22>
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1d8      	bne.n	8004004 <_strtoul_l.constprop.0+0x3c>
 8004052:	2c30      	cmp	r4, #48	@ 0x30
 8004054:	bf0c      	ite	eq
 8004056:	2308      	moveq	r3, #8
 8004058:	230a      	movne	r3, #10
 800405a:	e7d3      	b.n	8004004 <_strtoul_l.constprop.0+0x3c>
 800405c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8004060:	f1bc 0f19 	cmp.w	ip, #25
 8004064:	d801      	bhi.n	800406a <_strtoul_l.constprop.0+0xa2>
 8004066:	3c37      	subs	r4, #55	@ 0x37
 8004068:	e7dc      	b.n	8004024 <_strtoul_l.constprop.0+0x5c>
 800406a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800406e:	f1bc 0f19 	cmp.w	ip, #25
 8004072:	d804      	bhi.n	800407e <_strtoul_l.constprop.0+0xb6>
 8004074:	3c57      	subs	r4, #87	@ 0x57
 8004076:	e7d5      	b.n	8004024 <_strtoul_l.constprop.0+0x5c>
 8004078:	f04f 36ff 	mov.w	r6, #4294967295
 800407c:	e7df      	b.n	800403e <_strtoul_l.constprop.0+0x76>
 800407e:	1c73      	adds	r3, r6, #1
 8004080:	d106      	bne.n	8004090 <_strtoul_l.constprop.0+0xc8>
 8004082:	2322      	movs	r3, #34	@ 0x22
 8004084:	f8ce 3000 	str.w	r3, [lr]
 8004088:	4630      	mov	r0, r6
 800408a:	b932      	cbnz	r2, 800409a <_strtoul_l.constprop.0+0xd2>
 800408c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004090:	b107      	cbz	r7, 8004094 <_strtoul_l.constprop.0+0xcc>
 8004092:	4240      	negs	r0, r0
 8004094:	2a00      	cmp	r2, #0
 8004096:	d0f9      	beq.n	800408c <_strtoul_l.constprop.0+0xc4>
 8004098:	b106      	cbz	r6, 800409c <_strtoul_l.constprop.0+0xd4>
 800409a:	1e69      	subs	r1, r5, #1
 800409c:	6011      	str	r1, [r2, #0]
 800409e:	e7f5      	b.n	800408c <_strtoul_l.constprop.0+0xc4>
 80040a0:	080044ab 	.word	0x080044ab

080040a4 <_strtoul_r>:
 80040a4:	f7ff bf90 	b.w	8003fc8 <_strtoul_l.constprop.0>

080040a8 <_malloc_usable_size_r>:
 80040a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040ac:	1f18      	subs	r0, r3, #4
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	bfbc      	itt	lt
 80040b2:	580b      	ldrlt	r3, [r1, r0]
 80040b4:	18c0      	addlt	r0, r0, r3
 80040b6:	4770      	bx	lr

080040b8 <_init>:
 80040b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ba:	bf00      	nop
 80040bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040be:	bc08      	pop	{r3}
 80040c0:	469e      	mov	lr, r3
 80040c2:	4770      	bx	lr

080040c4 <_fini>:
 80040c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040c6:	bf00      	nop
 80040c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040ca:	bc08      	pop	{r3}
 80040cc:	469e      	mov	lr, r3
 80040ce:	4770      	bx	lr
